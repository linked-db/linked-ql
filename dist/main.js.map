{
  "version": 3,
  "sources": ["../node_modules/@webqit/util/js/isString.js", "../node_modules/@webqit/util/js/isUndefined.js", "../node_modules/@webqit/util/js/isTypeFunction.js", "../node_modules/@webqit/util/js/isFunction.js", "../node_modules/@webqit/util/js/isArray.js", "../node_modules/@webqit/util/js/isTypeArray.js", "../node_modules/@webqit/util/js/isNull.js", "../node_modules/@webqit/util/js/isTypeObject.js", "../node_modules/@webqit/util/js/isEmpty.js", "../node_modules/@webqit/util/js/isObject.js", "../node_modules/@webqit/util/arr/from.js", "../node_modules/@webqit/util/js/isNumber.js", "../node_modules/@webqit/util/js/isNumeric.js", "../node_modules/@webqit/util/arr/flatten.js", "../node_modules/@webqit/util/arr/first.js", "../node_modules/@webqit/util/arr/last.js", "../node_modules/@webqit/util/arr/pushUnique.js", "../node_modules/@webqit/util/obj/getPrototypeChain.js", "../node_modules/@webqit/util/obj/getAllPropertyNames.js", "../node_modules/@webqit/util/obj/mergeCallback.js", "../node_modules/@webqit/util/obj/merge.js", "../node_modules/@webqit/util/js/isPlainObject.js", "../node_modules/@webqit/util/js/isBoolean.js", "../node_modules/@webqit/util/obj/each.js", "../node_modules/@webqit/util/obj/compareCallback.js", "../node_modules/@webqit/util/obj/even.js", "../node_modules/@webqit/util/obj/copyPlain.js", "../node_modules/@webqit/util/arr/intersect.js", "../node_modules/@webqit/util/str/Lexer.js", "../src/lang/Lexer.js", "../node_modules/@webqit/util/str/after.js", "../node_modules/@webqit/util/str/before.js", "../node_modules/@webqit/util/arr/difference.js", "../src/lang/AbstractNode.js", "../src/lang/components/Identifier.js", "../node_modules/@webqit/util/str/afterLast.js", "../node_modules/@webqit/util/str/beforeLast.js", "../node_modules/@webqit/util/str/fromCamel.js", "../node_modules/@webqit/util/str/toTitle.js", "../node_modules/@webqit/util/str/toCamel.js", "../node_modules/@webqit/util/str/unwrap.js", "../node_modules/@webqit/util/str/wrapped.js", "../src/lang/components/Literal.js", "../src/lang/components/str/Str.js", "../src/lang/dml/insert/EntriesAPI.js", "../src/lang/dml/insert/ColumnsList.js", "../src/lang/components/case/WhenClause.js", "../src/lang/components/case/CaseConstruct.js", "../src/lang/components/Assertion.js", "../src/lang/dml/AbstractStatement.js", "../src/lang/components/Placeholder.js", "../src/lang/components/Num.js", "../src/lang/components/json/Json.js", "../src/lang/components/json/JsonPath.js", "../src/lang/components/Path.js", "../src/lang/components/AbstractAliasableExpr.js", "../src/lang/components/Table.js", "../src/lang/components/JoinClause.js", "../src/lang/components/Func.js", "../src/lang/dml/select/orderby/AbstractOrderBy.js", "../src/lang/dml/select/orderby/OrderByClause.js", "../src/lang/dml/select/groupby/AbstractGroupBy.js", "../src/lang/dml/select/window/PartitionByClause.js", "../src/lang/dml/select/window/WindowSpec.js", "../src/lang/components/Aggr.js", "../src/lang/components/Field.js", "../src/lang/dml/select/window/WindowClause.js", "../src/lang/dml/select/groupby/GroupByClause.js", "../src/lang/dml/select/SelectStatement.js", "../src/lang/components/Parens.js", "../src/lang/components/Condition.js", "../src/lang/components/TypeCast.js", "../src/lang/components/Math.js", "../src/lang/components/str/StrJoin.js", "../src/lang/components/Expr.js", "../src/lang/dml/insert/ValuesList.js", "../src/lang/dml/insert/DimensionsAPI.js", "../src/lang/dml/insert/AssignmentList.js", "../src/lang/dml/insert/OnConflictClause.js", "../src/lang/dml/insert/InsertStatement.js", "../src/lang/dml/update/UpdateStatement.js", "../src/lang/dml/delete/DeleteStatement.js", "../src/lang/ddl/AbstractStatement.js", "../src/lang/ddl/AbstractNode.js", "../src/lang/ddl/rename/Rename.js", "../src/lang/schema/AbstractNode.js", "../src/lang/schema/tbl/constraints/AbstractLevel1Constraint.js", "../src/lang/schema/tbl/constraints/AutoIncrementConstraint.js", "../src/lang/schema/tbl/constraints/IdentityConstraint.js", "../src/lang/schema/tbl/constraints/AbstractLevel2Constraint.js", "../src/lang/schema/tbl/constraints/PrimaryKey.js", "../src/lang/schema/tbl/constraints/AbstractTableConstraint.js", "../src/lang/schema/tbl/constraints/TablePrimaryKey.js", "../src/lang/schema/tbl/constraints/ForeignKey.js", "../src/lang/schema/tbl/constraints/TableForeignKey.js", "../src/lang/schema/tbl/constraints/UniqueKey.js", "../src/lang/schema/tbl/constraints/TableUniqueKey.js", "../src/lang/schema/tbl/constraints/AbstractExprConstraint.js", "../src/lang/schema/tbl/constraints/CheckConstraint.js", "../src/lang/schema/tbl/constraints/ExpressionConstraint.js", "../src/lang/schema/tbl/constraints/DefaultConstraint.js", "../src/lang/schema/tbl/constraints/NotNullConstraint.js", "../src/lang/schema/tbl/constraints/OnUpdateClause.js", "../src/lang/schema/tbl/constraints/NullConstraint.js", "../src/lang/schema/tbl/DataType.js", "../src/lang/schema/tbl/Column.js", "../src/lang/schema/tbl/Index.js", "../src/lang/ddl/create/Add.js", "../src/lang/ddl/drop/Drop.js", "../src/lang/ddl/alter/Set.js", "../src/lang/ddl/alter/Modify.js", "../src/lang/ddl/alter/Change.js", "../src/lang/ddl/alter/Alter.js", "../src/lang/ddl/alter/AlterStatement.js", "../src/lang/ddl/drop/DropStatement.js", "../src/lang/schema/tbl/TableSchema.js", "../src/lang/schema/db/DatabaseSchema.js", "../src/lang/ddl/create/CreateStatement.js", "../src/lang/ddl/rename/RenameStatement.js", "../src/lang/grammar.js", "../src/lang/Parser.js", "../src/lang/schema/RootSchema.js", "../src/api/Savepoint.js", "../src/api/AbstractClient.js", "../src/api/AbstractDatabase.js", "../src/api/AbstractTable.js", "../src/api/AbstractCursor.js", "../src/api/sql/SQLCursor.js", "../src/api/sql/SQLTable.js", "../src/api/sql/SQLDatabase.js", "../src/api/sql/SQLClient.js", "../src/browser-entry.js"],
  "sourcesContent": ["\n/**\n * Tells if val is of type \"string\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\n};\n", "\n/**\n * Tells if val is undefined or is of type \"undefined\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\n};\n", "\n/**\n * Tells if val is of type \"function\".\n * This holds true for both regular functions and classes.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn typeof val === 'function';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"function\".\n *\n * @param object \t\tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\n};\n", "\n/**\n * Tells if val is of type \"array\".\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val);\n};\n", "\n/**\n * @imports\n */\nimport _isString from './isString.js';\nimport _isUndefined from './isUndefined.js';\n\n/**\n * Tells if val is \"array-like\".\n * This holds true for anything that has a length property.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !_isString(val) && !_isUndefined(val.length);\n};\n", "\n/**\n * Tells if val is undefined or is null.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === null || val === '';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"object\".\n * This holds true for anything object, including built-ins.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\n};\n", "\n/**\n * @imports\n */\nimport _isNull from './isNull.js';\nimport _isUndefined from './isUndefined.js';\nimport _isTypeObject from './isTypeObject.js';\n\n/**\n * Tells if val is empty in its own type.\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\n * objects without keys, empty arrays.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\n};\n", "\n/**\n * Tells if val is pure object.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isTypeArray from '../js/isTypeArray.js';\nimport _isEmpty from '../js/isEmpty.js';\nimport _isObject from '../js/isObject.js';\n\n/**\n * Casts an array-like object to an array.\n *\n * @param mixed \tval\n * @param bool\t \tcastObject\n *\n * @return array\n */\nexport default function(val, castObject = true) {\n\tif (_isArray(val)) {\n\t\treturn val;\n\t};\n\tif (!castObject && _isObject(val)) {\n\t\treturn [val];\n\t};\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\n\t\treturn [];\n\t};\n\tif (_isTypeArray(val)) {\n\t\treturn Array.prototype.slice.call(val);\n\t};\n\tif (_isObject(val)) {\n\t\treturn Object.values(val);\n\t};\n\treturn [val];\n};\n", "\n/**\n * Tells if val is of type \"number\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof Number || (typeof val === 'number');\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from './isNumber.js';\n/**\n * Tells if val is of type \"string\" or a numeric string.\n * This holds true for both numbers and numeric strings.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNumber(val) || (val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1));\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Flattens a nested array to the given depth.\n *\n * @param array \tarr\n * @param int \t \tdepth\n * @param bool \t \twithObjects\n *\n * @return array\n */\nconst _flatten = function(arr, depth = 1, withObjects = true) {\n\tif (!_isNumeric(depth) || depth <= 0) {\n\t\treturn arr;\n\t};\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\n\t\tarr = Object.values(arr);\n\t};\n\tif (!_isArray(arr)) {\n\t\treturn arr;\n\t};\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \n\t\t: acc.concat(val), []);\n};\n\n/**\n * @exports\n */\nexport default _flatten;", "\n/**\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\tvar count = 0;\n\tarr.forEach(itm => {\n\t\tcount ++;\n\t});\n\tvar firsts = arr.slice(arr.length - count, amount);\n\treturn arguments.length > 1 ? firsts : firsts[0];\n};\n", "\n/**\n * @imports\n */\nimport _first from './first.js';\n\n/**\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\treturn arguments.length > 1\n\t\t? _first(arr.slice().reverse(), amount).reverse()\n\t\t: _first(arr.slice().reverse());\n};\n", "\n/**\n * Adds an item if not already exist.\n *\n * @param array \tarr\n * @param array\t \t...itms\n *\n * @return array\n */\nexport default function(arr, ...items) {\n\titems.forEach(itm => {\n\t\tif (arr.indexOf(itm) < 0) {\n\t\t\tarr.push(itm);\n\t\t}\n\t});\n\treturn arr;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the prototype chain.\n *\n * @param object \t\tobj\n * @param object\t \tuntil\n *\n * @return bool\n */\nexport default function(obj, until) {\n\tuntil = until || Object.prototype;\n\tuntil = until && !_isArray(until) ? [until] : until;\n\t// We get the chain of inheritance\n\tvar prototypalChain = [];\n\tvar obj = obj;\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\n\t\tprototypalChain.push(obj);\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\n\t}\n\treturn prototypalChain;\n};\n", "\n/**\n * @imports\n */\nimport _pushUnique from '../arr/pushUnique.js';\nimport _getPrototypeChain from './getPrototypeChain.js';\n\n/**\n * Eagerly retrieves object members all down the prototype chain.\n *\n * @param object\t \tobj\n * @param object\t \tuntil\n *\n * @return array\n */\nexport default function(obj, until) {\n\tvar keysAll = [];\n\t_getPrototypeChain(obj, until).forEach(obj => {\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\n\t});\n\treturn keysAll;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\nimport _getAllPropertyNames from './getAllPropertyNames.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\n\tvar depth = 0;\n\tvar obj1 = objs.shift();\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\n\t\tdepth = obj1;\n\t\tobj1 = objs.shift();\n\t}\n\tif (!objs.length) {\n\t\tthrow new Error('_merge() requires two or more array/objects.');\n\t}\n\tobjs.forEach((obj2, i) => {\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\n\t\t\treturn;\n\t\t}\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.keys(obj2)).forEach(key => {\n\t\t\tif (!callback(key, obj1, obj2, i)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valAtObj1 = obj1[key];\n\t\t\tvar valAtObj2 = obj2[key];\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \n\t\t\t&& (depth === true || depth > 0)) {\n\t\t\t\t// RECURSE...\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\n\t\t\t} else {\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\t\t\t\tif (isReplace) {\n\t\t\t\t\t\tobj1[key] = valAtObj2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj1.push(valAtObj2);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// In case we're setting a read-only property\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (withSymbols) {\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn obj1;\n};\n", "\n/**\n * @imports\n */\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function(...objs) {\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\n\t\treturn true;\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isObject from './isObject.js';\n\n/**\n * Tells if an object is direct instance of Object.prototype.\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\n *\n * @param object \tobj\n *\n * @return bool\n */\nexport default function(obj) {\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n};\n", "\n/**\n * Tells if val is undefined or is of type \"boolean\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === true || val === false;\n};\n", "\n/**\n * @imports\n */\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Loops thru obj flatly with a callback function.\n * Stops when callback returns a non-undefined value.\n *\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\n * @param function \t\t\t\tcallback \t\tThe callback function.\n *\n * @return mixed|null\t\t\tAny non-null return from callback\n */\nexport default function(obj, callback) {\n\tvar returnValue = undefined;\n\tif (_isTypeObject(obj)) {\n\t\tObject.keys(obj).forEach((k, i) => {\n\t\t\tif (returnValue !== false) {\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\n\t\t\t}\n\t\t});\n\t}\n\treturn returnValue;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isBoolean from '../js/isBoolean.js';\nimport _each from './each.js';\n\n/**\n * Gets the match(es) between (members of) two values;\n * assertion optionally custom.\n *\n * @param mixed \t\t\tob1\n * @param mixed \t\t\tobj2\n * @param string|function\tassertion\n * @param bool\t\t\t\tnetComparison\n * @param bool\t\t\t\tcontrast\n * @param bool\t\t\t\treturnOnFirstFalse\n *\n * @return bool|array|object\n */\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\n\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\tvar result = [];\n\t\tvar contn = true;\n\t\tobj1.forEach(v1 => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = false;\n\t\t\t_each(obj2, (k, v2) => {\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\n\t\t\t\t\ttestPass = assertion(v1, v2);\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\t\t\ttestPass = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\n\t\t\t\t\t\tv1 = testPass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult.push(netComparison ? testPass : v1);\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult.push(testPass);\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult.push(v1);\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\t\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar result = {};\n\t\tvar contn = true;\n\t\tObject.keys(obj1).forEach(k => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\ttestPass = false;\n\t\t\t}\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult[k] = testPass;\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult[k] = obj1[k];\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from '../js/isNumber.js';\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isPlainObject from '../js/isPlainObject.js';\nimport _compareCallback from './compareCallback.js';\n\n/**\n * Asserts (members of) the first value against (members of) subsequent values.\n * Assertion could be TRUE, FALSE, or custom.\n *\n * @param mixed \t\t\tobj1\n * @param mixed \t\t\tobj2\n * @param bool|function\t\tassertion\n * @param int\t\t\t\tdepth\n *\n * @return bool\n */\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\n\t\treturn !assertion;\n\t}\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar obj1Keys = Object.keys(obj1);\n\t\tvar obj2Keys = Object.keys(obj2);\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\n\t\t\t// Objects that won't show keys must be compared by instance\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \n\t\t\t\t? assertion\n\t\t\t\t: (obj1 === obj2) === assertion;\n\t\t}\n\t\tif (!_even(obj1Keys, obj2Keys)) {\n\t\t\treturn !assertion;\n\t\t}\n\t}\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\n\t\treturn _isArray(result) \n\t\t\t? result.length === obj1.length && result.length === obj2.length \n\t\t\t: (_isObject(result) && _isObject(obj1) \n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \n\t\t\t\t: result);\n\t}\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \n\t\t\t? assertion \n\t\t\t: (obj1 === obj2) === assertion\n\t);\n};\n\n/**\n * @exports\n */\nexport default _even;\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n * Copies only properties of an object.\n *\n * @param object\t \tobj\n * @param array\t\t \tonly\n * @param array\t\t \texcept\n *\n * @return object\n */\nexport default function(obj, filter = []) {\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\n\t\tif (!_isFunction(obj2[key])) {\n\t\t\treturn _isFunction(filter) ? filter(key) \n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\n\t\t}\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the intersection of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) !== -1\n\t);\n};\n", "\n/**\n * @imports\n */\nimport _isString from '../js/isString.js';\nimport _isUndefined from '../js/isUndefined.js';\nimport _isFunction from '../js/isFunction.js';\nimport _arrFrom from '../arr/from.js';\nimport _flatten from '../arr/flatten.js';\nimport _first from '../arr/first.js';\nimport _last from '../arr/last.js';\nimport _merge from '../obj/merge.js';\nimport _even from '../obj/even.js';\nimport _copyPlain from '../obj/copyPlain.js';\nimport { _isObject } from '../js/index.js';\n\n/**\n * --------------------------\n * TOKENIZER\n * --------------------------\n */\n\nexport default class Lexer {\n\n\t/**\n\t * Factory method.\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic lex(str, delims, options = {}) {\n\t\tif (!_isString(str = str + '')) {\n\t\t\tthrow new Error('Argument1 must be a string!');\n\t\t}\n\t\tvar copyResult = result => {\n\t\t\treturn {\n\t\t\t\tdelims: result.delims.slice(),\n\t\t\t\toptions: _copyPlain(result.options),\n\t\t\t\tnesting: result.nesting.slice(),\n\t\t\t\tmaxDepth: result.maxDepth,\n\t\t\t\tcomments: result.comments.slice(),\n\t\t\t\ttokens: result.tokens.slice(),\n\t\t\t\tmatches: result.matches.slice(),\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\n\t\t\t};\n\t\t};\n\t\t// ASK CACHE ---------------------------\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\n\t\t\t\tvar cached = Lexer.$cache[str][i];\n\t\t\t\tif (_even(cached.delims, delims)) {\n\t\t\t\t\treturn copyResult(cached);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// FRESH PARSE\t -------------------------------\n\t\tvar instance = new Lexer(str, options);\n\t\tvar result = instance.lex(delims);\n\t\t// SAVE TO CACHE -------------------------------\n\t\tif (options.cache !== false) {\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\n\t\t\tLexer.$cache[str].push(result);\n\t\t}\n\t\treturn copyResult(result);\n\t\t\n\t}\n\n\t/**\n\t * Factory method for .split().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic split(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).tokens;\n\t}\n\n\t/**\n\t * Factory method for .match().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic match(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).matches;\n\t}\n\n\t/**\n\t * Creates a lexer instance on a string with the given options.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\n\t * @param number \t\tlimit\t\t\t\tMax results to return\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\n\t *\n\t * @return array\n\t */\n\tconstructor(str, options) {\n\t\tif (!_isString(str)) {\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\n\t\t}\n\t\tthis.$str = str;\n\t\tthis.$options = options || {};\n\t\tif (!this.$options.blocks) {\n\t\t\tthis.$options.blocks = Lexer.$blocks;\n\t\t}\n\t\tif (!this.$options.quotes) {\n\t\t\tthis.$options.quotes = Lexer.$quotes;\n\t\t}\n\t\tif (!this.$options.comments) {\n\t\t\tthis.$options.comments = Lexer.$comments;\n\t\t}\n\t}\n\n\t/**\n\t * Parses the instance string on the given delimeters.\n\t *\n\t * This method supports static calling,\n\t * in which case a string is required as the first argument.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tlex(delims, options) {\n\t\tvar runtime = {\n\t\t\tdelims: _arrFrom(delims),\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\n\t\t\tnesting: [],\n\t\t\tmaxDepth: 0,\n\t\t\tcomments: [],\n\t\t\ttokens: [],\n\t\t\tmatches: [],\n\t\t\tmatchesi: {},\n\t\t};\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tvar cursor = 0;\n\t\twhile(typeof cursor === 'number') {\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\n\t\t}\n\t\tif (runtime.nesting.length) {\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\n\t\t}\n\t\t// RETURN NEW ----------------------------------\n\t\treturn runtime;\n\t}\n\n\t/**\n\t * Expr helper: evaluates and handles the character on the current cursor.\n\t * Advances the cursor.\n\t *\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return void\n\t */\n\t_evalCharsAt(runtime, i) {\n\t\tif (i >= this.$str.length) {\n\t\t\treturn;\n\t\t}\n\t\tvar charWidth = 1;\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\n\t\t// Quotes inside comments must be ignored\n\t\tif (!runtime.openComment) {\n\t\t\tquoteTest = this._testQuotes(runtime, i);\n\t\t}\n\t\t// Comments inside quotes must be ignored\n\t\tif (!runtime.openQuote) {\n\t\t\tcommentTest = this._testComments(runtime, i);\n\t\t}\n\t\t// Save comments\n\t\tif (runtime.openComment || commentTest.ending) {\n\t\t\t// Save only outer comments\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\n\t\t\t\tcharWidth = chars.length;\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\n\t\t\t} else {\n\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t}\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\n\t\t\t// Yes add quotes\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\treturn i + 1;\n\t\t} else {\n\t\t\t// Nesting tags inside comments and quotes have been ignored\n\t\t\tnestingTest = this._testNesting(runtime, i);\n\t\t\t// ---------------------\n\t\t\t// STOP ON THIS CHARACTER...?\n\t\t\t// ---------------------\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\n\t\t\t// STOP CHAR(S)? at top level?\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\n\t\t\t\truntime.options.stopChar = stopChar;\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// ---------------------\n\t\t\t// Match and split now...\n\t\t\t// ---------------------\n\t\t\tif (!runtime.delims.length) {\n\t\t\t\t// BLOCK-BASED SPLITTING...\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t} else/*no-nesting flag*/ {\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// ---------------------\n\t\t\t\t// DELIMS-BASED SPLITTING\n\t\t\t\t// ---------------------\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\t\t// In case the chars at index 0 is a delim,\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\n\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\n\t\t\t\t\tif (matchedDelim !== false) {\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\n\t\t\t\t\t\t\t// The current character is a delimiter...\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\n\t\t\t\t\t\t\tvar nextIndex = i + (matchedDelim.length || 1);\n\t\t\t\t\t\t\tif (nextIndex === this.$str.length) {\n\t\t\t\t\t\t\t\t// In case the chars at last index is a delim,\n\t\t\t\t\t\t\t\t// the resulting split should last have an empty string\n\t\t\t\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn nextIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\n\t\t\t\t} else {\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\n\t\t\t\t\tcharWidth = chars.length;\n\t\t\t\t\tthis._push(runtime, chars);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn i + charWidth;\n\t}\n\n\t/**\n\t * Expr helper: tests for a quote start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testQuotes(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.quotes || []).forEach(quote => {\n\t\t\tif (this.$str.substr(i, 1) === quote) {\n\t\t\t\tif (!runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = quote;\n\t\t\t\t\tresult.starting = quote;\n\t\t\t\t} else if (quote === runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = false;\n\t\t\t\t\tresult.ending = quote;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a comment start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testComments(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.comments || []).forEach(block => {\n\t\t\tif (!runtime.openComment) {\n\t\t\t\tvar starting = _first(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\t\truntime.openComment = block;\n\t\t\t\t\tresult.starting = starting;\n\t\t\t\t}\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\n\t\t\t\tvar ending = _last(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\truntime.openComment = false;\n\t\t\t\t\tresult.ending = ending;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testNesting(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.blocks || []).forEach(block => {\n\t\t\tlet starting = _first(block), matchedStarting;\n\t\t\tif (starting instanceof RegExp) {\n\t\t\t\t[matchedStarting] = starting.exec(this.$str.substr(i)) || [];\n\t\t\t} else if (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\tmatchedStarting = starting;\n\t\t\t}\n\t\t\tif (matchedStarting) {\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\n\t\t\t\tresult.starting = matchedStarting;\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\n\t\t\t\tvar ending = _last(block), matchedEnding;\n\t\t\t\tif (ending instanceof RegExp) {\n\t\t\t\t\t[matchedEnding] = ending.exec(this.$str.substr(i)) || [];\n\t\t\t\t} else if (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\tmatchedEnding = ending;\n\t\t\t\t}\n\t\t\t\tif (matchedEnding) {\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\n\t\t\t\t\tresult.ending = matchedEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\n\t *\n\t * @param array\t\ttestList\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return mixed\n\t */\n\t_testChars(testList, runtime, i) {\n\t\tfor (var k = 0; k < testList.length; k ++) {\n\t\t\tconst testArg = {\n\t\t\t\tuseRegex: runtime.options.useRegex,\n\t\t\t\tci: runtime.options.ci,\n\t\t\t\t...(_isObject(testList[k]) ? testList[k] : { test: testList[k] })\n\t\t\t};\n\t\t\tif (_isFunction(testArg.test)) {\n\t\t\t\tvar ret = testArg.test(this.$str.substr(0, i), this.$str.substr(i), runtime.tokens.slice());\n\t\t\t\tif (ret !== false) return ret;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (testArg.useRegex) {\n\t\t\t\tconst regexFlags = testArg.useRegex !== true ? testArg.useRegex : '';\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + testArg.test, regexFlags));\n\t\t\t\tif (m && (!testArg.backtest || this.$str.substr(0, i).match(new RegExp(testArg.backtest, regexFlags)))) {\n\t\t\t\t\treturn m[0];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst match = (base, text) => testArg.ci ? base.toLowerCase() === text.toLowerCase() : base === text;\n\t\t\tif (match(this.$str.substr(i, testArg.test.length), testArg.test)) {\n\t\t\t\tif (!testArg.backtest || match(this.$str.substr(i - testArg.backtest.length, i), testArg.backtest)) {\n\t\t\t\t\treturn testArg.test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Expr helper: pushes a character or set of characters into the current split series.\n\t *\n\t * @param object \truntime\n\t * @param string\tchars\n\t * @param string\ttarget\n\t * @param bool\t\tisNewSeries\n\t *\n\t * @return void\n\t */\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\n\t\tvar splitSeries = runtime.matches.length;\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\n\t\t\truntime.tokens[splitSeries] = '';\n\t\t}\n\n\t\tif (target === 'comments') {\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\n\t\t\t\truntime.tokens[splitSeries].comments = [];\n\t\t\t}\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\n\t\t} else {\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\n\t\t}\n\t}\n\n\t/**\n\t * Splits the instance string on the given delimeters and returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tsplit(str, delims, options) {\n\t\treturn this.lex(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters and returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t *\n\t * @return array\n\t */\n\tmatch(str, delims, options) {\n\t\treturn this.lex(delims, options).matches;\n\t}\n\t\n\t/**\n\t * Parses the instance string on the given delimeters using regex.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tregParse(delims, options) {\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregSplit(delims, options) {\n\t\treturn this.regParse(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregMatch(delims, options) {\n\t\treturn this.regParse(delims, options).matches;\n\t}\n};\n\n/**\n * @var array\n */\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\n\n/**\n * @var array\n */\nLexer.$quotes = ['\"', \"'\", '`',];\n\n/**\n * @var array\n */\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\n\n/**\n * @var object\n */\nLexer.$cache = Object.create(null);", "import $Lexer from '@webqit/util/str/Lexer.js';\n\nexport default class Lexer extends $Lexer {\n    static $blocks = [...$Lexer.$blocks, [new RegExp(`^CASE `, 'i'), new RegExp(`^ END`, 'i')]];\n}", "\n/**\n * Return the remainder of a string after a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   afterLast\n *\n * @return string\n */\nexport default function(subject, search, afterLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn '';\n\t}\n\treturn subject.substr(pos + search.length);\n};\n", "\n/**\n * Return the part of a string before a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   beforeLast\n *\n * @return string\n */\nexport default function(subject, search, beforeLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn subject;\n\t}\n\treturn subject.substr(0, pos);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the difference of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) === -1\n\t);\n};\n", "import Lexer from './Lexer.js';\r\n\r\nexport default class AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONTEXT;\r\n\tFLAGS = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(context) {\r\n\t\tthis.CONTEXT = context;\r\n\t\tthis.CONTEXT?.$trace?.('event:CONNECTED', this);\r\n\t}\r\n    \r\n\t/**\r\n\t * A generic method for tracing something up the node tree.\r\n\t * Like a context API.\r\n\t * \r\n\t * @param String request\r\n\t * @param Array ...args\r\n     * \r\n     * @returns any\r\n\t */\r\n\t$trace(request, ...args) {\r\n\t\tif (request === 'get:ROOT_NODE' && !(this.CONTEXT instanceof AbstractNode)) return this;\r\n\t\treturn this.CONTEXT?.$trace?.(request, ...args);\r\n\t}\r\n    \r\n\t/**\r\n\t * Recursively accesses global client.\r\n\t * \r\n\t * @returns AbstractClient\r\n\t */\r\n\tget client() { return this.CONTEXT?.client || this.CONTEXT; }\r\n\t\r\n\t/**\r\n\t * Recursively accesses global params.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tget params() { return this.CONTEXT?.params || {}; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUOTES and ESCAPING\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tget quoteChars() { return this.constructor.getQuoteChars(this); }\r\n\t\r\n\t/**\r\n\t * Determines the proper quote characters for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param AbstractNode|AbstractClient context \r\n\t * \r\n\t * @returns Array\r\n\t */\r\n\tstatic getQuoteChars(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? [\"'\", '\"'] : [\"'\"];\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget escChar() { return this.constructor.getEscChar(this); }\r\n\r\n\t/**\r\n\t * An Escape helper\r\n\t * \r\n\t * @param String|Array string_s \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tautoEsc(string_s) {\r\n\t\tconst $strings = (Array.isArray(string_s) ? string_s : [string_s]).map(s => s && !/^(\\*|[\\w]+)$/.test(s) ? `${ this.escChar }${ s.replace(new RegExp(this.escChar, 'g'), this.escChar.repeat(2)) }${ this.escChar }` : s );\r\n\t\treturn Array.isArray(string_s) ? $strings : $strings[0];\r\n\t}\r\n\r\n\tstatic autoUnesc(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\treturn (expr || '').replace(new RegExp(escChar + escChar, 'g'), escChar);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines the proper escape character for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param AbstractNode|AbstractClient context \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tstatic getEscChar(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? '`' : '\"';\r\n\t}\r\n\t\r\n\tstatic parseIdent(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\tconst parts = Lexer.split(expr, ['.']);\r\n\t\tconst parses = parts.map(s => (new RegExp(`^(?:(\\\\*|[\\\\w]+)|(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2)$`)).exec(s.trim())).filter(s => s);\r\n\t\tif (parses.length !== parts.length) return;\r\n\t\tconst get = x => x?.[1] || this.autoUnesc(context, x?.[3]);\r\n\t\treturn [get(parses.pop()), get(parses.pop())];\r\n\t}\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUERY BUILDER\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * Helper for adding additional attributes to the instance.\r\n\t * \r\n\t * @params Object meta\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twith(meta) {\r\n\t\tfor (const attr in meta) { this[attr] = meta[attr]; }\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for adding flags to the instance.\r\n\t * \r\n\t * @params Array flags\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twithFlag(...flags) {\r\n\t\tflags = new Set(flags.filter(f => f));\r\n\t\tthis.FLAGS = this.FLAGS.reduce(($flags, $flag) => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\tfor (const flag of flags) {\r\n\t\t\t\tconst b = flag.split(':');\r\n\t\t\t\tif (b[0] === a[0]) {\r\n\t\t\t\t\t$flag = [...(new Set([...a, ...b]))].join(':');\r\n\t\t\t\t\tflags.delete(flag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $flags.concat($flag);\r\n\t\t}, []).concat(...flags);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for inspecting flags on the instance.\r\n\t * \r\n\t * @params String flag\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tgetFlag(flag) {\r\n\t\tconst b = flag.toUpperCase().split(':');\r\n\t\treturn this.FLAGS.find($flag => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\treturn b[0] === a[0] && b.every(f => a.includes(f));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for inspecting flags on the instance.\r\n\t * \r\n\t * @params String flag\r\n\t * \r\n\t * @return Bool\r\n\t */\r\n\thasFlag(flag) { return !!this.getFlag(flag); }\r\n\r\n\t/**\r\n\t * Helper for adding clauses to the instance.\r\n\t * \r\n\t * @params String LIST\r\n\t * @params Array args\r\n\t * @params AbstractNode|Array Type\r\n\t * @params String delegate\r\n\t * \r\n\t * @return this\r\n\t */\r\n\tbuild(attrName, args, Type, delegate) {\r\n\t\tconst Types = Array.isArray(Type) ? Type : (Type ? [Type] : []);\r\n\t\tif (!Types.length) throw new Error(`At least one node type must be defined.`);\r\n\t\t// ---------\r\n\t\tconst cast = arg => Types.find(t => arg instanceof t) ? arg : Types.reduce((prev, Type) => prev || Type.fromJSON(this, arg), null);\r\n\t\tconst set = (...args) => {\r\n\t\t\tfor (const arg of args) {\r\n\t\t\t\tif (Array.isArray(this[attrName])) this[attrName].push(arg);\r\n\t\t\t\telse this[attrName] = arg;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// ---------\r\n\t\t// Handle direct child node and json cases\r\n\t\tif (args.length === 1 && typeof args[0] !== 'function') {\r\n\t\t\tconst instance = cast(args[0]);\r\n\t\t\tif (instance) return set(instance);\r\n\t\t}\r\n\t\t// Handle delegation cases\r\n\t\tif (delegate) {\r\n\t\t\tif (Types.length !== 1) throw new Error(`To support argument delegation, number of node types must be 1.`);\r\n\t\t\tconst instance = this[attrName] && !Array.isArray(this[attrName]) ? this[attrName] : new Types[0](this);\r\n\t\t\tset(instance);\r\n\t\t\treturn instance[delegate](...args);\r\n\t\t}\r\n\t\t// Handle direct child callback cases\r\n\t\tfor (let arg of args) {\r\n\t\t\t// Pass an instance into provided callback for manipulation\r\n\t\t\tif (typeof arg === 'function') {\r\n\t\t\t\t// Singleton and already instantiated?\r\n\t\t\t\tif (this[attrName] && !Array.isArray(this[attrName])) {\r\n\t\t\t\t\targ(this[attrName]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// New instance and may be or not be singleton\r\n\t\t\t\tif (Types.length === 1) {\r\n\t\t\t\t\tconst instance = new Types[0](this);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\targ(instance);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// Any!!!\r\n\t\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\t\tconst instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (typeof Type.factoryMethods[methodName] === 'function' && Type.factoryMethods[methodName](this, ...args)) : (typeof Type.prototype[methodName] === 'function' && new Type(this))), null);\r\n\t\t\t\t\tif (!instance) throw new Error(`Unknow method: ${ methodName }()`);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\tif (instance[methodName]) return instance[methodName](...args); // Foward the call\r\n\t\t\t\t\tfor (const f of args) f(instance); // It's just magic method mode\r\n\t\t\t\t};\r\n\t\t\t\targ(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Attempt to cast to type\r\n\t\t\tconst instance = cast(arg);\r\n\t\t\tif (instance) {\r\n\t\t\t\tset(instance);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet content;\r\n\t\t\tif (typeof arg === 'object' && arg) { try { content = JSON.stringify(arg); } catch(e) { content = arg.constructor.name; } }\r\n\t\t\telse content = arg+'';//typeof arg;\r\n\t\t\tthrow new Error(`Arguments must be of type ${ Types.map(Type => Type.name).join(', ') } or a JSON equivalent. Recieved: ${ content }`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the instance.\r\n\t */\r\n\tclone() { return this.constructor.fromJSON(this.CONTEXT, this.toJSON()); }\r\n\t\r\n\t/**\r\n\t * -----------\r\n\t * PARSING CONVERSIONS\r\n\t * -----------\r\n\t */\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param String expr\r\n\t * @param Function parseCallback\r\n\t *\r\n\t * @return AbstractNode\r\n\t */\r\n\tstatic parse(context, expr, parseCallback = null) {}\r\n\r\n\t/**\r\n\t * Serializes the instance.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\ttoString() { return this.stringify(); }\r\n\t\r\n\t/**\r\n\t * Attempts to cast a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param Object json\r\n\t *\r\n\t * @return AbstractNode\r\n\t */\r\n\tstatic fromJSON(context, json) {}\r\n\r\n\t/**\r\n\t * Cast the instance to a plain object.\r\n\t * \r\n\t * @returns Object\r\n\t */\r\n\ttoJSON() { return { flags: this.FLAGS.slice(0) }; }\r\n}\r\n", "\nimport { _isObject } from '@webqit/util/js/index.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class Identifier extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tPREFIX;\n\n\t/**\n\t * Sets or gets the name.\n\t * \n\t * @param String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this.NAME;\n\t\tif (_isObject(name) || Array.isArray(name)) throw new TypeError(`Invalid object or array.`);\n\t\treturn (this.NAME = name, this);\n\t}\n\n\t/**\n\t * Sets or gets the prefix.\n\t * \n\t * @param String prefix\n\t * \n\t * @returns this\n\t */\n\tprefix(prefix) {\n\t\tif (!arguments.length) return this.PREFIX;\n\t\treturn (this.PREFIX = prefix, this);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.NAME,\n\t\t\tprefix: this.PREFIX,\n\t\t\t...(this.FLAGS.length ? { flags: this.FLAGS.slice() } : {} )\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (typeof json === 'string') json = { name: json };\n\t\telse if (Array.isArray(json) && json.some(s => typeof s === 'string') && (json = json.slice())) {\n\t\t\tjson = { name: json.pop(), prefix: json.pop() };\n\t\t} else if (typeof json?.name !== 'string') return;\n\t\tconst instance = (new this(context)).withFlag(...(json?.flags || []));\n\t\tinstance.name(json.name).prefix(json.prefix);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\treturn this.autoEsc([this.PREFIX, this.NAME].filter(s => s)).join('.') + (\n\t\t\t''//this.FLAGS.length ? ` ${ this.FLAGS.map(s => s.replace(/_/g, ' ')).join(' ') }` : ''\n\t\t);\n\t}\n\t\n\tstatic parse(context, expr) {\n\t\tif (/^(TRUE|FALSE|NULL)$/i.test(expr)) return;\n\t\tconst [name, prefix] = this.parseIdent(context, expr, true) || [];\n\t\tif (!name) return;\n\t\treturn (new this(context)).name(name).prefix(prefix);\n\t}\n}", "\n/**\n * @imports\n */\nimport _after from './after.js';\n\n/**\n * Return the remainder of a string after last occurence of a given value.\n *\n * @param  string  subject\n * @param  string  search\n *\n * @return string\n */\nexport default function(subject, search) {\n\treturn _after(subject, search, true);\n}\n", "\n/**\n * @imports\n */\nimport _before from './before.js';\n\n/**\n * Return the part of a string before last occurence of a given value.\n *\n * @param  string  subject\n * @param  string  search\n *\n * @return string\n */\nexport default function(subject, search) {\n\treturn _before(subject, search, true);\n};\n", "\n/**\n * Splits a camel-cased string.\n *\n * @param string \tstr\n * @param string \tdelimiter\n *\n * @return string\n */\nexport default function(str, delimiter) {\n\treturn str === undefined ? '' : str.split(/(?=[A-Z])/).join(delimiter ? delimiter : ' '); // positive lookahead to keep the capital letters\n};\n", "\n/**\n * Converts a string to title case.\n *\n * @param string \tstr\n * @param bool \t\tstrict\n *\n * @return string\n */\nexport default function(str, strict) {\n\tif (typeof str !== 'string') {\n\t\treturn str;\n\t}\n\treturn str.replace(/\\w\\S*/g,  function(txt) { return txt.charAt(0).toUpperCase() + ((typeof strict !== undefined && strict) ? txt.substr(1).toLowerCase() : txt.substr(1)); })\n};\n", "\n/**\n * @imports\n */\nimport _toTitle from './toTitle.js';\n\n/**\n * Makes a string camel-cased.\n *\n * @param string \tstr\n * @param bool\t \tfromStart\n *\n * @return string\n */\nexport default function(str, fromStart) {\n\t// Make disting words\n\tstr = _toTitle(str.replace(/-/g, ' ')).replace(/ /g, '');\n\treturn fromStart ? str : str[0].toLowerCase() + str.substr(1);\n};\n", "\n/**\n * @imports\n */\nimport _after from './after.js';\nimport _beforeLast from './beforeLast.js';\n\n/**\n * Returns the string without the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return string\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\n};\n", "\n/**\n * Tells if the string is warapped with the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return bool\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\n};\n", "import { _wrapped } from '@webqit/util/str/index.js';\r\nimport { _isObject } from '@webqit/util/js/index.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\nexport default class Literal extends AbstractNode {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tINPUT;\r\n\t\r\n\ttrue() { return (this.INPUT = true, this); }\r\n\t\r\n\tfalse() { return (this.INPUT = false, this); }\r\n\t\r\n\tnull() { return (this.INPUT = null, this); }\r\n\t\r\n\tliteral(input) { return (this.INPUT = input, this); }\r\n\r\n\ttoJSON() { return { input: this.INPUT }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json?.input === 'undefined') return;\r\n\t\treturn (new this(context)).literal(json.input);\r\n\t}\r\n\r\n\tstringify() {\r\n\t\tif (_isObject(this.INPUT) || Array.isArray(this.INPUT)) return JSON.stringify(this.INPUT);\r\n\t\treturn `${ this.INPUT }`;\r\n\t}\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tconst instance = new this(context);\r\n\t\tif (/^TRUE$/i.test(expr)) return instance.true();\r\n\t\tif (/^FALSE$/i.test(expr)) return instance.false();\r\n\t\tif (/^NULL$/i.test(expr)) return instance.null();\r\n\t\tconst braces = [['{','}'], ['[',']']], $ = {};\r\n\t\tif (($.braces = braces.find(b => _wrapped(expr, b[0], b[1]))) && !Lexer.match(expr, [' ']).length) {\r\n\t\t\treturn (new this(context)).literal(JSON.parse(expr));\r\n\t\t}\r\n\t\treturn instance.literal(expr);\r\n\t}\r\n\r\n\tstatic factoryMethods = { true: context => new this(context), false: context => new this(context), null: context => new this(context), literal: (context, input) => typeof input !== 'undefined' && new this(context) };\r\n\r\n}", "import { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Lexer from '../../Lexer.js';\r\n\r\nexport default class Str extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tQUOTE;\r\n\tVALUE = '';\r\n\t\r\n\tconstructor(context, quote = \"'\") {\r\n\t\tsuper(context);\r\n\t\tthis.QUOTE = quote;\r\n\t}\r\n\t\r\n\tvalue(expr) { return (this.VALUE = expr, this); }\r\n\r\n\ttoJSON() { return { quote: this.QUOTE, value: (this.VALUE || '') }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json?.value !== 'string' || !['\"', \"'\"].includes(json.quote)) return;\r\n\t\treturn (new this(context, json.quote)).value(json.value);\r\n\t}\r\n\t\r\n\tstringify() { return this.stringifyText(this.VALUE); }\r\n\t \r\n\tstatic parse(context, expr) {\r\n\t\tconst [text, quote] = this.parseText(context, expr, true) || [];\r\n\t\tif (quote) return (new this(context, quote)).value(text);\r\n\t}\r\n\t\r\n\tstringifyText(text) {\r\n\t\tconst quote = this.QUOTE || this.quoteChars[0];\r\n\t\treturn `${ quote }${ ((text || '') + '').replace(new RegExp(quote, 'g'), quote.repeat(2)) }${ quote }`;\r\n\t}\r\n\r\n\tstatic parseText(context, expr, asInputDialect = false) {\r\n\t\tconst quoteChars = this.getQuoteChars(context, asInputDialect), $ = {};\r\n\t\tif (!($.quote = quoteChars.find(q => _wrapped(expr, q, q))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn [\r\n\t\t\t_unwrap(expr, $.quote, $.quote).replace(new RegExp($.quote + $.quote, 'g'), $.quote),\r\n\t\t\t$.quote\r\n\t\t];\r\n\t}\r\n}\r\n", "import Lexer from '../../Lexer.js';\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\n\nexport default Class => class extends Class {\n\n    ENTRIES = [];\n\n    get length() { return this.ENTRIES.length; }\n\n    entries(...entries) {\n        if (!arguments.length) return this.ENTRIES;\n        return (this.build('ENTRIES', entries, this.constructor.Types), this);\n    }\n\n\tgetEntry(ref) { return this.ENTRIES[ref]; }\n\n\tremoveEntry(ref) {\n\t\tconst entry = this.getEntry(ref);\n\t\tif (entry) this.ENTRIES = this.ENTRIES.filter($entry => $entry !== entry);\n\t\tif (entry) entry.$trace('event:DISCONNECTED', entry);\n\t\treturn entry;\n\t}\n\n\tfilterInplace(callback) {\n\t\treturn this.ENTRIES = this.ENTRIES.filter((entry, i) => {\n\t\t\tconst shouldRetain = callback(entry, i);\n\t\t\tif (!shouldRetain) entry.$trace('event:DISCONNECTED', entry);\n\t\t\treturn shouldRetain;\n\t\t});\n\t}\n\n\ttoJSON() { return { entries: this.ENTRIES.map(entry => entry.toJSON()) }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.entries)) return;\n        const instance = new this(context);\n        for (const entry of json.entries) instance.entries(entry);\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return `(${ this.ENTRIES.join(', ') })`; }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tif (!_wrapped(expr, '(', ')')) return;\n\t\tconst instance = new this(context);\n\t\tinstance.entries(...Lexer.split(_unwrap(expr, '(', ')'), [',']).map(entry => parseCallback(instance, entry.trim(), this.Types)));\n\t\treturn instance;\n\t}\n}", "import AbstractNode from '../../AbstractNode.js';\r\nimport Identifier from '../../components/Identifier.js';\r\nimport EntriesAPI from './EntriesAPI.js';\r\n\r\nexport default class ColumnsList extends EntriesAPI(AbstractNode) {\r\n\tgetEntry(ref) {\r\n\t\tif (typeof ref === 'number') return super.getEntry(ref);\r\n\t\treturn this.ENTRIES.find(entry => entry.name().toLowerCase() === ref.toLowerCase());\r\n\t}\r\n\tstatic Types = [Identifier];\r\n}", "import Lexer from '../../Lexer.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Expr from '../Expr.js';\r\n\r\nexport default class WhenClause extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONDITION = null;\r\n\tCONSEQUENCE = null;\r\n\r\n\t/**\r\n\t * Sets the condition.\r\n\t * \r\n\t * @param Any condition\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcondition(condition) { return (this.build('CONDITION', [condition], Expr.Types), this); }\r\n\r\n\t/**\r\n\t * Sets the consequence.\r\n\t * \r\n\t * @param Any consequence\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tthen_(consequence) { return this.build('CONSEQUENCE', [consequence], Expr.Types); }\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tcondition: this.CONDITION?.toJSON(),\r\n\t\t\tconsequence: this.CONSEQUENCE?.toJSON(),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\t// json could be undefined or null, or json.condition could be set but 9\r\n\t\tif (!(typeof json === 'object' && json && 'condition' in json)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.condition(json.condition);\r\n\t\tinstance.then_(json.consequence);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.CONDITION } THEN ${ this.CONSEQUENCE }`; }\r\n\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst tokens = Lexer.split(expr, [`\\\\s+THEN\\\\s+`], { useRegex: 'i' });\r\n\t\tif (tokens.length !== 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst [condition, consequence] = tokens.map($expr => parseCallback(instance, $expr.trim()));\r\n\t\tinstance.condition(condition).then_(consequence);\r\n\t\treturn instance;\r\n\t}\r\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Expr from '../Expr.js';\r\nimport WhenClause from './WhenClause.js';\r\n\r\nexport default class CaseConstruct extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tBASE_VALUE;\r\n\tWHEN_CLAUSES = [];\r\n\tELSE_CLAUSE;\r\n\r\n\t/**\r\n\t * Sets a given value for the cases.\r\n\t * \r\n\t * @param Any baseValue\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcompare(baseValue) {\r\n\t\tif (this.WHEN_CLAUSES.length || this.ELSE_CLAUSE) throw new Error(`A \"case\" clause must come before any \"when\" or \"else\" clauses.`);\r\n\t\treturn this.build('BASE_VALUE', [baseValue], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a \"when\" expression\r\n\t * \r\n\t * @param Any whenExpr\r\n\t * \r\n\t * @returns WhenClause\r\n\t */\r\n\twhen(whenExpr) {\r\n\t\tif (this.ELSE_CLAUSE) throw new Error(`A \"when\" clause cannot come after an \"else\" clause.`);\r\n\t\tthis.build('WHEN_CLAUSES', [whenExpr], WhenClause, 'condition');\r\n\t\treturn this.WHEN_CLAUSES[this.WHEN_CLAUSES.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an ELSE clause to the cases.\r\n\t * \r\n\t * @param Any elseClause\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\telse(elseClause) {\r\n\t\tif (!this.WHEN_CLAUSES.length) throw new Error(`An \"else\" clause cannot come before \"when\" clauses.`);\r\n\t\treturn this.build('ELSE_CLAUSE', [elseClause], Expr.Types);\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tbase_value: this.BASE_VALUE?.toJSON(),\r\n\t\t\twhen_clauses: this.WHEN_CLAUSES.map(c => c.toJSON()),\r\n\t\t\telse_clause: this.ELSE_CLAUSE?.toJSON(),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!Array.isArray(json?.when_clauses)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tif (json.base_value) instance.compare(json.base_value);\r\n\t\tfor (const whenClause of json.when_clauses) instance.when(whenClause);\r\n\t\tif (json.else_clause) instance.else(json.else_clause);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() {\r\n\t\tconst sql = [];\r\n\t\tif (this.BASE_VALUE) sql.push(this.BASE_VALUE);\r\n\t\tsql.push(`WHEN ${ this.WHEN_CLAUSES.join(' WHEN ') }`);\r\n\t\tif (this.ELSE_CLAUSE) sql.push('ELSE', this.ELSE_CLAUSE);\r\n\t\treturn `CASE ${ sql.join(' ') } END${ this.params.dialect === 'mysql' ? ' CASE' : '' }`;\r\n\t}\r\n\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [caseMatch,caseConstruct] = expr.match(/^CASE\\s+([\\s\\S]*)\\s+END(\\s+CASE)?$/i) || [];\r\n\t\tif (!caseMatch) return;\r\n\t\tconst { tokens: [ baseValue, ...assertions ], matches: clauses } = Lexer.lex(caseConstruct, ['WHEN','ELSE'], { useRegex: 'i' });\r\n\t\tconst instance = new this(context);\r\n\t\t// Has given value?\r\n\t\tif (baseValue.trim()) instance.compare(parseCallback(instance, baseValue.trim()));\r\n\t\t// On to the cases\r\n\t\tfor (const clause of clauses) {\r\n\t\t\tconst assertStmt = assertions.shift();\r\n\t\t\tif (/ELSE/i.test(clause)) {\r\n\t\t\t\tinstance.else(parseCallback(instance, assertStmt.trim()));\r\n\t\t\t} else if (/WHEN/i.test(clause)) {\r\n\t\t\t\tinstance.when(parseCallback(instance, assertStmt.trim(), [WhenClause]));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Can't have multiple \"${ clause }\" clauses in a CASE construct.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tstatic factoryMethods = { case: context => new this(context) };\r\n}", "import Lexer from '../Lexer.js';\r\nimport { _unwrap } from '@webqit/util/str/index.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Condition from './Condition.js';\r\nimport Expr from './Expr.js';\r\n\r\nexport default class Assertion extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic asserts\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tassert(operator, ...operands) {\r\n\t\tif (this.OPERATOR) this.OPERANDS.splice(0);\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tequals(...operands) { return this.assert('=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias equal\r\n\t */\r\n\teq(...operands) { return this.equals(...operands); }\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tnotEqual(...operands) { return this.assert('<>', ...operands); }\r\n\r\n\t/**\r\n\t * @alias notEqual\r\n\t */\r\n\tnotEq(...operands) { return this.notEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlesserThan(...operands) { return this.assert('<', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lesserThan\r\n\t */\r\n\tlt(...operands) { return this.lesserThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlessThanOrEqual(...operands) { return this.assert('<=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lessThanOrEqual\r\n\t */\r\n\tltOrEq(...operands) { return this.lessThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \">\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThan(...operands) { return this.assert('>', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThan\r\n\t */\r\n\tgt(...operands) { return this.greaterThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \">=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThanOrEqual(...operands) { return this.assert('>=', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThanOrEqual\r\n\t */\r\n\tgtOrEq(...operands) { return this.greaterThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"IN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tin(...operands) { return this.assert('IN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"ANY\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tany(...operands) { return this.assert('ANY', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"LIKE\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlike(...operands) { return this.assert('LIKE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNull(...operands) { return this.assert('IS NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotNull(...operands) { return this.assert('IS NOT NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisTrue(...operands) { return this.assert('IS TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotTrue(...operands) { return this.assert('IS NOT TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS FALSE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisFalse(...operands) { return this.assert('IS FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT FALSE\"\r\n\t * \r\n\t * @param Any operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotFalse(...operands) { return this.assert('IS NOT FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisUnknow(...operands) { return this.assert('IS UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotUnknow(...operands) { return this.assert('IS NOT UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisDistinctFrom(...operands) { return this.assert('IS DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotDistinctFrom(...operands) { return this.assert('IS NOT DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetween(...operands) { return this.assert('IS BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetween(...operands) { return this.assert('IS NOT BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetweenSymmetric(...operands) { return this.assert('IS BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetweenSymmetric(...operands) { return this.assert('IS NOT BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tand(...args) { return (new Condition(this, 'AND')).and(this, ...args); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tor(...args) { return (new Condition(this, 'OR')).or(this, ...args); }\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJSON()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!Array.isArray(json?.operands) || typeof json?.operator !== 'string' || !this.regexes.some(re => (new RegExp(re.regex || re.test || re)).test(` ${ json.operator } `/*intentional space around*/))) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.assert(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() {\r\n\t\tconst operands = this.OPERANDS.slice(0);\r\n\t\tconst sql = [\r\n\t\t\toperands.shift(), \r\n\t\t\tthis.OPERATOR.toUpperCase(),\r\n\t\t];\r\n\t\tconst rightHandSide = operands;\r\n\t\tif (this.OPERATOR === 'IN') sql.push(`(${ rightHandSide.join(', ') })`);\r\n\t\telse if (/BETWEEN/i.test(this.OPERATOR)) sql.push(`(${ rightHandSide.join(' AND ') })`);\r\n\t\telse sql.push(`${ rightHandSide.join(' ') }`);\r\n\t\treturn sql.filter(s => s).join(' ');\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst { tokens: [lhs, rhs = ''], matches: [operator] } = Lexer.lex(expr, this.regexes, { useRegex: 'i' });\r\n\t\tif (!operator) return;\r\n\t\tconst $operator = operator.trim().toUpperCase();\r\n\t\tconst $operands = [lhs];\r\n\t\tif ($operator === 'IN') {\r\n\t\t\t$operands.push(...Lexer.split(_unwrap(rhs.trim(), '(', ')'), [',']));\r\n\t\t} else if (/BETWEEN/.test($operator)) {\r\n\t\t\t$operands.push(...Lexer.split(rhs, [' AND ']));\r\n\t\t} else if (rhs) {\r\n\t\t\t$operands.push(rhs);\r\n\t\t}\r\n\t\treturn new this(context, $operator, ...$operands.map(opr => parseCallback(context, opr.trim())));\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tstatic regexes = [\r\n\t\t{ test: '<(?!~)' },\r\n\t\t{ backtest: '^(?!.*~$)', test: '>', regex: '(?<!~)>' },\r\n\t\t'((\\\\s+(?:NOT\\\\s+)?IS\\\\s+(?:NOT\\\\s+)?(TRUE|FALSE|NULL|UNKNOWN|DISTINCT\\\\s+FROM\\\\s+))|\\\\s+(ISNULL|NOTNULL|IN|ANY|LIKE|(?:NOT\\\\s+)?BETWEEN(?:\\\\s+SYMMETRIC)?)\\\\s+|(?:\\\\s+)?(=|<=|>=|!=|<>)(?:\\\\s+)?)',\r\n\t];\r\n}", "\r\nimport AbstractNode from \"../AbstractNode.js\";\r\nimport Lexer from \"../Lexer.js\";\r\nimport Identifier from \"../components/Identifier.js\";\r\n\r\nexport default class AbstractStatement extends AbstractNode {\r\n\r\n    constructor(context) {\r\n        super(context);\r\n        this._QUERY_BINDINGS = [];\r\n        this._ROOT_SCHEMA = null;\r\n    }\r\n\r\n\tget BINDINGS() { return this._QUERY_BINDINGS; }\r\n\r\n\t$trace(request, ...args) {\r\n\t\tif (request === 'get:STATEMENT_NODE') return this;\r\n\t\tif (request === 'get:QUERY_BINDINGS') return this._QUERY_BINDINGS;\r\n        if (['get:TABLE_NAME', 'get:DATABASE_NAME'].includes(request) && !this._ongoingNameTrace) {\r\n            let tbl = this.$trace('get:TABLE_NODE');\r\n            // SELECT statements has a different structure:\r\n            if (tbl && !(tbl instanceof Identifier)) {\r\n                tbl = tbl.EXPR; // Table.EXPR:\r\n                if (!(tbl instanceof Identifier)) {\r\n                    this._ongoingNameTrace = true;\r\n                    const result = tbl/*Parens*/.expr()/*Select*/.$trace(request, ...args);\r\n                    delete this._ongoingNameTrace;\r\n                    return result;\r\n                }\r\n            }\r\n            if (tbl && request === 'get:TABLE_NAME') return tbl.name()\r\n            if (tbl && request === 'get:DATABASE_NAME' && tbl.prefix()) return tbl.prefix();\r\n        }\r\n\t\tif (request === 'get:ROOT_SCHEMA') {\r\n\t\t\tif (!this._ROOT_SCHEMA) this._ROOT_SCHEMA = this.CONTEXT?.$trace?.(request);\r\n\t\t\treturn this._ROOT_SCHEMA;\r\n\t\t}\r\n        return this.CONTEXT?.$trace?.(request, ...args);\r\n\t}\r\n\r\n    clone() {\r\n        const clone = super.clone();\r\n        clone._QUERY_BINDINGS = this._QUERY_BINDINGS.slice(0);\r\n        clone._ROOT_SCHEMA = this._ROOT_SCHEMA;\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * @returns String\r\n     */\r\n    static mySubstitutePlaceholders(context, expr) {\r\n        if ((context?.params?.inputDialect || context?.params?.dialect) !== 'mysql' || expr.indexOf('?') === -1) return expr;\r\n\t\treturn Lexer.split(expr, ['?'], { blocks:[] }).reduce((expr, chunk, i) => !expr ? chunk : expr + '?' + i + chunk, null);\r\n    }\r\n\r\n    /**\r\n     * @returns Bool\r\n     */\r\n    get expandable() { return false; }\r\n\r\n    /**\r\n     * @returns Node\r\n     */\r\n    async expand(inPlace = false) { return !inPlace ? this.clone() : this; }\r\n}\r\n", "\nimport AbstractNode from '../AbstractNode.js';\n\t\t\nexport default class Placeholder extends AbstractNode {\n\n\t/**\n\t * Instance properties\n\t */\n\tOFFSET;\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, offset) {\n\t\tsuper(context);\n\t\tthis.OFFSET = parseInt(offset);\n\t}\n\n\t$var(offset) { this.OFFSET = offset; }\n\n\t$bind(offset, value) {\n\t\tthis.OFFSET = offset;\n\t\tconst bindings = this.$trace('get:QUERY_BINDINGS');\n\t\tbindings?.push(value);\n\t\tif (this.OFFSET === 0) {\n\t\t\tthis.OFFSET = bindings?.length;\n\t\t}\n\t}\n\n\ttoJSON() { return { offset: this.OFFSET }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (typeof json?.offset !== 'number') return;\n\t\treturn new this(context, json.offset);\n\t}\n\t\n\tstringify() { return this.params.dialect === 'mysql' ? '?' : '$' + this.OFFSET; }\n\t\n\tstatic parse(context, expr) {\n\t\tconst notation = (context?.params?.inputDialect || context?.params?.dialect) === 'mysql' ? '?' : '$';\n\t\tconst [ match, offset ] = (new RegExp(`^\\\\${ notation }(\\\\d)$`)).exec(expr) || [];\n\t\tif (!match) return;\n\t\treturn new this(context, parseInt(offset));\n\t}\n}\n", "import AbstractNode from \"../AbstractNode.js\";\r\n\r\nexport default class Num extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE = 0;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value) {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value\r\n\t * \r\n\t * @param String expr \r\n\t */\r\n\tvalue(value) { this.VALUE = value; }\r\n\r\n\ttoJSON() { return { value: this.VALUE, flags: this.FLAGS, }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json === 'number' || (typeof json === 'string' && /^[.\\d]+$/.test(json) && (json = parseFloat(json)))) {\r\n\t\t\tjson = { value: json };\r\n\t\t} else if (typeof json?.value !== 'number') return;\r\n\t\treturn (new this(context, json.value)).withFlag(...(json.flags || []));\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.VALUE }`; }\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tif (/^\\d+$/.test(expr)) return new this(context, parseFloat(expr));\r\n\t}\r\n\r\n\tstatic factoryMethods = { value: (context, value) => /^\\d+$/.test(value) && new this(context) };\r\n}", "import { _wrapped } from '@webqit/util/str/index.js';\r\nimport { _isObject } from '@webqit/util/js/index.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Str from '../str/Str.js';\r\n\r\nexport default class Json extends Str {\r\n\r\n\tjson(value) {\r\n\t\tif (!Array.isArray(value) && !_isObject(value)) throw new Error(`An array or object expected.`);\r\n\t\treturn (this.VALUE = value, this);\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!Array.isArray(json?.value) && !_isObject(json?.value)) return;\r\n\t\treturn (new this(context)).value(json.value);\r\n\t}\r\n\t\r\n\tstringify() { return this.stringifyText(JSON.stringify(this.VALUE)); }\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tconst braces = [['{','}'], ['[',']']], $ = {};\r\n\t\tconst [text, quote] = this.parseText(context, expr) || [];\r\n\t\tif (!quote) return;\r\n\t\tif (!($.braces = braces.find(b => _wrapped(expr, b[0], b[1]))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn (new this(context, quote)).json(JSON.parse(text));\r\n\t}\r\n\r\n\tstatic factoryMethods = { json: (context, value) => (Array.isArray(value) || _isObject(value)) && new this(context) };\r\n}", "import Lexer from '../../Lexer.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Identifier from '../Identifier.js';\r\nimport Str from '../str/Str.js';\r\nimport Num from '../Num.js';\r\nimport Json from './Json.js';\r\n\r\nexport default class JsonPath extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Static properties\r\n\t */\r\n\tstatic OPERATORS = [`->`, '->>', '#>', '#>>'];\r\n\r\n\t/**\r\n\t * Instance propeties\r\n\t */\r\n\tOPERATOR = '';\r\n\tLHS = null;\r\n\tRHS = null;\r\n\r\n\t/**\r\n\t * Builds the operands.\r\n\t * \r\n\t * @param Identifier lhs \r\n\t * @param String operator\r\n\t * @param Identifier,Path rhs \r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tpath(lhs, operator, rhs) {\r\n\t\tconst $static = this.constructor;\r\n\t\tif (!$static.OPERATORS.includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\r\n\t\tthis.build('LHS', [lhs], [Json,Identifier]);\r\n\t\tthis.build('RHS', [rhs], [Json,Num,Str]);\r\n\t\tthis.OPERATOR = operator;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tlhs: this.LHS?.toJSON(),\r\n\t\t\trhs: this.RHS?.toJSON(),\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!this.OPERATORS.includes(json?.operator)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`; }\r\n\t \r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tlet { tokens, matches } = Lexer.lex(expr, this.OPERATORS, { limit: 1 });\r\n\t\tif (!matches.length) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst lhs = parseCallback(instance, tokens[0], [Json,Identifier]);\r\n\t\tconst rhs = parseCallback(instance, tokens[1].trim(), [Json,Num,Str]);\r\n\t\tinstance.path(lhs, matches[0], rhs);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => this.OPERATORS.includes(operator) && new this(context) };\r\n}\r\n", "import Lexer from '../Lexer.js';\nimport AbstractNode from '../AbstractNode.js';\nimport Identifier from './Identifier.js';\nimport JsonPath from './json/JsonPath.js';\n\nexport default class Path extends AbstractNode {\n\n\t/**\n\t * Static properties\n\t */\n\tstatic ARR_RIGHT = '~>';\n \tstatic ARR_LEFT = '<~';\n\n\t/**\n\t * Instance propeties\n\t */\n\tOPERATOR = '';\n\tLHS = null;\n\tRHS = null;\n\tUUID = null;\n\n\t/**\n\t * @property Bool\n\t */\n\tget isOutgoing() { return this.OPERATOR === this.constructor.ARR_RIGHT; }\n\n\t/**\n\t * @property Bool\n\t */\n\tget isIncoming() { return this.OPERATOR === this.constructor.ARR_LEFT; }\n\n\t/**\n\t * @property String\n\t */\n\tget uuid() {\n\t\tif (!this.UUID) { this.UUID = `$path:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`; }\n\t\treturn this.UUID;\n\t}\n\n\t/**\n\t * Builds the operands.\n\t * \n\t * @param Identifier lhs \n\t * @param String operator\n\t * @param Identifier,Path rhs \n\t * \n\t * @returns Void\n\t */\n\tpath(lhs, operator, rhs) {\n\t\tconst $static = this.constructor;\n\t\tif (![$static.ARR_LEFT, $static.ARR_RIGHT].includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\n\t\tthis.build('LHS', [lhs], Identifier);\n\t\tthis.build('RHS', [rhs], [$static,JsonPath,Identifier]);\n\t\tthis.OPERATOR = operator;\n\t}\n\n\t/**\n\t * Evaluates the relationship \n\t * and returns the parameters for plotting the join.\n\t * \n\t * @returns Object\n\t */\n\tasync eval() {\n\t\tconst stmtNode = this.$trace('get:STATEMENT_NODE');\n\t\tconst rootSchema = await this.$trace('get:ROOT_SCHEMA');\n\t\tif (!rootSchema) throw new Error(`Root schema not associated with query.`);\n\t\tconst getPrimaryKey = schema => schema.primaryKey()?.columns()[0];\n\t\tconst getTargetTable = async (schema, foreignKey) => {\n\t\t\tconst fk = schema.foreignKeys().find(fk => fk.columns().includes(foreignKey.name()));\n\t\t\tconst targetIdent = fk ? Identifier.fromJSON(this, [fk.targetSchema(), fk.targetTable()]) : null;\n\t\t\tif (targetIdent && !targetIdent.prefix()) return targetIdent.prefix((await stmtNode.structure()).findPath(fk.targetTable()));\n\t\t\treturn targetIdent;\n\t\t};\n\t\tif (this.isIncoming) {\n\t\t\tif (!(this.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS }`);\n\t\t\t// --------------------------\n\t\t\t// === {foreignKey}LHS<-RHS{table...}\n\t\t\tlet foreignKey_rhs, table_rhs, schema_rhs, path;\n\t\t\tif (this.RHS.isIncoming) {\n\t\t\t\tif (!(this.RHS.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS.RHS }`);\n\t\t\t\t// === {foreignKey}LHS<-RHS{foreignKey_rhs<-table->?...}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: path } = this);\n\t\t\t\t({ schema: schema_rhs, table: table_rhs } = (await path.eval()).lhs);\n\t\t\t} else {\n\t\t\t\t// === {foreignKey}LHS<-RHS{table->path}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: { LHS: table_rhs/*Identifier*/, RHS: path/*Identifier|Path*/ } } = this);\n\t\t\t\tif (!table_rhs.prefix()) { table_rhs = Identifier.fromJSON(this, [rootSchema.findPath(table_rhs.name()), table_rhs.name()]); }\n\t\t\t\tschema_rhs = rootSchema.database(table_rhs.prefix())?.table(table_rhs.name());\n\t\t\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t\t}\n\t\t\tconst table_lhs = await getTargetTable(schema_rhs, foreignKey_rhs);\n\t\t\t// Validate that schema_rhs has the implied foreign key (actingKey)\n\t\t\tif (!table_lhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define the implied foreign key: ${ foreignKey_rhs }.`);\n\t\t\t// -------------\n\t\t\t// Get schema_lhs from keyDef\n\t\t\tconst schema_lhs = rootSchema.database(table_lhs.prefix())?.table(table_lhs.name());\n\t\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\t\tconst primaryKey_lhs = getPrimaryKey(schema_lhs);\n\t\t\tif (!primaryKey_lhs) throw new Error(`[${ this }]: Table ${ schema_lhs } does not define a primary key.`);\n\t\t\t// -------------\n\t\t\t// Put together\n\t\t\treturn {\n\t\t\t\tlhs: { table: table_lhs, schema: schema_lhs, primaryKey: primaryKey_lhs, },\n\t\t\t\trhs: { table: table_rhs, schema: schema_rhs, foreignKey: foreignKey_rhs, path, },\n\t\t\t};\n\t\t}\n\t\t// -------------\n\t\t// reference === {foreignKey}LHS->RHS{path}\n\t\tconst table_lhs = await baseTableIdent.call(this);\n\t\tif (!table_lhs) throw new Error(`No tables in query.`);\n\t\t// Get lhs schema\n\t\tconst schema_lhs = rootSchema.database(table_lhs.prefix())?.table(table_lhs.name());\n\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\tconst { LHS: foreignKey_lhs/*Identifier*/, RHS: path/*Identifier|Path*/ } = this;\n\t\t// We get schema2 from schema_lhs\n\t\tconst table_rhs = await getTargetTable(schema_lhs, foreignKey_lhs);\n\t\t// Validate that schema_lhs has the implied foreign key (foreignKey)\n\t\tif (!table_rhs) throw new Error(`[${ this }]: Table ${ table_lhs } does not define the implied foreign key: ${ foreignKey_lhs }.`);\n\t\t// -------------\n\t\t// Get schema_rhs from keyDef!\n\t\tconst schema_rhs = rootSchema.database(table_rhs.prefix())?.table(table_rhs.name());\n\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\tconst primaryKey_rhs = getPrimaryKey(schema_rhs);\n\t\tif (!primaryKey_rhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define a primary key.`);\n\t\t// -------------\n\t\t// Put together\n\t\treturn {\n\t\t\tlhs: { table: table_lhs, schema: schema_lhs, foreignKey: foreignKey_lhs, },\n\t\t\trhs: { table: table_rhs, schema: schema_rhs, primaryKey: primaryKey_rhs, path, },\n\t\t};\n\t}\n\n\t/**\n\t * Plots the relationship.\n\t * \n\t * @returns Void\n\t */\n\tasync plot() {\n\t\tif (this.JOINT) return;\n\t\tconst stmtNode = this.$trace('get:STATEMENT_NODE');\n\t\t// Resolve relation and validate\n\t\tconst baseTable = await baseTableIdent.call(this);\n\t\tif (!baseTable) throw new Error(`No tables in query.`);\n\t\t// Do plotting\n\t\tconst { lhs, rhs } = await this.eval();\n\t\tconst baseKey = lhs.foreignKey?.name() || lhs.primaryKey;\n\t\tconst joinKey = rhs.primaryKey || rhs.foreignKey.name();\n\t\tif (lhs.primaryKey/*then incoming reference*/ && (lhs.table.name().toLowerCase() !== baseTable.name().toLowerCase() || lhs.table.prefix().toLowerCase() !== baseTable.prefix().toLowerCase())) throw new Error(`[${ this }]: Cannot resolve incoming path to base table ${ baseTable.EXPR }.`);\n\t\tconst joinAlias = `_view:${ [baseKey, rhs.table.prefix(), rhs.table.name(), joinKey].join(':') }`;\n\t\tconst joint = () => this.JOINT = stmtNode.JOIN_LIST.find(joint => joint.ALIAS.name().toLowerCase() === joinAlias.toLowerCase());\n\t\tif (!joint()) {\n\t\t\t// Implement the join for the first time\n\t\t\tconst baseAlias = this.$trace('get:TABLE_NODE').ALIAS?.name() || baseTable.name();\n\t\t\tconst joinKeyAlias = `${ joinKey }:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`;\n\t\t\tstmtNode.leftJoin( j => j.query( q => q.select( field => field.expr( joinKey ).as( joinKeyAlias ) ), q => q.from([rhs.table.prefix(),rhs.table.name()].filter(s => s)) ) )\n\t\t\t\t.with({ IS_SMART_JOIN: true }).as(joinAlias)\n\t\t\t\t.on( on => on.equals([joinAlias,joinKeyAlias], [baseAlias,baseKey]) );\n\t\t\tjoint();\n\t\t}\n\t\t// For something like: author~>name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"->\"name\"\n\t\t// For something like: author~>country->name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"country\"->\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"~>\"country\"->\"name\"\n\t\tthis.JOINT.EXPR/*Parens*/.EXPR/*SELECT*/.select( field => field.expr(rhs.path.toJSON()).as(this.uuid) );\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tlhs: this.LHS?.toJSON(),\n\t\t\trhs: this.RHS?.toJSON(),\n\t\t\toperator: this.OPERATOR,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (![this.ARR_LEFT, this.ARR_RIGHT].includes(json?.operator)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tif (this.JOINT) return this.autoEsc([this.JOINT.ALIAS.name(),this.uuid]).join('.');\n\t\treturn `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`;\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens, matches } = Lexer.lex(expr, [this.ARR_LEFT, this.ARR_RIGHT], { limit: 1 });\n\t\tif (!matches.length) return;\n\t\tconst instance = new this(context);\n\t\tconst lhs = parseCallback(instance, tokens[0], [Identifier]);\n\t\tconst rhs = parseCallback(instance, tokens[1], matches[0] === this.ARR_LEFT ? [this] : [this,JsonPath,Identifier]);\n\t\tinstance.path(lhs, matches[0], rhs);\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => [this.ARR_LEFT,this.ARR_RIGHT].includes(operator) && new this(context) };\n}\n\nasync function baseTableIdent() {\n\tconst tblName = this.$trace('get:TABLE_NAME');\n\tif (!tblName) return;\n\tconst dbName = this.$trace('get:DATABASE_NAME');\n\treturn Identifier.fromJSON(this, [\n\t\tdbName || (await this.$trace('get:ROOT_SCHEMA')).findPath(tblName),\n\t\ttblName\n\t]);\n}", "\nimport AbstractNode from '../AbstractNode.js';\nimport Expr from './Expr.js';\nimport Literal from './Literal.js';\nimport Identifier from './Identifier.js';\nimport Parens from './Parens.js';\nimport Path from './Path.js';\n\nexport default class AbstractAliasableExpr extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tEXPR;\n\tALIAS;\n\tCLAUSED;\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Any expr\n\t * \n\t * @returns this\n\t */\n\texpr(expr) {\n\t\tif (!arguments.length) return this.EXPR;\n\t\treturn (this.build('EXPR', [expr], this.constructor.exprTypes), this);\n\t}\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tquery(...fns) {\n\t\tif (!arguments.length) return this.EXPR instanceof Parens ? this.EXPR : null;\n\t\treturn (this.build('EXPR', fns, Parens, 'query'), this);\n\t}\n\t\n\t/**\n\t * Sets the alias\n\t * \n\t * @param String alias\n\t * \n\t * @returns this\n\t */\n\tas(alias, claused = true) {\n\t\tthis.build('ALIAS', [alias], Identifier);\n\t\tthis.CLAUSED = claused;\n\t\treturn this;\n\t}\n\n\ttoJSON() { return { expr: this.EXPR?.toJSON(), alias: this.ALIAS?.toJSON(), claused: this.CLAUSED, flags: this.FLAGS }; }\n\n\tstatic fromJSON(context, json) {\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json?.expr) {\n\t\t\tinstance.expr(json.expr);\n\t\t\tif (json.alias) instance.as(json.alias, json.claused);\n\t\t} else if (json) instance.expr(json);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst alias = this.ALIAS || this.EXPR instanceof Path && this.EXPR.JOINT && this.autoEsc(this.EXPR.clone().stringify());\n\t\treturn [this.EXPR, this.CLAUSED ? 'AS' : '', alias].filter(s => s).join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst escChar = this.getEscChar(context, true);\n\t\t// With an \"AS\" clause, its easy to obtain the alias...\n\t\t// E.g: SELECT first_name AS fname, 4 + 5 AS result, 5 + 5\n\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\n\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5, (SELECT ...) alias FROM ...,\n\t\tlet [ , $expr, $separator, aliasUnescaped, /*esc*/, aliasEscaped ] = (new RegExp(`^([\\\\s\\\\S]+?)` + `(?:` + `(\\\\s+AS\\\\s+|(?<!(?:~>|<~))\\\\s+)` + `(?:([\\\\w]+)|(${ escChar })((?:\\\\4\\\\4|[^\\\\4])+)\\\\4)` + `)?$`, 'i')).exec(expr.trim()) || [];\n\t\tlet exprNode, $alias = aliasUnescaped || aliasEscaped;\n\t\tif ($alias && !$separator?.trim() && !$expr.trim().endsWith(')')) {\n\t\t\ttry {\n\t\t\t\texprNode = parseCallback(instance, $expr, this.exprTypes);\n\t\t\t} catch(e) {}\n\t\t\tif (!exprNode) {\n\t\t\t\t$alias = aliasUnescaped = aliasEscaped = null;\n\t\t\t\t$expr = expr; // IMPORTANT\n\t\t\t}\n\t\t}\n\t\tif (!exprNode) { exprNode = parseCallback(instance, $expr, this.exprTypes); }\n\t\tinstance.expr(exprNode);\n\t\tif ($alias) {\n\t\t\tconst alias = aliasUnescaped || this.autoUnesc(instance, aliasEscaped);\n\t\t\tconst claused = !!$separator?.trim();\n\t\t\tinstance.as(alias, claused);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return Expr.Types.filter(t => t !== Literal); }\n}", "\nimport AbstractAliasableExpr from './AbstractAliasableExpr.js';\nimport Identifier from './Identifier.js';\nimport Parens from './Parens.js';\n\nexport default class Table extends AbstractAliasableExpr {\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return [Parens,Identifier]; }\n}", "\nimport Lexer from '../Lexer.js';\nimport Identifier from './Identifier.js';\nimport Condition from './Condition.js';\nimport Assertion from './Assertion.js';\nimport Table from './Table.js';\n\nexport default class JoinClause extends Table {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTYPE = '';\n\tCORRELATION = null;\n\n\t/**\n\t * Creates a full join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tfull(table) {\n\t\tthis.TYPE = 'JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a left join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tleft(table) {\n\t\tthis.TYPE = 'LEFT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a right join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tright(table) {\n\t\tthis.TYPE = 'RIGHT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates an inner join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tinner(table) {\n\t\tthis.TYPE = 'INNER_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a cross join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tcross(table) {\n\t\tthis.TYPE = 'CROSS_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Adds a condition\n\t * \n\t * @param Array assertions\n\t * \n\t * @returns this\n\t */\n\ton(...correlations) { return this.build('CORRELATION', correlations, Condition, 'and'); }\n\n\t/**\n\t * Sets the using clause\n\t * \n\t * @param String correlation\n\t * \n\t * @returns this\n\t */\n\tusing(correlation) { return this.build('CORRELATION', [correlation], Identifier); }\n\n\ttoJSON() {\n\t\treturn {\n\t\t\ttype: this.TYPE,\n\t\t\tcorrelation: this.CORRELATION?.toJSON(),\n\t\t\t...super.toJSON(),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tconst instance = super.fromJSON(context, json);\n\t\tif (!instance || !json.type) return;\n\t\tif (json?.expr && json.type) instance.TYPE = json.type;\n\t\tif (json?.expr && json.correlation) instance.build('CORRELATION', [json.correlation], [Identifier,Condition]);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\treturn [\n\t\t\tthis.TYPE?.replace(/_/, ' ').toUpperCase() || 'JOIN',\n\t\t\tsuper.stringify(),\n\t\t\t...[ this.CORRELATION instanceof Identifier ? `USING ${ this.CORRELATION }` : `ON ${ this.CORRELATION }` ], \n\t\t].filter(s => s).join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ joinMatch, type, joinSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!joinMatch) return;\n\t\tconst { tokens: [ $table, $correlation ], matches } = Lexer.lex(joinSpec, ['\\\\s+(?:ON|USING)\\\\s+'], { useRegex:'i' });\n\t\tconst instance = super.parse(context, $table.trim(), parseCallback);\n\t\tinstance.TYPE = type.trim().toUpperCase() + '_JOIN';\n\t\tif (/USING/i.test(matches[0])) {\n\t\t\tinstance.using(parseCallback(instance, $correlation.trim(), [Identifier]));\n\t\t} else if (/ON/i.test(matches[0])) {\n\t\t\tinstance.on(parseCallback(instance, $correlation.trim(), [Condition,Assertion]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = '(INNER\\\\s+|CROSS\\\\s+|(?:LEFT|RIGHT)(?:\\\\s+OUTER)?\\\\s+)?JOIN';\n}\n", "import Lexer from '../Lexer.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Expr from './Expr.js';\r\n\r\nexport default class Func extends AbstractNode {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tNAME = '';\r\n\tARGS = [];\r\n\t\r\n\tfn(name, ...args) {\r\n\t\tthis.NAME = name;\r\n\t\treturn this.build('ARGS', args, Expr.Types);\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tname: this.NAME,\r\n\t\t\targs: this.ARGS.map(o => o.toJSON()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.args)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.fn(json.name, ...json.args);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.NAME.toUpperCase() }(${ this.ARGS.join(', ') })`; }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!expr.endsWith(')') || Lexer.match(expr, [' ']).length) return;\r\n\t\tconst [ , name, args = '' ] = /^(\\w+)\\(([\\s\\S]+)?\\)$/i.exec(expr);\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.fn(name, ...Lexer.split(args, [',']).map(arg => parseCallback(instance, arg.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../../../Lexer.js';\nimport AbstractNode from '../../../AbstractNode.js';\nimport Expr from '../../../components/Expr.js';\n\nexport default class AbstractOrderBy extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\ttoJSON() { return { criteria: this.CRITERIA.map(c => c.toJSON()), flags: this.FLAGS }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return this.CRITERIA.map(criterion => [criterion, ...criterion.FLAGS].join(' ')).join(', '); }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ orderByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!orderByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tconst [ , expr, sort ] = /([\\s\\S]+)\\s+(ASC|DESC)$/i.exec(criterionExpr) || [ , criterionExpr ];\n\t\t\tinstance.criterion((parseCallback(instance, expr)).withFlag(sort));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ORDER\\\\s+BY';\n}", "\nimport Lexer from '../../../Lexer.js';\nimport AbstractOrderBy from './AbstractOrderBy.js';\n\nexport default class OrderByClause extends AbstractOrderBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\t\n\tstringify() { return ['ORDER BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../../../Lexer.js';\nimport AbstractNode from '../../../AbstractNode.js';\nimport Expr from '../../../components/Expr.js';\n\nexport default class AbstractGroupBy extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\tstringify() { return this.CRITERIA.map(criterion => criterion.stringify()).join(','); }\n\n\ttoJSON() { return { criteria: this.CRITERIA.map(c => c.toJSON()), flags: this.FLAGS }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ groupByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!groupByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tinstance.criterion(parseCallback(instance, criterionExpr));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'GROUP\\\\s+BY';\n}", "\nimport AbstractGroupBy from '../groupby/AbstractGroupBy.js';\n\nexport default class PartitionByClause extends AbstractGroupBy {\n\n\tstringify() { return ['PARTITION BY', super.stringify()].join(' '); }\n\n\tstatic regex = 'PARTITION\\\\s+BY';\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../../Lexer.js';\nimport AbstractNode from '../../../AbstractNode.js';\nimport OrderByClause from '../orderby/OrderByClause.js';\nimport PartitionByClause from './PartitionByClause.js';\n\nexport default class WindowSpec extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tWINDOW_REF;\n\tPARTITION_BY_CLAUSE;\n\tORDER_BY_CLAUSE;\n\n\t/**\n\t * Sets the name.\n\t * \n\t * @param String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tthis.NAME = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\texisting(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\textends(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a PARTITION BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\tpartitionBy(...partitionBys) {\n\t\tif (this.WINDOW_REF) throw new Error(`The PARTITION BY clause is not allowed when inheriting from a base window.`);\n\t\treturn this.build('PARTITION_BY_CLAUSE', partitionBys, PartitionByClause, 'criterion');\n\t}\n\n\t/**\n\t * Adds an ORDER BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\torderBy(...orderBys) { return this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'); }\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.NAME, \n\t\t\twindow_ref: this.WINDOW_REF, \n\t\t\tpartition_by_clause: this.PARTITION_BY_CLAUSE?.toJSON(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJSON(),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (typeof json === 'string') json = { window_ref: json };\n\t\telse if (!(typeof json === 'object' && json) || !['name', 'window_ref', 'partition_by_clause', 'order_by_clause'].some(k => k in json)) return;\n\t\tconst instance = new this(context);\n\t\tif (json.name) instance.name(json.name);\n\t\tif (json.window_ref) instance.extends(json.window_ref);\n\t\tif (json.partition_by_clause) instance.partitionBy(json.partition_by_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = [];\n\t\tif (!this.NAME && this.WINDOW_REF && !this.PARTITION_BY_CLAUSE && !this.ORDER_BY_CLAUSE) {\n\t\t\t// It's an \"over w\" clause\n\t\t\tsql.push(this.WINDOW_REF);\n\t\t} else {\n\t\t\t// Might be an \"over (definedRef? ...)\" clause or a named window \"w AS ()\"\n\t\t\t// But certainly an enclosure\n\t\t\tif (this.NAME) sql.push(`${ this.NAME } AS `);\n\t\t\tsql.push(`(${ [\n\t\t\t\tthis.WINDOW_REF,\n\t\t\t\tthis.PARTITION_BY_CLAUSE,\n\t\t\t\tthis.ORDER_BY_CLAUSE\n\t\t\t].filter(x => x).join(' ') })`);\n\t\t}\n\t\treturn sql.join('');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst parseEnclosure = async enclosure => {\n\t\t\tconst { tokens: [ definedRef, ...clauses ], matches: clauseTypes } = Lexer.lex(_unwrap(enclosure.trim(), '(', ')'), ['PARTITION\\\\s+BY', 'ORDER\\\\s+BY'], { useRegex:'i', preserveDelims: true });\n\t\t\tif (definedRef.trim()) instance.extends(definedRef.trim());\n\t\t\tfor (const clauseType of clauseTypes) {\n\t\t\t\t// PARTITION BY\n\t\t\t\tif (/PARTITION\\s+BY/i.test(clauseType)) {\n\t\t\t\t\tinstance.partitionBy(parseCallback(instance, clauses.shift().trim(), [PartitionByClause]));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ORDER BY\n\t\t\t\tinstance.orderBy(parseCallback(instance, clauses.shift().trim(), [OrderByClause]));\n\t\t\t}\n\t\t};\n\t\tconst hasEnclosure = expr.endsWith(')');\n\t\tconst isNamedWindow = hasEnclosure && !expr.startsWith('(');\n\t\tif (isNamedWindow) {\n\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\n\t\t\t// NOTICE below the space around \"AS\", important in view of \"city ASC\"\n\t\t\tconst [ name, enclosure ] = spec.split(new RegExp(' AS ', 'i'));\n\t\t\tinstance.name(name.trim());\n\t\t\tparseEnclosure(enclosure);\n\t\t} else if (hasEnclosure) {\n\t\t\tparseEnclosure(expr);\n\t\t} else {\n\t\t\t// FUNC OVER w\n\t\t\tinstance.existing(expr);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW|OVER';\n}", "\nimport Lexer from '../Lexer.js';\nimport WindowSpec from '../dml/select/window/WindowSpec.js';\nimport OrderByClause from '../dml/select/orderby/OrderByClause.js';\nimport Func from './Func.js';\n\nexport default class Aggr extends Func {\n\n\t/**\n\t * Instance properties\n\t */\n\tORDER_BY_CLAUSE;\n\tOVER_CLAUSE;\n\n\tfn(...args) { return (super.fn(...args), this); }\n\t\n\t/**\n\t * Adds an OVER clause\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this); }\n\n\t/**\n\t * Adds an OVER clause\n\t */\n\tover(window) {\n\t\t// For expressions like SUM OVER ()\n\t\tif (!window) window = { name: '' }; // At least an empty string to help pass the WindowSpec.fromJSON() validation\n\t\treturn (this.build('OVER_CLAUSE', [window], WindowSpec), this.OVER_CLAUSE);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(), \n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJSON(),\n\t\t\tover_clause: this.OVER_CLAUSE?.toJSON(),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tconst instance = super.fromJSON(context, json);\n\t\tif (!instance) return;\n\t\tif (!this.names.flat().includes(instance.NAME.toUpperCase())) return instance;\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.over_clause) instance.over(json.over_clause);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = `${ this.NAME.toUpperCase() }(${ [...this.FLAGS, this.ARGS.join(','), this.ORDER_BY_CLAUSE].filter(s => s).join(' ') })`;\n\t\treturn sql + (this.OVER_CLAUSE ? ` OVER ${ this.OVER_CLAUSE }` : '');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\t// Break off any OVER clause, then assert that it's a function\n\t\tconst [ func, over ] = Lexer.split(expr, ['OVER\\\\s+'], { useRegex: 'i' }).map(s => s.trim());\n\t\tif (!func.endsWith(')') || Lexer.match(func, [' ']).length) return;\n\t\t// Match any ALL|DISTINCT flags; also assert that it's an aggr function\n\t\tconst [ , name, allOrDistinct, args = '' ] = /^(\\w+)\\((?:\\s+)?(?:(ALL|DISTINCT)\\s+)?([\\s\\S]+)?\\)$/i.exec(func);\n\t\tif (!this.names.flat().includes(name.toUpperCase())) return;\n\t\t// Break off any ORDER BY clause, then render\n\t\tconst [ , $args, orderByClause ] = /^([\\s\\S]+)(?:\\s+(ORDER\\s+BY\\s+.+))$/i.exec(args) || [ , args ];\n\t\tconst instance = super.parse(context, `${ name }(${ $args })`, parseCallback);\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tif (orderByClause) instance.orderBy(parseCallback(instance, orderByClause, [OrderByClause]));\n\t\telse if (over) instance.over(parseCallback(instance, over, [WindowSpec]));\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { fn: (context, name, ...args) => this.names.flat().includes(name?.toUpperCase()) && new this(context) };\n\n\tstatic names = [\n\t\t[\n\t\t\t'AVG', \n\t\t\t'BIT_AND', \n\t\t\t'BIT_OR', \n\t\t\t'BIT_XOR', \n\t\t\t'COUNT', \n\t\t\t'JSON_ARRAYAGG', \n\t\t\t'JSON_OBJECTAGG', \n\t\t\t'MAX', \n\t\t\t'MIN',\n\t\t\t'STDDEV_POP',\n\t\t\t'STDDEV',\n\t\t\t'STD',\n\t\t\t'STDDEV_SAMP',\n\t\t\t'SUM',\n\t\t\t'VAR_POP',\n\t\t\t'VARIANCE',\n\t\t\t'VAR_SAMP',\n\t\t\t// May not apply to OVER()\n\t\t\t'GROUP_CONCAT',\n\t\t\t'GROUP_CONCAT_WS',\n\t\t],\n\t\t[\n\t\t\t'CUME_DIST', \n\t\t\t'DENSE_RANK', \n\t\t\t'FIRST_VALUE', \n\t\t\t'LAG', \n\t\t\t'LAST_VALUE', \n\t\t\t'LEAD', \n\t\t\t'NTH_VALUE', \n\t\t\t'NTLE',\n\t\t\t'PERCENT_RANK',\n\t\t\t'RANK',\n\t\t\t'ROW_NUMBER',\n\t\t],\n\t\t[\n\t\t\t'ANY_VALUE', \n\t\t\t'COLUMN', \n\t\t\t'COLUMNS', \n\t\t\t'GROUPING', \n\t\t]\n\t];\n}", "\nimport AbstractAliasableExpr from './AbstractAliasableExpr.js';\nimport CaseConstruct from './case/CaseConstruct.js';\nimport JsonPath from './json/JsonPath.js';\nimport Path from './Path.js';\nimport Func from './Func.js';\nimport Aggr from './Aggr.js';\n\nexport default class Field extends AbstractAliasableExpr {\n\n\t/**\n\t * Plots a path\n\t * \n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tpath(lhs, operator, rhs) { return (this.build('EXPR', [lhs, operator, rhs], JsonPath.OPERATORS.includes(operator) ? JsonPath : Path, 'path'), this); }\n\n\t/**\n\t * Function call\n\t * \n\t * @param String name\n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tfn(name, ...args) { return (this.build('EXPR', [name, ...args], Aggr.names.flat().includes(name.toUpperCase()) ? Aggr : Func, 'fn'), this); }\n\n\t/**\n\t * Case construct\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tcase(...fns) { return (this.build('EXPR', fns, CaseConstruct), this); }\n\n}", "\nimport Lexer from '../../../Lexer.js';\nimport AbstractNode from '../../../AbstractNode.js';\nimport WindowSpec from './WindowSpec.js';\n\nexport default class WindowClause extends AbstractNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tWINDOWS_LIST = [];\n\n\t/**\n\t * Adds a window spec.\n\t * \n\t * @param Array windows\n\t * \n\t * @returns this\n\t */\n\tdefine(...windows) { return this.build('WINDOWS_LIST', windows, WindowSpec); }\n\n\ttoJSON() { return { window_list: this.WINDOWS_LIST.map(w => w.toJSON()) }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.window_list)) return;\n\t\tconst instance = new this(context);\n\t\tinstance.define(...json.window_list);\n\t\treturn instance;\n\t}\n\n\t\n\tstringify() { return `WINDOW ${ this.WINDOWS_LIST.join(',') }`; }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ windowMatch, windowSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!windowMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const spec of Lexer.split(windowSpec, [','])) {\n\t\t\tinstance.define(parseCallback(instance, spec.trim(), [Window]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW';\n}", "\nimport Lexer from '../../../Lexer.js';\nimport AbstractGroupBy from './AbstractGroupBy.js';\n\nexport default class GroupByClause extends AbstractGroupBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\n\tstringify() { return ['GROUP BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr, parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport Placeholder from '../../components/Placeholder.js';\nimport JoinClause from '../../components/JoinClause.js';\nimport Condition from '../../components/Condition.js';\nimport Assertion from '../../components/Assertion.js';\nimport Field from '../../components/Field.js';\nimport Table from '../../components/Table.js';\nimport Path from '../../components/Path.js';\nimport Aggr from '../../components/Aggr.js';\nimport WindowClause from './window/WindowClause.js';\nimport GroupByClause from './groupby/GroupByClause.js';\nimport OrderByClause from './orderby/OrderByClause.js';\n\nexport default class SelectStatement extends AbstractStatement {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tSELECT_LIST = [];\n\tFROM_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tGROUP_BY_CLAUSE = null;\n\tHAVING_CLAUSE = null;\n\tWINDOW_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tOFFSET_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\tUNION_CLAUSE = null;\n\n\t/**\n\t * @properties Array\n\t */\n\tAGGRS = [];\n\tPATHS = [];\n\tVARS = [];\n\tSUBQUERIES = [];\n\n\t/**\n\t * Builds the statement's SELECT_LIST\n\t * \n\t * .select(\n\t * \t\t'col1',\n\t * \t\tf1 => f1.name('col2').as('alias1'),\n\t * \t\tf2 => f1.func('CONCAT_WS', i => i.name(...) ),\n\t * \t\tf3 => f1.aggr('SUM', 'col1'),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.existing('w1') ) ),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.partitionBy( p => p.name('col1') ) ) ),\n\t * \t\tf3 => f1.math('+', 'col1', 'col2'),\n\t * \t\tf3 => f1.math('/', i => i.name('col1'), i => i.func('AVG', ... ) ),\n\t * \t\tf3 => f1.case( c => c.given(2), c => c.when(2).then(4), c => c.else(4) ).as('alias3'),\n\t * \t\tf4 => f1.query(\n\t * \t\t\tq => q.select().from()...\n\t * \t\t).as('alias4'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tselect(...fields) {\n\t\tif (!arguments.length) return this.SELECT_LIST;\n\t\treturn this.build('SELECT_LIST', fields, Field);\n\t}\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tables) { return (this.build('FROM_LIST', tables, Table), this.FROM_LIST[this.FROM_LIST.length - 1]/* for: .as() */); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\twhere(...wheres) {\n\t\tif (!arguments.length) return this.WHERE_CLAUSE;\n\t\treturn this.build('WHERE_CLAUSE', wheres, Condition, 'and');\n\t}\n\n\t/**\n\t * Builds the statement's GROUP_BY_CLAUSE\n\t * \n\t * .groupBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2'),\n\t * \t\tby => by.func('CONCAT_WS', ... ),\n\t * \t\tby => by.case(c => c.given(2), c => c.when(2).then(4), c => c.else(4) ),\n\t * ).withRollup()\n\t * \n\t * @return Void\n\t */\n\tgroupBy(...groupBys) {\n\t\tif (!arguments.length) return this.GROUP_BY_CLAUSE;\n\t\treturn (this.build('GROUP_BY_CLAUSE', groupBys, GroupByClause, 'criterion'), this.GROUP_BY_CLAUSE/* for: .withRollup() */);\n\t}\n\n\t/**\n\t * Builds the statement's HAVING_CLAUSE\n\t * \n\t * .having(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\thaving(...wheres) {\n\t\tif (!arguments.length) return this.HAVING_CLAUSE;\n\t\treturn this.build('HAVING_CLAUSE', wheres, Condition, 'and');\n\t}\n\n\t/**\n\t * Builds the statement's WINDOW_CLAUSE\n\t * \n\t * .window(\n\t * \t\tw1 => w1.name('w1').partitionBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t).orderBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t),\n\t * \t\tw2 => w2.name('w2').extends('w1')\n\t * )\n\t * \n\t * @return Void\n\t */\n\twindow(...windows) {\n\t\tif (!arguments.length) return this.WINDOW_CLAUSE;\n\t\treturn this.build('WINDOW_CLAUSE', windows, WindowClause, 'define');\n\t}\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) {\n\t\tif (!arguments.length) return this.ORDER_BY_CLAUSE;\n\t\treturn (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */);\n\t}\n\n\t/**\n\t * Sets the statement's OFFSET_CLAUSE\n\t * \n\t * .offset(3);\n\t * \n\t * @return string\n\t */\n\toffset(offset) {\n\t\tif (!arguments.length) return this.OFFSET_CLAUSE;\n\t\tif (typeof offset !== 'number') throw new Error(`Offsets must be of type number.`);\n\t\tthis.OFFSET_CLAUSE = offset;\n\t}\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!arguments.length) return this.LIMIT_CLAUSE;\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\n\t/**\n\t * Sets the statement's UNION_CLAUSE\n\t * \n\t * .union(query);\n\t * \n\t * @return string\n\t */\n\tunion(...union) {\n\t\tif (!arguments.length) return this.UNION_CLAUSE;\n\t\treturn (this.build('UNION_CLAUSE', union, this.constructor, 'select'), this.UNION_CLAUSE/* for: chaining purposes */);\n\t}\n\n\tget expandable() { return this.PATHS.length > 0 || this.SUBQUERIES.some(q => q.expandable); }\n\n\tasync expand(inPlace = false) {\n\t\tconst instance = !inPlace ? this.clone() : this;\n\t\tif (!instance.expandable) return instance;\n\t\tfor (const path of instance.PATHS) await path.plot();\n\t\tfor (const query of instance.SUBQUERIES) await query.expand(true);\n\t\treturn instance;\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tselect_list: this.SELECT_LIST.map(s => s.toJSON()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJSON()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJSON()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJSON(),\n\t\t\tgroup_by_clause: this.GROUP_BY_CLAUSE?.toJSON(),\n\t\t\thaving_clause: this.HAVING_CLAUSE?.toJSON(),\n\t\t\twindow_clause: this.WINDOW_CLAUSE?.toJSON(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJSON(),\n\t\t\toffset_clause: this.OFFSET_CLAUSE,\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\tunion_clause: this.UNION_CLAUSE,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.select_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.select(...json.select_list);\n\t\tif (json.from_list?.length) instance.from(...json.from_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.group_by_clause) instance.groupBy(json.group_by_clause);\n\t\tif (json.having_clause) instance.having(json.having_clause);\n\t\tif (json.window_clause) instance.window(json.window_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.offset_clause) instance.offset(json.offset_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\tif (json.union_clause) instance.union(json.union_clause);\n\t\treturn instance;\n\t}\n\t\n\tstringify(params = {}) {\n\t\tconst sql = ['SELECT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.SELECT_LIST.join(', '));\n\t\tif (this.FROM_LIST.length) sql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.GROUP_BY_CLAUSE) sql.push(this.GROUP_BY_CLAUSE);\n\t\tif (this.HAVING_CLAUSE) sql.push('HAVING', this.HAVING_CLAUSE);\n\t\tif (this.WINDOW_CLAUSE) sql.push(this.WINDOW_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.OFFSET_CLAUSE) sql.push('OFFSET', this.OFFSET_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', (Array.isArray(this.LIMIT_CLAUSE) ? this.LIMIT_CLAUSE : [this.LIMIT_CLAUSE]).join(','));\n\t\tif (this.UNION_CLAUSE) sql.push('UNION', this.UNION_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, allOrDistinct, body ] = /^SELECT\\s+(?:(WITH\\s+UAC)\\s+)?(ALL|DISTINCT)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, join:JoinClause, where:'WHERE', groupBy:GroupByClause, having:'HAVING', window:WindowClause, orderBy:OrderByClause, offset:'OFFSET', limit:'LIMIT', union:'UNION' };\n\t\tconst { tokens: [ fieldsSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// SELECT_LIST\n\t\tfor (const fieldExpr of Lexer.split(fieldsSpec, [','])) {\n\t\t\tconst field = parseCallback(instance, fieldExpr.trim(), [Field]);\n\t\t\tinstance.select(field);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// FROM_LIST\n\t\t\tif (clauseKey === 'from') {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\t\t\tinstance.from(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE|HAVING_CLAUSE\n\t\t\telse if (['where', 'having'].includes(clauseKey)) {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t\t// UNION\n\t\t\telse if (clauseKey === 'UNION') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [this]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t\t// OFFSET|LIMIT\n\t\t\telse if (['offset', 'limit'].includes(clauseKey)) {\n\t\t\t\tconst args = tokens.shift().split(',').map(s => parseInt(s.trim()));\n\t\t\t\tinstance[clauseKey](...args);\n\t\t\t}\n\t\t\t// JOIN|GROUP_BY|WINDOW|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:TABLE_NODE') return this.FROM_LIST[0];\n\t\tif (['event:CONNECTED', 'event:DISCONNECTED'].includes(request)) {\n\t\t\tlet list;\n\t\t\tif (args[0] instanceof Aggr) list = this.AGGRS;\n\t\t\tif (args[0] instanceof Path && !(args[0].CONTEXT instanceof Path)) list = this.PATHS;\n\t\t\tif (args[0] instanceof Placeholder) list = this.VARS;\n\t\t\tif (args[0] instanceof SelectStatement) list = this.SUBQUERIES;\n\t\t\tif (request === 'event:DISCONNECTED' && list) list.splice(list.indexOf(args[0]), 1);\n\t\t\telse if (request === 'event:CONNECTED' && list) list.push(args[0]);\n\t\t}\n\t\treturn super.$trace(request, ...args);\n\t}\n}", "import Lexer from '../Lexer.js';\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Select from '../dml/select/SelectStatement.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Expr from './Expr.js';\r\n\r\nexport default class Parens extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tEXPR;\r\n\r\n\t/**\r\n\t * Sets the expr\r\n\t * \r\n\t * @param Array fns\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\texpr(...fns) {\r\n\t\tif (!arguments.length) return this.EXPR;\r\n\t\treturn (this.build('EXPR', fns, [Select, ...Expr.Types]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * Helper method to start a subquery.\r\n\t * \r\n\t * @param  Array fns\r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tquery(...fns) {\r\n\t\tif (!arguments.length) return this.EXPR instanceof Select ? this.EXPR : null;\r\n\t\treturn (this.build('EXPR', fns, Select), this);\r\n\t}\r\n\r\n\ttoJSON() { return { expr: this.EXPR?.toJSON(), flags: this.FLAGS.slice(), }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!json?.expr || Object.keys(json).length !== (json.flags ? 2 : 1)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.expr(json.expr);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return '(' + this.EXPR.stringify() + ')'; }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')') || Lexer.match(expr, [' ']).length && Lexer.split(expr, []).length === 2/* recognizing the first empty slot */) return;\r\n\t\treturn (new this(context)).expr(parseCallback(context, _unwrap(expr, '(', ')'), [Select, ...Expr.Types]));\r\n\t}\r\n}", "import Lexer from '../Lexer.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Assertion from './Assertion.js';\r\nimport Parens from './Parens.js';\r\n\r\nexport default class Condition extends AbstractNode {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tLOGIC = '';\r\n\tASSERTIONS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, logic) {\r\n\t\tsuper(context);\r\n\t\tthis.LOGIC = logic;\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an AND logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tand(...assertions) {\r\n\t\tif (this.LOGIC === 'OR') return (new this.constructor(this)).and(this, ...assertions);\r\n\t\tthis.LOGIC = 'AND';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion,Parens]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an OR logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tor(...assertions) {\r\n\t\tif (this.LOGIC === 'AND') return (new this.constructor(this)).or(this, ...assertions);\r\n\t\tthis.LOGIC = 'OR';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion,Parens]), this);\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tlogic: this.LOGIC,\r\n\t\t\tassertions: this.ASSERTIONS.map(o => o.toJSON()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json?.logic !== 'string' || !/AND|OR/i.test(json.logic) || !Array.isArray(json.assertions)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance[json.logic.toLowerCase()](...json.assertions);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return this.ASSERTIONS.map(expr => expr instanceof Condition ? `(${ expr.stringify() })` : expr.stringify()).join(' ' + this.LOGIC + ' '); }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const logic of ['AND', 'OR']) {\r\n\t\t\tconst tokens = Lexer.split(expr, [`\\\\s+${ logic }\\\\s+`], { useRegex: 'i' });\r\n\t\t\tif (tokens.length > 1) {\r\n\t\t\t\tconst instance = new this(context, logic);\r\n\t\t\t\tfor (const $expr of tokens) instance[logic.toLowerCase()](parseCallback(instance, $expr));\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "import Lexer from '../Lexer.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Expr from './Expr.js';\r\n\r\nexport default class TypeCast extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERAND = null;\r\n\tTYPE = '';\r\n\tSYNTAX2 = false;\r\n\r\n\tcast(operand, type, syntax2 = false) {\r\n\t\tthis.TYPE = type;\r\n\t\tthis.SYNTAX2 = syntax2;\r\n\t\treturn this.build('OPERAND', [operand], Expr.Types);\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\toperand: this.OPERAND?.toJSON(),\r\n\t\t\ttype: this.TYPE,\r\n\t\t\tsyntax2: this.SYNTAX2,\r\n\t\t\tflags: this.FLAGS\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!json?.operand || !json?.type) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.cast(json.operand, json.type, json.syntax2);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() {\r\n\t\tif (this.SYNTAX2) return `${ this.OPERAND }::${ this.TYPE }`;\r\n\t\treturn `CAST(${ this.OPERAND } AS ${ this.TYPE })`;\r\n\t}\r\n\t \r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tlet operand, type, syntax2 = false;\r\n\t\tif (/^CAST(?:\\s+)?\\([\\s\\S]+\\)$/i.test(expr)) {\r\n\t\t\tconst [ , parens ] = Lexer.split(expr, []);\r\n\t\t\t[operand, type] = Lexer.split(parens.slice(1, -1), [`AS`], { useRegex: 'i' });\r\n\t\t} else {\r\n\t\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\t\t[operand, type] = Lexer.split(expr, [`::`]);\r\n\t\t\tif (!type) return;\r\n\t\t\tsyntax2 = true;\r\n\t\t}\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.cast(parseCallback(instance, operand.trim()), type.trim(), syntax2);\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "import Lexer from '../Lexer.js';\r\nimport AbstractNode from '../AbstractNode.js';\r\nimport Expr from './Expr.js';\r\n\r\nexport default class Math extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic operations\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcalc(operator, ...operands) {\r\n\t\tif (this.OPERATOR && this.OPERATOR !== operator) {\r\n\t\t\treturn (new this.constructor(this)).calc(operator, this, ...operands);\r\n\t\t}\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"+\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsum(...operands) { return this.calc('+', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"-\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsub(...operands) { return this.calc('-', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"/\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tdiv(...operands) { return this.calc('/', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"*\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\ttimes(...operands) { return this.calc('*', ...operands); }\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJSON()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (typeof json?.operator !== 'string' || !/\\+|\\-|\\*|\\//.test(json.operator) || !Array.isArray(json.operands)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.calc(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tstringify() { return this.OPERANDS.join(` ${ this.OPERATOR } `); }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const operator of ['\\\\*', '\\\\/','\\\\+', '\\\\-']) {\r\n\t\t\tlet { tokens, matches } = Lexer.lex(expr, [`(\\\\s+)?${ operator }(\\\\s+)?`], { useRegex: 'i' });\r\n\t\t\tif (tokens.filter(s => s.trim()).length < 2) continue; // Note that we're not simply asking matches.length; think SELECT * FROM\r\n\t\t\treturn new this(context, matches.pop().trim(), ...tokens.map(expr => parseCallback(context, expr.trim())));\r\n\t\t}\r\n\t}\r\n}", "import Lexer from '../../Lexer.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Expr from '../Expr.js';\r\n\r\nexport default class StrJoin extends AbstractNode {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tSTRINGS = [];\r\n\r\n\tjoin(...strings) { return this.build('STRINGS', strings, Expr.Types); }\r\n\r\n\ttoJSON() { return { strings: this.STRINGS.map(str => str.toJSON()), flags: this.FLAGS, }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!Array.isArray(json?.strings)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.join(...json.strings);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return this.STRINGS.join(' || '); }\r\n\t \r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tconst tokens = Lexer.split(expr, [`||`]);\r\n\t\tif (tokens.length < 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.join(...tokens.map(expr => parseCallback(instance, expr.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "import CaseConstruct from './case/CaseConstruct.js';\r\nimport Identifier from './Identifier.js';\r\nimport Condition from './Condition.js';\r\nimport Assertion from './Assertion.js';\r\nimport TypeCast from './TypeCast.js';\r\nimport Parens from './Parens.js';\r\nimport Path from './Path.js';\r\nimport Math from './Math.js';\r\nimport Aggr from './Aggr.js';\r\nimport Func from './Func.js';\r\nimport Json from './json/Json.js';\r\nimport JsonPath from './json/JsonPath.js';\r\nimport StrJoin from './str/StrJoin.js';\r\nimport Str from './str/Str.js';\r\nimport Num from './Num.js';\r\nimport Literal from './Literal.js';\r\nimport Placeholder from './Placeholder.js';\r\n\r\nexport default class Expr {\r\n\r\n\t/**\r\n\t * Cast an input to a node\r\n\t */\r\n\tstatic cast(context, json, Types = this.Types) {\r\n\t\tif (typeof json === 'function') {\r\n\t\t\tif (Types.length === 1) {\r\n\t\t\t\tconst instance = new Types[0](context);\r\n\t\t\t\tjson(instance);\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t\tlet instance;\r\n\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\tconst $instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (typeof Type.factoryMethods[methodName] === 'function' && Type.factoryMethods[methodName](context, ...args)) : (typeof Type.prototype[methodName] === 'function' && new Type(context))), null);\r\n\t\t\t\tif (!$instance) throw new Error(`Unknown method: ${ methodName }()`);\r\n\t\t\t\tinstance = $instance;\r\n\t\t\t\tif ($instance[methodName]) return $instance[methodName](...args); // Foward the call\r\n\t\t\t\tfor (const f of args) f($instance); // It's just magic method mode\r\n\t\t\t};\r\n\t\t\tjson(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\treturn this.fromJSON(context, json, Types);\r\n\t}\r\n\r\n\tstatic fromJSON(context, arg, Types = this.Types) {\r\n\t\tconst instance = Types.find(t => arg instanceof t) ? arg : Types.reduce((prev, Type) => prev || Type.fromJSON(context, arg), null);\r\n\t\tif (!instance) throw new Error(``);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) { return parseCallback(context, expr, this.Types); }\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tstatic get Types() {\r\n\t\treturn [\r\n\t\t\tParens,\r\n\t\t\tCaseConstruct,\r\n\t\t\tStrJoin,\r\n\t\t\tCondition,\r\n\t\t\tPath, // Must come before Assertion; think: ~> vs >\r\n\t\t\tJsonPath, // ...\r\n\t\t\tAssertion,\r\n\t\t\tMath,\r\n\t\t\tTypeCast, // After anything with operators, but before function types; think CAST(c as text) vs CAST()\r\n\t\t\tAggr,\r\n\t\t\tFunc,\r\n\t\t\tJson,\r\n\t\t\tNum,\r\n\t\t\tStr,\r\n\t\t\tPlaceholder,\r\n\t\t\tIdentifier,\r\n\t\t\tLiteral,\r\n\t\t];\r\n\t}\r\n}", "import AbstractNode from '../../AbstractNode.js';\r\nimport Expr from '../../components/Expr.js';\r\nimport EntriesAPI from './EntriesAPI.js';\r\n\r\nexport default class ValuesList extends EntriesAPI(AbstractNode) {\r\n\tstatic Types = Expr.Types;\r\n}", "import { _isObject } from '@webqit/util/js/index.js';\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport { _beforeLast, _afterLast } from '@webqit/util/str/index.js';\nimport Identifier from '../../components/Identifier.js';\nimport Literal from '../../components/Literal.js';\nimport Str from '../../components/str/Str.js';\nimport ColumnsList from './ColumnsList.js';\nimport ValuesList from './ValuesList.js';\n\nexport default Class => class extends Class {\n\n    /**\n     * @returns Bool\n     */\n    get dimensional() { return false; }\n\n    /**\n     * @returns Node\n     */\n    async resolveDimensions(inPlace = false) {\n        if (!inPlace) return await this.clone().resolveDimensions(true);\n        // ----\n        const action = this.constructor.name === 'UpdateStatement' ? 'update' : (this.onConflict() ? 'upsert' : 'insert');\n        const rootSchema = await this.client.structure({ depth: 2, inSearchPathOrder: true });\n        const tblName = this.$trace('get:TABLE_NAME');\n        const dbName = this.$trace('get:DATABASE_NAME') || rootSchema.findPath(tblName, true);\n        const tblSchema = rootSchema.database(dbName).table(tblName);\n\t\tconst lhsTablePK = getPrimaryKey(tblSchema);\n\t\tconst columnsDef = Object.fromEntries(tblSchema.COLUMNS.map(c => [c.name(), c]));\n\t\tconst relations = { dependencies: new Map, dependents: new Map };\n        const offload = (rowOffset, lhsTableFK, valEntry) => {\n            if (columnsDef[lhsTableFK]?.foreignKey() && [Literal].some(x => valEntry instanceof x) && _isObject(valEntry.INPUT)) {\n                const fkDef = columnsDef[lhsTableFK].foreignKey();\n                const rhsTableName = fkDef.targetTable();\n                const rhsTablePK = fkDef.targetColumns()[0];\n                if (!relations.dependencies.has(rhsTableName)) relations.dependencies.set(rhsTableName, new Map);\n                relations.dependencies.get(rhsTableName).set([rowOffset, lhsTableFK, rhsTablePK], valEntry);\n                return;\n            }\n            if (lhsTableFK.includes(':') && !columnsDef[lhsTableFK] && [Literal].some(x => valEntry instanceof x) && Array.isArray(valEntry.INPUT)) {\n                const [ rhsTableName, rhsTableFK ] = [ _beforeLast(lhsTableFK, ':'), _afterLast(lhsTableFK, ':') ];\n                if (!relations.dependents.has(rhsTableName)) relations.dependents.set(rhsTableName, new Map);\n                relations.dependents.get(rhsTableName).set([rowOffset, lhsTablePK, rhsTableFK], valEntry);\n                return true;\n            }\n            if (!columnsDef[lhsTableFK]) {\n                const targetIdent = Identifier.fromJSON(this, [ dbName, tblName ]);\n                throw new Error(`Unknown column name ${ targetIdent }.\"${ lhsTableFK }\"`);\n            }\n        };\n        // ----\n        if (this.set())/*Both Insert & Update*/ {\n            this.set().filterInplace((target_s, value_s, colOffset) => {\n                if (target_s instanceof ColumnsList) {\n                    if (value_s instanceof ValuesList) {\n                        return value_s.filterInplace((subValEntry, subColOffset) => {\n                            const lhsTableFK = target_s.getEntry(subColOffset).name().toLowerCase();\n                            const offloaded = offload(0, lhsTableFK, subValEntry);\n                            if (offloaded) target_s.removeEntry(subColOffset);\n                            return !offloaded;\n                        }).length;\n                    }\n                    return true;\n                }\n                const lhsTableFK = target_s.name().toLowerCase();\n                return !offload(0, lhsTableFK, value_s);\n            });\n        } else if (this.columns?.() && this.values().length) {\n            this.values().forEach((rowEntry, rowOffset) => rowEntry.filterInplace((valEntry, colOffset) => {\n                const lhsTableFK = this.columns().getEntry(colOffset).name().toLowerCase();\n                const offloaded = offload(rowOffset, lhsTableFK, valEntry);\n                if (offloaded) this.columns().removeEntry(colOffset);\n                return !offloaded;\n            }));\n        }\n        // Hook for dependencies\n\t\tconst preHook = async () => {\n\t\t\tfor (const [ rhsTableName, catalog ] of relations.dependencies) {\n\t\t\t\tconst catalogStructure = [...catalog.keys()];\n\t\t\t\tconst rhsPayload = [...catalog.values()];\n\t\t\t\tconst rhsReturns = await this.client.database(dbName).table(rhsTableName)[action](rhsPayload.map(node => node.INPUT), { experimentalRecursive: true, returning: catalogStructure[0][2]/*rhsTablePK*/ });\n\t\t\t\tcatalogStructure.forEach(([ /*rowOffset*/, /*lhsTableFK*/, rhsTablePK ], mapKey_PayloadOffset) => {\n\t\t\t\t\t// Apply PK value from dimension row to base row\n                    const returnValue = (pkValue => typeof pkValue === 'number' ? pkValue : Str.fromJSON(this, pkValue))(rhsReturns[mapKey_PayloadOffset][rhsTablePK]);\n\t\t\t\t\trhsPayload[mapKey_PayloadOffset].literal(returnValue);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\t// Hook for dependents\n        const originalReturning = this.returning().slice();\n        const originalReturningFor = key => originalReturning.find(field => [key,'*'].includes(field.expr().name?.()));\n\t\tconst postHook = async lhsReturns => {\n\t\t\tfor (const [ rhsTableName, catalog ] of relations.dependents) {\n\t\t\t\tconst catalogStructure = [...catalog.keys()];\n\t\t\t\tconst rhsPayloadMap = [...catalog.values()];\n\t\t\t\tconst rhsPayload = [];\n                let rhsReturningAll;\n\t\t\t\tcatalogStructure.forEach(([ rowOffset, lhsTablePK, rhsTableFK ], mapKey_PayloadListOffset) => {\n\t\t\t\t\t// Apply PK value from base row to every row in dimension paylaod and flatten payload\n\t\t\t\t\trhsPayloadMap[mapKey_PayloadListOffset].INPUT.forEach(row => rhsPayload.push({ ...row, [rhsTableFK]: lhsReturns[rowOffset][lhsTablePK] }));\n\t\t\t\t\t// Keep coordinates of flattened\n                    const originalLhsFk = `${ rhsTableName }:${ rhsTableFK }`;\n\t\t\t\t\tif (originalReturningFor(originalLhsFk)) {\n                        rhsReturningAll = true;\n\t\t\t\t\t\tconst payloadOffsetLen = rhsPayloadMap[mapKey_PayloadListOffset].INPUT.length, payloadOffsetStart = rhsPayload.length - payloadOffsetLen;\n\t\t\t\t\t\tlhsReturns[rowOffset][originalLhsFk] = rhsReturns => rhsReturns.slice(payloadOffsetStart, payloadOffsetStart + payloadOffsetLen);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// Save payload (flattened)\n\t\t\t\tconst rhsReturns = await this.client.database(dbName).table(rhsTableName)[action](rhsPayload, { experimentalRecursive: true, returning: rhsReturningAll && '*' });\n\t\t\t\t// Return list should now map to original field\n\t\t\t\tif (rhsReturningAll) {\n\t\t\t\t\tlhsReturns.forEach(row => Object.keys(row).forEach(key => {\n\t\t\t\t\t\tif (typeof row[key] === 'function') row[key] = row[key](rhsReturns);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Is caller expecting a returning list???\n\t\t\tif (!originalReturning.length) return lhsReturns.length;\n\t\t\tif (!originalReturningFor(lhsTablePK)) {\n\t\t\t\tlhsReturns = lhsReturns.map(row => { const { [lhsTablePK]: _, ...$row } = row; return $row; });\n\t\t\t}\n\t\t\treturn lhsReturns;\n\t\t};\n\t\t// Our final columns, values, modifiers:\n\t\tif (relations.dependents.size && !originalReturningFor(lhsTablePK)) {\n            // We need this PK column and will exclude it from final return list afterward\n\t\t\tthis.RETURNING_LIST.push(Identifier.fromJSON(this, lhsTablePK));\n\t\t}\n\t\treturn [ this, preHook, postHook ];\n    }\n\n    $trace(request, ...args) {\n\t\tif (['event:CONNECTED', 'event:DISCONNECTED'].includes(request)) {\n\t\t\tif (request === 'event:DISCONNECTED');\n\t\t\telse if (request === 'event:CONNECTED');\n\t\t}\n\t\treturn super.$trace(request, ...args);\n\t}\n}\n\nconst getPrimaryKey = tblSchema => {\n\tconst primaryKey = tblSchema.primaryKey()?.columns()[0];\n\tif (!primaryKey) throw new Error(`Cannot resolve primary key name for implied record.`);\n\treturn primaryKey;\n};", "import Lexer from '../../Lexer.js';\r\nimport { _wrapped } from '@webqit/util/str/index.js';\r\nimport AbstractNode from '../../AbstractNode.js';\r\nimport Identifier from '../../components/Identifier.js';\r\nimport ColumnsList from './ColumnsList.js';\r\nimport ValuesList from './ValuesList.js';\r\nimport Expr from '../../components/Expr.js';\r\n\r\nexport default class AssignmentList extends AbstractNode {\r\n\r\n    /**\r\n\t * Instance properties\r\n\t */\r\n    ENTRIES = [];\r\n\r\n    get length() { return this.ENTRIES.length; }\r\n\t\r\n    set(target_s, value_s) {\r\n\t\tif (Array.isArray(target_s)) {\r\n\t\t\ttarget_s = ColumnsList.fromJSON(this, target_s);\r\n\t\t\tif (Array.isArray(value_s)) value_s = ValuesList.fromJSON(this, value_s);\r\n\t\t\telse value_s = Expr.cast(this, value_s);\r\n\t\t} else {\r\n\t\t\ttarget_s = target_s instanceof AbstractNode ? target_s : Identifier.fromJSON(this, target_s);\r\n\t\t\tvalue_s = value_s instanceof AbstractNode ? value_s : Expr.cast(this, value_s);\r\n\t\t}\r\n\t\tthis.ENTRIES.push([target_s, value_s]);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tentries(...entries) {\r\n\t\tif (!arguments.length) return this.ENTRIES;\r\n\t\tfor (const [target_s, value_s] of entries) this.set(target_s, value_s);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tgetEntry(ref) {\r\n\t\tif (typeof ref === 'number') return this.ENTRIES[ref];\r\n\t\treturn this.ENTRIES.find(([target_s]) => target_s instanceof Identifier && target_s.name().toLowerCase() === ref.toLowerCase());\r\n\t}\r\n\r\n\tremoveEntry(ref) {\r\n\t\tconst entry = this.getEntry(ref);\r\n\t\tif (entry) this.ENTRIES = this.ENTRIES.filter($entry => $entry !== entry);\r\n\t\tif (entry) entry.forEach(e => e.$trace?.('event:DISCONNECTED', e));\r\n\t\treturn entry;\r\n\t}\r\n\r\n\tfilterInplace(callback) {\r\n\t\treturn this.ENTRIES = this.ENTRIES.filter((entry, i) => {\r\n\t\t\tconst shouldRetain = callback(entry[0], entry[1], i);\r\n\t\t\tif (!shouldRetain) entry.forEach(e => e.$trace?.('event:DISCONNECTED', e));\r\n\t\t\treturn shouldRetain;\r\n\t\t});\r\n\t}\r\n\r\n\ttoJSON() { return { entries: this.ENTRIES.map(([target_s, value_s]) => [target_s.toJSON(), value_s.toJSON()]), }; }\r\n\r\n\tstatic fromJSON(context, json) {\r\n\t\tif (!Array.isArray(json?.entries)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tfor (let [target_s, value_s] of json.entries) {\r\n\t\t\tinstance.set(target_s, value_s);\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return `\\n\\t${ this.ENTRIES.map(([target_s, value_s]) => `${ target_s } = ${ value_s }`).join(',\\n\\t') }`; }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst instance = new this(context);\r\n\t\tfor (const assignmentExpr of Lexer.split(expr, [','])) {\r\n\t\t\tconst [target_s, value_s] = Lexer.split(assignmentExpr, ['=']).map(s => s.trim()).filter(s => s);\r\n\t\t\tif (!value_s) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\tif (_wrapped(target_s, '(', ')')) {\r\n\t\t\t\tconst targets = parseCallback(instance, value_s.trim(), [ColumnsList]);;\r\n\t\t\t\tif (!_wrapped(value_s, '(', ')')) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\t\tconst values = /^\\((\\s+)?SELECT\\s+/i.test(value_s) \r\n\t\t\t\t\t? parseCallback(instance, value_s.trim()) \r\n\t\t\t\t\t: parseCallback(instance, value_s.trim(), [ValuesList]);\r\n\t\t\t\tinstance.set(targets, values);\r\n\t\t\t} else {\r\n\t\t\t\tconst target = parseCallback(instance, target_s);\r\n\t\t\t\tconst value = parseCallback(instance, value_s);\r\n\t\t\t\tinstance.set(target, value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../../Lexer.js';\nimport { _unwrap, _wrapped } from '@webqit/util/str/index.js';\nimport AssignmentList from './AssignmentList.js';\nimport Condition from '../../components/Condition.js';\nimport Assertion from '../../components/Assertion.js';\nimport Identifier from '../../components/Identifier.js';\n\nexport default class OnConflictClause extends AssignmentList {\n\n    /**\n\t * Instance properties\n\t */\n    WHERE_CLAUSE = null;\n\tCONFLICT_TARGET = [];\n\n\t/**\n\t * Builds the statement's CONFLICT_TARGET\n\t * \n\t * @return this\n\t */\n\ttarget(...args) {\n\t\tif (!arguments.length) return this.CONFLICT_TARGET;\n\t\treturn (this.build('CONFLICT_TARGET', args, Identifier), this);\n\t}\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return this\n\t */\n\twhere(...wheres) {\n\t\tif (!arguments.length) return this.WHERE_CLAUSE;\n\t\treturn (this.build('WHERE_CLAUSE', wheres, Condition, 'and'), this);\n\t}\n\n\ttoJSON() { return { ...super.toJSON(), conflict_target: this.CONFLICT_TARGET.map(c => c.toJSON()), where_clause: this.WHERE_CLAUSE?.toJSON(), }; }\n\n\tstatic fromJSON(context, json) {\n\t\tconst instance = super.fromJSON(context, json);\n\t\tif (!instance) return;\n\t\tif (json.conflict_target) instance.target(...[].concat(json.conflict_target));\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = [];\n        if (this.params.dialect === 'mysql') sql.push('ON DUPLICATE KEY UPDATE');\n        else { sql.push(`ON CONFLICT ${ this.CONFLICT_TARGET.length ? `(${ this.CONFLICT_TARGET.join(', ') })` : '' } ${ this.ENTRIES.length ? 'DO UPDATE SET' : 'DO NOTHING' }`); }\n        sql.push(super.stringify());\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ onConflictMatch, conflictTarget, action, updateSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!onConflictMatch) return;\n        if (/DO\\s+NOTHING/i.test(action)) return new this(context);\n        const [assignmentList, whereSpec] = Lexer.split(updateSpec, ['WHERE'], { ci: true });\n        const instance = super.parse(context, assignmentList, parseCallback);\n        if (conflictTarget) {\n\t\t\tconst conflictTargetKeyComp = Lexer.split(_wrapped(conflictTarget, '(', ')') ? _unwrap(conflictTarget, '(', ')') : conflictTarget, [',']).map(s => parseCallback(instance, s.trim(), [Identifier]));\n\t\t\tinstance.target(...conflictTargetKeyComp);\n\t\t}\n        if (whereSpec) instance.where(parseCallback(instance, whereSpec.trim(), [Condition,Assertion]));\n        return instance;\n    }\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ON\\\\s+(?:DUPLICATE\\\\s+KEY|CONFLICT(?:\\\\s+([\\\\s\\\\S]+))?)\\\\s+(UPDATE|DO\\\\s+NOTHING|DO\\\\s+UPDATE\\\\s+SET\\\\s+)';\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../Lexer.js';\nimport DimensionsAPI from './DimensionsAPI.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport AssignmentList from './AssignmentList.js';\nimport OnConflictClause from './OnConflictClause.js';\nimport Select from '../select/SelectStatement.js';\nimport Table from '../../components/Table.js';\nimport Field from '../../components/Field.js';\nimport ValuesList from './ValuesList.js';\nimport ColumnsList from './ColumnsList.js';\n\nexport default class InsertStatement extends DimensionsAPI(AbstractStatement) {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE = null;\n\tCOLUMNS_CLAUSE = null;\n\tVALUES_LIST = [];\n\tSET_CLAUSE = null;\n\tSELECT_CLAUSE = null;\n\tON_CONFLICT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n\t/**\n\t * Builds the statement's TABLE\n\t * \n\t * .into(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tinto(table) { return this.build('TABLE', [table], Table); }\n\n\t/**\n\t * Builds the statement's COLUMNS_CLAUSE\n\t * \n\t * .columns('col1', 'col2');\n\t * \n\t * @return Void\n\t */\n\tcolumns(...columns) {\n\t\tif (!arguments.length) return this.COLUMNS_CLAUSE;\n\t\treturn this.build('COLUMNS_CLAUSE', columns, ColumnsList, 'entries');\n\t}\n\n\t/**\n\t * Builds the statement's VALUES_LIST\n\t * \n\t * .values(100, 22);\n\t * \n\t * @return Void\n\t */\n\tvalues(...values) {\n\t\tif (!arguments.length) return this.VALUES_LIST;\n\t\treturn this.build('VALUES_LIST', values, ValuesList, 'entries');\n\t}\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) {\n\t\tif (!arguments.length) return this.SET_CLAUSE;\n\t\treturn this.build('SET_CLAUSE', assignments, AssignmentList, 'set');\n\t}\n\n\t/**\n\t * Builds the statement's SELECT_CLAUSE\n\t * \n\t * .select(...);\n\t * \n\t * @return Void\n\t */\n\tselect(query) {\n\t\tif (!arguments.length) return this.SELECT_CLAUSE;\n\t\treturn this.build('SELECT_CLAUSE', [query], Select);\n\t}\n\n\t/**\n\t * Builds the statement's ON_CONFLICT_CLAUSE\n\t * \n\t * .onConflict(\n\t * \t\tc => c.set('col1', 100),\n\t * \t\tc => c.set('col2', 22)\n\t * \t\tc => c.where(\n\t * \t\t\tx => x.equals(...)\n\t * \t\t)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tonConflict(...onConflictSpecs) {\n\t\tif (!arguments.length) return this.ON_CONFLICT_CLAUSE;\n\t\treturn this.build('ON_CONFLICT_CLAUSE', onConflictSpecs, OnConflictClause, 'entries');\n\t}\n\t\n\t/** \n\t* @return Void\n\t*/\n   \treturning(...fields) {\n\t\tif (!arguments.length) return this.RETURNING_LIST;\n\t\treturn this.build('RETURNING_LIST', fields, Field);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\ttable: this.TABLE.toJSON(),\n\t\t\tcolumns_clause: this.COLUMNS_CLAUSE?.toJSON(),\n\t\t\tvalues_list: this.VALUES_LIST.map(valuesList => valuesList.toJSON()),\n\t\t\tset_clause: this.SET_CLAUSE?.toJSON(),\n\t\t\tselect_clause: this.SELECT_CLAUSE?.toJSON(),\n\t\t\ton_conflict_clause: this.ON_CONFLICT_CLAUSE?.toJSON(),\n\t\t\treturning_list: this.RETURNING_LIST.slice(0),\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!json?.table) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.into(json.table);\n\t\tif (json.columns_clause) instance.columns(json.columns_clause);\n\t\tfor (const entry of (json.values_list || [])) instance.values(...entry.entries);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.select_clause) instance.select(json.select_clause);\n\t\tif (json.on_conflict_clause) instance.onConflict(json.on_conflict_clause);\n\t\tif (json.returning_list?.length) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = ['INSERT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push('INTO', this.TABLE);\n\t\tif (this.SET_CLAUSE) sql.push('SET', this.SET_CLAUSE);\n\t\telse {\n\t\t\tif (this.COLUMNS_CLAUSE) sql.push(this.COLUMNS_CLAUSE);\n\t\t\tif (this.SELECT_CLAUSE) sql.push(this.SELECT_CLAUSE);\n\t\t\telse sql.push('VALUES', this.VALUES_LIST.join(', '));\n\t\t}\n\t\tif (this.ON_CONFLICT_CLAUSE) sql.push(this.ON_CONFLICT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^INSERT(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?(?:\\s+INTO)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match ) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(context, body.trim());\n\t\tconst clausesMap = { payload:'(VALUES|VALUE|SET|SELECT)', onConflict:'ON\\\\s+(DUPLICATE\\\\s+KEY|CONFLICT)', returning:'RETURNING' };\n\t\tconst { tokens: [ tableSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => x), { useRegex: 'i' });\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(clausesMap[key], 'i')).test($clause));\n\t\t\tif (clauseKey === 'payload') {\n\t\t\t\tif (/^SET$/i.test($clause)) {\n\t\t\t\t\t// INSERT ... SET\n\t\t\t\t\tinstance.into(parseCallback(instance, tableSpec, [Table]));\n\t\t\t\t\tinstance.set(parseCallback(instance, tokens.shift().trim(), [AssignmentList]));\n\t\t\t\t} else {\n\t\t\t\t\tconst tableColumnSplit = Lexer.split(tableSpec, []);\n\t\t\t\t\tinstance.into(parseCallback(instance, tableColumnSplit.shift().trim(), [Table]));\n\t\t\t\t\tif (tableColumnSplit.length) {\n\t\t\t\t\t\tinstance.columns(parseCallback(instance, tableColumnSplit.shift().trim(), [ColumnsList]));\n\t\t\t\t\t}\n\t\t\t\t\tif (/^SELECT$/i.test($clause)) {\n\t\t\t\t\t\t// INSERT ... SELECT\n\t\t\t\t\t\tinstance.select(parseCallback(instance, `SELECT ${ tokens.shift() }`));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// INSERT ... VALUES|VALUE\n\t\t\t\t\t\tfor (const rowPayload of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\t\t\tinstance.values(parseCallback(instance, rowPayload.trim(), [ValuesList]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (clauseKey === 'onConflict') {\n\t\t\t\tinstance.onConflict(parseCallback(instance, `${ $clause } ${ tokens.shift().trim() }`, [OnConflictClause]));\n\t\t\t} else if (clauseKey === 'returning') {\n\t\t\t\tinstance.returning(...Lexer.split(tokens.shift(), [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:TABLE_NODE') return this.TABLE;\n\t\treturn super.$trace(request, ...args);\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport DimensionsAPI from '../insert/DimensionsAPI.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport AssignmentList from '../insert/AssignmentList.js';\nimport OrderByClause from '../select/orderby/OrderByClause.js';\nimport JoinClause from '../../components/JoinClause.js';\nimport Condition from '../../components/Condition.js';\nimport Assertion from '../../components/Assertion.js';\nimport Table from '../../components/Table.js';\nimport Field from '../../components/Field.js';\n\nexport default class UpdateStatement extends DimensionsAPI(AbstractStatement) {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE_LIST = [];\n\tJOIN_LIST = [];\n\tSET_CLAUSE = null;\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n\t/**\n\t * Builds the statement's TABLE_LIST\n\t * \n\t * .table(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\ttable(...tables) { return this.build('TABLE_LIST', tables, Table); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) {\n\t\tif (!arguments.length) return this.SET_CLAUSE;\n\t\treturn this.build('SET_CLAUSE', assignments, AssignmentList, 'set');\n\t}\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) {\n\t\tif (!arguments.length) return this.WHERE_CLAUSE;\n\t\treturn this.build('WHERE_CLAUSE', wheres, Condition, 'and');\n\t}\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) {\n\t\tif (!arguments.length) return this.ORDER_BY_CLAUSE;\n\t\treturn (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */);\n\t}\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!arguments.length) return this.LIMIT_CLAUSE;\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\t\n\t/** \n\t* @return Void\n\t*/\n\treturning(...fields) {\n\t\tif (!arguments.length) return this.RETURNING_LIST;\n\t\treturn this.build('RETURNING_LIST', fields, Field);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\ttable_list: this.TABLE_LIST.map(t => t.toJSON()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJSON()),\n\t\t\tset_clause: this.SET_CLAUSE?.toJSON(),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJSON(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJSON(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\treturning_list: this.RETURNING_LIST,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.table_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.table(...json.table_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\tif (json.returning_list?.length) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = ['UPDATE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.TABLE_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tsql.push('SET', this.SET_CLAUSE);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^UPDATE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { join:JoinClause, set:'SET', where:'WHERE', orderBy:OrderByClause, limit:'LIMIT', returning:'RETURNING' };\n\t\tconst { tokens: [ tableSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// TABLE_LIST\n\t\tfor (const tblExpr of Lexer.split(tableSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\tinstance.table(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (clauseKey === 'set') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [AssignmentList]);\n\t\t\t\tinstance.set(node);\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// RETURNING\n\t\t\telse if (clauseKey === 'returning') {\n\t\t\t\tinstance.returning(...Lexer.split(tokens.shift(), [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:TABLE_NODE') return this.TABLE_LIST[0];\n\t\treturn super.$trace(request, ...args);\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport OrderByClause from '../select/orderby/OrderByClause.js';\nimport Identifier from '../../components/Identifier.js';\nimport JoinClause from '../../components/JoinClause.js';\nimport Condition from '../../components/Condition.js';\nimport Assertion from '../../components/Assertion.js';\nimport Table from '../../components/Table.js';\nimport Field from '../../components/Field.js';\n\n/*\nSyntax: 1 (Both; Order By and Limit: MySQL)\nDELETE FROM somelog WHERE user = 'jcole'\n\tORDER BY timestamp_column LIMIT 1;\n*/\n/*\nSyntax 2: (MySQL)\nDELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n/*\nSyntax 3: (Both)\nDELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n\nexport default class DeleteStatement extends AbstractStatement {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tDELETE_LIST = [];\n\tFROM_LIST = [];\n\tUSING_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:TABLE_NODE') return this.USING_LIST[0] || this.FROM_LIST[0];\n\t\treturn super.$trace(request, ...args);\n\t}\n\n\t/**\n\t * Builds an optional DELETE_LIST (for use with a FROM_LIST) (MySQL-specific)\n\t * \n\t * .delete('t11, 't2');\n\t * \n\t * @returns Void\n\t */\n\tdelete(...identifiers) { return this.build('DELETE_LIST', identifiers, Identifier); }\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * - as either Table objects or Identifiers (in connection with a USING_LIST, in which case \"false\" should be first argument)\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tablesOrIdentifiers) { return this.build('FROM_LIST', tablesOrIdentifiers, [Identifier,Table]); }\n\n\t/**\n\t * Builds the statement's USING_LIST\n\t * \n\t * .using(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tusing(...tables) {\n\t\tif (!arguments.length) return this.USING_LIST;\n\t\treturn this.build('USING_LIST', tables, Table);\n\t}\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) {\n\t\tif (!arguments.length) return this.WHERE_CLAUSE;\n\t\treturn this.build('WHERE_CLAUSE', wheres, Condition, 'and');\n\t}\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) {\n\t\tif (!arguments.length) return this.ORDER_BY_CLAUSE;\n\t\treturn (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */);\n\t}\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!arguments.length) return this.LIMIT_CLAUSE;\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\t\n\t/** \n\t* @return Void\n\t*/\n\treturning(...fields) {\n\t\tif (!arguments.length) return this.RETURNING_LIST;\n\t\treturn this.build('RETURNING_LIST', fields, Field);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tdelete_list: this.DELETE_LIST.map(t => t.toJSON()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJSON()),\n\t\t\tusing_list: this.USING_LIST.map(t => t.toJSON()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJSON()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJSON(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJSON(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\treturning_list: this.RETURNING_LIST,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.from_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json.delete_list?.length) instance.delete(...json.delete_list);\n\t\tinstance.from(...json.from_list);\n\t\tif (json.using_list?.length) instance.using(...json.using_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\tif (json.returning_list) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = ['DELETE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tif (this.DELETE_LIST.length) sql.push(this.DELETE_LIST.join(', '));\n\t\tsql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.USING_LIST.length) sql.push('USING', this.USING_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^DELETE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, using: { backtest: '^(?!.*\\\\s+JOIN\\\\s+)', test: 'USING' }, join:JoinClause, where:'WHERE', orderBy:OrderByClause, limit:'LIMIT', returning:'RETURNING' };\n\t\tconst { tokens: [ maybeTablesSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// MAYBE_TABLES_SPEC (BEFORE A FROM CLAUSE) - MYSQL\n\t\tfor (const tblExpr of Lexer.split(maybeTablesSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Identifier]);\n\t\t\tinstance.delete(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (['from', 'using'].includes(clauseKey)) {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\t// If we have both \"from\" and \"using\" clauses (Syntax 3 above), then \"using\" is the main table references\n\t\t\t\t\tconst asType = clauseKey === 'from' && clauses.some(s => s.toLowerCase() === 'using') ? Identifier : Table;\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [asType]);\n\t\t\t\t\tinstance[clauseKey](node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// RETURNING\n\t\t\telse if (clauseKey === 'returning') {\n\t\t\t\tinstance.returning(...Lexer.split(tokens.shift(), [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "export default Class => class extends Class {\n\n    clone() {\n        const clone = super.clone();\n        clone._ROOT_SCHEMA = this._ROOT_SCHEMA;\n        return clone;\n    }\n\n\t$trace(request, ...args) {\n\t\tif (request === 'get:STATEMENT_NODE') return this;\n\t\tif (request === 'get:TABLE_NAME' && this.KIND === 'TABLE') return this.ident().name();\n\t\tif (request === 'get:DATABASE_NAME') {\n\t\t\tif (['SCHEMA','DATABASE'].includes(this.KIND)) return this.ident().name();\n\t\t\tif (this.KIND === 'TABLE' && this.ident().prefix()) return this.ident().prefix();\n\t\t}\n\t\tif (request === 'get:ROOT_SCHEMA') {\n\t\t\tif (!this._ROOT_SCHEMA) this._ROOT_SCHEMA = this.CONTEXT?.$trace?.(request);\n\t\t\treturn this._ROOT_SCHEMA;\n\t\t}\n\t\treturn this.CONTEXT?.$trace?.(request, ...args);\n\t}\n}", "\nimport AbstractNode1 from '../AbstractNode.js';\n\nexport default class AbstractNode extends AbstractNode1 {\n\n\t/**\n\t * Instance props.\n\t */\n\tget CLAUSE() { return this.constructor.CLAUSE; }\n\tKIND;\n\n    /**\n     * @constructor\n     */\n    constructor(context, kind) {\n        super(context);\n        this.KIND = kind;\n    }\n\n\ttoJSON() {\n        return {\n\t\t\tclause: this.CLAUSE,\n            ...(this.KIND ? { kind: this.KIND } : {}),\n\t\t\t...super.toJSON(),\n        };\n    }\n\n\tstatic fromJSON(context, json) {\n\t\tif (json?.clause && json.clause !== this.CLAUSE || (json?.kind && !this.KINDS.includes(json.kind))) return;\n\t\treturn (new this(context, json.kind)).withFlag(...(json.flags || []));\n\t}\n\n    static KINDS = [];\n}", "import Lexer from '../../Lexer.js';\nimport Identifier from '../../components/Identifier.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class Rename extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tIDENT;\n\tARGUMENT;\n\n\tident(value) {\n\t\tif (!arguments.length) return this.IDENT;\n\t\treturn (this.build('IDENT', [value], Identifier), this);\n\t}\n\n\targument(value) {\n\t\tif (!arguments.length) return this.ARGUMENT;\n\t\treturn (this.build('ARGUMENT', [value], Identifier), this);\n\t}\n\n\ttoJSON() {\n        return {\n            ...(this.IDENT ? { ident: this.IDENT.toJSON() } : {}),\n            argument: this.ARGUMENT.toJSON(),\n\t\t\t...super.toJSON(),\n        };\n    }\n\n\tstatic fromJSON(context, json) {\n\t\tif ((json?.kind && !Identifier.fromJSON(context, json.ident)) || !Identifier.fromJSON(context, json.argument)) return;\n        const instance = super.fromJSON(context, json);\n\t\tif (!instance) return;\n\t\tif (json.ident) instance.ident(json.ident);\n\t\tinstance.argument(json.argument);\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return `${ this.CLAUSE }${ this.KIND ? ` ${ this.KIND }` : '' }${ this.IDENT ? ` ${ this.IDENT }` : '' } TO ${ this.ARGUMENT }`; }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind = '', rename ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(?:(${ this.KINDS.map(s => s).join('|') })\\\\s+)?([\\\\s\\\\S]+)`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind.replace(/\\s+/g, '_').toUpperCase());\n\t\tconst [ name1, name2 ] = Lexer.split(rename, ['(TO|AS)'], { useRegex: true, limit: 1 });\n\t\tif (kind) instance.ident(parseCallback(instance, name1, [Identifier]));\n\t\tinstance.argument(parseCallback(instance, name2, [Identifier]));\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'RENAME'; }\n    static KINDS = ['COLUMN', 'CONSTRAINT', 'INDEX', 'KEY'];\n}", "import AbstractNode1 from '../AbstractNode.js';\n\nexport default class AbstractNode extends AbstractNode1 {\n\n    /**\n\t * Instance properties\n\t */\n\tNAME;\n\t$NAME;\n\tKEEP;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['NAME']; }\n    static get SUBTREE_PROPS() { return []; }\n\n\t/**\n\t * @var Array\n\t */\n\tget WRITABLE_PROPS() { return this.constructor.WRITABLE_PROPS; }\n\tget SUBTREE_PROPS() { return this.constructor.SUBTREE_PROPS; }\n\n\t/**\n\t * Returns name or sets name\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this[this.smartKey('NAME')];\n        return (this[this.smartKey('NAME', true)] = name, this);\n\t}\n\n    diffWith(nodeB) {\n\t\tif (typeof nodeB.keep() === 'boolean') this.keep(nodeB.keep());\n        if (!this.isSame(nodeB.name(), this.name(), 'ci')) { this.name(nodeB.name()); }\n    }\n\n\t/**\n\t * Returns the right prop name depending on \"keep\".\n\t * \n\t * @param String key\n\t * @param Bool isWrite\n\t * \n\t * @returns String\n\t */\n\tsmartKey(key, isWrite = false) {\n\t\tif (this.keep() === true) return isWrite || isDirty(this[`$${ key }`]) ? `$${ key }` : key;\n\t\tif (this.keep() === false) {\n\t\t\tif (isWrite) throw new Error(`Cannot alter ${ this.constructor.name } after having been dropped.`);\n\t\t\treturn key;\n\t\t}\n\t\treturn key;\n\t}\n\n\t/**\n\t * Invokes a callback that sets a prop while properly managing \"keep\".\n\t * \n\t * @param Function callback\n\t * \n\t * OR\n     * \n\t * @param Any value\n\t * @param Function callback\n\t * \n\t * @return this\n\t */\n\thardSet(...args) {\n\t\tconst callback = args.pop();\n\t\tif (args.length) {\n\t\t\tconst value = args[0];\n\t\t\tconst pass = () => {\n\t\t\t\tif (this.keep() === false) {\n\t\t\t\t\tthrow new Error(`Diffing cannot be done on a node ${ this.constructor.name } after having been dropped.`)\n\t\t\t\t} else if (typeof this.keep() !== 'boolean') this.keep(true);\n\t\t\t\treturn callback(value);\n\t\t\t};\n\t\t\t// Start from up the context?\n\t\t\tif (typeof this.CONTEXT?.hardSet === 'function') {\n\t\t\t\treturn this.CONTEXT.hardSet(value, pass);\n\t\t\t}\n\t\t\tif (isDirty(value)) return pass();\n\t\t\treturn;\n\t\t}\n\t\tconst keepBefore = this.KEEP;\n\t\tthis.KEEP = null;\n\t\tconst returnValue = callback();\n\t\tthis.KEEP = keepBefore;\n\t\treturn returnValue;\n\t}\n    \n\t/**\n\t * Gets/sets the \"keep\".\n     * \n\t * @param String value\n\t * \n\t * @return this\n\t */\n\tkeep(value, recursively = false) {\n        if (!arguments.length) return this.KEEP;\n        if (![undefined,true,false].includes(value)) throw new Error(`Status can only be true, false, or undefined. Received: ${ value }`);\n        this.KEEP = value;\n\t\tif (recursively) {\n            for (const node of this.SUBTREE_PROPS.reduce((entries, key) => [...entries, ...this[key]], [])) {\n                if (value !== true) node.keep(undefined, true); // A false or (undefined) \"keep\" means nested nodes should be undefined\n                else node.keep(recursively === 'auto' ? node.keep() : true, recursively);\n            }\n        }\n        return this;\n    }\n\n\t/**\n\t * @returns this\n\t */\n\tdrop() { return this.keep(false); }\n\n\t/**\n\t * @returns Boolean\n\t */\n\tdropped() { return this.keep() === false || this.CONTEXT?.dropped?.(); }\n\n\t/**\n\t * Commits all alterations and resets the \"keep\" flag\n\t * \n\t * @param Bool recursively\n\t * \n\t * @returns Void\n\t */\n\tcommitAlt(recursively = false) {\n\t\tthis.keep(undefined);\n\t\tfor (const prop of this.WRITABLE_PROPS) {\n\t\t\tif (isDirty(this[`$${ prop }`])) {\n\t\t\t\tthis[prop] = this[`$${ prop }`];\n\t\t\t\tthis[`$${ prop }`] = Array.isArray(this[`$${ prop }`]) ? [] : undefined;\n\t\t\t}\n\t\t}\n\t\tif (!recursively) return;\n\t\tfor (const node of this.SUBTREE_PROPS.reduce((entries, key) => [...entries, ...this[key]], [])) {\n\t\t\tnode.commitAlt(recursively);\n\t\t}\n\t}\n\n\t/**\n\t * Reverses all alterations and the \"keep\" flag\n\t * \n\t * @param Bool recursively\n\t * \n\t * @returns Void\n\t */\n\treverseAlt(recursively = false) {\n\t\tif (this.keep() === true) {\n\t\t\tfor (const prop of this.WRITABLE_PROPS) {\n\t\t\t\tif (isDirty(this[`$${ prop }`])) {\n\t\t\t\t\tconst normalValue = this[prop];\n\t\t\t\t\tthis[prop] = this[`$${ prop }`];\n\t\t\t\t\tthis[`$${ prop }`] = normalValue;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.keep() === false) this.keep(undefined);\n\t\telse if (typeof this.keep() !== 'boolean') this.keep(false);\n\t\tif (!recursively) return;\n\t\tfor (const node of this.SUBTREE_PROPS.reduce((entries, key) => [...entries, ...this[key]], [])) {\n\t\t\tnode.reverseAlt(recursively);\n\t\t}\n\t}\n\t\n\t/**\n\t * \n\t * @param Any a \n\t * @param Any b \n\t * @returns \n\t */\n\tisSame(a, b, caseMatch = null) {\n\t\tif (typeof a === 'string' && typeof b === 'string' && caseMatch === 'ci') {\n\t\t\treturn a.toLowerCase() === b.toLowerCase();\n\t\t}\n\t\tif (a === b) return true;\n\t\tif (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n\t\t\tconst $b = b.slice(0).sort();\n\t\t\treturn a.slice(0).sort().every((x, i) => this.isSame(x, $b[i], caseMatch));\n\t\t}\n\t\tconst temp = {};\n\t\tif (typeof a === 'object' && a && typeof b === 'object' && b && (temp.keys_a = Object.keys(a)).length === (temp.keys_b = Object.keys(b)).length) {\n\t\t\treturn temp.keys_a.reduce((prev, k) => prev && this.isSame(a[k], b[k], caseMatch), true);\n\t\t}\n\t\treturn false;\n\t}\n\n\ttoJSON(json = {}) {\n\t\treturn {\n\t\t\t...(this.NAME ? { name: this.NAME } : {}),\n\t\t\t...(this.$NAME ? { $name: this.$NAME } : {}),\n\t\t\t...json,\n\t\t\t...(typeof this.KEEP === 'boolean' ? { keep: this.KEEP } : {}),\n\t\t\t...(this.FLAGS.length ? { flags: [ ...this.FLAGS ] } : {}),\n\t\t};\n\t}\n\n    static fromJSON(context, json, callback = null) {\n        if ((json?.name && typeof json.name !== 'string') || (json.$name && typeof json.$name !== 'string')) return;\n        const instance = callback ? callback() : new this(context);\n        instance.hardSet(() => instance.name(json.name));\n\t\tinstance.hardSet(json.$name, val => instance.name(val));\n        if (typeof json.keep === 'boolean') instance.keep(json.keep);\n        if (json.flags) instance.withFlag(...json.flags);\n        return instance;\n    }\n}\n\n// Has any value? Arrays and objects (not empty), number (including 0), string (not empty), boolean (true/false)\nconst isDirty = value => Array.isArray(value) ? value.length : (typeof value === 'object' && value ? Object.keys(value).length : ![undefined, null, ''].includes(value));", "import { _unwrap, _fromCamel } from '@webqit/util/str/index.js';\nimport AbstractNode from '../../AbstractNode.js';\n\nexport default class AbstractConstraint extends AbstractNode {\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['TYPE'].concat(super.WRITABLE_PROPS); }\n\n    /**\n\t * @var String\n\t */\n    static get TYPE() { return _fromCamel(this.name.replace(/TABLE|COLUMN|CONSTRAINT|CLAUSE/ig, ''), '_').toUpperCase(); }\n\n    /**\n\t * @var String\n\t */\n\tget TYPE() { return this.constructor.TYPE; }\n\n\ttoJSON(json = {}) { return super.toJSON({ type: this.TYPE, ...json }); }\n\n    static fromJSON(context, json, callback = null) {\n        if (json?.type !== this.TYPE) return;\n        return super.fromJSON(context, json, callback);\n    }\n\n    /**\n     * @returns String\n     */\n    stringify() { return this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : `${ this.stringifyName() }${ this.TYPE.replace('_', ' ') }`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !(new RegExp(`^${ this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : this.TYPE.replace('_', '\\\\s+') }$`, 'i')).test($expr)) return;\n        return (new this(context)).name(name);\n    }\n\n    /**\n     * @returns Object\n     */\n    stringifyName() { return this.name() ? `CONSTRAINT ${ this.autoEsc(this.name()) } ` : ''; }\n\n    /**\n     * @returns Object\n     */\n    static parseName(context, expr, asInputDialect = false) {\n        const escChar = this.getEscChar(context, asInputDialect);\n        const nameRegex = `(?:CONSTRAINT(?:` + `\\\\s+(\\\\w+)` + `|` + `\\\\s+(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2` + `)\\\\s+)?`;\n        const [ , nameUnscaped, /*esc*/, nameEscaped, rest = '' ] = expr.match(new RegExp(`^${ nameRegex }([\\\\s\\\\S]+)$`, 'i')) || [];\n        return { name: nameUnscaped || this.autoUnesc(context, nameEscaped), expr: rest.trim() };\n    }\n}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\nimport IdentityConstraint from './IdentityConstraint.js';\n\nexport default class AutoIncrementConstraint extends AbstractLevel1Constraint {\n\n\t/**\n\t * @var String\n\t */\n\tstatic get TYPE() { return 'AUTO_INCREMENT'; }\n\n    /**\n     * @returns String\n     */\n    stringify() { return this.params.dialect !== 'mysql' ? (new IdentityConstraint(this.CONTEXT)).stringify() : `AUTO_INCREMENT`; }\n}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\nimport AutoIncrementConstraint from './AutoIncrementConstraint.js';\n\nexport default class IdentityConstraint extends AbstractLevel1Constraint {\n\n    /**\n\t * Instance properties\n\t */\n\tALWAYS;\n\t$ALWAYS;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['ALWAYS'].concat(super.WRITABLE_PROPS); }\n    \n\t/**\n\t * Gets/sets the expr.\n     * \n\t * @param Bool val\n\t * \n\t * @return this\n\t */\n\talways(val) {\n\t\tif (!arguments.length) return this[this.smartKey('ALWAYS')];\n\t\treturn (this[this.smartKey('ALWAYS', true)] = !!val, this);\n    }\n\n    diffWith(nodeB) {\n        super.diffWith(nodeB)\n        if (nodeB.always() !== this.always()) { this.always(nodeB.always()); }\n\t\treturn this;\n    }\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n            always: !!this.ALWAYS,\n\t\t\t...(typeof this.$ALWAYS === 'boolean' ? { $always: this.$ALWAYS } : {}),\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = (new this(context)).always(json.always);\n\t\t\tinstance.hardSet(json.$always, val => instance.always(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tif (this.params.dialect === 'mysql') return (new AutoIncrementConstraint(this.CONTEXT)).stringify();\n\t\treturn `GENERATED ${ this.always() ? 'ALWAYS' : 'BY DEFAULT' } AS IDENTITY`;\n\t}\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !($expr = $expr.match(new RegExp(`^GENERATED\\\\s+` + `(ALWAYS|BY[ ]+DEFAULT)` + `(?:\\\\s+AS\\\\s+IDENTITY)?$`, 'i'))?.[1])) return;\n\t\treturn (new this(context)).name(name).always(/^ALWAYS$/i.test($expr));\n    }\n}", "import Lexer from '../../../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\n\nexport default class AbstractLevel2Constraint extends AbstractLevel1Constraint {\n\n    columns() { return !('COLUMNS' in this) ? [this.CONTEXT.name()] : []; }\n\n\ttoJSON(json = {}) {\n        let $json = super.toJSON(json);\n        if (!('name' in $json) && this.params.dialect !== 'mysql') {\n            // Key needs to be present\n            $json = { name: undefined, ...$json };\n        }\n\t\treturn $json;\n\t}\n\n    static fromJSON(context, json, callback = null) {\n        if (json?.type !== this.TYPE) return;\n        if (!('name' in json) && context?.params?.dialect !== 'mysql') {\n            // Automatically generate a default name for PRIMARY_KEY,FOREIGN_KEY,UNIQUE_KEY,CHECK\n            json = { name: `auto_name_${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`, ...json };\n        }\n        return super.fromJSON(context, json, callback);\n    }\n\n    static parseColumns(context, columnsExpr, asInputDialect = false)  {\n        return Lexer.split(_unwrap(columnsExpr, '(', ')'), [',']).map(columnExpr => {\n            return this.parseIdent(context, columnExpr.trim(), asInputDialect)[0];\n        });\n    }\n}", "import AbstractLevel2Constraint from './AbstractLevel2Constraint.js';\n\nexport default class PrimaryKey extends AbstractLevel2Constraint {}", "import Lexer from '../../../Lexer.js';\n\nexport default Class => class extends Class {\n\n    /**\n\t * Instance properties\n\t */\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the constraint columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n    diffWith(consB) {\n        super.diffWith(consB)\n        if (!this.isSame(consB.columns(), this.columns())) { this.columns(consB.columns()); }\n\t\treturn this;\n    }\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json) {\n        if (!json?.columns?.length) return;\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = (new this(context)).columns(json.columns);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tif (this.TYPE === 'FOREIGN_KEY') return super.stringify();\n\t\treturn `${ super.stringify() } (${ this.autoEsc(this.columns()).join(', ') })`;\n\t}\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr, parseCallback) {\n\t\tif (this.TYPE === 'FOREIGN_KEY') return super.parse(context, expr, parseCallback);\n\t\tconst [ $expr, columnsExpr ] = Lexer.split(expr, []);\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\treturn instance.columns(this.parseColumns(context, columnsExpr));\n    }\n}", "import PrimaryKey from \"./PrimaryKey.js\";\nimport AbstractTableConstraint from './AbstractTableConstraint.js';\n\nexport default class TablePrimaryKey extends AbstractTableConstraint(PrimaryKey) {}", "import { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../../Lexer.js';\nimport Identifier from '../../../components/Identifier.js';\nimport AbstractLevel2Constraint from './AbstractLevel2Constraint.js';\n\nexport default class ForeignKey extends AbstractLevel2Constraint {\n\n    /**\n\t * Instance properties\n\t */\n\tTARGET_SCHEMA;\n\t$TARGET_SCHEMA;\n\tTARGET_TABLE;\n\t$TARGET_TABLE;\n    TARGET_COLUMNS = [];\n\t$TARGET_COLUMNS = [];\n    MATCH_RULE;\n    $MATCH_RULE;\n    UPDATE_RULE;\n    $UPDATE_RULE;\n    DELETE_RULE;\n    $DELETE_RULE;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() {\n\t\treturn [\n\t\t\t'TARGET_SCHEMA',\n\t\t\t'TARGET_TABLE',\n\t\t\t'TARGET_COLUMNS',\n\t\t\t'MATCH_RULE',\n\t\t\t'UPDATE_RULE',\n\t\t\t'DELETE_RULE',\n\t\t].concat(super.WRITABLE_PROPS);\n\t}\n    \n\t/**\n\t * Sets the key's TARGET_SCHEMA\n\t * \n\t * @param String schema\n\t * \n\t * @return this\n\t */\n\ttargetSchema(schema) {\n\t\tif (!arguments.length) return this[this.smartKey('TARGET_SCHEMA')];\n\t\treturn (this[this.smartKey('TARGET_SCHEMA', true)] = schema, this);\n    }\n    \n\t/**\n\t * Sets the key's TARGET_TABLE\n\t * \n\t * @param String name\n\t * \n\t * @return this\n\t */\n\ttargetTable(name) {\n\t\tif (!arguments.length) return this[this.smartKey('TARGET_TABLE')];\n\t\treturn (this[this.smartKey('TARGET_TABLE', true)] = name, this);\n    }\n\n\t/**\n\t * Sets/gets the constraint name,\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\ttargetColumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('TARGET_COLUMNS')];\n\t\treturn (this[this.smartKey('TARGET_COLUMNS', true)] = [].concat(columns), this);\n\t}\n\n\t/**\n\t * Sets/gets the matchRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tmatchRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('MATCH_RULE')];\n        return (this[this.smartKey('MATCH_RULE', true)] = rule, this);\n\t}\n\n\t/**\n\t * Sets/gets the updateRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tupdateRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('UPDATE_RULE')];\n        return (this[this.smartKey('UPDATE_RULE', true)] = rule, this);\n\t}\n\n\t/**\n\t * Sets/gets the deleteRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tdeleteRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('DELETE_RULE')];\n        return (this[this.smartKey('DELETE_RULE', true)] = rule, this);\n\t}\n\n    diffWith(nodeB) {\n        super.diffWith(nodeB)\n        if (!this.isSame(nodeB.targetSchema(), this.targetSchema(), 'ci')) { this.targetSchema(nodeB.targetSchema()); }\n        if (!this.isSame(nodeB.targetTable(), this.targetTable(), 'ci')) { this.targetTable(nodeB.targetTable()); }\n        if (!this.isSame(nodeB.targetColumns(), this.targetColumns())) { this.targetColumns(nodeB.targetColumns()); }\n        if (!this.isSame(nodeB.matchRule(), this.matchRule())) { this.matchRule(nodeB.matchRule()); }\n        if (!this.isSame(nodeB.updateRule(), this.updateRule())) { this.updateRule(nodeB.updateRule()); }\n        if (!this.isSame(nodeB.deleteRule(), this.deleteRule())) { this.deleteRule(nodeB.deleteRule()); }\n\t\treturn this;\n    }\n\n\ttoJSON(json = {}) {\n\t\treturn super.toJSON({\n\t\t\t...json,\n            // Requireds\n\t\t\t...(this.TARGET_SCHEMA ? { targetSchema: this.TARGET_SCHEMA } : {}),\n\t\t\t...(this.$TARGET_SCHEMA ? { $targetSchema: this.$TARGET_SCHEMA } : {}),\n            targetTable: this.TARGET_TABLE,\n\t\t\t...(this.$TARGET_TABLE ? { $targetTable: this.$TARGET_TABLE } : {}),\n            targetColumns: this.TARGET_COLUMNS,\n\t\t\t...(this.$TARGET_COLUMNS.length ? { $targetColumns: this.$TARGET_COLUMNS } : {}),\n            // Optionals\n\t\t\t...(this.MATCH_RULE ? { matchRule: this.MATCH_RULE } : {}),\n\t\t\t...(this.$MATCH_RULE ? { $matchRule: this.$MATCH_RULE } : {}),\n            ...(this.UPDATE_RULE ? { updateRule: this.UPDATE_RULE } : {}),\n\t\t\t...(this.$UPDATE_RULE ? { $updateRule: this.$UPDATE_RULE } : {}),\n            ...(this.DELETE_RULE ? { deleteRule: this.DELETE_RULE } : {}),\n\t\t\t...(this.$DELETE_RULE ? { $deleteRule: this.$DELETE_RULE } : {}),\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.targetTable || !json.targetColumns?.length) return;\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = callback ? callback() : new this(context);\n\t\t\tinstance.hardSet(() => instance.targetSchema(json.targetSchema));\n\t\t\tinstance.hardSet(() => instance.targetTable(json.targetTable));\n\t\t\tinstance.hardSet(() => instance.targetColumns(json.targetColumns));\n\t\t\tinstance.hardSet(() => instance.matchRule(json.matchRule));\n\t\t\tinstance.hardSet(() => instance.updateRule(json.updateRule));\n\t\t\tinstance.hardSet(() => instance.deleteRule(json.deleteRule));\n\t\t\tinstance.hardSet(json.$targetSchema, val => instance.targetSchema(val));\n\t\t\tinstance.hardSet(json.$targetTable, val => instance.targetTable(val));\n\t\t\tinstance.hardSet(json.$targetColumns, val => instance.targetColumns(val));\n\t\t\tinstance.hardSet(json.$matchRule, val => instance.matchRule(val));\n\t\t\tinstance.hardSet(json.$updateRule, val => instance.updateRule(val));\n\t\t\tinstance.hardSet(json.$deleteRule, val => instance.deleteRule(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tconst targetIdent = Identifier.fromJSON(this, [this.targetSchema(), this.targetTable()]);\n\t\tif (!targetIdent.prefix()) targetIdent.prefix(this.$trace('get:DATABASE_NAME'));\n        let sql = `${ this.stringifyName() }REFERENCES ${ targetIdent } (${ this.autoEsc(this.targetColumns()).join(', ') })`;\n        const serializeReferentialRule = rule => typeof rule === 'object' && rule ? `${ rule.rule } (${ rule.columns.join(', ') })` : rule;\n        if (this.matchRule()) { sql += ` MATCH ${ this.matchRule() }`; }\n        if (this.updateRule()) { sql += ` ON UPDATE ${ serializeReferentialRule(this.updateRule()) }`; }\n        if (this.deleteRule()) { sql += ` ON DELETE ${ serializeReferentialRule(this.deleteRule()) }`; }\n        return sql;\n    }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !($expr = $expr.match(/^REFERENCES\\s+([\\s\\S]+)$/i)?.[1])) return;\n        const [ table_maybeQualified, cols, opts = '' ] = Lexer.split($expr, []);\n        const [table, schema] = this.parseIdent(context, table_maybeQualified.trim(), true);\n        const targetColumns = Lexer.split(_unwrap(cols, '(', ')'), [',']).map(col => this.parseIdent(context, col.trim(), true)[0]);\n        const matchReferentialRule = (str, type) => {\n            if (type === 'MATCH') return str.match(/MATCH\\s+(\\w+)/i)?.[1];\n            const referentialActionRe = /(NO\\s+ACTION|RESTRICT|CASCADE|(SET\\s+NULL|SET\\s+DEFAULT)(?:\\s+\\(([^\\)]+)\\))?)/;\n            const [ , keyword1, keyword2, keyword2Columns ] = str.match(new RegExp(`ON\\\\s+${ type }\\\\s+${ referentialActionRe.source }`, 'i')) || [];\n            return keyword2 ? (!keyword2Columns ? keyword2 : { rule: keyword2, columns: keyword2Columns.split(',').map(s => s.trim()) }) : keyword1;\n        };\n        return (new this(context))\n\t\t\t.name(name)\n\t\t\t.targetSchema(schema)\n            .targetTable(table)\n            .targetColumns(targetColumns)\n            .matchRule(matchReferentialRule(opts, 'MATCH'))\n            .updateRule(matchReferentialRule(opts, 'UPDATE'))\n            .deleteRule(matchReferentialRule(opts, 'DELETE'));\n    }\n}", "import Lexer from '../../../Lexer.js';\nimport ForeignKey from './ForeignKey.js';\nimport AbstractTableConstraint from './AbstractTableConstraint.js';\n\nexport default class TableForeignKey extends AbstractTableConstraint(ForeignKey) {\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tconst namePart = this.stringifyName();\n\t\t// ---------- So that super.stringify() does not process that\n\t\tconst name = this.NAME;\n\t\tconst $name = this.$NAME;\n\t\tthis.NAME = null;\n\t\tthis.$NAME = null;\n\t\t// ----------\n\t\tconst sql = `${ namePart }FOREIGN KEY (${ this.autoEsc(this.columns()).join(', ') }) ${ super.stringify() }`;\n\t\t// ---------- Restoration\n\t\tthis.NAME = name;\n\t\tthis.$NAME = $name;\n\t\t// ----------\n\t\treturn sql;\n\t}\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr, parseCallback) {\n\t\tconst { name = '', expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !/^FOREIGN\\s+KEY/i.test($expr)) return; // Not a constraint\n\t\tconst [ , columnsExpr, ...rest ] = Lexer.split($expr, []);\n\t\tconst instance = super.parse(context, rest.join('').trim(), parseCallback);\n\t\treturn instance.name(name).columns(this.parseColumns(context, columnsExpr));\n    }\n}", "import AbstractLevel2Constraint from './AbstractLevel2Constraint.js';\n\nexport default class UniqueKey extends AbstractLevel2Constraint {\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ this.stringifyName() }UNIQUE`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        const { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !/^UNIQUE(\\s+KEY)?$/i.test($expr)) return;\n\t\treturn (new this(context)).name(name);\n    }\n}", "import AbstractTableConstraint from './AbstractTableConstraint.js';\nimport UniqueKey from \"./UniqueKey.js\";\n\nexport default class TableUniqueKey extends AbstractTableConstraint(UniqueKey) {}", "import { _unwrap, _wrapped } from '@webqit/util/str/index.js';\n\nexport default Class => class extends Class {\n\n    /**\n\t * Instance properties\n\t */\n\tEXPR;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['EXPR'].concat(super.WRITABLE_PROPS); }\n    \n\t/**\n\t * Gets/sets the expr.\n     * \n\t * @param String expr\n\t * \n\t * @return this\n\t */\n\texpr(expr) {\n        if (!arguments.length) return this[this.smartKey('EXPR')];\n        return (this[this.smartKey('EXPR', true)] = expr, this);\n    }\n\n    diffWith(nodeB) {\n        super.diffWith(nodeB)\n        if (nodeB.expr() !== this.expr()) { this.expr(nodeB.expr()); }\n\t\treturn this;\n    }\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n            expr: this.EXPR,\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json) {\n        if ([undefined, null].includes(json?.expr)) return;\n        return super.fromJSON(context, json, () => {\n            const instance = (new this(context)).expr(json.expr);\n            instance.hardSet(json.$expr, val => instance.expr(val));\n            return instance;\n        });\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ super.stringify() } (${ this.expr() })`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !($expr = $expr.match(new RegExp(`^${ this.TYPE.replace(/_/g, '\\\\s+') }\\\\s+([\\\\s\\\\S]+)$`, 'i'))?.[1])) return;\n        const instance = (new this(context))\n            .expr(_wrapped($expr.trim(), '(', ')') ? _unwrap($expr.trim(), '(', ')') : $expr)\n            .name(name);\n        return instance;\n    }\n}", "import AbstractLevel2Constraint from './AbstractLevel2Constraint.js';\nimport AbstractExprConstraint from './AbstractExprConstraint.js';\n\nexport default class CheckConstraint extends AbstractExprConstraint(AbstractLevel2Constraint) {}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\nimport AbstractExprConstraint from './AbstractExprConstraint.js';\n\nexport default class ExpressionConstraint extends AbstractExprConstraint(AbstractLevel1Constraint) {\n\n    /**\n\t * Instance properties\n\t */\n\tSTORED;\n\t$STORED;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['STORED'].concat(super.WRITABLE_PROPS); }\n    \n\t/**\n\t * Gets/sets the expr.\n     * \n\t * @param Bool val\n\t * \n\t * @return this\n\t */\n\tstored(val) {\n\t\tif (!arguments.length) return this[this.smartKey('STORED')];\n\t\treturn (this[this.smartKey('STORED', true)] = !!val, this);\n    }\n\n    diffWith(nodeB) {\n        super.diffWith(nodeB)\n        if (nodeB.stored() !== this.stored()) { this.stored(nodeB.stored()); }\n\t\treturn this;\n    }\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n            stored: !!this.STORED,\n\t\t\t...(typeof this.$STORED === 'boolean' ? { $stored: this.$STORED } : {}),\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = (new this(context)).stored(json.stored);\n\t\t\tinstance.hardSet(json.$stored, val => instance.stored(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() { return `GENERATED ALWAYS AS (${ this.expr() })${ this.stored() ? ` STORED` : '' }`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let stored, { name, expr: $expr } = this.parseName(context, expr, true);\n\t\t[ , $expr, stored = '' ] = $expr.match(new RegExp(`^GENERATED\\\\s+ALWAYS\\\\s+AS\\\\s+\\\\(` + `([\\\\s\\\\S]+)` + `\\\\)(?:\\\\s+(VIRTUAL|STORED))?$`, 'i')) || [];\n        if (!$expr) return;\n\t\treturn (new this(context)).name(name).expr($expr).stored(/^STORED$/i.test(stored));\n    }\n}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\nimport AbstractExprConstraint from './AbstractExprConstraint.js';\n\nexport default class DefaultConstraint extends AbstractExprConstraint(AbstractLevel1Constraint) {}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\n\nexport default class NotNullConstraint extends AbstractLevel1Constraint {}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\nimport AbstractExprConstraint from './AbstractExprConstraint.js';\n\nexport default class OnUpdateClause extends AbstractExprConstraint(AbstractLevel1Constraint) {}", "import AbstractLevel1Constraint from './AbstractLevel1Constraint.js';\n\nexport default class NullConstraint extends AbstractLevel1Constraint {}", "import AbstractNode from '../../AbstractNode.js';\t\n\nexport default class DataType extends AbstractNode {\n\n\t/**\n\t * Instance properties\n\t */\n\tSPEC = [];\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, spec) {\n        super(context);\n        this.SPEC = spec;\n    }\n\t\n\ttoJSON() {\n\t\tif (this.SPEC.length === 1) return this.SPEC[0];\n\t\treturn this.SPEC;\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tconst spec = [].concat(json);\n\t\tif (typeof spec[0] !== 'string') return;\n\t\tconst [name, precision, flags] = parse.call(this, spec[0]);\n        // Note that some columns associated with system tables in information schema don't have standard types. e.g. \"oid\" on postgres\n\t\tif (!name) return new this(context, nornalizeSpec( ...[].concat(json)) );\n        return new this(context, nornalizeSpec(name, ...precision.split(','), ...flags, ...spec.slice(1)));\n\t}\n\t\n\tstringify() {\n\t\tconst [precision, flags] = this.SPEC.slice(1).reduce(([d, f], x) => /^\\d+$/.test(x) ? [d.concat(x), f] : [d, f.concat(x)], [[], []]);\n\t\treturn `${ this.SPEC[0] }${ precision.length ? `(${ precision.join(',') })` : `` }${ flags.length ? ` ${ flags.join(' ') }` : '' }`;\n\t}\n    \n\tstatic parse(context, expr) {\n\t\tconst [name, precision, flags] = parse.call(this, expr);\n\t\tif (!name) return;\n        return new this(context, nornalizeSpec(name, ...precision.split(','), ...flags));\n    }\n\n\tstatic pgFixedTypesRe = /^(bigint|int8|bigserial|serial8|boolean|bool|box|bytea|cidr|circle|date|double\\s+precision|float8|inet|integer|int|int4|jsonb|json|line|lseg|macaddr8|macaddr|money|path|pg_lsn|pg_snapshot|point|polygon|real|float4|smallint|int2|smallserial|serial2|serial4|serial|text|timetz|timestamptz|tsquery|tsvector|txid_snapshot|uuid|xml)$/;\n\tstatic pgVariableTypesRe = /^(bit\\s+varying|bit|varbit|character\\s+varying|character|char|varchar|interval|numeric|timestamp|time)(?:\\s+)?(?:\\(([\\d, ]+)\\))?(\\s+(?:with|without)\\s+time\\s+zone)?$/;\n\tstatic myFixedTypesRe = /^(tinyint|smallint|mediumint|enum|set|tinyblob|mediumblob|longblob|geometry|longstring|geometrycollection|multilinestring|multipoint|multipolygon)$/;\n\tstatic myVariableTypesRe = /^(float|decimal|double|tinytext|mediumtext|longtext|binary|varbinary|blob)(?:\\s+)?(?:\\(([\\d, ]+)\\))?$/;\n}\n\nfunction parse(expr) {\n\tlet name, precision, flags;\n\tfor (const key of ['pgFixedTypesRe', 'pgVariableTypesRe', 'myFixedTypesRe', 'myVariableTypesRe']) {\n\t\t[ , name, precision = '', ...flags ] = expr.match(new RegExp(this[key].source, 'i')) || [];\n\t\tif (name) break;\n\t}\n\treturn [name, precision, flags];\n}\n\n/**\n * \n * @param  {...any} spec \n * \n * @returns Array\n */\nfunction nornalizeSpec(...spec) {\n\treturn spec.map(s => /^\\d+$/.test(s) ? parseFloat(s) : s?.trim().replace(/\\s+/, ' ').toUpperCase()).filter(s => s);\n}", "import Lexer from '../../Lexer.js';\nimport { _toCamel, _fromCamel } from '@webqit/util/str/index.js';\nimport AbstractNode from '../AbstractNode.js';\nimport AutoIncrementConstraint from './constraints/AutoIncrementConstraint.js';\nimport ExpressionConstraint from './constraints/ExpressionConstraint.js';\nimport IdentityConstraint from './constraints/IdentityConstraint.js';\nimport DefaultConstraint from './constraints/DefaultConstraint.js';\nimport NotNullConstraint from './constraints/NotNullConstraint.js';\nimport PrimaryKey from './constraints/PrimaryKey.js';\nimport ForeignKey from './constraints/ForeignKey.js';\nimport UniqueKey from './constraints/UniqueKey.js';\nimport CheckConstraint from './constraints/CheckConstraint.js';\nimport OnUpdateClause from './constraints/OnUpdateClause.js';\nimport NullConstraint from './constraints/NullConstraint.js';\nimport DataType from './DataType.js';\n\nexport default class Column extends AbstractNode {\n\n    /**\n\t * Instance properties\n\t */\n\tTYPE;\n\t$TYPE;\n\tCONSTRAINTS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['TYPE'].concat(super.WRITABLE_PROPS); }\n\tstatic get SUBTREE_PROPS() { return ['CONSTRAINTS']; }\n\n    /**\n     * @var Array\n     */\n    static CONSTRAINT_TYPES = [AutoIncrementConstraint,IdentityConstraint,ExpressionConstraint,DefaultConstraint,NotNullConstraint,NullConstraint,OnUpdateClause,PrimaryKey,ForeignKey,UniqueKey,CheckConstraint];\n\n\t/**\n\t * Sets the column type,\n\t * \n\t * @param DataType|Object value\n\t * \n\t * @returns this\n\t */\n\ttype(value) {\n        if (!arguments.length) return this[this.smartKey('TYPE')];\n        return (this.build(this.smartKey('TYPE', true), [value], DataType), this);\n    }\n\n    /**\n     * AUTO_INCREMENT\n     */\n    autoIncrement(...args) { return this.constraint('AUTO_INCREMENT', ...args); }\n\n    /**\n     * IDENTITY\n     */\n    identity(...args) { return this.constraint('IDENTITY', ...args); }\n\n    /**\n     * EXPRESSION\n     */\n    expression(...args) { return this.constraint('EXPRESSION', ...args); }\n\n    /**\n     * DEFAULT\n     */\n    default(...args) { return this.constraint('DEFAULT', ...args); }\n\n    /**\n     * NOT_NULL\n     */\n    notNull(...args) { return this.constraint('NOT_NULL', ...args); }\n\n    /**\n     * NULL\n     */\n    null(...args) { return this.constraint('NULL', ...args); }\n\n    /**\n     * ON_UPDATE\n     */\n    onUpdate(...args) { return this.constraint('ON_UPDATE', ...args); }\n\n    /**\n     * PRIMARY_KEY\n     */\n    primaryKey(...args) { return this.constraint('PRIMARY_KEY', ...args); }\n\n    /**\n     * FOREIGN_KEY\n     */\n    foreignKey(...args) { return this.constraint('FOREIGN_KEY', ...args); }\n\n    /**\n     * UNIQUE_KEY\n     */\n    uniqueKey(...args) { return this.constraint('UNIQUE_KEY', ...args); }\n\n    /**\n     * CHECK\n     */\n    check(...args) { return this.constraint('CHECK', ...args); }\n\n\t/**\n\t * Adds a column-level constraint to the column,\n\t * \n\t * @param String type\n\t * @param Any value\n\t * \n\t * @returns this\n\t */\n\tconstraint(arg1, ...args) {\n        let existing, getExisting = type => this.CONSTRAINTS.find(cons => cons.TYPE === type);;\n        if (typeof arg1 === 'string') {\n            existing = getExisting(arg1);\n            if (!args.length) return existing;\n            else if (args[0] === false) return existing?.keep(false);\n            arg1 = { type: arg1, ...(typeof args[0] === 'object' ? args[0] : (typeof args[0] === 'string' ? { expr: args[0] } : {})) };\n        } else if (!(arg1 instanceof AbstractNode)) existing = getExisting(arg1.type);\n        if (existing) {\n            const instance = this.constructor.CONSTRAINT_TYPES.reduce((prev, Type) => prev || Type.fromJSON(this, arg1));\n            existing.diffWith(instance);\n        } else this.build('CONSTRAINTS', [arg1], this.constructor.CONSTRAINT_TYPES);\n        return this;\n    }\n\n    /**\n\t * Merges in new changes from another column instance,\n\t * \n\t * @param Column columnB\n\t * \n\t * @returns Void\n\t */\n    diffWith(nodeB) {\n        super.diffWith(nodeB);\n        const typeA = this.type().toJSON(), typeB = nodeB.type().toJSON();\n        if (!this.isSame(typeA, typeB)) this.type(typeB);\n        for (const type of ['IDENTITY', 'EXPRESSION', 'NOT_NULL', 'NULL', 'DEFAULT', 'AUTO_INCREMENT', 'ON_UPDATE']) {\n            const consA = this.constraint(type);\n            const consB = nodeB.constraint(type);\n            if (consA && (!consB || consB.dropped())) consA.keep(false);\n            else if (!consA && consB && !consB.dropped()) this.constraint(consB.toJSON());\n            else if (consA && consB) consA.diffWith(consB);\n        }\n\t\treturn this;\n    }\n\t\n\ttoJSON() {\n        let json = {\n            type: this.TYPE.toJSON(),\n            ...(this.$TYPE ? { $type: this.$TYPE.toJSON() } : {}),\n        };\n        for (const cons of this.CONSTRAINTS) {\n            const { type, ...constraintDef } = cons.toJSON();\n            const propName = type === 'FOREIGN_KEY' ? 'references' : _toCamel(type.toLowerCase().replace('_', ' '));\n            const props = Object.keys(constraintDef);\n            const lonePropValue = props.length === 1 ? constraintDef[props[0]] : null;\n            const propValue = !props.length ? true : (lonePropValue === false && props[0] === 'keep' ? false : (props.length === 1 && props[0] === 'expr' ? lonePropValue : constraintDef));\n            json = { ...json, [ propName ]: propValue };\n        }\n        return super.toJSON(json);\n    }\n\n\tstatic fromJSON(context, json) {\n        const { type, $type, name: _, $name: __, keep: ___, ...constraints } = json;\n        if (!DataType.fromJSON({}, type)) return;\n        return super.fromJSON(context, json, () => {\n\t\t\tconst instance = new this(context);\n            instance.type(DataType.fromJSON(instance, type));\n            instance.hardSet($type, val => instance.type(DataType.fromJSON(instance, val)));\n            const constraintsNormalized = Object.entries(constraints).reduce((normalized, [name, value]) => {\n                if ([undefined,null].includes(value)) return normalized;\n                if (!['boolean','number','string'].includes(typeof value) && !(typeof value === 'object' && value)) {\n                    throw new Error(`Invalid value for constraint \"${ name }\": ${ value }`);\n                }\n                let cons = { ...(value === false ? { keep: false } : (value === true ? {} : (['number','string'].includes(typeof value) ? { expr: value } : value))) };\n                if (name.startsWith('$')) {\n                    cons = Object.fromEntries(Object.entries(cons).map(([name, val]) => [`$${ name }`, val]));\n                    name = name.slice(1);\n                }\n                if (name === 'references') name = 'foreignKey';\n                if (name in normalized) Object.assign(normalized[name], cons);\n                else normalized[name] = cons;\n                return normalized;\n            }, {});\n            // Constraints\n            for (const name in constraintsNormalized) {\n                instance.constraint(_fromCamel(name, '_').toUpperCase(), constraintsNormalized[name]);\n            }\n            return instance;\n\t\t});\n\t}\n\t\n\tstringify() {\n        let constraints = this.CONSTRAINTS;\n        if (this.params.dialect === 'mysql') { constraints = constraints.filter(c => c.TYPE !== 'FOREIGN_KEY'); }\n        return `${ this.autoEsc(this.name()) } ${ this.type() }${ constraints.length ? ` ${ constraints.join(' ') }` : '' }`;\n    }\n    \n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ namePart, bodyPart ] = Lexer.split(expr, ['\\\\s+'], { useRegex: true, limit: 1 });\n        const [name] = this.parseIdent(context, namePart.trim(), true) || [];\n        if (!name) return;\n        const instance = (new this(context)).name(name);\n        // Parse into \"type\" and constraints\n        const qualifier = '(CONSTRAINT\\\\s+.+?\\\\s+)?';\n        const regexes = [\n            { test: `${ qualifier }(PRIMARY[ ]+KEY|NOT[ ]+NULL|GENERATED|REFERENCES|UNIQUE(?:[ ]+KEY)?|CHECK|AUTO_INCREMENT)` },\n            { backtest: '^(?!.*\\\\s+(NOT|SET)\\\\s+$)', test: `${ qualifier }NULL` },\n            { backtest: '^(?!.*\\\\s+BY\\\\s+$)', test: `${ qualifier }DEFAULT` },\n            { backtest: '^(?!.*\\\\s+REFERENCES\\\\s+)', test: `ON\\\\s+UPDATE` },\n        ];\n        const [ columnType, ...tokens ] = Lexer.split(bodyPart, regexes, { useRegex:'i', preserveDelims: true });\n        // Type\n        instance.type(parseCallback(instance, columnType.trim(), [DataType]));\n        // Constraints\n        for (const constraint of tokens) {\n            const cons = parseCallback(instance, constraint, this.CONSTRAINT_TYPES);\n            instance.build('CONSTRAINTS', [cons], this.CONSTRAINT_TYPES);\n        }\n        return instance;\n    }\n}", "import Lexer from '../../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class Index extends AbstractNode {\n\n\tTYPE;\n\t$TYPE;\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n\tstatic get WRITABLE_PROPS() { return ['TYPE', 'COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the index type,\n\t * \n\t * @param Void|String value\n\t * \n\t * @returns this\n\t */\n\ttype(value) {\n\t\tif (!arguments.length) return this[this.smartKey('TYPE')];\n        return (this[this.smartKey('TYPE', true)] = value, this);\n    }\n\n\t/**\n\t * Sets/gets the index columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n    /**\n\t * Merges in new changes from another column instance,\n\t * \n\t * @param Column columnB\n\t * \n\t * @returns Void\n\t */\n    diffWith(nodeB) {\n        super.diffWith(nodeB);\n        if (!this.isSame(this.type(), nodeB.type())) this.type(nodeB.type());\n        if (!this.isSame(this.columns(), nodeB.columns())) this.columns(nodeB.columns());\n\t\treturn this;\n    }\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n\t\t\ttype: this.TYPE,\n\t\t\t...(this.$TYPE ? { $type: this.$TYPE } : {}),\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n\t\t});\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (typeof json?.type !== 'string' || !/^(INDEX|KEY|FULLTEXT)$/i.test(json.type) || !json.columns?.length) return;\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = (new this(context))\n\t\t\t\t.columns(json.columns)\n\t\t\t\t.type(json.type);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\tinstance.hardSet(json.$type, val => instance.type(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\t\n\tstringify() { return `${ this.type() }${ this.name() ? ` ${ this.name() }` : '' } (${ this.columns().join(', ') })`; }\n\n\tstatic parse(context, expr) {\n\t\tconst [ match, type, rest ] = /^((?:(?:FULLTEXT|SPATIAL)(?:\\s+INDEX|\\s+KEY)?)|(?:INDEX|KEY))([\\s\\S]+)$/i.exec(expr) || [];\n        if (!match) return;\n\t\tconst [ namePart, columnsPart ] = Lexer.split(rest, []);\n\t\tconst [name] = this.parseIdent(context, namePart.trim(), true);\n\t\tconst columns = Lexer.split(_unwrap(columnsPart, '(', ')'), [',']).map(columnExpr => {\n\t\t\treturn this.parseIdent(context, columnExpr.trim(), true)[0];\n\t\t});\n        return (new this(context))\n\t\t\t.type(type.replace(/\\s+(INDEX|KEY)/i, '').toUpperCase())\n\t\t\t.columns(columns)\n\t\t\t.name(name);\n    }\n}", "import AbstractNode from '../AbstractNode.js';\nimport IdentityConstraint from '../../schema/tbl/constraints/IdentityConstraint.js';\nimport TablePrimaryKey from '../../schema/tbl/constraints/TablePrimaryKey.js';\nimport TableForeignKey from '../../schema/tbl/constraints/TableForeignKey.js';\nimport TableUniqueKey from '../../schema/tbl/constraints/TableUniqueKey.js';\nimport CheckConstraint from '../../schema/tbl/constraints/CheckConstraint.js';\nimport Column from '../../schema/tbl/Column.js';\nimport Index from '../../schema/tbl/Index.js';\n\nexport default class Add extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tARGUMENT;\n\n\targument(argument = undefined) {\n\t\tif (!arguments.length) return this.ARGUMENT;\n\t\treturn (this.build('ARGUMENT', [argument], this.constructor.NODE_TYPES), this);\n\t}\n\n\ttoJSON() { return { argument: this.ARGUMENT.toJSON(), ...super.toJSON(), }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!json?.argument) return;\n        return super.fromJSON(context, json)?.argument(json.argument);\n\t}\n\t\n\tstringify() {\n\t\tconst stmts = [`${ this.CLAUSE }${ this.KIND && /^(COLUMN|TABLE|SCHEMA|DATABASE)$/i.test(this.KIND) ? ` ${ this.KIND.replace(/_/g, ' ') }${ this.hasFlag('IF_NOT_EXISTS') ? ' IF NOT EXISTS' : '' }` : '' } ${ this.argument() }`];\n\t\tif (this.argument() instanceof Column) {\n\t\t\tif (this.hasFlag('AFTER')) stmts.push(this.getFlag('AFTER')?.replace(':', ' '))\n\t\t\telse if (this.hasFlag('FIRST')) stmts.push('FIRST');\n\t\t\tconst constraintToHandle = this.params.dialect === 'mysql' && this.argument().foreignKey();\n\t\t\tif (constraintToHandle) return [stmts.join(' '), `ADD ${ TableForeignKey.fromJSON(this, constraint.toJSON()).columns([this.argument().name()]) }`].join(';\\n');\n\t\t}\n\t\treturn stmts.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind = '', ifNotExists, argumentExpr ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(?:(${ this.KINDS.map(s => s.replace(/_/g, '\\\\s+')).join('|') })\\\\s+)?(IF\\\\s+NOT\\\\s+EXISTS\\\\s+)?([\\\\s\\\\S]+)$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind.replace(/\\s+/g, '_').toUpperCase());\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\tif (!kind || /^COLUMN$/i.test(kind)) {\n\t\t\tconst [ , $argumentExpr, $first, $afterRef ] = argumentExpr.trim().match(/([\\s\\S]+)\\s+(?:(FIRST)|AFTER\\s+(.+))$/i) || [ , argumentExpr.trim() ];\n\t\t\tif ($first) instance.withFlag('FIRST');\n\t\t\tif ($afterRef) instance.withFlag(`AFTER:${ $afterRef }`);\n\t\t\tinstance.argument(parseCallback(instance, $argumentExpr, [Column]));\n\t\t} else if (/^TABLE|SCHEMA|DATABASE$/i.test(kind)) {\n\t\t\tinstance.argument(parseCallback(instance, argumentExpr, this.NODE_TYPES));\n\t\t} else {\n\t\t\tinstance.argument(parseCallback(instance, `${ kind} ${ argumentExpr }`, this.NODE_TYPES));\n\t\t}\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'ADD'; }\n    static NODE_TYPES = [IdentityConstraint,TablePrimaryKey,TableForeignKey,TableUniqueKey,CheckConstraint,Index,Column];\n    static KINDS = ['COLUMN','CONSTRAINT', 'PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE_KEY', 'CHECK', 'FULLTEXT_INDEX', 'SPATIAL_INDEX', 'INDEX', 'KEY'];\n}", "import Identifier from '../../components/Identifier.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class Drop extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tIDENT;\n\n\tident(value) {\n\t\tif (!arguments.length) return this.IDENT;\n\t\treturn (this.build('IDENT', [value], Identifier), this);\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\t...(this.IDENT ? { ident: this.IDENT.toJSON() } : {}),\n\t\t\t...super.toJSON()\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\t// At least one of them:\n\t\tif (!json?.kind && !Identifier.fromJSON(context, json?.ident)) return;\n\t\tconst instance = super.fromJSON(context, json);\n\t\tif (json.ident) instance?.ident(json.ident);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst restrictOrCascade = this.getFlag('RESTRICT') || this.getFlag('CASCADE');\n\t\tlet kind = this.KIND?.replace(/_/g, ' '), ident = this.IDENT;\n\t\tif (['PRIMARY_KEY', 'FOREIGN_KEY', 'CHECK'].includes(this.KIND)) {\n\t\t\tif (this.params.dialect === 'mysql') {\n\t\t\t\tif (this.KIND === 'PRIMARY_KEY') { ident = null; }\n\t\t\t} else { kind = 'CONSTRAINT'; }\n\t\t}\n\t\treturn `${ this.CLAUSE }${ kind ? ` ${ kind }` : '' }${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' }${ ident ? ` ${ ident }` : '' }${ restrictOrCascade ? ` ${ restrictOrCascade }` : '' }`;\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, temporaryTable, kind, ifExists, name, restrictOrCascade ] = (new RegExp(`^${ this.CLAUSE }(\\\\s+TEMPORARY)?(?:\\\\s+(${ this.KINDS.map(s => s.replace(/_/g, '\\\\s+')).join('|') }))?(\\\\s+IF\\\\s+EXISTS)?(?:\\\\s+([\\\\s\\\\S]+?)(?:\\\\s+(RESTRICT|CASCADE|FORCE))?)?$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind?.replace(/\\s+/g, '_').toUpperCase());\n\t\tif (name) instance.ident(parseCallback(context, name, [Identifier]));\n\t\tif (temporaryTable) instance.withFlag('TEMPORARY');\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tif (restrictOrCascade) instance.withFlag(restrictOrCascade);\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'DROP'; }\n    static KINDS = ['COLUMN', 'CONSTRAINT', 'PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE_KEY', 'CHECK', 'INDEX', 'KEY', 'IDENTITY', 'EXPRESSION', 'DEFAULT', 'NOT_NULL', 'NULL', 'AUTO_INCREMENT', 'ON_UPDATE'];\n}", "import AbstractNode from '../AbstractNode.js';\nimport DataType from '../../schema/tbl/DataType.js';\nimport Identifier from '../../components/Identifier.js';\n\nexport default class Set extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tARGUMENT;\n\n\targument(value = undefined) {\n\t\tif (!arguments.length) return this.ARGUMENT;\n\t\tif (['DATA_TYPE','TYPE'].includes(this.KIND)) {\n\t\t\tthis.build('ARGUMENT', [value], DataType);\n\t\t} else if (this.KIND === 'SCHEMA') {\n\t\t\tthis.build('ARGUMENT', [value], Identifier);\n\t\t} else { this.ARGUMENT = value; }\n\t\treturn this;\n\t}\n\n\ttoJSON() { return { argument: this.ARGUMENT?.toJSON?.() || this.ARGUMENT, ...super.toJSON(), }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!json?.kind) return;\n        return super.fromJSON(context, json)?.argument(json.argument);\n\t}\n\t\n\tstringify() {\n\t\tif (this.KIND === 'IDENTITY') return `SET GENERATED ${ /^ALWAYS$/i.test(this.ARGUMENT) ? 'AS ALWAYS' : 'BY DEFAULT' }`;\n\t\treturn `${ this.CLAUSE } ${ this.KIND.replace(/_/g, ' ') }${ this.ARGUMENT ? ` ${ this.ARGUMENT }` : '' }`;\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind, argument ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(${ this.KINDS.map(s => s === 'IDENTITY' ? 'GENERATED' : s.replace(/_/g, '\\\\s+')).join('|') })(?:\\\\s+([\\\\s\\\\S]+))?$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst isIdentity = /^GENERATED$/i.test(kind);\n\t\tconst instance = new this(context, isIdentity ? 'IDENTITY' : kind.replace(/\\s+/g, '_').toUpperCase());\n\t\tif (/^(DATA\\s+)?TYPE$/i.test(kind)) {\n\t\t\tinstance.argument(parseCallback(instance, argument, [DataType]));\n\t\t} else if (/^SCHEMA$/i.test(kind)) {\n\t\t\tinstance.argument(parseCallback(instance, argument, [Identifier]));\n\t\t} else instance.argument(isIdentity ? (/^AS\\s+ALWAYS$/i.test(argument) ? 'always' : true) : argument);\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'SET'; }\n    static KINDS = ['SCHEMA', 'DATA_TYPE', 'TYPE', 'IDENTITY', 'DEFAULT', 'NOT_NULL', 'NULL', 'AUTO_INCREMENT', 'ON_UPDATE'];\n}", "import Lexer from '../../Lexer.js';\nimport AbstractNode from '../AbstractNode.js';\nimport Column from '../../schema/tbl/Column.js';\n\nexport default class Modify extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tARGUMENT;\n\n\targument(argument) {\n\t\tif (!arguments.length) return this.ARGUMENT;\n\t\treturn (this.build('ARGUMENT', [argument], this.constructor.NODE_TYPES), this);\n\t}\n\n\ttoJSON() { return { argument: this.ARGUMENT.toJSON(), ...super.toJSON(), }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!json?.kind || !json.argument) return;\n        return super.fromJSON(context, json)?.argument(json.argument);\n\t}\n\t\n\tstringify() {\n\t\tconst stmts = [`${ this.CLAUSE } ${ this.KIND } ${ this.ARGUMENT }`];\n        if (this.hasFlag('AFTER')) stmts.push(this.getFlag('AFTER')?.replace(':', ' '));\n        else if (this.hasFlag('FIRST')) stmts.push('FIRST');\n\t\treturn stmts.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind, $expr ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(${ this.KINDS.map(s => s).join('|') })\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind.toUpperCase());\n\t\tthis.handleArgumentExpr(instance, $expr, parseCallback);\n\t\treturn instance;\n\t}\n\n\tstatic handleArgumentExpr(instance, expr, parseCallback) {\n\t\tconst { tokens: [ $expr, afterRef ], matches } = Lexer.lex(expr, ['FIRST','AFTER'], { useRegex: 'i' });\n\t\tinstance.argument(parseCallback(instance, $expr, this.NODE_TYPES));\n\t\tif (afterRef) instance.withFlag(`AFTER:${ afterRef }`);\n        else if (matches.length) instance.withFlag('FIRST');\n\t}\n\n\tstatic get CLAUSE() { return 'MODIFY'; }\n\tstatic NODE_TYPES = [Column];\n    static KINDS = ['COLUMN'];\n}", "import Identifier from '../../components/Identifier.js';\nimport Lexer from '../../Lexer.js';\nimport Modify from './Modify.js';\n\nexport default class Change extends Modify {\n\n\t/**\n\t * Instance props.\n\t */\n\tIDENT;\n\n\tident(value) {\n\t\tif (!arguments.length) return this.IDENT;\n\t\treturn (this.build('IDENT', [value], Identifier), this);\n\t}\n\n\ttoJSON() { return { ident: this.IDENT.toJSON(), ...super.toJSON(), }; }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Identifier.fromJSON(context, json?.ident)) return;\n\t\treturn super.fromJSON(context, json)?.ident(json.ident);\n\t}\n\n\tstringify() {\n\t\tconst stmts = [`${ this.CLAUSE } ${ this.KIND } ${ this.IDENT } ${ this.ARGUMENT }`];\n        if (this.hasFlag('AFTER')) stmts.push(this.getFlag('AFTER')?.replace(':', ' '));\n        else if (this.hasFlag('FIRST')) stmts.push('FIRST');\n\t\treturn stmts.join(' ');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind, $expr ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(${ this.KINDS.map(s => s).join('|') })\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind.toUpperCase());\n\t\tconst [ ident, $$expr ] = Lexer.split($expr, ['\\\\s+'], { useRegex: 'i', limit: 1 });\n\t\tinstance.ident(parseCallback(instance, ident, [Identifier]));\n\t\tthis.handleArgumentExpr(instance, $$expr, parseCallback);\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'CHANGE'; }\n}", "import Literal from '../../components/Literal.js';\nimport Change from './Change.js';\nimport Add from '../create/Add.js';\nimport Drop from '../drop/Drop.js';\nimport Set from './Set.js';\n\nexport default class Alter extends Change {\n\n\tadd(kind, argument) { return this.argument({ clause: 'ADD', kind, argument }); }\n\n\tdrop(kind) { return this.argument({ clause: 'DROP', kind }); }\n\n\tset(kind, argument) { return this.argument({ clause: 'SET', kind, argument }); }\n\n\tstatic handleArgumentExpr(instance, expr, parseCallback) {\n\t\tif (/^(DATA\\+)?TYPE\\s+/i.test(expr)) instance.argument(parseCallback(instance, `SET ${ expr }`, [Set]));\n\t\telse instance.argument(parseCallback(instance, expr, this.NODE_TYPES));\n\t}\n\n\tstatic get CLAUSE() { return 'ALTER'; }\n\tstatic NODE_TYPES = [Add,Drop,Set,Literal];\n    static KINDS = ['COLUMN', 'CONSTRAINT', 'INDEX'];\n}", "import Lexer from '../../Lexer.js';\nimport AbstractNode from '../AbstractNode.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport Identifier from '../../components/Identifier.js';\nimport Rename from '../rename/Rename.js';\nimport Add from '../create/Add.js';\nimport Drop from '../drop/Drop.js';\nimport Set from './Set.js';\nimport Alter from './Alter.js';\nimport Change from './Change.js';\nimport Modify from './Modify.js';\n\nexport default class AlterStatement extends AbstractStatement(AbstractNode) {\n\n\t/**\n\t * Instance props.\n\t */\n\tIDENT;\n\tACTIONS = [];\n\tSUBTREE = [];\n\n\tget length() { return this.ACTIONS.length + this.SUBTREE.length; }\n\n\tident(value) {\n\t\tif (!arguments.length) return this.IDENT;\n\t\treturn (this.build('IDENT', [value], Identifier), this);\n\t}\n\n\taction(...actions) {\n\t\tif (!arguments.length) return this.ACTIONS[this.ACTIONS.length - 1];\n\t\treturn (this.build('ACTIONS', actions, this.constructor.NODE_TYPES), this);\n\t}\n\n\tcreate(kind, argument) { return this.action({ clause: 'CREATE', kind, argument }); }\n\n\trename(kind, ident, argument) { return this.action({ clause: 'RENAME', kind, ident, argument }); }\n\n\tmodify(kind, argument) { return this.action({ clause: 'MODIFY', kind, argument }); }\n\n\tchange(kind, ident, argument) { return this.action({ clause: 'CHANGE', kind, ident, argument }); }\n\n\talter(kind, ident, argument) { return this.action({ clause: 'ALTER', kind, ident, argument }); }\n\n\tadd(kind, argument) { return this.action({ clause: 'ADD', kind, argument }); }\n\n\tdrop(kind, ident) { return this.action({ clause: 'DROP', kind, ident }); }\n\n\tset(kind, argument) { return this.action({ clause: 'SET', kind, argument }); }\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tident: this.IDENT.toJSON(),\n            actions: this.ACTIONS.map(x => x.toJSON()),\n\t\t\t...super.toJSON(),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!json?.kind || !Array.isArray(json.actions) || !Identifier.fromJSON(context, json?.ident)) return;\n\t\tconst instance = super.fromJSON(context, json);\n\t\tinstance?.ident(json.ident).action(...json.actions);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tif (!this.length) return '';\n\t\tconst resolveIdent = ident => {\n\t\t\tif (ident.prefix() || ['SCHEMA','DATABASE'].includes(this.KIND)) return ident;\n\t\t\treturn ident.clone().prefix(this.$trace('get:DATABASE_NAME'));\n\t\t};\n\t\tconst [ stmts, renames, ownRename, ownMove ] = this.ACTIONS.reduce(([a, b, c, d, ], action) => {\n\t\t\tif (action instanceof Rename) return action.KIND ? [a, b.concat(action), c, d] : [a, b, action, d];\n\t\t\tif (action instanceof Set && action.KIND === 'SCHEMA') return [a, b, c, action];\n\t\t\treturn [a.concat(action), b, c, d];\n\t\t}, [[], [], ]);\n\t\tconst writeBaseStmt = ident => `${ this.CLAUSE } ${ this.KIND }${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ ident }`;\n\t\tconst sql = [...this.SUBTREE];\n\t\tconst ident = resolveIdent(this.ident());\n\t\tif (stmts.length) sql.push(`${ writeBaseStmt(ident) }\\n\\t${ stmts.join(',\\n\\t') }`);\n\t\tfor (const stmt of renames.concat(ownRename || [])) sql.push(`${ writeBaseStmt(ident) } ${ stmt }`);\n\t\tif (ownMove) sql.push(`${ writeBaseStmt(ownRename && resolveIdent(ownRename.ARGUMENT) || ident) } ${ ownMove }`);\n\t\treturn sql.join(';\\n');\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, kind, $expr ] = (new RegExp(`^${ this.CLAUSE }\\\\s+(${ this.KINDS.map(s => s).join('|') })\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context, kind.toUpperCase());\n\t\tconst [ ident, $$expr ] = Lexer.split($expr, ['\\\\s+'], { useRegex: 'i', limit: 1 });\n\t\tinstance.ident(parseCallback(instance, ident, [Identifier]));\n\t\tinstance.action(...Lexer.split($$expr, [',']).map(s => parseCallback(instance, s, this.NODE_TYPES)));\n\t\treturn instance;\n\t}\n\n\tstatic get CLAUSE() { return 'ALTER'; }\n\tstatic NODE_TYPES = [Rename,Alter,Change,Modify,Add,Drop,Set];\n    static KINDS = ['TABLE', 'SCHEMA', 'DATABASE'];\n}", "\nimport AbstractStatement from '../AbstractStatement.js';\nimport Drop from './Drop.js';\n\nexport default class DropStatement extends AbstractStatement(Drop) {\n\t\n\tstringify() {\n\t\tconst restrictOrCascade = this.getFlag('RESTRICT') || this.getFlag('CASCADE');\n\t\tlet ident = this.ident();\n\t\tif (!ident.prefix() && this.KIND === 'TABLE') ident = ident.clone().prefix(this.$trace('get:DATABASE_NAME'));\n\t\treturn `${ this.CLAUSE }${ this.getFlag('TEMPORARY') ? ' TEMPORARY' : '' } ${ this.KIND }${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ ident }${ restrictOrCascade ? ` ${ restrictOrCascade }` : '' }`;\n\t}\n\n\tstatic get CLAUSE() { return 'DROP'; }\n    static KINDS = ['TABLE', 'SCHEMA', 'DATABASE'];\n}", "import { _unwrap, _wrapped } from '@webqit/util/str/index.js';\nimport Lexer from '../../Lexer.js';\nimport AbstractNode from '../AbstractNode.js';\nimport Identifier from '../../components/Identifier.js';\nimport AlterStatement from '../../ddl/alter/AlterStatement.js';\nimport AbstractLevel2Constraint from './constraints/AbstractLevel2Constraint.js';\nimport TablePrimaryKey from './constraints/TablePrimaryKey.js';\nimport TableForeignKey from './constraints/TableForeignKey.js';\nimport TableUniqueKey from './constraints/TableUniqueKey.js';\nimport CheckConstraint from './constraints/CheckConstraint.js';\nimport Column from './Column.js';\nimport Index from './Index.js';\t\t\nimport DataType from './DataType.js';\n\nexport default class TableSchema extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tPREFIX;\n\t$PREFIX;\n\tCOLUMNS = [];\n\tCONSTRAINTS = [];\n\tINDEXES = [];\n\n\t/**\n\t * Other props\n\t */\n\tNODES = new Set;\n\n\tstatic get WRITABLE_PROPS() { return ['PREFIX'].concat(super.WRITABLE_PROPS); }\n\tstatic get SUBTREE_PROPS() { return ['COLUMNS', 'CONSTRAINTS', 'INDEXES']; }\n\n\t/**\n\t * @var Array\n\t */\n\tstatic CONSTRAINT_TYPES = [TablePrimaryKey,TableForeignKey,TableUniqueKey,CheckConstraint];\n\n    /**\n     * PRIMARY_KEY\n     */\n    primaryKey() { return [...this.NODES].find(node => node.TYPE === 'PRIMARY_KEY'); }\n\n    /**\n     * FOREIGN_KEY\n     */\n    foreignKeys() { return [...this.NODES].filter(node => node.TYPE === 'FOREIGN_KEY'); }\n\n    /**\n     * UNIQUE_KEY\n     */\n    uniqueKeys() { return [...this.NODES].filter(node => node.TYPE === 'UNIQUE_KEY'); }\n\n    /**\n     * CHECK\n     */\n    checks() { return [...this.NODES].filter(node => node.TYPE === 'CHECK'); }\n\n\t/**\n\t * Returns prefix or sets prefix\n\t * \n\t * @param Void|String prefix\n\t * \n\t * @returns String\n\t */\n\tprefix(prefix) {\n\t\tif (!arguments.length) return this[this.smartKey('PREFIX')];\n        return (this[this.smartKey('PREFIX', true)] = prefix, this);\n\t}\n\n\t/**\n\t * Returns a column or adds a column to the schema,\n\t * \n\t * @param String|Column column\n\t * \n\t * @returns Any\n\t */\n\tcolumn(column) {\n\t\tif (typeof column === 'string') return this.COLUMNS.find(col => this.isSame(col.name(), column, 'ci'));\n\t\treturn (this.build('COLUMNS', [column], Column), this.COLUMNS[this.COLUMNS.length - 1]);\n\t}\n\n\t/**\n\t * Returns a constraint or adds a constraint to the schema,\n\t * \n\t * @param String|TablePrimaryKey,TableForeignKey,TableUniqueKey,CheckConstraint constraint\n\t * \n\t * @returns Any\n\t */\n\tconstraint(constraint) {\n\t\tif (typeof constraint === 'string') return this.CONSTRAINTS.find(cons => this.isSame(cons.name(), constraint, 'ci'));\n\t\treturn (this.build('CONSTRAINTS', [constraint], this.constructor.CONSTRAINT_TYPES), this.CONSTRAINTS[this.CONSTRAINTS.length - 1]);\n\t}\n\n\t/**\n\t * Returns a constraint or adds a constraint to the schema,\n\t * \n\t * @param String|Index index\n\t * \n\t * @returns Any\n\t */\n\tindex(index) {\n\t\tif (typeof index === 'string') return this.INDEXES.find(idx => this.isSame(idx.name(), index, 'ci'));\n\t\treturn (this.build('INDEXES', [index], Index), this.INDEXES[this.INDEXES - 1]);\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param Table nodeB\n\t * \n\t * @returns this\n\t */\n\tdiffWith(nodeB) {\n\t\t// DIFF NAME & KEEP\n\t\tsuper.diffWith(nodeB);\n        if (!this.isSame(nodeB.prefix(), this.prefix(), 'ci')) this.prefix(nodeB.prefix());\n\t\t// DIFF STRUCTURE\n\t\tconst getNode = (instance, name) => [...instance.NODES].find(node => this.isSame(node.NAME, name, 'ci'));\n\t\tconst getNames = instance => {\n\t\t\treturn [...instance.NODES].reduce(([names, unnamed], node) => {\n\t\t\t\tif (![Column,AbstractLevel2Constraint,Index].some(x => node instanceof x)) return [names, unnamed];\n\t\t\t\tif (!node.NAME) return [names, unnamed.add(node)];\n\t\t\t\treturn [names.add(node.NAME), unnamed];\n\t\t\t}, [new Set, new Set]);\n\t\t};\n\t\tconst [ namesA ] = getNames(this);\n\t\tconst [ namesB, unnamedB ] = getNames(nodeB);\n\t\tconst addNode = subNodeB => {\n\t\t\tif (subNodeB instanceof AbstractLevel2Constraint) {\n\t\t\t\tif (subNodeB.CONTEXT instanceof Column) {\n\t\t\t\t\tconst columnName = subNodeB.CONTEXT.NAME;\n\t\t\t\t\t// Is the column also a new column? Ignore\n\t\t\t\t\t// (Note that we're asking namesA as that's the originals before fresh additions)\n\t\t\t\t\tif (!namesA.has(columnName)) return;\n\t\t\t\t\tgetNode(this, columnName).constraint(subNodeB.toJSON());\n\t\t\t\t} else this.constraint(subNodeB.toJSON());\n\t\t\t} else if (subNodeB instanceof Index) this.index(subNodeB.toJSON());\n\t\t\telse this.column(subNodeB.toJSON());\n\t\t};\n\t\tfor (const name of new Set([...namesA, ...namesB])) {\n\t\t\tconst nodeA = getNode(this, name);\n\t\t\tconst subNodeB = getNode(nodeB, name);\n\t\t\tif (namesA.has(name) && !namesB.has(name)) {\n\t\t\t\tnodeA.keep(false);\n\t\t\t} else if (!namesA.has(name)) {\n\t\t\t\taddNode(subNodeB);\n\t\t\t} else {\n\t\t\t\tnodeA.diffWith(subNodeB);\n\t\t\t}\n\t\t}\n\t\tfor (const subNodeB of unnamedB) addNode(subNodeB);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param AlterStatement altInstance\n\t * \n\t * @returns this\n\t */\n\talterWith(altInstance) {\n\t\tconst getNode = (reference, ifExists = false) => {\n\t\t\tconst node = [...this.NODES].find(node => {\n\t\t\t\treturn (reference.kind === 'COLUMN' ? node instanceof Column : (reference.kind === 'CONSTRAINT' ? node instanceof AbstractLevel2Constraint : node.TYPE === reference.kind/* constraint or index */))\n\t\t\t\t&& (!reference.name ? reference.kind === 'PRIMARY_KEY'/* mysql only */ : this.isSame(node.NAME, reference.name, 'ci'))\n\t\t\t});\n\t\t\tif (!node && !ifExists) throw new Error(`${ reference.kind }${ reference.name ? ` \"${ reference.name }\"` : '' } does not exist.`);\n\t\t\treturn node;\n\t\t}\n\t\tfor (const action of altInstance.ACTIONS) {\n\t\t\tif (action.CLAUSE === 'RENAME') {\n\t\t\t\tif (action.KIND) {\n\t\t\t\t\tgetNode({ kind: action.KIND, name: action.ident().name() }).name(action.argument().name());\n\t\t\t\t} else {\n\t\t\t\t\tthis.name(action.argument().name());\n\t\t\t\t\tthis.prefix(action.argument().prefix());\n\t\t\t\t}\n\t\t\t} else if (action.CLAUSE === 'SET') {\n\t\t\t\tif (action.KIND === 'SCHEMA') {\n\t\t\t\t\tthis.prefix(action.argument());\n\t\t\t\t}\n\t\t\t} else if (action.CLAUSE === 'ADD') {\n\t\t\t\tif (action.argument() instanceof AbstractLevel2Constraint) {\n\t\t\t\t\tif (action.argument().columns().length === 1) {\n\t\t\t\t\t\tgetNode({ kind: 'COLUMN', name: action.argument().columns()[0] }).constraint(action.argument().toJSON());\n\t\t\t\t\t} else this.constraint(action.argument().toJSON());\n\t\t\t\t} else if (action.argument() instanceof Index) {\n\t\t\t\t\tthis.index(action.argument().toJSON());\n\t\t\t\t} else if (!action.hasFlag('IF_NOT_EXISTS') || !getNode({ kind: 'COLUMN', name: action.argument().name() }, true)) {\n\t\t\t\t\tthis.column(action.argument().toJSON());\n\t\t\t\t}\n\t\t\t} else if (action.CLAUSE === 'DROP') {\n\t\t\t\tconst node = getNode({ kind: action.KIND, name: action.ident().name() }, action.hasFlag('IF_EXISTS'));\n\t\t\t\tnode?.keep(false);\n\t\t\t} else if (['CHANGE', 'MODIFY'].includes(action.CLAUSE)) {\n\t\t\t\tconst node = action.CLAUSE === 'CHANGE' ? getNode({ kind: 'COLUMN', name: action.ident().name() }) : getNode({ kind: 'COLUMN', name: action.argument().name() });\n\t\t\t\tnode.diffWith(action.argument());\n\t\t\t} else if (action.CLAUSE === 'ALTER') {\n\t\t\t\tconst node = getNode({ kind: action.KIND, name: action.ident().name() }, action.hasFlag('IF_EXISTS'));\n\t\t\t\tif (!node) continue;\n\t\t\t\tconst subAction = action.argument();\n\t\t\t\tif (subAction.CLAUSE === 'ADD') {\n\t\t\t\t\tif (subAction.argument().TYPE === 'EXPRESSION') throw new Error(`Cannot add EXPRESSION constraint after column creation.`);\n\t\t\t\t\tconst existing = node.constraint(subAction.argument().TYPE);\n\t\t\t\t\tif (existing) throw new Error(`Constraint ${ subAction.argument().TYPE } already exists on ${ node.name() }.`);\n\t\t\t\t\tnode.constraint(subAction.argument());\n\t\t\t\t} else if (subAction.CLAUSE === 'DROP') {\n\t\t\t\t\tconst existing = node.constraint(subAction.KIND);\n\t\t\t\t\tif (existing) existing.keep(false);\n\t\t\t\t\telse if (['IDENTITY','EXPRESSION'].includes(subAction.KIND) && !subAction.hasFlag('IF_EXISTS')) {\n\t\t\t\t\t\tthrow new Error(`Cannot drop ${ subAction.KIND }; does not exist.`);\n\t\t\t\t\t}\n\t\t\t\t} else if (subAction.CLAUSE === 'SET') {\n\t\t\t\t\tif (subAction.argument() instanceof DataType) {\n\t\t\t\t\t\tnode.type(subAction.argument().toJSON());\n\t\t\t\t\t} else if (['DEFAULT', 'ON_UPDATE'].includes(subAction.KIND)) {\n\t\t\t\t\t\tnode.constraint(subAction.KIND, subAction.argument());\n\t\t\t\t\t} else if (['NOT_NULL', 'NULL', 'AUTO_INCREMENT'].includes(subAction.KIND)) {\n\t\t\t\t\t\tnode.constraint(subAction.KIND, true);\n\t\t\t\t\t} else if (subAction.KIND === 'IDENTITY') {\n\t\t\t\t\t\tconst existing = node.identity();\n\t\t\t\t\t\tif (!existing) throw new Error(`Cannot modify IDENTITY constraint on ${ node.name() }; does not exist.`);\n\t\t\t\t\t\texisting.always(/^ALWAYS$/i.test(subAction.argument()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetAlt() {\n\t\tconst instance = AlterStatement.fromJSON(this.CONTEXT, {\n\t\t\tkind: 'TABLE',\n\t\t\tident: [this.PREFIX,this.NAME], // Explicit old name important\n\t\t\tactions: []\n\t\t});\n\t\tif (this.$NAME && this.NAME) {\n\t\t\tif (!this.isSame(this.$NAME, this.NAME, 'ci')) {\n\t\t\t\tinstance.rename(null, null, this.$NAME);\n\t\t\t}\n\t\t\tif (this.$PREFIX && !this.isSame(this.$PREFIX, this.PREFIX, 'ci')) {\n\t\t\t\tinstance.set('SCHEMA', this.$PREFIX);\n\t\t\t}\n\t\t}\n\t\tconst constraintDirty = (cons, includingName = false) => (cons.keep() !== true || ['$EXPR','$ALWAYS','$TARGET_TABLE','$TARGET_COLUMNS','$MATCH_RULE','$UPDATE_RULE','$DELETE_RULE'].concat(includingName ? '$NAME' : []).some(k => /*exists*/k in cons && /*not empty*/(Array.isArray(cons[k]) ? cons[k].length : ![undefined, null].includes(cons[k])) && /*different*/!this.isSame(cons[k.slice(1)], cons[k], 'ci')));\n\t\tfor (const col of this.COLUMNS) {\n\t\t\t// DROP COLUMN?\n\t\t\tif (col.keep() === false) {\n\t\t\t\tinstance.drop('COLUMN', col.NAME);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD COLUMN?\n\t\t\tif (col.keep() !== true) {\n\t\t\t\tinstance.add('COLUMN', col.clone());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER COLUMN?\n\t\t\tif (col.keep() === true) {\n\t\t\t\tif (this.params.dialect === 'mysql') {\n\t\t\t\t\t// // Column name or type changed, or these attrs changed? Use MySQL CHANGE clause?\n\t\t\t\t\tif ((col.$TYPE && !this.isSame(col.$TYPE.toJSON(), col.TYPE.toJSON(), 'ci'))\n\t\t\t\t\t|| (col.CONSTRAINTS.some(cons => ['EXPRESSION', 'NOT_NULL', 'NULL', 'AUTO_INCREMENT', 'ON_UPDATE'].includes(cons.TYPE) && constraintDirty(cons, true)))) {\n\t\t\t\t\t\tconst columnClone = col.clone();\n\t\t\t\t\t\tcolumnClone.CONSTRAINTS = columnClone.CONSTRAINTS.filter(cons => !(cons instanceof AbstractLevel2Constraint));\n\t\t\t\t\t\tinstance.modify('COLUMN', columnClone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Add/set default\n\t\t\t\t\t\tconst consDefault = col.CONSTRAINTS.find(cons => cons.TYPE === 'DEFAULT' && constraintDirty(cons, true));\n\t\t\t\t\t\tif (consDefault) {\n\t\t\t\t\t\t\tinstance.alter('COLUMN', col.NAME, q => {\n\t\t\t\t\t\t\t\tif (consDefault.keep() === false) q.drop('DEFAULT');\n\t\t\t\t\t\t\t\telse a.set('DEFAULT', consDefault.expr());\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Column rename? Must come last!!!\n\t\t\t\t\t\tif (col.$NAME && !this.isSame(col.$NAME, col.NAME, 'ci')) {\n\t\t\t\t\t\t\tinstance.rename('COLUMN', col.NAME, col.$NAME);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Column type change?\n\t\t\t\t\tif (col.$TYPE && !this.isSame(col.$TYPE.toJSON(), col.TYPE.toJSON(), 'ci')) {\n\t\t\t\t\t\tinstance.alter('COLUMN', col.NAME, { clause: 'SET', kind: 'DATA_TYPE', argument: DataType.fromJSON(col, col.$TYPE.toJSON()) });\n\t\t\t\t\t}\n\t\t\t\t\t// Constraints level1 changed?\n\t\t\t\t\tconst constraintsLevel1 = col.CONSTRAINTS.filter(cons => !(cons instanceof AbstractLevel2Constraint) && constraintDirty(cons, true));\n\t\t\t\t\tfor (const cons of constraintsLevel1) {\n\t\t\t\t\t\tinstance.alter('COLUMN', col.NAME, (() => {\n\t\t\t\t\t\t\tif (cons.keep() === false) return { clause: 'DROP', kind: cons.TYPE };\n\t\t\t\t\t\t\telse if (cons.TYPE === 'EXPRESSION') throw new Error('EXPRESSION constraints cannot be added or modified after column creation.');\n\t\t\t\t\t\t\telse if (cons.TYPE === 'IDENTITY') return !cons.keep() ? { clause: 'ADD', argument: cons.clone() } : { clause: 'SET', kind: 'IDENTITY', argument: cons.always() ? 'ALWAYS' : true };\n\t\t\t\t\t\t\telse if (['DEFAULT'/*, 'ON_UPDATE'*//*useless in postgres*/].includes(cons.TYPE)) return { clause: 'SET', kind: cons.TYPE, argument: cons.expr() };\n\t\t\t\t\t\t\telse if (['NOT_NULL'/*, 'NULL'*//*pretty useless in both languages*/].includes(cons.TYPE)) return { clause: 'SET', kind: cons.TYPE };\n\t\t\t\t\t\t})());\n\t\t\t\t\t}\n\t\t\t\t\t// Column rename? Must come last!!!\n\t\t\t\t\tif (col.$NAME && !this.isSame(col.$NAME, col.NAME, 'ci')) {\n\t\t\t\t\t\tinstance.rename('COLUMN', col.NAME, col.$NAME);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Constraints level2 changed?\n\t\t\t\tconst constraintsLevel2 = col.CONSTRAINTS.filter(cons => cons instanceof AbstractLevel2Constraint);\n\t\t\t\tfor (const cons of constraintsLevel2) {\n\t\t\t\t\tif (constraintDirty(cons)) {\n\t\t\t\t\t\tif ([true, false].includes(cons.keep())) instance.drop(cons.TYPE, cons.NAME);\n\t\t\t\t\t\tif (cons.keep() !== false) {\n\t\t\t\t\t\t\tconst columnName = col.$trace('get:TABLE_SCHEMA').altsCascaded ? col.name() : col.NAME;\n\t\t\t\t\t\t\tconst tableCons = this.constructor.CONSTRAINT_TYPES.find(Type => Type.TYPE === cons.TYPE).fromJSON(cons.CONTEXT, { ...cons.toJSON(), columns: [columnName] });\n\t\t\t\t\t\t\tinstance.add(tableCons.TYPE, tableCons);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (cons.keep() === true && cons.$NAME && !this.isSame(cons.$NAME, cons.NAME, 'ci')) {\n\t\t\t\t\t\tinstance.rename('CONSTRAINT', cons.NAME, cons.$NAME);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst tableLevlConstraintDirty = cons => constraintDirty(cons) || (cons.$COLUMNS?.length && !this.isSame(cons.$COLUMNS, cons.COLUMNS, 'ci'));\n\t\tfor (const cons of this.CONSTRAINTS) {\n\t\t\tif (tableLevlConstraintDirty(cons)) {\n\t\t\t\tif ([true, false].includes(cons.keep())) instance.drop(cons.TYPE, cons.NAME);\n\t\t\t\tif (cons.keep() !== false) instance.add(cons.TYPE, cons.clone());\n\t\t\t} else if (cons.keep() === true && cons.$NAME && !this.isSame(cons.$NAME, cons.NAME, 'ci')) {\n\t\t\t\tinstance.rename('CONSTRAINT', cons.NAME, cons.$NAME);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\ttoJSON() {\n\t\treturn super.toJSON({\n\t\t\t...(this.PREFIX ? { prefix: this.PREFIX } : {}),\n\t\t\t...(this.$PREFIX ? { $prefix: this.$PREFIX } : {}),\n            columns: this.COLUMNS.map(column => column.toJSON()),\n            constraints: this.CONSTRAINTS.map(constraint => constraint.toJSON()),\n            indexes: this.INDEXES.map(index => index.toJSON()),\n        });\n    }\n\n\tstatic fromJSON(context, json) {\n\t\tif (!Array.isArray(json?.columns) || ['constraints', 'indexes'].some(key => key in json && !Array.isArray(json[key]))) return;\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = new this(context);\n\t\t\tinstance.hardSet(() => instance.prefix(json.prefix));\n\t\t\tinstance.hardSet(json.$prefix, val => instance.prefix(val));\n\t\t\tfor (const col of json.columns) instance.column(col);\n\t\t\tfor (const cons of (json.constraints || [])) instance.constraint(cons);\n\t\t\tfor (const idx of (json.indexes || [])) instance.index(idx);\n\t\t\treturn instance;\n\t\t});\n\t}\n\t\n\tstringify() {\n\t\tconst defs = [ this.COLUMNS.map(col => col.stringify()).join(',\\n\\t') ];\n\t\tconst constraints = this.CONSTRAINTS.slice(0);\n\t\tconst indexes = this.INDEXES.slice(0);\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tconstraints.push(...this.COLUMNS.reduce((constraints, col) => {\n\t\t\t\tconst constraint = col.foreignKey();\n\t\t\t\tif (constraint) return constraints.concat(TableForeignKey.fromJSON(this, { ...constraint.toJSON(), columns: [col.name()] }));\n\t\t\t\treturn constraints;\n\t\t\t}, []));\n\t\t}\n\t\tif (constraints.length) { defs.push(constraints.map(cnst => cnst.stringify()).join(',\\n\\t')); }\n\t\tif (indexes.length) { defs.push(indexes.map(ndx => ndx.stringify()).join(',\\n\\t')); }\n\t\tconst ident = Identifier.fromJSON(this, [this.prefix(), this.name()]);\n\t\tif (!ident.prefix()) ident.prefix(this.$trace('get:DATABASE_NAME'));\n\t\treturn `${ ident } (\\n\\t${ defs.join(',\\n\\t') }\\n)`;\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ namePart, bodyPart, ...rest ] = Lexer.split(expr, [], { limit: 2 });\n\t\tif (!namePart || !_wrapped(bodyPart || '', '(', ')')) return;\n\t\tconst instance = new this(context);\n\t\tconst ident = parseCallback(instance, namePart.trim(), [Identifier]);\n\t\tinstance.name(ident.name());\n\t\tinstance.prefix(ident.prefix());\n\t\tconst defs = Lexer.split(_unwrap(bodyPart, '(', ')'), [',']).map(def => {\n\t\t\treturn parseCallback(instance, def.trim(), [TablePrimaryKey,TableForeignKey,TableUniqueKey,CheckConstraint,Index,Column]); // Note that Column must come last\n\t\t});\n\t\tfor (const def of defs) {\n\t\t\tif (def instanceof Column) instance.column(def);\n\t\t\telse if (def instanceof Index) instance.index(def);\n\t\t\telse instance.constraint(def);\n\t\t}\n\t\treturn instance;\n\t}\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:TABLE_SCHEMA') return this;\n\t\tif (request === 'get:TABLE_NAME') return this.NAME/*IMPORTANT: OLD NAME*/;\n\t\tif (request === 'get:DATABASE_NAME' && this.prefix()) return this.PREFIX/*IMPORTANT: OLD NAME*/;\n\t\tif (['event:CONNECTED', 'event:DISCONNECTED'].includes(request) && [Column,AbstractLevel2Constraint,Index].some(x => args[0] instanceof x)) {\n\t\t\tif (request === 'event:DISCONNECTED') this.NODES.delete(args[0]);\n\t\t\telse this.NODES.add(args[0]);\n\t\t}\n\t\treturn super.$trace(request, ...args);\n\t}\n}", "import AlterStatement from '../../ddl/alter/AlterStatement.js';\nimport CreateStatement from '../../ddl/create/CreateStatement.js';\nimport DropStatement from '../../ddl/drop/DropStatement.js';\nimport TableSchema from '../tbl/TableSchema.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class DatabaseSchema extends AbstractNode {\n\n\t/**\n\t * Lists\n\t */\n\tTABLES = [];\n\tTABLE_LIST = [];\n\n    /**\n     * @Symbol.iterator\n     */\n    get [ Symbol.iterator ] () { return this.TABLES[ Symbol.iterator ]; }\n\n    /**\n     * @var Array\n     */\n    get length() { return this.TABLES.length; }\n\n\tstatic get SUBTREE_PROPS() { return ['TABLES']; }\n\n\t/**\n\t * Returns tables list\n\t * \n\t * @returns Array\n\t */\n\ttables() {\n\t\tif (!this.TABLES.length) return this.TABLE_LIST.slice();\n\t\treturn this.TABLES.reduce((tbls, tbl) => tbls.concat(tbl.name()), []);\n\t}\n\n    /**\n\t * Returns foreign keys list\n\t * \n\t * @returns Array\n\t */\n    foreignKeys() { return this.TABLES.reduce((fks, tbl) => fks.concat(tbl.foreignKeys()), []); }\n\n\t/**\n\t * Returns a table or adds a table to the schema,\n\t * \n\t * @param String|TableSchema table\n\t * \n\t * @returns Any\n\t */\n\ttable(table) {\n\t\tif (typeof table === 'string') return this.TABLES.find(tbl => this.isSame(tbl.name(), table, 'ci'));\n\t\treturn (this.build('TABLES', [table], TableSchema), this.TABLES[this.TABLES.length - 1]);\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param Database nodeB\n\t * \n\t * @returns this\n\t */\n\tdiffWith(nodeB) {\n\t\t// DIFF NAME & KEEP\n\t\tsuper.diffWith(nodeB);\n\t\t// DIFF STRUCTURE\n\t\tconst getNames = instance => new Set(instance.TABLES.map(node => node.NAME));\n\t\tconst namesA = getNames(this);\n\t\tconst namesB = getNames(nodeB);\n\t\tfor (const name of new Set([...namesA, ...namesB])) {\n\t\t\tconst nodeA = this.table(name);\n\t\t\tconst tableB = nodeB.table(name);\n\t\t\tif (namesA.has(name) && !namesB.has(name)) {\n\t\t\t\tnodeA.keep(false);\n\t\t\t} else if (!namesA.has(name)) {\n\t\t\t\tthis.table(tableB.toJSON());\n\t\t\t} else {\n\t\t\t\tnodeA.diffWith(tableB);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param AlterStatement altInstance\n\t * \n\t * @returns this\n\t */\n\talterWith(altInstance) {\n\t\tconst getTable = (name, ifExists = false) => {\n\t\t\tconst node = this.table(name);\n\t\t\tif (!node && !ifExists) throw new Error(`TABLE ${ name } does not exist.`);\n\t\t\treturn node;\n\t\t}\n\t\tfor (const action of altInstance.ACTIONS) {\n\t\t\tif (action.CLAUSE === 'RENAME') {\n\t\t\t\tif (action.KIND) {\n\t\t\t\t\tgetTable(action.ident().name()).name(action.argument().name());\n\t\t\t\t} else this.name(action.argument().name());\n\t\t\t} else if (action.CLAUSE === 'DROP') {\n\t\t\t\tconst node = getTable(action.ident().name(), action.hasFlag('IF_EXISTS'));\n\t\t\t\tnode?.keep(false);\n\t\t\t} else if (action.CLAUSE === 'ADD') {\n\t\t\t\tif (!action.hasFlag('IF_NOT_EXISTS') || !getTable(action.argument().name(), true)) {\n\t\t\t\t\tthis.table(action.argument().toJSON());\n\t\t\t\t}\n\t\t\t} else if (action.CLAUSE === 'MODIFY') {\n\t\t\t\tconst node = getTable(action.argument().name(), action.hasFlag('IF_EXISTS'));\n\t\t\t\tif (!node) continue;\n\t\t\t\tnode.diffWith(action.argument());\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetAlt() {\n\t\tconst instance = AlterStatement.fromJSON(this.CONTEXT, {\n\t\t\tkind: 'SCHEMA',\n\t\t\tident: this.NAME, // Explicit old name important\n\t\t\tactions: [],\n\t\t});\n\t\tif (this.$NAME && !this.isSame(this.$NAME, this.NAME, 'ci')) {\n\t\t\tinstance.rename(null, null, this.$NAME);\n\t\t}\n\t\tfor (const tbl of this.TABLES) {\n\t\t\tif (typeof tbl.keep() !== 'boolean') {\n\t\t\t\tinstance.SUBTREE.push(CreateStatement.fromJSON(this, { kind: 'TABLE', argument: tbl.clone() }));\n\t\t\t} else if (tbl.keep() === false) {\n\t\t\t\tinstance.SUBTREE.push(DropStatement.fromJSON(this, { kind: 'TABLE', ident: tbl.name() }));\n\t\t\t} else {\n\t\t\t\tconst alt = tbl.getAlt();\n\t\t\t\tif (alt.length) instance.SUBTREE.push(alt);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\ttoJSON() {\n\t\tif (!this.TABLES.length) return super.toJSON({ tables: this.TABLE_LIST.slice() });\n\t\treturn super.toJSON({ tables: this.TABLES.map(table => table.toJSON()) });\n\t}\n\n\tstatic fromJSON(context, json) {\n\t\tif (!(typeof json === 'object' && json) || ('tables' in json && !Array.isArray(json.tables))) return;\n\t\treturn super.fromJSON(context, json, () => {\n\t\t\tconst instance = new this(context);\n\t\t\tfor (const tbl of json.tables || []) {\n\t\t\t\tif (typeof tbl === 'string') instance.TABLE_LIST.push(tbl);\n\t\t\t\telse instance.table(tbl);\n\t\t\t}\n\t\t\treturn instance;\n\t\t});\n\t}\n\n\tstringify() { return this.autoEsc(this.name()); }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [name] = this.parseIdent(context, expr, true);\n\t\tif (!name) return;\n\t\treturn (new this(context)).name(name);\n\t}\n\n    $trace(request, ...args) {\n\t\tif (request === 'get:DATABASE_SCHEMA') return this;\n\t\tif (request === 'get:DATABASE_NAME') return this.NAME/*IMPORTANT: OLD NAME*/;\n\t\treturn super.$trace(request, ...args);\n\t}\n}", "import Identifier from '../../components/Identifier.js';\nimport AbstractStatement from '../AbstractStatement.js';\nimport DatabaseSchema from '../../schema/db/DatabaseSchema.js';\nimport TableSchema from '../../schema/tbl/TableSchema.js';\nimport Add from './Add.js';\n\nexport default class CreateStatement extends AbstractStatement(Add) {\n    \n    /**\n\t * Instance props.\n\t */\n\tident() { return this.ARGUMENT && Identifier.fromJSON(this, [this.ARGUMENT.prefix?.(), this.ARGUMENT.name()]); }\n\t\n\tstringify() {\n\t\tconst stmts = [super.stringify()];\n\t\t// Handle subtree\n\t\tif (['SCHEMA', 'DATABASE'].includes(this.KIND)) {\n\t\t\tstmts.push(...this.argument().TABLES.map(tblSchema => {\n\t\t\t\treturn this.constructor.fromJSON(this, { kind: 'TABLE', argument: tblSchema.toJSON() });\n\t\t\t}));\n\t\t}\n\t\treturn stmts.join(';\\n');\n\t}\n\n\tstatic get CLAUSE() { return 'CREATE'; }\n    static NODE_TYPES = [TableSchema, DatabaseSchema];\n    static KINDS = ['TABLE', 'SCHEMA', 'DATABASE'];\n}", "import AbstractStatement from '../AbstractStatement.js';\nimport Rename from './Rename.js';\n\nexport default class RenameStatement extends AbstractStatement(Rename) {\n    static KINDS = ['TABLE','SCHEMA','DATABASE'];\n}", "// Statements\nimport CreateStatement from './ddl/create/CreateStatement.js';\nimport AlterStatement from './ddl/alter/AlterStatement.js';\nimport DropStatement from './ddl/drop/DropStatement.js';\nimport RenameStatement from './ddl/rename/RenameStatement.js';\nimport DeleteStatement from './dml/delete/DeleteStatement.js';\nimport InsertStatement from './dml/insert/InsertStatement.js';\nimport SelectStatement from './dml/select/SelectStatement.js';\nimport UpdateStatement from './dml/update/UpdateStatement.js';\n// Expressions\nimport Expr from './components/Expr.js';\n\n/**\n * @var object\n */\nexport default [\n\t// Statements\n\tCreateStatement,\n\tAlterStatement,\n\tDropStatement,\n\tRenameStatement,\n\tInsertStatement,\n\tUpdateStatement,\n\tDeleteStatement,\n\tSelectStatement,\n\t// Expressions\n\t...\n\tExpr.Types,\n]", "import grammar from './grammar.js';\r\n\t\t\r\nexport default class Parser {\r\n\r\n\t/**\r\n\t * @property Object\r\n\t */\r\n\tstatic grammar = grammar;\r\n\r\n\tstatic parse(context, expr, grammar, params = {}) {\r\n\t\tif (!expr?.length) return;\r\n\t\tconst $grammar = grammar?.length ? grammar : this.grammar;\r\n\t\tfor (const Node of $grammar) {\r\n\t\t\tconst node = this.parseOne(context, expr, Node, params);\r\n\t\t\tif (!node) continue;\r\n\t\t\tif (params.log) console.log('.................', expr, '.................>', node.constructor.name);\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (params.assert === false) return;\r\n\t\tthrow new SyntaxError(expr);\r\n\t}\r\n\t \r\n\tstatic parseOne(context, expr, Node, params = {}) {\r\n\t\treturn Node.parse(context, expr, ($context, $expr, $grammar, $params = {}) => {\r\n\t\t\treturn this.parse($context, $expr, $grammar, { ...params, ...$params });\r\n\t\t});\r\n\t}\r\n}", "import DatabaseSchema from './db/DatabaseSchema.js';\nimport AbstractNode from '../AbstractNode.js';\n\nexport default class RootSchema extends AbstractNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tDATABASES = [];\n\n    /**\n     * @Symbol.iterator\n     */\n    get [ Symbol.iterator ] () { return this.DATABASES[ Symbol.iterator ]; }\n\n    /**\n     * @var Array\n     */\n    get length() { return this.DATABASES.length; }\n\n\t/**\n\t * Returns database list\n\t * \n\t * @returns Array\n\t */\n\tdatabases() { return this.DATABASES.map(db => db.name()); }\n\n\t/**\n\t * Returns tables list\n\t * \n\t * @returns Array\n\t */\n\ttables() { return this.DATABASES.reduce((tbls, db) => tbls.concat(db.tables().map(tbl => [db.name(), tbl])), []); }\n\n    /**\n\t * Returns foreign keys list\n\t * \n\t * @returns Array\n\t */\n    foreignKeys() { return this.DATABASES.reduce((fks, db) => fks.concat(db.foreignKeys()), []); }\n\n\t/**\n\t * Returns a table or adds a table to the schema,\n\t * \n\t * @param String|TableSchema table\n\t * \n\t * @returns Any\n\t */\n\tdatabase(database) {\n\t\tif (typeof database === 'string') return this.DATABASES.find(db => db.isSame(db.name(), database, 'ci'));\n\t\treturn (this.build('DATABASES', [database], DatabaseSchema), this.DATABASES[this.DATABASES.length - 1]);\n\t}\n\n\t/**\n\t * Finds the DB prefix for a given table name\n\t * \n\t * @param String name\n\t * \n\t * @returns Array\n\t */\n\tfindPath(name, defaultToFirst = false) {\n\t\tconst path = this.tables().find(tbl => tbl[1].toLowerCase() === name.toLowerCase())?.[0];\n\t\tif (!path && defaultToFirst) return this.databases()[0];\n\t\treturn path;\n\t}\n\n\tcascadeAlt(schemas = []) {\n\t\t// Normalize subtree \"keep\" flags\n\t\tthis.keep(this.keep(), 'auto');\n\t\tconst existingDB = schemas.filter(db => db.isSame(db.name(), this.name(), 'ci'));\n\t\t// We've been dropped or renamed?\n\t\tconst altType = this.dropped() ? 'DOWN' : (this.$NAME && this.$NAME !== this.NAME ? 'RENAME' : null);\n\t\tif (altType === 'DOWN') schemas = schemas.filter(db => db !== existingDB);\n\t\tif (altType) {\n\t\t\t// Check with all tables and call updateDatabaseReferences() on them\n\t\t\tfor (const tbl of schemas.reduce((tbls, db) => tbls.concat(db.TABLES))) {\n\t\t\t\ttbl.updateDatabaseReferences(this, altType);\n\t\t\t}\n\t\t}\n\t\t// Ask tables to also cascadeAlt()\n\t\tfor (const tbl of this.TABLES) tbl.cascadeAlt();\n\t\tthis.altsCascaded = true;\n\t\treturn this;\n\t}\n\n\tcascadeAlt() {\n\t\t// Normalize subtree \"keep\" flags\n\t\tthis.keep(this.keep(), 'auto');\n\t\tconst getAltType = node => node.dropped() ? 'DOWN' : (node.$NAME && !this.isSame(node.$NAME, node.NAME, 'ci') ? 'RENAME' : null);\n\t\t// We've been dropped or renamed?\n\t\tconst altType = getAltType(this);\n\t\tif (altType) {\n\t\t\t// TODO: Check with all tables and call updateTableReferences() on them\n\t\t}\n\t\t// A column in here was dropped or renamed?\n\t\tfor (const col of this.COLUMNS) {\n\t\t\tconst altType = getAltType(col);\n\t\t\tif (!altType) continue;\n\t\t\t// Check with our own references to columns\n\t\t\tfor (const cons of this.CONSTRAINTS) {\n\t\t\t\tif (cons instanceof CheckConstraint) continue;\n\t\t\t\tconst targetList = cons.$COLUMNS.length ? cons.$COLUMNS : cons.COLUMNS;\n\t\t\t\tconst index = targetList.indexOf(col.NAME);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tif (altType === 'DOWN') targetList.splice(index, 1);\n\t\t\t\t\telse if (altType === 'RENAME') targetList[index] = col.$NAME;\n\t\t\t\t};\n\t\t\t}\n\t\t\t// TODO: Check with all tables and call updateColumnReferences() on them\n\t\t}\n\t\tthis.altsCascaded = true;\n\t\treturn this;\n\t}\n\n\tupdateDatabaseReferences(db, altType) {\n\t\t// A database was dropped or renamed. We check with our own references to databases\n\t\tfor (const fk of this.foreignKeys()) {\n\t\t\t// Where referencing the old name\n\t\t\tif (fk.targetTable().PREFIX !== db.NAME) continue;\n\t\t\tif (altType === 'DOWN') fk.keep(false);\n\t\t\telse if (altType === 'RENAME') fk.targetTable().name([db.$NAME,fk.targetTable().NAME]);\n\t\t}\n\t}\n\n\tupdateTableReferences(tbl, altType) {\n\t\t// A table was dropped or renamed. We check with our own references to tables\n\t\tfor (const fk of this.foreignKeys()) {\n\t\t\tif (fk.targetTable().PREFIX && tbl.PREFIX && node.targetTable().prefix() !== tbl.prefix()) continue;\n\t\t\tif (node.targetTable().name() === tbl.NAME) {\n\t\t\t\tif (altType === 'DOWN') node.keep(false);\n\t\t\t\telse if (altType === 'RENAME') node.targetTable().name(tbl.$NAME);\n\t\t\t};\n\t\t}\n\t}\n\n\tupdateColumnReferences(col, altType) {\n\t\t// A column somewhere was dropped or renamed. We check with our own references to columns\n\t\tfor (const node of this.NODES) {\n\t\t\tif (!(node instanceof ForeignKey)) continue;\n\t\t\tif (node.targetTable().prefix() && col.$trace('get:DATABASE_NAME') && node.targetTable().prefix() !== col.$trace('get:DATABASE_NAME')) continue;\n\t\t\tif (node.targetTable().name() !== col.$trace('get:TABLE_NAME')) continue;\n\t\t\tconst targetList = cons.$TARGET_COLUMNS.length ? cons.$TARGET_COLUMNS : cons.TARGET_COLUMNS;\n\t\t\tconst index = targetList.indexOf(col.NAME);\n\t\t\tif (index > -1) {\n\t\t\t\tif (altType === 'DOWN') targetList.splice(index, 1);\n\t\t\t\telse if (altType === 'RENAME') targetList[index] = col.$NAME;\n\t\t\t};\n\t\t}\n\t}\n\n\ttoJSON() { return this.DATABASES.map(db => db.toJSON()); }\n\n    static fromJSON(context, json) {\n        if (!Array.isArray(json)) return;\n        const instance = new this(context);\n        for (const db of json) instance.database(db);\n        return instance;\n    }\n\n\t$trace(request, ...args) {\n\t\tif (request === 'get:ROOT_SCHEMA') return this;\n        return super.$trace(request, ...args);\n\t}\n}", "\nimport CreateStatement from '../lang/ddl/create/CreateStatement.js';\nimport DropStatement from '../lang/ddl/drop/DropStatement.js';\nimport DatabaseSchema from '../lang/schema/db/DatabaseSchema.js';\n\nexport default class Savepoint {\n\n    /**\n     * @constructor\n     */\n    constructor(client, json, direction = 'backward') {\n        Object.defineProperty(this, '$', {\n            value: {\n                client,\n                json,\n                direction,\n            }\n        });\n    }\n\n    /**\n     * @returns Driver\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @returns String\n     */\n    get direction() { return this.$.direction; }\n\n    /**\n     * @returns String\n     */\n    get id() { return this.$.json.id; }\n\n    /**\n     * @returns String\n     */\n    get databaseTag() { return this.$.json.database_tag; }\n\n    /**\n     * @returns Number\n     */\n    get versionTag() { return this.$.json.version_tag; }\n\n    /**\n     * @returns Number\n     */\n    get versionMax() { return this.$.json.version_max; }\n\n    /**\n     * @returns Number\n     */\n    get cursor() { return this.$.json.$cursor; }\n\n    /**\n     * @returns Date\n     */\n    get commitDate() { return this.$.json.commit_date; }\n\n    /**\n     * @returns String\n     */\n    get commitDesc() { return this.$.json.commit_desc; }\n\n    /**\n     * @returns String\n     */\n    get commitRef() { return this.$.json.commit_ref; }\n\n    /**\n     * @returns Date\n     */\n    get rollbackDate() { return this.$.json.rollback_date; }\n\n    /**\n     * @returns String\n     */\n    get rollbackDesc() { return this.$.json.rollback_desc; }\n\n    /**\n     * @returns String\n     */\n    get rollbackRef() { return this.$.json.rollback_ref; }\n\n    /**\n     * @returns Bool\n     */\n    get keep() { return this.$.json.keep; }\n\n    /**\n     * @returns String\n     */\n    get rollbackEffect() {\n        const $outcome = typeof this.$.json.keep !== 'boolean' ? ['DROP', 'RECREATE'] : (this.$.json.keep === false ? ['RECREATE', 'DROP'] : ['ALTER']);\n        return this.direction === 'forward' ? $outcome.reverse()[0] : $outcome[0];\n    }\n\n    /**\n     * @returns String\n     */\n    get rollbackQuery() {\n        const schema = DatabaseSchema.fromJSON(this.client, this.schema());\n        if (this.direction !== 'forward') {\n            schema.reverseAlt(true);\n            schema.keep(schema.keep(), 'auto');\n        }\n        // Execute rollback\n        if (schema.keep() === false) return DropStatement.fromJSON(this.client, { kind: 'SCHEMA', ident: schema.name() }).withFlag(this.client.params.dialect === 'mysql' ? '' : 'CASCADE');\n        if (schema.keep() === true) return schema.getAlt().with({ resultSchema: schema });\n        return CreateStatement.fromJSON(this.client, { kind: 'SCHEMA', argument: schema });\n    }\n\n    /**\n     * @returns String\n     */\n    name(postRollback = false) {\n        if (postRollback) return this.direction === 'forward' && this.$.json.$name || this.$.json.name;\n        return this.direction !== 'forward' && this.$.json.$name || this.$.json.name;\n    }\n\n    /**\n     * @returns Object\n     */\n    schema() {\n        const { name, $name, tables = [], keep } = this.$.json;\n        return { name, ...($name ? { $name } : {}), tables, keep };\n    }\n\n    /**\n     * @returns Object\n     */\n    toJSON() {\n        const { id, database_tag: databaseTag, version_tag: versionTag, version_max: versionMax, $cursor, commit_date: commitDate, commit_desc: commitDesc, commit_ref: commitRef, rollback_date: rollbackDate, rollback_desc: rollbackDesc, rollback_ref: rollbackRef } = this.$.json;\n        return { id, name: this.name(), databaseTag, versionTag, versionMax, cursor: $cursor, commitDate, commitDesc, commitRef, rollbackDate, rollbackDesc, rollbackRef, rollbackEffect: this.rollbackEffect };\n    }\n\n    /**\n     * @returns Bool\n     */\n    async isNextPointInTime() {\n        const currentSavepoint = (await this.client.database(this.name()).savepoint({ direction: this.direction })) || {};\n        return currentSavepoint.id === this.$.json.id;\n    }\n\n    /**\n     * Method for restoring db schema to an identified savepoint.\n     * \n     * @return Void\n     */\n    async rollback(details = {}) {\n        if (!(await this.isNextPointInTime())) throw new Error(`Invalid rollback order.`);\n        await this.client.query(this.rollbackQuery, { noCreateSavepoint: true });\n        const linkedDB = await this.client.linkedDB();\n        // Update record\n        const updatedRecord = await linkedDB.table('savepoints').update({\n            rollback_date: q => this.direction === 'forward' ? q.null() : q.fn('now'),\n            rollback_desc: details.desc,\n            rollback_ref: details.ref || this.client.params.commitRef,\n            rollback_pid: q => q.literal(this.client.params.dialect === 'mysql' ? 'connection_id()' : 'pg_backend_pid()'),\n        }, { where: { id: q => q.value(this.$.json.id) }, returning: ['rollback_date'] });\n        this.$.json.rollback_date = updatedRecord[0].rollback_date;\n        return true;\n    }\n}", "\nimport { _isObject } from '@webqit/util/js/index.js';\nimport { _from as _arrFrom, _difference, _intersect } from '@webqit/util/arr/index.js';\nimport Parser from '../lang/Parser.js';\nimport AbstractNode from '../lang/AbstractNode.js';\nimport Identifier from '../lang/components/Identifier.js';\nimport DatabaseSchema from '../lang/schema/db/DatabaseSchema.js';\nimport CreateStatement from '../lang/ddl/create/CreateStatement.js';\nimport AlterStatement from '../lang/ddl/alter/AlterStatement.js';\nimport DropStatement from '../lang/ddl/drop/DropStatement.js';\nimport RootSchema from '../lang/schema/RootSchema.js';\nimport Savepoint from './Savepoint.js';\nimport InsertStatement from '../lang/dml/insert/InsertStatement.js';\nimport UpdateStatement from '../lang/dml/update/UpdateStatement.js';\n\nexport default class AbstractClient {\n    \n    /**\n     * @constructor\n     */\n    constructor(init = {}) {\n        Object.defineProperty(this, '$', { value: init });\n    }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params || {}; }\n\n\t/**\n\t * Performs any initialization work.\n     */\n\tasync $init() {\n        if (this.$.initialised) return;\n        this.$.initialised = true;\n        if (this.params.nameResolution) await this.nameResolution(this.params.nameResolution);\n    }\n\n    /**\n     * Returns a database instance.\n     * \n     * @param String            name\n     * @param Object            params\n     * \n     * @return Database\n     */\n    database(name, params = {}) {\n        return new this.constructor.Database(this, ...arguments);\n    }\n\n    /**\n     * Tells whether a database exists.\n     * \n     * @param String            name\n     * \n     * @return Bool\n     */\n    async hasDatabase(name) {\n        await this.$init();\n        return (await this.databases()).includes(name);\n    }\n\n    /**\n     * Composes a CREATE DATABASE query from descrete inputs\n     * \n     * @param String|Object  createSpec\n     * @param Object         params\n     * \n     * @return Savepoint\n     */\n    async createDatabase(createSpec, params = {}) {\n        if (typeof createSpec === 'string') { createSpec = { name: createSpec }; }\n        else if (typeof createSpec?.name !== 'string') throw new Error(`createDatabase() called with invalid arguments.`);\n        // -- Compose an query from request\n        const query = CreateStatement.fromJSON(this, { kind: 'SCHEMA', argument: createSpec });\n        if (params.ifNotExists) query.withFlag('IF_NOT_EXISTS');\n        return await this.query(query, params);\n    }\n\n    /**\n     * Composes an ALTER DATABASE query from descrete inputs\n     * \n     * @param String|Object   alterSpec\n     * @param Function        callback\n     * @param Object          params\n     * \n     * @return Savepoint\n     */\n    async alterDatabase(alterSpec, callback, params = {}) {\n        if (typeof callback !== 'function') throw new Error(`alterDatabase() called with invalid arguments.`);\n        if (typeof alterSpec === 'string') { alterSpec = { name: alterSpec }; }\n        else if (typeof alterSpec?.name !== 'string') throw new Error(`alterDatabase() called with invalid arguments.`);\n        return await this.structure({ depth: 2, inSearchPathOrder: true }, async () => {\n            // -- Compose an altInstance from request\n            const dbSchema = (await this.structure([{ name: alterSpec.name, tables: alterSpec.tables }])).database(alterSpec.name);\n            if (!dbSchema) throw new Error(`Database \"${ alterSpec.name }\" does not exist.`);\n            await callback(dbSchema.keep(true, true));\n            const query = dbSchema.getAlt().with({ resultSchema: dbSchema });\n            if (!query.length) return;\n            return await this.query(query, params);\n        });\n    }\n\n    /**\n     * Composes a DROP DATABASE query from descrete inputs\n     * \n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async dropDatabase(dbName, params = {}) {\n        if (typeof dbName !== 'string') throw new Error(`dropDatabase() called with an invalid name: ${ dbName }.`);\n        // -- Compose an dropInstamce from request\n        const query = DropStatement.fromJSON(this, { kind: 'SCHEMA', ident: dbName });\n        if (params.ifExists) query.withFlag('IF_EXISTS');\n        if (params.cascade) query.withFlag('CASCADE');\n        return await this.query(query, params);\n    }\n\n    /**\n     * Method for saving snapshots to internal OBJ_INFOSCHEMA db.\n     * \n     * @param DatabaseSchema    dbSchema\n     * @param String            description\n     * \n     * @return Object\n     */\n    async createSavepoint(dbSchema, details = null) {\n        const linkedDB = await this.linkedDB();\n        const savepointsTable = linkedDB.table('savepoints');\n        // -- Savepoint JSON\n        const { name, $name, ...rest } = dbSchema.toJSON();\n        const savepointJson = {\n            name, $name,\n            database_tag: null,\n            ...rest,\n            version_tag: null,\n            commit_date: q => q.fn('now'),\n            commit_desc: details.desc,\n            commit_ref: details.ref || this.params.commitRef,\n            commit_pid: q => q.literal(this.params.dialect === 'mysql' ? 'connection_id()' : 'pg_backend_pid()'),\n        };\n        // -- Find a match first. We're doing forward first to be able to restart an entire history that has been rolled all the way back\n        const dbName = dbSchema.NAME/* IMPORTANT */;\n        const currentSavepoint = (await this.database(dbName).savepoint({ direction: 'forward' })) || await this.database(dbName).savepoint();\n        if (currentSavepoint) {\n            // -- Apply id and tag from lookup\n            savepointJson.database_tag = currentSavepoint.databaseTag;\n            savepointJson.version_tag = currentSavepoint.versionMax + 1;\n            // -- Delete all forward records\n            if (currentSavepoint.direction === 'forward') {\n                await savepointsTable.delete(q => q.where(\n                    q => q.equals('database_tag', q => q.value(currentSavepoint.databaseTag)),\n                    q => q.isNotNull('rollback_date'),\n                ));\n            } else { savepointJson.version_tag = currentSavepoint.versionTag + 1; }\n        } else {\n            // -- Generate tag and version as fresh\n            savepointJson.database_tag = `db:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`;\n            savepointJson.version_tag = 1;\n        }\n        // -- Create record\n        const insertResult = await savepointsTable.insert(savepointJson, { returning: '*' });\n        return new Savepoint(this, { ...insertResult, version_max: savepointJson.version_tag, $cursor: null });\n    }\n    \n    /**\n\t * Returns all databases' current savepoint.\n\t * \n     * @param Object selector\n\t * \n\t * @returns Object\n     */\n    async savepoints(selector = {}) {\n        const linkedDB = await this.linkedDB();\n        const result = await this.query(`\n            SELECT id, database_tag, name, ${ Identifier.fromJSON(this, '$name') }, keep, version_tag, version_max, CONCAT(rank_for_cursor, '/', total) AS ${ Identifier.fromJSON(this, '$cursor') }, tables, commit_date, commit_desc, commit_ref, rollback_date, rollback_desc, rollback_ref FROM (\n                SELECT *,\n                ROW_NUMBER() OVER (PARTITION BY database_tag ORDER BY rollback_date IS NOT NULL ${ selector.direction === 'forward' ? 'DESC' : 'ASC' }, version_tag ${ selector.direction === 'forward' ? 'ASC' : 'DESC' }) AS rank_for_target,\n                ROW_NUMBER() OVER (PARTITION BY database_tag ORDER BY version_tag ASC) AS rank_for_cursor,\n                MAX(version_tag) OVER (PARTITION BY database_tag) AS version_max,\n                COUNT(version_tag) OVER (PARTITION BY database_tag) AS total\n                FROM ${ linkedDB.table('savepoints').ident }\n            ) AS savepoint WHERE rollback_date IS ${ selector.direction === 'forward' ? 'NOT NULL' : 'NULL' } AND rank_for_target = 1${ selector.name ? (selector.direction === 'forward' ? ` AND name = '${ selector.name }'` : ` AND COALESCE(${ Identifier.fromJSON(this, '$name') }, name) = '${ selector.name }'`) : '' }\n        `);\n        return result.map(savepoint => new Savepoint(this, savepoint, selector.direction));\n    }\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n    /**\n     * Base logic for dropDatabase()\n     * \n     * @param Function                  handler\n     * @param String                    query\n     * @param Object                    params\n     * \n     * @return Object\n     */\n    async queryCallback(handler, query, params = {}) {\n        if (typeof query === 'string') query = Parser.parse(this, query, null, { log: params.log });\n        else if (!(query instanceof AbstractNode)) throw new Error(`query() called with invalid arguments.`);\n        const dbName = query.$trace('get:DATABASE_NAME'), tblName = query.$trace('get:TABLE_NAME');\n        const willCreateSavepoint = [CreateStatement,AlterStatement,DropStatement].some(c => query instanceof c) && !params.noCreateSavepoint;\n        const mightHaveDimensions = [InsertStatement,UpdateStatement].some(x => query instanceof x);\n        const willNeedStructure = (tblName && !dbName) || willCreateSavepoint || mightHaveDimensions;\n        return await this.structure(willNeedStructure && { depth: 2, inSearchPathOrder: true }, async rootSchema => {\n            // -- Let's be clear from the start the target objects\n            const scope = {}, target = Identifier.fromJSON(this, tblName ? [ dbName || rootSchema.findPath(tblName, query instanceof CreateStatement), tblName ] : [ dbName ]);\n            // -- DDL?\n            if (willCreateSavepoint) {\n                // -- Database DDL\n                if (['DATABASE', 'SCHEMA'].includes(query.KIND)) {\n                    if (query instanceof DropStatement) {\n                        const dbSchema = rootSchema.database(target.name())?.keep(false); // May be an \"IF EXISTS\" operation and may actually not exists\n                        query.with({ resultSchema: dbSchema });\n                    } else if (query instanceof AlterStatement && !query.resultSchema) {\n                        const tablesList = query.ACTIONS.map(x => (x.CLAUSE === 'MODIFY' ? x.ARGUMENT.$trace('get:TABLE_NAME') : (x.CLAUSE === 'DROP' ? x.ident().name() : null))).filter(x => x);\n                        const dbSchema = rootSchema.database(target.name());\n                        if (tablesList.length) { dbSchema.TABLES = dbSchema.TABLES.filter(tbl => !tablesList.includes(tbl.name())); }\n                        dbSchema.keep(true, true).alterWith(query); // Simulate edits;\n                        query.with({ resultSchema: dbSchema });\n                    } else if (query instanceof CreateStatement) query.with({ resultSchema: query.ARGUMENT });\n                    // -- And that's what we'll use as snapshot\n                    scope.savepoint = query.resultSchema;\n                } else if (query.KIND === 'TABLE') {\n                    if (query instanceof DropStatement) {\n                        const dbSchema = rootSchema.database(target.prefix())?.table(tblName)?.keep(false); // May be an \"IF EXISTS\" operation and may actually not exists\n                        query.with({ resultSchema: dbSchema });\n                    } else if (query instanceof AlterStatement && !query.resultSchema) {\n                        const dbSchema = rootSchema.database(target.prefix())?.table(tblName)?.keep(true, true).alterWith(query); // Simulate edits;\n                        query.with({ resultSchema: dbSchema });\n                    } else if (query instanceof CreateStatement) query.with({ resultSchema: query.ARGUMENT });\n                    // -- But this is what we'll use as snapshot\n                    scope.savepoint = query.resultSchema && DatabaseSchema.fromJSON(this, {\n                        name: target.prefix(),\n                        tables: [ query.resultSchema ]\n                    }).keep(true);\n                }\n            } else {\n                if (query.expandable) await query.expand(true);\n                if (mightHaveDimensions) {\n                    [ query, scope.preHook, scope.postHook ] = await query.resolveDimensions();\n                    if (scope.preHook) await scope.preHook();\n                }\n            }\n            // -- Execute...\n            let returnValue = await handler(target, query, params);\n            if (scope.postHook) returnValue = await scope.postHook(returnValue);\n            // -- Generate savepoint?\n            if (scope.savepoint) {\n                scope.savepoint.keep(scope.savepoint.keep(), 'auto');\n                return await this.createSavepoint(scope.savepoint, params);\n            }\n            return returnValue;\n        });\n    }\n\n    /**\n     * Base logic for structure()\n     * \n     * @param Function                  handler\n     * @param Array|Object              selector\n     * @param Array                     ...rest\n     * \n     * @return Object\n     */\n    structureMemoStack = new Set;\n    async structureCallback(handler, selector = {}, ...rest) {\n        const matchExistingRequest = exactMatching => [ ...this.structureMemoStack ].find(req => {\n            if (_isObject(req.selector) && _isObject(selector)) {\n                return Object.keys(selector).every(key => {\n                    // If ongoing request has higher depth, current does't matter\n                    return !exactMatching && key === 'depth' ? (req.selector[key] || 0) >= (selector[key] || 0) : (\n                        // If ongoing request has inSearchPathOrder, current does't matter\n                        key === 'inSearchPathOrder' ? req.selector[key] || !selector[key] : req.selector[key] === selector[key]\n                    )\n                });\n            }\n            if (Array.isArray(req.selector) && Array.isArray(selector)) {\n                return selector.every(path2 => {\n                    // If ongoing request already has the db name\n                    return req.selector.find(path1 => path2.name === path1.name \n                        // If ongoing request has any of the tables mentioned in new request\n                        && ((tbls2, tbls1) => exactMatching ? _intersect(tbls2, tbls1).length === tbls2.length : !_difference(tbls2, tbls1).length)(_arrFrom(path2.tables), _arrFrom(path1.tables)));\n                });\n            }\n            if (_isObject(req.selector) && req.selector.depth && Array.isArray(selector)) {\n                // See if it's up to table depth\n                const tblDepth = selector.reduce((prev, s) => Math.max(prev, [].concat(s.tables || []).length), 0) ? 2 : 1;\n                // Match depth\n                return req.selector.depth >= tblDepth;\n            }\n        });\n        const exactMatching = typeof rest[0] === 'boolean' ? rest.shift() : true;\n        const callback = typeof rest[0] === 'function' ? rest.shift() : (result => result);\n        if (!selector) return callback(); // IMPORTANT: structure() callers can do this for convenience\n        const resultPromise = matchExistingRequest(exactMatching)?.resultPromise || handler(selector);\n        const cachePayload = ($payload => (this.structureMemoStack.add($payload), $payload))({ selector, resultPromise });\n        const resultSchema = ($resultSchema => !Array.isArray(selector) ? $resultSchema : $resultSchema.reduce((dbs, db) => {\n            const ss = selector.find(ss => ss.name === db.name);\n            const tablesList = [].concat(ss?.tables || []);\n            if (tablesList.length && tablesList[0] !== '*') db = { ...db, tables: db.tables.filter(tbl => tablesList.includes(tbl.name)) };\n            return dbs.concat(ss && db || []);\n        }, []))(await resultPromise);\n        const returnValue = await callback(RootSchema.fromJSON(this, resultSchema));\n        this.structureMemoStack.delete(cachePayload);\n        // Return value\n        return returnValue;\n    }\n\n    /**\n     * Sets or returns the search path for resolving unqualified table references.\n     * \n     * @param Array|String searchPath\n     * \n     * @return Array\n     */\n    async searchPath(resolutionPath = []) {\n        if (arguments.length) { return (this.$.searchPath = [].concat(searchPath), this); }\n        return this.$.searchPath || [];\n    }\n\n    /**\n     * Returns LinkedDB DB instance; does setup work where necessary.\n     * \n     * @return Database\n     */\n    async linkedDB() {\n        const migrations = [\n            // --v1: create base structure\n            async (dbName) => {\n                await this.createDatabase({\n                    name: dbName,\n                    tables: [{\n                        name: 'savepoints',\n                        columns: [\n                            { name: 'id', ...(this.params.dialect === 'mysql' ? { type: 'char(36)', default: { expr: 'uuid()' } } : { type: 'uuid', default: { expr: 'gen_random_uuid()' } }), primaryKey: true },\n                            // Actual snapshot\n                            { name: 'name', type: ['varchar',255], notNull: true },\n                            { name: '$name', type: ['varchar',255] },\n                            { name: 'tables', type: 'json' },\n                            { name: 'keep', type: this.params.dialect === 'mysql' ? ['bit',1] : 'boolean' },\n                            // Meta data\n                            { name: 'database_tag', type: ['varchar', 12], notNull: true },\n                            { name: 'version_tag', type: 'int', notNull: true },\n                            { name: 'commit_date', type: ['timestamp',3], notNull: true },\n                            { name: 'commit_desc', type: ['varchar', 255] },\n                            { name: 'commit_ref', type: ['varchar', 50] },\n                            { name: 'commit_pid', type: ['varchar', 50] },\n                            { name: 'rollback_date', type: ['timestamp',3] },\n                            { name: 'rollback_desc', type: ['varchar', 255] },\n                            { name: 'rollback_ref', type: ['varchar', 50] },\n                            { name: 'rollback_pid', type: ['varchar', 50] },\n                        ],\n                    }],\n                }, { noCreateSavepoint: true });\n                if (this.params.dialect === 'postgres') {\n                    await this.driver.query(`\n                        -- The Function\n                        CREATE OR REPLACE FUNCTION fire_savepoints_event() RETURNS trigger AS $$\n                        BEGIN\n                            PERFORM pg_notify('savepoints_stream', json_build_object(\n                                'action', TG_OP,\n                                'entry', CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE row_to_json(NEW) END\n                            )::text);\n                            RETURN NEW;\n                        END;\n                        $$ LANGUAGE plpgsql;\n                        -- The trigger\n                        DROP TRIGGER IF EXISTS savepoints_event_trigger ON \"${ dbName }\".\"savepoints\";\n                        CREATE TRIGGER savepoints_event_trigger\n                            AFTER INSERT OR UPDATE OR DELETE ON \"${ dbName }\".\"savepoints\"\n                            FOR EACH ROW EXECUTE FUNCTION fire_savepoints_event();\n                    `);\n                }\n            },\n        ];\n        // -- Initialise\n        const peakVersion = migrations.length;\n        const baseName = (v) => 'linked_db'+(v&&`_v${v}`||'');\n        const instance = this.database(baseName(peakVersion));\n        Object.defineProperty(instance, 'uninstall', { value: async (cascade) => {\n            await this.dropDatabase(instance.name, { cascade, noCreateSavepoint: true });\n        }});\n        if (this.installed) return instance;\n        this.installed = true;\n        // -- Install or upgrade\n        const rootSchema = await this.structure({ depth: 1 });\n        const foundName = rootSchema.databases().find(dbName => dbName.startsWith(baseName()) || dbName === 'obj_information_schema');\n        const foundVersion = foundName && /^.+?([\\d]+)$/.exec(foundName)?.[1] || -1;\n        if (foundName && foundVersion === -1) console.warn(`Your database has a old version of Linked DB that is no longer supported. Any savepoint record in there will be retained but won't be migrated to the new Linked DB version you have now. You may file an issue on github for any assistance.`);\n        if (peakVersion < foundVersion) throw new Error(`Your database has a higher version of Linked DB \"${ foundVersion }\" than this query client is designed to support \"${ peakVersion }\". Consider upgrading this client to latest version.`);\n        for (let i = 1; i <= migrations.length; i ++) {\n            if (i <= foundVersion) continue;\n            const fromName = baseName(i-1), toName = baseName(i);\n            try {\n                this.structureMemoStack.clear();\n                if (i>1) await this.alterDatabase(fromName, dbSchema => dbSchema.name(toName), { noCreateSavepoint: true });\n                await migrations[i-1](toName);\n            } catch(e) { throw new Error(`Error upgrading your Linked DB version from ${ fromName } to ${ toName }. Consider filing an issue on github. (${ e })`); }\n        }\n        return instance;\n    }\n    \n\t/**\n\t * A generic method for tracing something up the node tree.\n\t * Like a context API.\n\t * \n\t * @param String request\n\t * @param Array ...args\n     * \n     * @returns any\n\t */\n\t$trace(request, ...args) {\n        if (request === 'get:CLIENT_API') return this;\n        if (request === 'get:ROOT_SCHEMA') return this.structure({ depth: 2 });\n    }\n}", "import CreateStatement from '../lang/ddl/create/CreateStatement.js';\nimport DropStatement from '../lang/ddl/drop/DropStatement.js';\nimport Identifier from '../lang/components/Identifier.js';\n\nexport default class AbstractDatabase {\n\t\n\t/**\n\t * @constructor\n\t */\n\tconstructor(client, dbName, params = {}) {\n        Object.defineProperty(this, '$', { value: { client, name: dbName, params }});\n\t}\n\n    /**\n     * @property Client\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.name; }\n\n\t/**\n     * @property Identifier\n     */\n\tget ident() { return Identifier.fromJSON(this, this.name); }\n\n    /**\n     * @property Object\n     */\n    get params() { return Object.assign({}, this.client.params, this.$.params); }\n\n\t/**\n\t * Performs any initialization work.\n     */\n\tasync $init() { await this.client.$init(); }\n\n    /**\n\t * Returns the database's current savepoint.\n\t * \n     * @param Object params\n\t * \n\t * @returns Object\n     */\n    async savepoint(selector = {}) { return (await this.client.savepoints({ ...selector, name: this.name }))[0]; }\n\n    /**\n\t * Returns the database's schema.\n\t * \n     * @param Array     tblSelector\n\t * \n\t * @returns DatabaseSchema\n     */\n    async structure(tblSelector = ['*']) { return (await this.client.structure([{ name: this.name, tables: tblSelector }])).database(this.name); }\n\n    /**\n     * Returns a table instance.\n     * \n     * @param String            name\n     * @param Object            params\n     * \n     * @return Table\n     */\n    table(name, params = {}) { return new this.constructor.Table(this, ...arguments); }\n\n    /**\n     * Composes a CREATE TABLE query from descrete inputs\n     * \n     * @param Object            createSpec\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async createTable(createSpec, params = {}) {\n        if (typeof createSpec?.name !== 'string') throw new Error(`createTable() called with invalid arguments.`);\n        // -- Compose an query from request\n        const query = CreateStatement.fromJSON(this, { kind: 'TABLE', argument: createSpec });\n        if (params.ifNotExists) query.withFlag('IF_NOT_EXISTS');\n        return this.client.query(query, params);\n    }\n\n    /**\n     * Composes an ALTER TABLE query from descrete inputs\n     * \n     * @param String            tblName\n     * @param Function          callback\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async alterTable(tblName, callback, params = {}) {\n        if (typeof callback !== 'function' || typeof tblName !== 'string') throw new Error(`alterTable() called with invalid arguments.`);\n        return await this.client.structure({ depth: 2, inSearchPathOrder: true }, async () => {\n            // -- Compose an query from request\n            const tblSchema = (await this.table(tblName).structure())?.keep(true, true);\n            if (!tblSchema) throw new Error(`Table \"${ tblName }\" does not exist.`);\n            await callback(tblSchema);\n            const query = tblSchema.getAlt().with({ resultSchema: tblSchema });\n            if (!query.length) return;\n            if (params.ifExists) query.withFlag('IF_EXISTS');\n            return this.client.query(query, params);\n        });\n    }\n\n    /**\n     * Composes a DROP TABLE query from descrete inputs\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async dropTable(tblName, params = {}) {\n        if (typeof tblName !== 'string') throw new Error(`dropTable() called with invalid arguments.`);\n        // -- Compose an dropInstamce from request\n        const query = DropStatement.fromJSON(this, { kind: 'TABLE', ident: tblName });\n        if (params.ifExists) query.withFlag('IF_EXISTS');\n        if (params.cascade) query.withFlag('CASCADE');\n        return this.client.query(query, params);\n    }\n    \n\t/**\n\t * A generic method for tracing something up the node tree.\n\t * Like a context API.\n\t * \n\t * @param String request\n\t * @param Array ...args\n     * \n     * @returns any\n\t */\n\t$trace(request, ...args) {\n\t\tif (request === 'get:DATABASE_API') return this;\n\t\tif (request === 'get:DATABASE_NAME') return this.name;\n        return this.client.$trace(request, ...args);\n\t}\n}", "import { _intersect } from '@webqit/util/arr/index.js';\nimport { _isFunction, _isObject } from '@webqit/util/js/index.js';\nimport { _beforeLast, _afterLast } from '@webqit/util/str/index.js';\nimport InsertStatement from '../lang/dml/insert/InsertStatement.js';\nimport UpdateStatement from '../lang/dml/update/UpdateStatement.js';\nimport DeleteStatement from '../lang/dml/delete/DeleteStatement.js';\nimport SelectStatement from '../lang/dml/select/SelectStatement.js';\nimport Identifier from '../lang/components/Identifier.js';\n\nexport default class AbstractTable {\n\t \n\t/**\n\t * @constructor\n\t */\n\tconstructor(database, tblName, params = {}) {\n        this.$ = { database, name: tblName, params };\n\t}\n\n    /**\n     * @property Database\n     */\n    get database() { return this.$.database; }\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.name; }\n\n\t/**\n     * @property Identifier\n     */\n\tget ident() { return Identifier.fromJSON(this, [this.database.name, this.name]); }\n\n    /**\n     * @property Object\n     */\n    get params() { return Object.assign({}, this.database.params, this.$.params); }\n\n\t/**\n\t * Performs any initialization work.\n     */\n\tasync $init() { await this.database.$init(); }\n\n    /**\n\t * Returns the table's current savepoint.\n\t * \n\t * @returns Object\n     */\n    async savepoint() { await this.$init(); /* TODO */ }\n\n    /**\n\t * Returns the table's schema.\n\t * \n\t * @returns TableSchema\n     */\n    async structure() { return (await this.database.structure(this.name)).table(this.name); }\n\n\t/**\n\t * Counts records.\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * \n\t * @param Number|Object|Function \tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * @param Object|Function|Number \tmodifiers\n\t */\n\tasync count(...args) {\n\t\tconst fields = [].concat(Array.isArray(args[0]) ? args.shift() : '*');\n\t\tif (fields.length !== 1) throw new Error(`Count expects exactly one field.`);\n\t\tconst result = await this.select([ q => q.fn('COUNT', fields[0]).as('c') ], ...args);\n\t\treturn !Array.isArray(result)/*for when modifiers.where is an ID*/ ? result.c : result[0].c;\n\t}\n\t \n\t/**\n\t * Selects record(s).\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * \n\t * @param Number|Object|Function \tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * @param Object|Function|Number \tmodifiers\n\t */\n\tasync select(...args) {\n\t\tconst query = new SelectStatement(this.database.client);\n\t\tquery.from(this.ident.toJSON());\n\t\t// Where and fields\n\t\tconst fields = Array.isArray(args[0]) ? args.shift() : ['*'];\n\t\tconst modifiers = { fields, ...(args.shift() || {})};\n\t\tquery.select(...modifiers.fields);\n\t\treturn await this.$applyModifiers(query, modifiers, async () => {\n\t\t\tconst result = await this.database.client.query(query);\n\t\t\tif (['string', 'number'].includes(typeof modifiers.where)) return result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t/**\n\t * Inserts record(s).\n\t * \n\t * @param Object \t\t\t\t\tpayload\n\t * @param Object|Function\t\t\tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tmultilinePayload\n\t * @param Object|Function\t\t\tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tcolumns\n\t * @param Array \t\t\t\t\tmultilineValues\n\t * @param Object|Function\t\t\tmodifiers\n\t */\n\tasync insert(...args) {\n\t\t// ----\n\t\tlet upsertCallback, columns = [], values = [], modifiers, singular;\n\t\tif (typeof args[0] === 'function') upsertCallback = args.shift();\n\t\t// Is cilumns specified separately from values?\n\t\tif (Array.isArray(args[0]) && /*important*/args[0].every(s => typeof s === 'string') && Array.isArray(args[1])) {\n\t\t\tif (!args[1].every(s => Array.isArray(s))) throw new TypeError(`Invalid payload format.`);\n\t\t\t[ columns, values, modifiers ] = args.splice(0, 3);\n\t\t} else {\n\t\t\t// No. It's a columns/values map\n\t\t\tconst _singular = _isObject(args[0]); // Must come before any args.shift()\n\t\t\tconst payload = [].concat(args.shift());\n\t\t\tif (!_isObject(payload[0])) throw new TypeError(`Invalid payload format.`);\n\t\t\tcolumns = Object.keys(payload[0]);\n\t\t\tvalues = payload.map(row => Object.values(row));\n\t\t\tmodifiers = args.shift();\n\t\t\tsingular = _singular && modifiers?.returning;\n\t\t}\n\t\tlet preHook, postHook;\n\t\t// ----\n\t\tconst query = new InsertStatement(this.database.client);\n\t\tquery.into(this.ident.toJSON());\n\t\tif (columns.length) query.columns(...columns);\n\t\tfor (const row of values) query.values(...row.map(v => toVal(v, this.params.autoBindings)));\n\t\tif (_isObject(modifiers) && modifiers.returning) {\n\t\t\tquery.returning(...[].concat(modifiers.returning));\n\t\t} else if (_isFunction(modifiers)) {\n\t\t\tmodifiers(query);\n\t\t}\n\t\tconst willNeedStructure = upsertCallback && this.params.dialect === 'postgres';\n\t\treturn await this.database.client.structure(willNeedStructure && { depth: 2, inSearchPathOrder: true }, async () => {\n\t\t\tif (upsertCallback) await upsertCallback(query);\n\t\t\tlet result = await this.database.client.query(query);\n\t\t\tif (singular) result = result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\t\t\n\t/**\n\t * Upserts record(s); with optional custom onConflict clause.\n\t * \n\t * @param Object \t\t\t\t\tpayload\n\t * @param Object|Function\t\t\tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tmultilinePayload\n\t * @param Object|Function\t\t\tmodifiers\n\t * \n\t * @param Array \t\t\t\t\tcolumns\n\t * @param Array \t\t\t\t\tmultilineValues\n\t * @param Object|Function\t\t\tmodifiers\n\t */\n\tasync upsert(...args) {\n\t\treturn await this.insert(async query => {\n\t\t\tconst columns = (query.columns()?.entries() || []).map(c => c.name());\n\t\t\tconst refFn = this.params.dialect === 'postgres' ? col => q => q.expr(['EXCLUDED', col]) : col => q => q.fn('VALUES', col);\n\t\t\tquery.onConflict(...columns.map(col => [col, refFn(col)]));\n\t\t\tif (this.params.dialect === 'postgres') {\n\t\t\t\tconst tblSchema = await this.structure();\n\t\t\t\tconst uniqueKeys = tblSchema.uniqueKeys().map(uk => uk.columns());\n\t\t\t\tif (!uniqueKeys.length) throw new Error(`Table has no unique keys defined. You may want to perform a direct INSERT operation.`);\n\t\t\t\tconst conflictTarget = uniqueKeys.find(keyComp => _intersect(keyComp, columns).length) || uniqueKeys[0];\n\t\t\t\tquery.onConflict().target(...conflictTarget);\n\t\t\t}\n\t\t}, ...args);\n\t}\n\t\n\t/**\n\t * Updates record(s).\n\t * \n\t * @param Object \t\t\t\t\tpayload\n\t * @param Object|Function|Number \tmodifiers\n\t */\n\tasync update(payload, modifiers) {\n\t\t// ----\n\t\tif (!modifiers) throw new Error(`The \"modifiers\" parameter cannot be ommitted.`);\n\t\tconst singular = ['string', 'number'].includes(typeof modifiers.where) && modifiers.returning;\n\t\tlet columns = Object.keys(payload),\n\t\t\tvalues = Object.values(payload),\n\t\t\tpreHook, postHook;\n\t\t// ----\n\t\tconst query = new UpdateStatement(this.database.client);\n\t\tquery.table(this.ident.toJSON());\n\t\tcolumns.forEach((col, i) => query.set(col, toVal(values[i], this.params.autoBindings)));\n\t\treturn await this.$applyModifiers(query, modifiers, async () => {\n\t\t\tlet result = await this.database.client.query(query);\n\t\t\tif (singular) result = result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\t \n\t/**\n\t * Deletes record(s).\n\t * \n\t * @param Object|Function|Number \tmodifiers\n\t */\n\tasync delete(modifiers) {\n\t\tif (!modifiers) throw new Error(`The \"modifiers\" parameter cannot be ommitted.`);\n\t\tconst query = new DeleteStatement(this.database.client);\n\t\tquery.from(this.ident.toJSON());\n\t\treturn await this.$applyModifiers(query, modifiers, async () => {\n\t\t\tlet result = await this.database.client.query(query);\n\t\t\tif (['string', 'number'].includes(typeof modifiers.where) && modifiers.returning) result = result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * Helps resolve specified where condition for the query.\n\t * \n\t * @param Statement \t\t\t\t\tquery\n\t * @param Object|Function|Number|Bool \tmodifiers\n\t * @param Function\t\t\t\t\t\tcallback\n\t */\n\tasync $applyModifiers(query, modifiers, callback) {\n\t\tif (modifiers === true) return await callback();\n\t\tconst addWheres = wheres => query.where(...Object.entries(wheres).map(([k, v]) => {\n\t\t\tif (v === null) return q => q.isNull(k);\n\t\t\treturn q => q.equals(k, toVal(v, this.params.autoBindings));\n\t\t}));\n\t\tif (_isObject(modifiers)) {\n\t\t\tif (modifiers.limit) query.limit(modifiers.limit);\n\t\t\tif (modifiers.returning) query.returning(...[].concat(modifiers.returning));\n\t\t\tif (['string', 'number'].includes(typeof modifiers.where)) {\n\t\t\t\t// Initialize structure request with potential needs later on in mind\n\t\t\t\treturn await this.database.client.structure({ depth: 2, inSearchPathOrder: true }, async () => {\n\t\t\t\t\tconst tblSchema = await this.structure();\n\t\t\t\t\taddWheres({ [ getPrimaryKey(tblSchema) ]: modifiers.where });\n\t\t\t\t\treturn await callback();\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (_isObject(modifiers.where)) addWheres(modifiers.where);\n\t\t\telse if (modifiers.where && modifiers.where !== true) query.where(modifiers.where);\n\t\t} else if (_isFunction(modifiers)) {\n\t\t\tmodifiers(query);\n\t\t} else if (/^\\d+$/.test(modifiers)) {\n\t\t\tquery.limit(modifiers);\n\t\t}\n\t\treturn await callback();\n\t}\n    \n\t/**\n\t * A generic method for tracing something up the node tree.\n\t * Like a context API.\n\t * \n\t * @param String request\n\t * @param Array ...args\n     * \n     * @returns any\n\t */\n\t$trace(request, ...args) {\n\t\tif (request === 'get:TABLE_API') return this;\n\t\tif (request === 'get:TABLE_NAME') return this.name;\n        return this.database.$trace(request, ...args);\n\t}\n}\n\nconst toVal = (v, autoBindings) => {\n\tif (typeof v === 'function') return v;\n\tif (v instanceof Date) return q => q.value(v.toISOString().split('.')[0]);\n\tif (Array.isArray(v) || _isObject(v)) return q => q.json(v);\n\tif ([true,false,null,undefined].includes(v)) return q => q.literal(v === undefined ? null : v);\n\treturn q => q.value(v);\n};\n\nconst getPrimaryKey = schema => {\n\tconst primaryKey = schema.primaryKey()?.columns()[0];\n\tif (!primaryKey) throw new Error(`Cannot resolve primary key name for implied record.`);\n\treturn primaryKey;\n};\n", "\n\nexport default class AbstractCursor {\n\t \n\t_pos = 0;\n\t_eof = false;\n\t_onfinish = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(rows) {\n\t\tthis._cache = rows;\n\t}\n\t\t \n\tget eof() { return !this._cache.length || this._pos === this._cache.length - 1; }\n\t \n\tonfinish(callback) { this._onfinish.push(callback); }\n\t \n\tnext() {\n\t\tif (this.eof) {\n\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\tthis._pos = 0;\n\t\t\treturn;\n\t\t}\n        this._pos ++;\n\t}\n\t \n\tasync fetch() {\n\t\tif (this.eof) return;\n\t\treturn this._cache[this._pos];\n\t}\n}", "import AbstractCursor from '../AbstractCursor.js';\n\nexport default class SQLCursor extends AbstractCursor {\n\t \n\tconstructor(store) {\n\t\tsuper([]);\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis._storeFetch = new Promise(async resolve => {\n\t\t\tthis.cache = await this._store.select();\n\t\t\tresolve();\n\t\t});\n\t}\n\t \n\tasync fetch() {\n\t\tawait this._storeFetch;\n\t\treturn super.fetch();\n\t}\n}\n", "import AbstractTable from '../AbstractTable.js';\nimport SQLCursor from './SQLCursor.js';\n\nexport default class SQLTable extends AbstractTable {\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return SQLCursor\n\t */\n\tgetCursor() { return new SQLCursor(this); }\n}", "import AbstractDatabase from '../AbstractDatabase.js';\nimport SQLTable from './SQLTable.js';\n\nexport default class SQLDatabase extends AbstractDatabase {\n\t\n    /**\n\t * SQLTable class.\n     * \n     * @property Object\n\t */\n    static Table = SQLTable;\n\n    /**\n     * Returns a list of tables.\n\n     * \n     * @return Array\n\t */\n    async tables() {\n        return await this.tablesCallback(async () => {\n            const sql = `SELECT table_name FROM information_schema.tables WHERE table_schema = '${ this.name }'`;\n            const result = await this.client.driver.query(sql);\n            return (result.rows || result).map(row => row.table_name);\n        });\n    }\n}", "import Lexer from '../../lang/Lexer.js';\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport Identifier from '../../lang/components/Identifier.js';\nimport InsertStatement from '../../lang/dml/insert/InsertStatement.js';\nimport UpdateStatement from '../../lang/dml/update/UpdateStatement.js';\nimport DeleteStatement from '../../lang/dml/delete/DeleteStatement.js';\nimport SelectStatement from '../../lang/dml/select/SelectStatement.js';\nimport AbstractClient from '../AbstractClient.js';\nimport SQLDatabase from './SQLDatabase.js';\n\nexport default class SQLClient extends AbstractClient {\n\n    /**\n     * Instance.\n     * \n     * @param Object params \n     */\n    constructor(driver, params = {}) {\n        if (typeof driver !== 'object') throw new Error(`The options.driver parameter is required and must be an object.`);\n        if (typeof driver.query !== 'function') throw new Error(`The provided driver must expose a .query() function.`);\n        super({ driver, params });\n    }\n\n    /**\n     * @property Driver\n     */\n    get driver() { return this.$.driver; }\n\n    /**\n\t * Client kind.\n     * \n     * @property String\n\t */\n    static kind = 'sql';\n\n    /**\n\t * Database class.\n     * \n     * @property Object\n\t */\n    static Database = SQLDatabase;\n\n    /**\n     * Runs a query.\n     * \n     * @param String            query\n     * @param Object            params\n     * \n     * @return Any\n     */\n    async query(query, params = {}) {\n        return await this.queryCallback(async (target, query, params) => {\n            const isDMLStatement = [InsertStatement,UpdateStatement,DeleteStatement].some(x => query instanceof x);\n            const mysqlReturningSupport = isDMLStatement && this.params.dialect === 'mysql' && query.RETURNING_LIST.length;\n            if (mysqlReturningSupport && !this.params.mysqlReturningClause) throw new Error(`Support for a \"RETURNING\" clause for mysql has not been enabled via \"options.mysqlReturningClause\".`);\n            const willNeedStructure = query.expandable || mysqlReturningSupport;\n            return await this.structure(willNeedStructure && { depth: 2, inSearchPathOrder: true }, async () => {\n                const [ $query, $mysqlReturningMagicCallback ] = mysqlReturningSupport ? await this.$mysqlReturningMagic(target, query) : [ query ];\n                // -----------\n                const bindings = ($query.BINDINGS || []).concat(params.values || []).map(value => Array.isArray(value) || typeof value === 'object' && value ? JSON.stringify(value) : value);\n                let result = await this.driver.query($query.toString(), bindings);\n                if ($mysqlReturningMagicCallback) result = await $mysqlReturningMagicCallback();\n                // -----------\n                if (query instanceof SelectStatement || (isDMLStatement && query/*original*/.RETURNING_LIST.length)) return result.rows || result;\n                return 'rowCount' in result ? result.rowCount : result.affectedRows;\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Returns the application schema structure with specified level if detail.\n     * \n     * @param Object|Array  selector\n     * @param Array         ...rest\n     * \n     * @return Array\n\t */\n    async structure(selector = {}, ...rest) {\n        const getLevel2Details = async structure => {\n            const [ sql0, sql1 ] = this.$composeSchemasSQL(structure);\n            const columns = await this.driver.query(sql0);\n            const constraints = await this.driver.query(sql1);\n            return this.$formatSchemasResult(structure, (columns.rows || columns), (constraints.rows || constraints), []);\n        };\n        return await this.structureCallback(async selector => {\n            // Structure provided?\n            if (Array.isArray(selector)) return await getLevel2Details(selector);\n            // Query structure\n            const exclusions = 'excluding' in selector ? selector.excluding : [ 'information_schema' ];\n            if (!Array.isArray(exclusions)) throw new Error(`If present, selector.excluding must be an array.`);\n            // Compose the SQL\n            const sql = `SELECT schema_name${ selector.depth ? ', table_name' : '' }\n                FROM information_schema.schemata\n                ${ selector.depth ? `LEFT JOIN information_schema.tables ON table_schema = schema_name AND table_type = 'BASE TABLE'` : '' }\n                WHERE\n                    ${ exclusions.length ? `schema_name NOT IN ('${ exclusions.join(`', '`) }')` : '' }\n                    AND schema_name NOT LIKE 'pg_%'\n                ${ selector.inSearchPathOrder ? `ORDER BY array_position(current_schemas(false), schema_name)` : '' };`;\n            const result = await this.driver.query(sql);\n            // Return bare db list?\n            if (!selector.depth) return [...new Set((result.rows || result).map(row => ({ name: row.schema_name })))];\n            // Add table details\n            const structure = Object.values((result.rows || result).reduce((structure, row) => {\n                if (!(row.schema_name in structure)) structure[row.schema_name] = { name: row.schema_name, tables: [] };\n                if (row.table_name) structure[row.schema_name].tables.push(row.table_name);\n                return structure;\n            }, {}));\n            if (selector.depth < 2) return structure;\n            return await getLevel2Details(structure);\n        }, ...arguments);\n    }\n \n    /**\n     * Sets or returns the search path for resolving unqualified table references.\n     * \n     * @param Array|String searchPath\n     * \n     * @return Array\n     */\n    async searchPath(searchPath = []) {\n        if (arguments.length) {\n            searchPath = [].concat(searchPath).map(name => Identifier.fromJSON(this, name));\n            const sql = this.params.dialect === 'mysql' ? `USE ${ searchPath[0] }` : `SET SEARCH_PATH TO ${ searchPath.join(',') }`;\n            return await this.driver.query(sql);\n        }\n        let sql, key;\n        if (this.params.dialect === 'mysql') {\n            sql = 'SELECT database() AS default_db', key = 'default_db';\n        } else {\n            sql = `SHOW SEARCH_PATH`, key = 'search_path'; // Can't remember what happens here\n            sql = `SELECT current_setting('SEARCH_PATH')`, key = 'current_setting';\n        }\n        const result = await this.driver.query(sql);\n        const value = ((result.rows || result)[0] || {})[key];\n        return Lexer.split(value, [',']).map(s => Identifier.parseIdent(this, s.trim())[0]);\n    }\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * Initialise the logic for supporting the \"RETURNING\" clause in MySQL\n\t */\n\tasync $mysqlReturningMagic(target, query) {\n        query = query.clone();\n        const selectList = query.returning().splice(0);\n        // -----------\n        // Delete statements are handled ahead of the query\n        if (query instanceof DeleteStatement) {\n            const result = await this.driver.query(`SELECT ${ selectList.join(', ' ) } FROM ${ target }${ query.WHERE_CLAUSE ? ` WHERE ${ query.WHERE_CLAUSE }` : '' }`);\n            return [query, () => result];\n        }\n        // Insert and update statements are post-handled\n        // -----------\n\t\tconst colName = 'obj_column_for_returning_clause_support';\n        const columnIdent = Identifier.fromJSON(this, colName);\n        const tblSchema = await this.database(target.prefix()).table(target.name()).structure();\n\t\tif (!tblSchema.column(colName)) await this.driver.query(`ALTER TABLE ${ target } ADD COLUMN ${ columnIdent } char(36) INVISIBLE`);\n        const insertUuid = ( 0 | Math.random() * 9e6 ).toString( 36 );\n        // -----------\n        if (query.set())/*Both Insert & Update*/ {\n            query.set(colName, q => q.value(insertUuid));\n\t\t} else if (query instanceof InsertStatement) {\n\t\t\t// Columns must be explicitly named\n\t\t\tif (!query.columns() && (query.select() || query.values().length)) {\n\t\t\t\t//query.columns(...columns);\n                throw new Error(`Support for the RETURNING clause currently requires explicit column list in INSERT statements.`);\n\t\t\t}\n\t\t\tquery.columns(colName);\n\t\t\t// Add to values list, or select list if that's what's being used\n\t\t\tif (query.select()) {\n\t\t\t\tquery.select().select(q => q.value(insertUuid));\n\t\t\t} else if (query.values().length) {\n\t\t\t\tfor (const values of query.values()) values.entries(q => q.value(insertUuid));\n\t\t\t} else query.values(insertUuid);\n        }\n        if (query instanceof InsertStatement && query.onConflict()) {\n            query.onConflict().set(colName, q => q.value(insertUuid));\n        }\n        return [query, async () => {\n            // -----------\n            const result = await this.driver.query(`SELECT ${ selectList.join(', ' ) } FROM ${ target } WHERE ${ columnIdent } = '${ insertUuid }'`);\n            if (this.params.mysqlReturningClause === 'WITH_AUTO_CLEANUP') await this.driver.query(`ALTER TABLE ${ target } DROP COLUMN ${ columnIdent }`);\n            // -----------\n            return result;\n        }];\n\t}\n\n    /**\n     * Composes the SQL for a SHOW TABLE operation.\n     * \n     * @param Array structure\n     * \n     * @returns Array\n     */\n    $composeSchemasSQL(structure = []) {\n        let dbWhere = '', tblWhere = '';\n        const getWhere = (dbIdent, tblIdent) => {\n            if (structure.length) dbWhere = `${ dbIdent } IN ('${ structure.map(x => x.name).join(`', '`) }')`;\n            const tblWhereCases = structure.reduce((list, x) => {\n                const tbls = [].concat(x.tables);\n                if (tbls[0] === '*') return list;\n                return list.concat(`WHEN '${ x.name }' THEN ${ tblIdent } IN ('${ tbls.join(`', '`) }')`);\n            }, []);\n            if (tblWhereCases.length) tblWhere = `CASE ${ dbIdent } ${ tblWhereCases.join(' ') } END`;\n            const $where = tblWhere ? `${ dbWhere } AND ${ tblWhere }` : dbWhere;\n            return $where ? `WHERE ${ $where }` : '';\n        };\n        const sql0 = `\n        SELECT\n            COLUMNS.table_schema,\n            COLUMNS.table_name,\n            COLUMNS.column_name,\n            COLUMNS.ordinal_position,\n            COLUMNS.column_default,\n            COLUMNS.is_nullable,\n            COLUMNS.data_type,\n            COLUMNS.character_maximum_length,\n            ${ this.params.dialect === 'mysql' ? `\n            COLUMNS.extra,\n            ` : `\n            COLUMNS.is_identity,\n            COLUMNS.identity_generation,\n            COLUMNS.identity_start,\n            COLUMNS.identity_increment,\n            COLUMNS.identity_maximum,\n            COLUMNS.identity_minimum,\n            COLUMNS.identity_cycle,\n            ` }\n            COLUMNS.is_generated,\n            COLUMNS.generation_expression\n        FROM INFORMATION_SCHEMA.COLUMNS AS COLUMNS\n        ${ getWhere('COLUMNS.TABLE_SCHEMA', 'COLUMNS.TABLE_NAME') }\n        ORDER BY COLUMNS.ordinal_position\n        `;\n        const ANY_VALUE = col => this.params.dialect === 'mysql' ? col : `MAX(${ col })`;\n        const GROUP_CONCAT = (col, orderBy) => this.params.dialect === 'mysql' ? `GROUP_CONCAT(${ col }${ orderBy ? ` ORDER BY ${ orderBy }` : `` } SEPARATOR ',')` : `STRING_AGG(${ col }, ','${ orderBy ? ` ORDER BY ${ orderBy }` : `` })`;\n        const sql1 = `\n        SELECT\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.constraint_schema`) } AS table_schema,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.table_name`) } AS table_name,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.column_name`, `TABLE_CONSTRAINTS_DETAILS.ordinal_position`) } AS column_name,\n            TABLE_CONSTRAINTS.constraint_name AS constraint_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.constraint_type`) } AS constraint_type,\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.check_clause`) } AS check_clause,\n            ${ this.params.dialect === 'mysql' ? `\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.level`) } AS check_constraint_level,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.referenced_column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_schema`) } AS referenced_table_schema,\n            ` : `\n            ${ GROUP_CONCAT(`RELATION_DETAILS.column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_schema`) } AS referenced_table_schema,\n            ` }\n            --${ GROUP_CONCAT(`RELATION.unique_constraint_name`) } AS referenced_constraint_name,\n            ${ ANY_VALUE(`RELATION.match_option`) } AS match_rule,\n            ${ ANY_VALUE(`RELATION.update_rule`) } AS update_rule,\n            ${ ANY_VALUE(`RELATION.delete_rule`) } AS delete_rule\n        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TABLE_CONSTRAINTS\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS TABLE_CONSTRAINTS_DETAILS\n            ON TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.TABLE_NAME = TABLE_CONSTRAINTS.TABLE_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS CHECK_CONSTRAINTS_DETAILS\n            ON CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RELATION\n            ON RELATION.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND RELATION.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND RELATION.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        ${ this.params.dialect === 'mysql' ? '' : `\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS RELATION_DETAILS\n            ON RELATION_DETAILS.CONSTRAINT_NAME = RELATION.UNIQUE_CONSTRAINT_NAME\n            AND RELATION_DETAILS.CONSTRAINT_SCHEMA = RELATION.UNIQUE_CONSTRAINT_SCHEMA\n            AND RELATION_DETAILS.CONSTRAINT_CATALOG = RELATION.UNIQUE_CONSTRAINT_CATALOG\n            ` }\n        ${ getWhere('TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA', 'TABLE_CONSTRAINTS.TABLE_NAME') }\n        GROUP BY (TABLE_CONSTRAINTS.constraint_name)\n        `;\n        return [sql0, sql1];\n    }\n\n    /**\n     * Builds a schema object from the results of querying the information schema.\n     * \n     * @param Array     structure\n     * @param Array     columns\n     * @param Array     constraints\n     * @param Array     indexes\n     * \n     * @returns Array\n     */\n    $formatSchemasResult(structure, columns, constraints, indexes) {\n        // PG likes using verbose data types\n        const dataType = val => val === 'character varying' ? 'varchar' : (val === 'integer' ? 'int' : val);\n        const formatRelation = (key, tableScope = false) => ({\n            ...(!tableScope ? { name: key.constraint_name } : {}),\n            targetSchema: key.referenced_table_schema,\n            targetTable: key.referenced_table_name,\n            targetColumns: key.referenced_column_name.split(',').map(s => s.trim()),\n            ...(key.match_rule !== 'NONE' ? { matchRule: key.match_rule } : {}),\n            updateRule: key.update_rule,\n            deleteRule: key.delete_rule,\n        });\n        const $structure = new Map((structure || []).map(x => [ x.name, new Map([].concat(x.tables || []).map(y => [ y, null ])) ]));\n        for (const col of columns) {\n            if (!$structure.has(col.table_schema)) $structure.set(col.table_schema, new Map);\n            if (!$structure.get(col.table_schema).get(col.table_name)) {\n                $structure.get(col.table_schema).set(col.table_name, {\n                    columns: [col],\n                    constraints: constraints.filter(cons => cons.table_schema === col.table_schema && cons.table_name === col.table_name),\n                    indexes: indexes.filter(idx => idx.table_schema === col.table_schema && idx.table_name === col.table_name),\n                });\n            } else $structure.get(col.table_schema).get(col.table_name).columns.push(col);\n        }\n        return [ ...$structure.entries() ].map(([dbName, tables]) => {\n            const databaseSchema = {\n                name: dbName,\n                tables: [ ...tables.entries() ].map(([tblName, tbl]) => {\n                    // -----\n                    const columnNames = tbl.columns.map(col => col.column_name);\n                    const normalizeCheckConstraint = key => {\n                        if (!key.check_clause) key.check_clause = ''; // Some wired stuff at Supabase\n                        // Which columns are referenced in the check expr? We first eliminate all quoted strings, obtain all literals, and intersect with columnNames\n                        const literals = (key.check_clause.replace(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, '').match( /\\w+/g ) || []).map(s => s.toLowerCase());\n                        key.columns = _intersect(columnNames, literals);\n                        return key;\n                    };\n                    let [ primaryKey, uniqueKeys, foreignKeys, checks ] = tbl.constraints.reduce(([ primarys, uniques, foreigns, checks ], key) => {\n                        if (key.constraint_type === 'PRIMARY KEY') return [ primarys.concat(key), uniques, foreigns, checks ];\n                        if (key.constraint_type === 'UNIQUE') return [ primarys, uniques.concat(key), foreigns, checks ];\n                        if (key.constraint_type === 'FOREIGN KEY') return [ primarys, uniques, foreigns.concat(key), checks ];\n                        if (key.constraint_type === 'CHECK' && !(this.params.dialect === 'postgres' && /^[\\d_]+not_null/.test(key.constraint_name))) return [ primarys, uniques, foreigns, checks.concat(normalizeCheckConstraint(key)) ];\n                        return [ primarys, uniques, foreigns, checks ];\n                    }, [[], [], [], []]);\n                    // -----\n                    const tableSchema = {\n                        name: tblName,\n                        columns: tbl.columns.reduce((cols, col) => {\n                            const temp = {}, extras = col.extra/*mysql*/?.split(',').map(s => s.trim()) || [];\n                            return cols.concat({\n                                name: col.column_name,\n                                type: col.character_maximum_length ? [ dataType(col.data_type), col.character_maximum_length ] : dataType(col.data_type),\n                                ...(primaryKey.length === 1 && primaryKey[0].column_name === col.column_name && (temp.pKeys = primaryKey.pop()) ? {\n                                    primaryKey: { name: temp.pKeys.constraint_name }\n                                } : {}),\n                                ...((temp.uKeys = uniqueKeys.filter(key => key.column_name === col.column_name)).length === 1 && (uniqueKeys = uniqueKeys.filter(key => key !== temp.uKeys[0])) ? {\n                                    uniqueKey: { name: temp.uKeys[0].constraint_name }\n                                } : {}),\n                                ...((temp.fKeys = foreignKeys.filter(key => key.column_name === col.column_name)).length === 1 && (foreignKeys = foreignKeys.filter(key => key !== temp.fKeys[0])) ? {\n                                    references: formatRelation(temp.fKeys[0])\n                                } : {}),\n                                ...((temp.cKeys = checks.filter(key => key.check_constraint_level !== 'Table' && key.columns.length === 1 && key.columns[0] === col.column_name)).length === 1 && (checks = checks.filter(key => key !== temp.cKeys[0])) ? {\n                                    check: { name: temp.cKeys[0].constraint_name, expr: temp.cKeys[0].check_clause }\n                                } : {}),\n                                ...(col.is_identity/*postgres*/ === 'YES' ? {\n                                    identity: { always: col.identity_generation === 'ALWAYS' }\n                                } : {}),\n                                ...(col.is_generated !== 'NEVER' ? {\n                                    expression: { always: col.is_generated === 'ALWAYS', expr: col.generation_expression }\n                                } : {}),\n                                ...(extras.includes('auto_increment')/*mysql*/ ? {\n                                    autoIncrement: true\n                                } : {}),\n                                ...(col.is_nullable === 'NO' ? {\n                                    notNull: true\n                                } : {}),\n                                ...(col.column_default && col.column_default !== 'NULL' ? {\n                                    default: { expr: col.column_default }\n                                } : {}),\n                                ...(extras.includes('INVISIBLE') ? {\n                                    flags: ['INVISIBLE']\n                                } : {}),\n                            });\n                        }, []),\n                        constraints: [],\n                        indexes: [],\n                    };\n                    tableSchema.constraints.push(...[...primaryKey, ...uniqueKeys, ...foreignKeys].map(key => ({\n                        name: key.constraint_name,\n                        type: key.constraint_type === 'UNIQUE' ? 'UNIQUE_KEY' : key.constraint_type.replace(' ', '_'),\n                        columns: key.column_name.split(',').map(col => col.trim()),\n                        ...(key.constraint_type === 'FOREIGN KEY' ? { references: formatRelation(key, true) } : {}),\n                    })));\n                    tableSchema.constraints.push(...checks.map(key => ({\n                        name: key.constraint_name,\n                        type: key.constraint_type,\n                        columns: key.columns,\n                        expr: key.check_clause,\n                    })));\n                    return tableSchema;\n                }),\n            };\n            return databaseSchema;\n        });\n    }\n}", "import SQL from './api/sql/SQLClient.js';\n\n// As globals\nif (!self.webqit) { self.webqit = {}; }\nself.webqit.ObjectiveSQL = {\n\tSQL\n};\n"],
  "mappings": "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",
  "names": ["isString_default", "val", "isUndefined_default", "val", "isTypeFunction_default", "val", "isFunction_default", "val", "isTypeFunction_default", "isArray_default", "val", "isTypeArray_default", "val", "isString_default", "isUndefined_default", "isNull_default", "val", "isTypeObject_default", "val", "isTypeFunction_default", "isEmpty_default", "val", "isNull_default", "isUndefined_default", "isTypeObject_default", "isObject_default", "val", "from_default", "val", "castObject", "isArray_default", "isObject_default", "isEmpty_default", "isTypeArray_default", "isNumber_default", "val", "isNumeric_default", "val", "isNumber_default", "_flatten", "arr", "depth", "withObjects", "isNumeric_default", "isArray_default", "isObject_default", "acc", "val", "flatten_default", "first_default", "arr", "amount", "count", "itm", "firsts", "last_default", "arr", "amount", "first_default", "pushUnique_default", "arr", "items", "itm", "getPrototypeChain_default", "obj", "until", "isArray_default", "prototypalChain", "getAllPropertyNames_default", "obj", "until", "keysAll", "getPrototypeChain_default", "pushUnique_default", "mergeCallback", "objs", "callback", "deepProps", "isReplace", "withSymbols", "depth", "obj1", "isNumeric_default", "obj2", "i", "isTypeObject_default", "isFunction_default", "getAllPropertyNames_default", "key", "valAtObj1", "valAtObj2", "isArray_default", "isObject_default", "merge_default", "objs", "mergeCallback", "k", "obj1", "obj2", "isPlainObject_default", "obj", "isObject_default", "isBoolean_default", "val", "each_default", "obj", "callback", "returnValue", "isTypeObject_default", "k", "isNumeric_default", "compareCallback_default", "obj1", "obj2", "assertion", "netComparison", "contrast", "returnOnFirstFalse", "isArray_default", "result", "contn", "v1", "testPass", "each_default", "k", "v2", "isTypeObject_default", "isObject_default", "isBoolean_default", "_even", "obj1", "obj2", "assertion", "depth", "isArray_default", "isObject_default", "obj1Keys", "obj2Keys", "isPlainObject_default", "result", "compareCallback_default", "v1", "v2", "isFunction_default", "isNumber_default", "even_default", "copyPlain_default", "obj", "filter", "mergeCallback", "key", "obj1", "obj2", "isFunction_default", "isArray_default", "intersect_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "Lexer", "_Lexer", "str", "delims", "options", "isString_default", "copyResult", "result", "copyPlain_default", "i", "cached", "even_default", "instance", "runtime", "from_default", "merge_default", "cursor", "flatten_default", "charWidth", "commentTest", "quoteTest", "nestingTest", "chars", "stopChar", "matchedDelim", "nextIndex", "quote", "block", "last_default", "ending", "starting", "first_default", "matchedStarting", "matchedEnding", "testList", "k", "testArg", "isObject_default", "isFunction_default", "ret", "regexFlags", "m", "match", "base", "text", "target", "isNewSeries", "splitSeries", "isUndefined_default", "splitSeries2", "comments", "Lexer", "after_default", "subject", "search", "afterLast", "pos", "before_default", "subject", "search", "beforeLast", "pos", "difference_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "AbstractNode", "_AbstractNode", "context", "request", "args", "asInputDialect", "string_s", "$strings", "s", "expr", "escChar", "parts", "Lexer", "parses", "get", "x", "meta", "attr", "flags", "f", "$flags", "$flag", "a", "flag", "b", "attrName", "Type", "delegate", "Types", "cast", "arg", "t", "prev", "set", "instance", "router", "methodName", "name", "content", "parseCallback", "json", "Identifier", "AbstractNode", "name", "isObject_default", "prefix", "context", "json", "s", "instance", "expr", "afterLast_default", "subject", "search", "after_default", "beforeLast_default", "subject", "search", "before_default", "fromCamel_default", "str", "delimiter", "toTitle_default", "str", "strict", "txt", "toCamel_default", "str", "fromStart", "toTitle_default", "unwrap_default", "subject", "openingTag", "closingTag", "beforeLast_default", "after_default", "wrapped_default", "subject", "openingTag", "closingTag", "Literal", "AbstractNode", "input", "context", "json", "isObject_default", "expr", "instance", "braces", "$", "b", "wrapped_default", "Lexer", "Str", "AbstractNode", "context", "quote", "expr", "json", "text", "asInputDialect", "quoteChars", "$", "q", "wrapped_default", "Lexer", "unwrap_default", "EntriesAPI_default", "Class", "entries", "ref", "entry", "$entry", "callback", "i", "shouldRetain", "context", "json", "instance", "expr", "parseCallback", "wrapped_default", "Lexer", "unwrap_default", "ColumnsList", "EntriesAPI_default", "AbstractNode", "ref", "entry", "Identifier", "WhenClause", "AbstractNode", "condition", "Expr", "consequence", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "CaseConstruct", "AbstractNode", "baseValue", "Expr", "whenExpr", "WhenClause", "elseClause", "c", "context", "json", "instance", "whenClause", "sql", "expr", "parseCallback", "caseMatch", "caseConstruct", "assertions", "clauses", "Lexer", "clause", "assertStmt", "Assertion", "AbstractNode", "context", "operator", "operands", "Expr", "args", "Condition", "o", "json", "re", "instance", "sql", "rightHandSide", "s", "expr", "parseCallback", "lhs", "rhs", "Lexer", "$operator", "$operands", "unwrap_default", "opr", "AbstractStatement", "AbstractNode", "context", "request", "args", "tbl", "Identifier", "result", "clone", "expr", "Lexer", "chunk", "i", "inPlace", "Placeholder", "AbstractNode", "context", "offset", "value", "bindings", "json", "expr", "notation", "match", "Num", "AbstractNode", "context", "value", "json", "expr", "Json", "Str", "value", "isObject_default", "context", "json", "expr", "braces", "$", "text", "quote", "b", "wrapped_default", "Lexer", "JsonPath", "AbstractNode", "lhs", "operator", "rhs", "Json", "Identifier", "Num", "Str", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "Path", "_Path", "AbstractNode", "lhs", "operator", "rhs", "$static", "Identifier", "JsonPath", "stmtNode", "rootSchema", "getPrimaryKey", "schema", "getTargetTable", "foreignKey", "fk", "targetIdent", "foreignKey_rhs", "table_rhs", "schema_rhs", "path", "table_lhs", "schema_lhs", "primaryKey_lhs", "baseTableIdent", "foreignKey_lhs", "primaryKey_rhs", "baseTable", "baseKey", "joinKey", "joinAlias", "joint", "baseAlias", "joinKeyAlias", "j", "q", "field", "s", "on", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "tblName", "dbName", "AbstractAliasableExpr", "AbstractNode", "expr", "fns", "Parens", "alias", "claused", "Identifier", "context", "json", "instance", "Path", "s", "parseCallback", "escChar", "$expr", "$separator", "aliasUnescaped", "aliasEscaped", "exprNode", "$alias", "Expr", "Literal", "Table", "AbstractAliasableExpr", "Parens", "Identifier", "JoinClause", "Table", "table", "correlations", "Condition", "correlation", "Identifier", "context", "json", "instance", "s", "expr", "parseCallback", "joinMatch", "type", "joinSpec", "$table", "$correlation", "matches", "Lexer", "Assertion", "Func", "AbstractNode", "name", "args", "Expr", "o", "context", "json", "instance", "expr", "parseCallback", "Lexer", "arg", "AbstractOrderBy", "AbstractNode", "args", "Expr", "c", "context", "json", "instance", "criterion", "expr", "parseCallback", "orderByMatch", "criteriaExpr", "criterionExpr", "Lexer", "sort", "OrderByClause", "AbstractOrderBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "Lexer", "instance", "AbstractGroupBy", "AbstractNode", "args", "Expr", "criterion", "c", "context", "json", "instance", "expr", "parseCallback", "groupByMatch", "criteriaExpr", "criterionExpr", "Lexer", "PartitionByClause", "AbstractGroupBy", "WindowSpec", "AbstractNode", "name", "windowRef", "partitionBys", "PartitionByClause", "orderBys", "OrderByClause", "context", "json", "k", "instance", "sql", "x", "expr", "parseCallback", "parseEnclosure", "enclosure", "definedRef", "clauses", "clauseTypes", "Lexer", "unwrap_default", "clauseType", "hasEnclosure", "Aggr", "Func", "args", "orderBys", "OrderByClause", "window", "WindowSpec", "context", "json", "instance", "s", "expr", "parseCallback", "func", "over", "Lexer", "name", "allOrDistinct", "$args", "orderByClause", "Field", "AbstractAliasableExpr", "lhs", "operator", "rhs", "JsonPath", "Path", "name", "args", "Aggr", "Func", "fns", "CaseConstruct", "WindowClause", "AbstractNode", "windows", "WindowSpec", "w", "context", "json", "instance", "expr", "parseCallback", "windowMatch", "windowSpec", "spec", "Lexer", "GroupByClause", "AbstractGroupBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "Lexer", "instance", "SelectStatement", "_SelectStatement", "AbstractStatement", "fields", "Field", "tables", "Table", "table", "JoinClause", "wheres", "Condition", "groupBys", "GroupByClause", "windows", "WindowClause", "orderBys", "OrderByClause", "offset", "limit", "l", "union", "q", "inPlace", "instance", "path", "query", "s", "context", "json", "params", "sql", "expr", "parseCallback", "match", "withUac", "allOrDistinct", "body", "$body", "clausesMap", "fieldsSpec", "tokens", "clauses", "Lexer", "x", "fieldExpr", "field", "clause", "$clause", "clauseKey", "key", "tblExpr", "node", "Assertion", "args", "request", "list", "Aggr", "Path", "Placeholder", "Parens", "AbstractNode", "fns", "SelectStatement", "Expr", "context", "json", "instance", "expr", "parseCallback", "wrapped_default", "Lexer", "unwrap_default", "Condition", "_Condition", "AbstractNode", "context", "logic", "assertions", "Assertion", "Parens", "o", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "TypeCast", "AbstractNode", "operand", "type", "syntax2", "Expr", "context", "json", "instance", "expr", "parseCallback", "parens", "Lexer", "Math", "AbstractNode", "context", "operator", "operands", "Expr", "o", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "s", "StrJoin", "AbstractNode", "strings", "Expr", "str", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "Expr", "context", "json", "Types", "instance", "router", "methodName", "args", "$instance", "prev", "Type", "f", "t", "name", "arg", "expr", "parseCallback", "Parens", "CaseConstruct", "StrJoin", "Condition", "Path", "JsonPath", "Assertion", "Math", "TypeCast", "Aggr", "Func", "Json", "Num", "Str", "Placeholder", "Identifier", "Literal", "ValuesList", "EntriesAPI_default", "AbstractNode", "Expr", "DimensionsAPI_default", "Class", "inPlace", "action", "rootSchema", "tblName", "dbName", "tblSchema", "lhsTablePK", "getPrimaryKey", "columnsDef", "c", "relations", "offload", "rowOffset", "lhsTableFK", "valEntry", "Literal", "x", "isObject_default", "fkDef", "rhsTableName", "rhsTablePK", "rhsTableFK", "beforeLast_default", "afterLast_default", "targetIdent", "Identifier", "target_s", "value_s", "colOffset", "ColumnsList", "ValuesList", "subValEntry", "subColOffset", "offloaded", "rowEntry", "preHook", "catalog", "catalogStructure", "rhsPayload", "rhsReturns", "node", "mapKey_PayloadOffset", "returnValue", "pkValue", "Str", "originalReturning", "originalReturningFor", "key", "field", "postHook", "lhsReturns", "rhsPayloadMap", "rhsReturningAll", "mapKey_PayloadListOffset", "row", "originalLhsFk", "payloadOffsetLen", "payloadOffsetStart", "_", "$row", "request", "args", "primaryKey", "AssignmentList", "AbstractNode", "target_s", "value_s", "ColumnsList", "ValuesList", "Expr", "Identifier", "entries", "ref", "entry", "$entry", "e", "callback", "i", "shouldRetain", "context", "json", "instance", "expr", "parseCallback", "assignmentExpr", "Lexer", "s", "wrapped_default", "targets", "values", "target", "value", "OnConflictClause", "AssignmentList", "args", "Identifier", "wheres", "Condition", "c", "context", "json", "instance", "sql", "expr", "parseCallback", "onConflictMatch", "conflictTarget", "action", "updateSpec", "assignmentList", "whereSpec", "Lexer", "conflictTargetKeyComp", "wrapped_default", "unwrap_default", "s", "Assertion", "InsertStatement", "DimensionsAPI_default", "AbstractStatement", "table", "Table", "columns", "ColumnsList", "values", "ValuesList", "assignments", "AssignmentList", "query", "SelectStatement", "onConflictSpecs", "OnConflictClause", "fields", "Field", "valuesList", "context", "json", "instance", "entry", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "tableSpec", "tokens", "clauses", "Lexer", "x", "clause", "$clause", "clauseKey", "key", "tableColumnSplit", "rowPayload", "field", "request", "args", "UpdateStatement", "DimensionsAPI_default", "AbstractStatement", "tables", "Table", "table", "JoinClause", "assignments", "AssignmentList", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "fields", "Field", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "tableSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "Assertion", "field", "request", "args", "DeleteStatement", "AbstractStatement", "request", "args", "identifiers", "Identifier", "tablesOrIdentifiers", "Table", "tables", "table", "JoinClause", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "fields", "Field", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "maybeTablesSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "asType", "Assertion", "field", "AbstractStatement_default", "Class", "clone", "request", "args", "AbstractNode", "context", "kind", "json", "Rename", "AbstractNode", "value", "Identifier", "context", "json", "instance", "expr", "parseCallback", "match", "kind", "rename", "s", "name1", "name2", "Lexer", "AbstractNode", "name", "nodeB", "key", "isWrite", "isDirty", "args", "callback", "value", "pass", "keepBefore", "returnValue", "recursively", "node", "entries", "prop", "normalValue", "a", "b", "caseMatch", "$b", "x", "i", "temp", "prev", "k", "json", "context", "instance", "val", "AbstractConstraint", "AbstractNode", "fromCamel_default", "json", "context", "callback", "expr", "name", "$expr", "asInputDialect", "nameRegex", "nameUnscaped", "nameEscaped", "rest", "AutoIncrementConstraint", "AbstractConstraint", "IdentityConstraint", "IdentityConstraint", "AbstractConstraint", "val", "nodeB", "context", "json", "instance", "AutoIncrementConstraint", "expr", "name", "$expr", "AbstractLevel2Constraint", "AbstractConstraint", "json", "$json", "context", "callback", "columnsExpr", "asInputDialect", "Lexer", "unwrap_default", "columnExpr", "PrimaryKey", "AbstractLevel2Constraint", "AbstractTableConstraint_default", "Class", "columns", "consB", "context", "json", "instance", "val", "expr", "parseCallback", "$expr", "columnsExpr", "Lexer", "TablePrimaryKey", "AbstractTableConstraint_default", "PrimaryKey", "ForeignKey", "AbstractLevel2Constraint", "schema", "name", "columns", "rule", "nodeB", "json", "context", "callback", "instance", "val", "targetIdent", "Identifier", "sql", "serializeReferentialRule", "expr", "$expr", "table_maybeQualified", "cols", "opts", "Lexer", "table", "targetColumns", "unwrap_default", "col", "matchReferentialRule", "str", "type", "referentialActionRe", "keyword1", "keyword2", "keyword2Columns", "s", "TableForeignKey", "AbstractTableConstraint_default", "ForeignKey", "namePart", "name", "$name", "sql", "context", "expr", "parseCallback", "$expr", "columnsExpr", "rest", "Lexer", "UniqueKey", "AbstractLevel2Constraint", "context", "expr", "name", "$expr", "TableUniqueKey", "AbstractTableConstraint_default", "UniqueKey", "AbstractExprConstraint_default", "Class", "expr", "nodeB", "context", "json", "instance", "val", "name", "$expr", "wrapped_default", "unwrap_default", "CheckConstraint", "AbstractExprConstraint_default", "AbstractLevel2Constraint", "ExpressionConstraint", "AbstractExprConstraint_default", "AbstractConstraint", "val", "nodeB", "context", "json", "instance", "expr", "stored", "name", "$expr", "DefaultConstraint", "AbstractExprConstraint_default", "AbstractConstraint", "NotNullConstraint", "AbstractConstraint", "OnUpdateClause", "AbstractExprConstraint_default", "AbstractConstraint", "NullConstraint", "AbstractConstraint", "DataType", "AbstractNode", "context", "spec", "json", "name", "precision", "flags", "parse", "nornalizeSpec", "d", "f", "x", "expr", "key", "s", "Column", "AbstractNode", "AutoIncrementConstraint", "IdentityConstraint", "ExpressionConstraint", "DefaultConstraint", "NotNullConstraint", "NullConstraint", "OnUpdateClause", "PrimaryKey", "ForeignKey", "UniqueKey", "CheckConstraint", "value", "DataType", "args", "arg1", "existing", "getExisting", "type", "cons", "instance", "prev", "Type", "nodeB", "typeA", "typeB", "consA", "consB", "json", "constraintDef", "propName", "toCamel_default", "props", "lonePropValue", "propValue", "context", "$type", "_", "__", "___", "constraints", "val", "constraintsNormalized", "normalized", "name", "fromCamel_default", "c", "expr", "parseCallback", "namePart", "bodyPart", "Lexer", "qualifier", "regexes", "columnType", "tokens", "constraint", "Index", "AbstractNode", "value", "columns", "nodeB", "context", "json", "instance", "val", "expr", "match", "type", "rest", "namePart", "columnsPart", "Lexer", "name", "unwrap_default", "columnExpr", "Add", "AbstractNode", "argument", "context", "json", "stmts", "Column", "TableForeignKey", "expr", "parseCallback", "match", "kind", "ifNotExists", "argumentExpr", "s", "instance", "$argumentExpr", "$first", "$afterRef", "IdentityConstraint", "TablePrimaryKey", "TableUniqueKey", "CheckConstraint", "Index", "Drop", "AbstractNode", "value", "Identifier", "context", "json", "instance", "restrictOrCascade", "kind", "ident", "expr", "parseCallback", "match", "temporaryTable", "ifExists", "name", "s", "Set", "AbstractNode", "value", "DataType", "Identifier", "context", "json", "expr", "parseCallback", "match", "kind", "argument", "s", "isIdentity", "instance", "Modify", "AbstractNode", "argument", "context", "json", "stmts", "expr", "parseCallback", "match", "kind", "$expr", "s", "instance", "afterRef", "matches", "Lexer", "Column", "Change", "Modify", "value", "Identifier", "context", "json", "stmts", "expr", "parseCallback", "match", "kind", "$expr", "s", "instance", "ident", "$$expr", "Lexer", "Alter", "Change", "kind", "argument", "instance", "expr", "parseCallback", "Set", "Add", "Drop", "Literal", "AlterStatement", "AbstractStatement_default", "AbstractNode", "value", "Identifier", "actions", "kind", "argument", "ident", "x", "context", "json", "instance", "resolveIdent", "stmts", "renames", "ownRename", "ownMove", "a", "b", "c", "d", "action", "Rename", "Set", "writeBaseStmt", "sql", "stmt", "expr", "parseCallback", "match", "$expr", "s", "$$expr", "Lexer", "Alter", "Change", "Modify", "Add", "Drop", "DropStatement", "AbstractStatement_default", "Drop", "restrictOrCascade", "ident", "TableSchema", "AbstractNode", "TablePrimaryKey", "TableForeignKey", "TableUniqueKey", "CheckConstraint", "node", "prefix", "column", "col", "Column", "constraint", "cons", "index", "idx", "Index", "nodeB", "getNode", "instance", "name", "getNames", "names", "unnamed", "AbstractLevel2Constraint", "x", "namesA", "namesB", "unnamedB", "addNode", "subNodeB", "columnName", "nodeA", "altInstance", "reference", "ifExists", "action", "subAction", "existing", "DataType", "AlterStatement", "constraintDirty", "includingName", "k", "columnClone", "consDefault", "q", "constraintsLevel1", "constraintsLevel2", "tableCons", "Type", "tableLevlConstraintDirty", "context", "json", "key", "val", "defs", "constraints", "indexes", "cnst", "ndx", "ident", "Identifier", "expr", "parseCallback", "namePart", "bodyPart", "rest", "Lexer", "wrapped_default", "unwrap_default", "def", "request", "args", "DatabaseSchema", "AbstractNode", "tbls", "tbl", "fks", "table", "TableSchema", "nodeB", "getNames", "instance", "node", "namesA", "namesB", "name", "nodeA", "tableB", "altInstance", "getTable", "ifExists", "action", "AlterStatement", "CreateStatement", "DropStatement", "alt", "context", "json", "expr", "parseCallback", "request", "args", "CreateStatement", "AbstractStatement_default", "Add", "Identifier", "stmts", "tblSchema", "TableSchema", "DatabaseSchema", "RenameStatement", "AbstractStatement_default", "Rename", "grammar_default", "CreateStatement", "AlterStatement", "DropStatement", "RenameStatement", "InsertStatement", "UpdateStatement", "DeleteStatement", "SelectStatement", "Expr", "Parser", "grammar_default", "context", "expr", "grammar", "params", "$grammar", "Node", "node", "$context", "$expr", "$params", "RootSchema", "AbstractNode", "db", "tbls", "tbl", "fks", "database", "DatabaseSchema", "name", "defaultToFirst", "path", "schemas", "existingDB", "altType", "getAltType", "node", "col", "cons", "targetList", "index", "fk", "context", "json", "instance", "request", "args", "Savepoint", "client", "json", "direction", "$outcome", "schema", "DatabaseSchema", "DropStatement", "CreateStatement", "postRollback", "name", "$name", "tables", "keep", "id", "databaseTag", "versionTag", "versionMax", "$cursor", "commitDate", "commitDesc", "commitRef", "rollbackDate", "rollbackDesc", "rollbackRef", "details", "updatedRecord", "q", "AbstractClient", "init", "name", "params", "createSpec", "query", "CreateStatement", "alterSpec", "callback", "dbSchema", "dbName", "DropStatement", "details", "savepointsTable", "$name", "rest", "savepointJson", "q", "currentSavepoint", "insertResult", "Savepoint", "selector", "linkedDB", "Identifier", "savepoint", "handler", "Parser", "AbstractNode", "tblName", "willCreateSavepoint", "AlterStatement", "mightHaveDimensions", "InsertStatement", "UpdateStatement", "x", "willNeedStructure", "rootSchema", "scope", "target", "tablesList", "tbl", "DatabaseSchema", "returnValue", "matchExistingRequest", "exactMatching", "req", "isObject_default", "key", "path2", "path1", "tbls2", "tbls1", "intersect_default", "difference_default", "from_default", "tblDepth", "prev", "s", "result", "resultPromise", "cachePayload", "$payload", "resultSchema", "$resultSchema", "dbs", "db", "ss", "RootSchema", "resolutionPath", "migrations", "peakVersion", "baseName", "v", "instance", "cascade", "foundName", "foundVersion", "i", "fromName", "toName", "e", "request", "args", "AbstractDatabase", "client", "dbName", "params", "Identifier", "selector", "tblSelector", "name", "createSpec", "query", "CreateStatement", "tblName", "callback", "tblSchema", "DropStatement", "request", "args", "AbstractTable", "database", "tblName", "params", "Identifier", "args", "fields", "result", "q", "query", "SelectStatement", "modifiers", "upsertCallback", "columns", "values", "singular", "s", "_singular", "isObject_default", "payload", "row", "preHook", "postHook", "InsertStatement", "v", "toVal", "isFunction_default", "willNeedStructure", "c", "refFn", "col", "uniqueKeys", "uk", "conflictTarget", "keyComp", "intersect_default", "UpdateStatement", "i", "DeleteStatement", "callback", "addWheres", "wheres", "k", "tblSchema", "getPrimaryKey", "request", "autoBindings", "schema", "primaryKey", "AbstractCursor", "rows", "callback", "SQLCursor", "AbstractCursor", "store", "resolve", "SQLTable", "AbstractTable", "SQLCursor", "SQLDatabase", "AbstractDatabase", "SQLTable", "sql", "result", "row", "SQLClient", "AbstractClient", "driver", "params", "SQLDatabase", "query", "target", "isDMLStatement", "InsertStatement", "UpdateStatement", "DeleteStatement", "x", "mysqlReturningSupport", "willNeedStructure", "$query", "$mysqlReturningMagicCallback", "bindings", "value", "result", "SelectStatement", "selector", "rest", "getLevel2Details", "structure", "sql0", "sql1", "columns", "constraints", "exclusions", "sql", "row", "searchPath", "name", "Identifier", "key", "Lexer", "s", "selectList", "colName", "columnIdent", "insertUuid", "q", "values", "dbWhere", "tblWhere", "getWhere", "dbIdent", "tblIdent", "tblWhereCases", "list", "tbls", "$where", "ANY_VALUE", "col", "GROUP_CONCAT", "orderBy", "indexes", "dataType", "val", "formatRelation", "tableScope", "$structure", "y", "cons", "idx", "dbName", "tables", "tblName", "tbl", "columnNames", "normalizeCheckConstraint", "literals", "intersect_default", "primaryKey", "uniqueKeys", "foreignKeys", "checks", "primarys", "uniques", "foreigns", "tableSchema", "cols", "temp", "extras", "SQLClient"]
}
