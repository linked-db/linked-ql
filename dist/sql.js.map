{
  "version": 3,
  "sources": ["../node_modules/@webqit/util/js/isString.js", "../node_modules/@webqit/util/js/isUndefined.js", "../node_modules/@webqit/util/js/isTypeFunction.js", "../node_modules/@webqit/util/js/isFunction.js", "../node_modules/@webqit/util/js/isArray.js", "../node_modules/@webqit/util/js/isTypeArray.js", "../node_modules/@webqit/util/js/isNull.js", "../node_modules/@webqit/util/js/isTypeObject.js", "../node_modules/@webqit/util/js/isEmpty.js", "../node_modules/@webqit/util/js/isObject.js", "../node_modules/@webqit/util/arr/from.js", "../node_modules/@webqit/util/js/isNumber.js", "../node_modules/@webqit/util/js/isNumeric.js", "../node_modules/@webqit/util/arr/flatten.js", "../node_modules/@webqit/util/arr/first.js", "../node_modules/@webqit/util/arr/last.js", "../node_modules/@webqit/util/arr/pushUnique.js", "../node_modules/@webqit/util/obj/getPrototypeChain.js", "../node_modules/@webqit/util/obj/getAllPropertyNames.js", "../node_modules/@webqit/util/obj/mergeCallback.js", "../node_modules/@webqit/util/obj/merge.js", "../node_modules/@webqit/util/js/isPlainObject.js", "../node_modules/@webqit/util/js/isBoolean.js", "../node_modules/@webqit/util/obj/each.js", "../node_modules/@webqit/util/obj/compareCallback.js", "../node_modules/@webqit/util/obj/even.js", "../node_modules/@webqit/util/obj/copyPlain.js", "../node_modules/@webqit/util/arr/intersect.js", "../node_modules/@webqit/util/str/Lexer.js", "../src/query/Lexer.js", "../src/query/abstracts/Node.js", "../src/query/select/Identifier.js", "../src/query/abstracts/StatementNode.js", "../src/query/create/CreateDatabase.js", "../node_modules/@webqit/util/str/after.js", "../node_modules/@webqit/util/str/before.js", "../node_modules/@webqit/util/str/beforeLast.js", "../node_modules/@webqit/util/str/unwrap.js", "../node_modules/@webqit/util/str/wrapped.js", "../src/query/create/abstracts/AbstractConstraint.js", "../src/query/create/TableLevelConstraint.js", "../src/query/create/ColumnLevelConstraint.js", "../src/query/create/DataType.js", "../src/query/create/Column.js", "../src/query/create/Index.js", "../src/query/alter/Action.js", "../src/query/alter/AlterDatabase.js", "../src/query/drop/DropDatabase.js", "../src/query/create/CreateTable.js", "../src/query/alter/AlterTable.js", "../src/query/drop/DropTable.js", "../src/query/select/Placeholder.js", "../src/query/select/str/Str.js", "../src/query/select/json/Json.js", "../src/query/select/Num.js", "../src/query/select/json/JsonPath.js", "../src/query/select/Path.js", "../src/query/select/case/WhenClause.js", "../src/query/select/case/CaseConstruct.js", "../src/query/select/TypeCast.js", "../src/query/select/Parens.js", "../src/query/select/Math.js", "../src/query/select/abstracts/AbstractGroupBy.js", "../src/query/select/PartitionByClause.js", "../src/query/select/abstracts/AbstractOrderBy.js", "../src/query/select/OrderByClause.js", "../src/query/select/window/WindowSpec.js", "../src/query/select/Func.js", "../src/query/select/Aggr.js", "../src/query/select/str/StrJoin.js", "../src/query/select/Prim.js", "../src/query/select/abstracts/Expr.js", "../src/query/select/Assertion.js", "../src/query/select/Condition.js", "../src/query/select/abstracts/AbstractAliasableExpr.js", "../src/query/select/Table.js", "../src/query/select/JoinClause.js", "../src/query/select/GroupByClause.js", "../src/query/select/window/WindowClause.js", "../src/query/select/Field.js", "../src/query/select/Select.js", "../src/query/insert/AssignmentList.js", "../src/query/insert/OnConflictClause.js", "../src/query/insert/Insert.js", "../src/query/update/Update.js", "../src/query/delete/Delete.js", "../src/query/grammar.js", "../src/query/Parser.js", "../src/api/abstracts/Savepoint.js", "../src/api/abstracts/AbstractClient.js", "../node_modules/@webqit/util/arr/all.js", "../node_modules/@webqit/util/arr/any.js", "../node_modules/@webqit/util/arr/unique.js", "../src/api/abstracts/AbstractDatabase.js", "../src/api/abstracts/AbstractInsertQueryInspector.js", "../src/api/sql/SQLInsertQueryInspector.js", "../src/api/abstracts/AbstractDeleteQueryInspector.js", "../src/api/sql/SQLDeleteQueryInspector.js", "../src/api/abstracts/AbstractTable.js", "../src/api/abstracts/AbstractCursor.js", "../src/api/sql/SQLCursor.js", "../src/api/sql/SQLTable.js", "../src/api/sql/SQLDatabase.js", "../src/api/sql/SQLClient.js"],
  "sourcesContent": ["\n/**\n * Tells if val is of type \"string\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\n};\n", "\n/**\n * Tells if val is undefined or is of type \"undefined\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\n};\n", "\n/**\n * Tells if val is of type \"function\".\n * This holds true for both regular functions and classes.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn typeof val === 'function';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"function\".\n *\n * @param object \t\tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\n};\n", "\n/**\n * Tells if val is of type \"array\".\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val);\n};\n", "\n/**\n * @imports\n */\nimport _isString from './isString.js';\nimport _isUndefined from './isUndefined.js';\n\n/**\n * Tells if val is \"array-like\".\n * This holds true for anything that has a length property.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !_isString(val) && !_isUndefined(val.length);\n};\n", "\n/**\n * Tells if val is undefined or is null.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === null || val === '';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"object\".\n * This holds true for anything object, including built-ins.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\n};\n", "\n/**\n * @imports\n */\nimport _isNull from './isNull.js';\nimport _isUndefined from './isUndefined.js';\nimport _isTypeObject from './isTypeObject.js';\n\n/**\n * Tells if val is empty in its own type.\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\n * objects without keys, empty arrays.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\n};\n", "\n/**\n * Tells if val is pure object.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isTypeArray from '../js/isTypeArray.js';\nimport _isEmpty from '../js/isEmpty.js';\nimport _isObject from '../js/isObject.js';\n\n/**\n * Casts an array-like object to an array.\n *\n * @param mixed \tval\n * @param bool\t \tcastObject\n *\n * @return array\n */\nexport default function(val, castObject = true) {\n\tif (_isArray(val)) {\n\t\treturn val;\n\t};\n\tif (!castObject && _isObject(val)) {\n\t\treturn [val];\n\t};\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\n\t\treturn [];\n\t};\n\tif (_isTypeArray(val)) {\n\t\treturn Array.prototype.slice.call(val);\n\t};\n\tif (_isObject(val)) {\n\t\treturn Object.values(val);\n\t};\n\treturn [val];\n};\n", "\n/**\n * Tells if val is of type \"number\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof Number || (typeof val === 'number');\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from './isNumber.js';\n/**\n * Tells if val is of type \"string\" or a numeric string.\n * This holds true for both numbers and numeric strings.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNumber(val) || (val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1));\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Flattens a nested array to the given depth.\n *\n * @param array \tarr\n * @param int \t \tdepth\n * @param bool \t \twithObjects\n *\n * @return array\n */\nconst _flatten = function(arr, depth = 1, withObjects = true) {\n\tif (!_isNumeric(depth) || depth <= 0) {\n\t\treturn arr;\n\t};\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\n\t\tarr = Object.values(arr);\n\t};\n\tif (!_isArray(arr)) {\n\t\treturn arr;\n\t};\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \n\t\t: acc.concat(val), []);\n};\n\n/**\n * @exports\n */\nexport default _flatten;", "\n/**\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\tvar count = 0;\n\tarr.forEach(itm => {\n\t\tcount ++;\n\t});\n\tvar firsts = arr.slice(arr.length - count, amount);\n\treturn arguments.length > 1 ? firsts : firsts[0];\n};\n", "\n/**\n * @imports\n */\nimport _first from './first.js';\n\n/**\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\treturn arguments.length > 1\n\t\t? _first(arr.slice().reverse(), amount).reverse()\n\t\t: _first(arr.slice().reverse());\n};\n", "\n/**\n * Adds an item if not already exist.\n *\n * @param array \tarr\n * @param array\t \t...itms\n *\n * @return array\n */\nexport default function(arr, ...items) {\n\titems.forEach(itm => {\n\t\tif (arr.indexOf(itm) < 0) {\n\t\t\tarr.push(itm);\n\t\t}\n\t});\n\treturn arr;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the prototype chain.\n *\n * @param object \t\tobj\n * @param object\t \tuntil\n *\n * @return bool\n */\nexport default function(obj, until) {\n\tuntil = until || Object.prototype;\n\tuntil = until && !_isArray(until) ? [until] : until;\n\t// We get the chain of inheritance\n\tvar prototypalChain = [];\n\tvar obj = obj;\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\n\t\tprototypalChain.push(obj);\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\n\t}\n\treturn prototypalChain;\n};\n", "\n/**\n * @imports\n */\nimport _pushUnique from '../arr/pushUnique.js';\nimport _getPrototypeChain from './getPrototypeChain.js';\n\n/**\n * Eagerly retrieves object members all down the prototype chain.\n *\n * @param object\t \tobj\n * @param object\t \tuntil\n *\n * @return array\n */\nexport default function(obj, until) {\n\tvar keysAll = [];\n\t_getPrototypeChain(obj, until).forEach(obj => {\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\n\t});\n\treturn keysAll;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\nimport _getAllPropertyNames from './getAllPropertyNames.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\n\tvar depth = 0;\n\tvar obj1 = objs.shift();\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\n\t\tdepth = obj1;\n\t\tobj1 = objs.shift();\n\t}\n\tif (!objs.length) {\n\t\tthrow new Error('_merge() requires two or more array/objects.');\n\t}\n\tobjs.forEach((obj2, i) => {\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\n\t\t\treturn;\n\t\t}\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.keys(obj2)).forEach(key => {\n\t\t\tif (!callback(key, obj1, obj2, i)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valAtObj1 = obj1[key];\n\t\t\tvar valAtObj2 = obj2[key];\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \n\t\t\t&& (depth === true || depth > 0)) {\n\t\t\t\t// RECURSE...\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\n\t\t\t} else {\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\t\t\t\tif (isReplace) {\n\t\t\t\t\t\tobj1[key] = valAtObj2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj1.push(valAtObj2);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// In case we're setting a read-only property\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (withSymbols) {\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn obj1;\n};\n", "\n/**\n * @imports\n */\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function(...objs) {\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\n\t\treturn true;\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isObject from './isObject.js';\n\n/**\n * Tells if an object is direct instance of Object.prototype.\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\n *\n * @param object \tobj\n *\n * @return bool\n */\nexport default function(obj) {\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n};\n", "\n/**\n * Tells if val is undefined or is of type \"boolean\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === true || val === false;\n};\n", "\n/**\n * @imports\n */\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Loops thru obj flatly with a callback function.\n * Stops when callback returns a non-undefined value.\n *\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\n * @param function \t\t\t\tcallback \t\tThe callback function.\n *\n * @return mixed|null\t\t\tAny non-null return from callback\n */\nexport default function(obj, callback) {\n\tvar returnValue = undefined;\n\tif (_isTypeObject(obj)) {\n\t\tObject.keys(obj).forEach((k, i) => {\n\t\t\tif (returnValue !== false) {\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\n\t\t\t}\n\t\t});\n\t}\n\treturn returnValue;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isBoolean from '../js/isBoolean.js';\nimport _each from './each.js';\n\n/**\n * Gets the match(es) between (members of) two values;\n * assertion optionally custom.\n *\n * @param mixed \t\t\tob1\n * @param mixed \t\t\tobj2\n * @param string|function\tassertion\n * @param bool\t\t\t\tnetComparison\n * @param bool\t\t\t\tcontrast\n * @param bool\t\t\t\treturnOnFirstFalse\n *\n * @return bool|array|object\n */\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\n\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\tvar result = [];\n\t\tvar contn = true;\n\t\tobj1.forEach(v1 => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = false;\n\t\t\t_each(obj2, (k, v2) => {\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\n\t\t\t\t\ttestPass = assertion(v1, v2);\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\t\t\ttestPass = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\n\t\t\t\t\t\tv1 = testPass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult.push(netComparison ? testPass : v1);\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult.push(testPass);\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult.push(v1);\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\t\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar result = {};\n\t\tvar contn = true;\n\t\tObject.keys(obj1).forEach(k => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\ttestPass = false;\n\t\t\t}\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult[k] = testPass;\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult[k] = obj1[k];\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from '../js/isNumber.js';\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isPlainObject from '../js/isPlainObject.js';\nimport _compareCallback from './compareCallback.js';\n\n/**\n * Asserts (members of) the first value against (members of) subsequent values.\n * Assertion could be TRUE, FALSE, or custom.\n *\n * @param mixed \t\t\tobj1\n * @param mixed \t\t\tobj2\n * @param bool|function\t\tassertion\n * @param int\t\t\t\tdepth\n *\n * @return bool\n */\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\n\t\treturn !assertion;\n\t}\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar obj1Keys = Object.keys(obj1);\n\t\tvar obj2Keys = Object.keys(obj2);\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\n\t\t\t// Objects that won't show keys must be compared by instance\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \n\t\t\t\t? assertion\n\t\t\t\t: (obj1 === obj2) === assertion;\n\t\t}\n\t\tif (!_even(obj1Keys, obj2Keys)) {\n\t\t\treturn !assertion;\n\t\t}\n\t}\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\n\t\treturn _isArray(result) \n\t\t\t? result.length === obj1.length && result.length === obj2.length \n\t\t\t: (_isObject(result) && _isObject(obj1) \n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \n\t\t\t\t: result);\n\t}\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \n\t\t\t? assertion \n\t\t\t: (obj1 === obj2) === assertion\n\t);\n};\n\n/**\n * @exports\n */\nexport default _even;\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n * Copies only properties of an object.\n *\n * @param object\t \tobj\n * @param array\t\t \tonly\n * @param array\t\t \texcept\n *\n * @return object\n */\nexport default function(obj, filter = []) {\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\n\t\tif (!_isFunction(obj2[key])) {\n\t\t\treturn _isFunction(filter) ? filter(key) \n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\n\t\t}\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the intersection of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) !== -1\n\t);\n};\n", "\n/**\n * @imports\n */\nimport _isString from '../js/isString.js';\nimport _isUndefined from '../js/isUndefined.js';\nimport _isFunction from '../js/isFunction.js';\nimport _arrFrom from '../arr/from.js';\nimport _flatten from '../arr/flatten.js';\nimport _first from '../arr/first.js';\nimport _last from '../arr/last.js';\nimport _merge from '../obj/merge.js';\nimport _even from '../obj/even.js';\nimport _copyPlain from '../obj/copyPlain.js';\nimport { _isObject } from '../js/index.js';\n\n/**\n * --------------------------\n * TOKENIZER\n * --------------------------\n */\n\nexport default class Lexer {\n\n\t/**\n\t * Factory method.\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic lex(str, delims, options = {}) {\n\t\tif (!_isString(str = str + '')) {\n\t\t\tthrow new Error('Argument1 must be a string!');\n\t\t}\n\t\tvar copyResult = result => {\n\t\t\treturn {\n\t\t\t\tdelims: result.delims.slice(),\n\t\t\t\toptions: _copyPlain(result.options),\n\t\t\t\tnesting: result.nesting.slice(),\n\t\t\t\tmaxDepth: result.maxDepth,\n\t\t\t\tcomments: result.comments.slice(),\n\t\t\t\ttokens: result.tokens.slice(),\n\t\t\t\tmatches: result.matches.slice(),\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\n\t\t\t};\n\t\t};\n\t\t// ASK CACHE ---------------------------\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\n\t\t\t\tvar cached = Lexer.$cache[str][i];\n\t\t\t\tif (_even(cached.delims, delims)) {\n\t\t\t\t\treturn copyResult(cached);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// FRESH PARSE\t -------------------------------\n\t\tvar instance = new Lexer(str, options);\n\t\tvar result = instance.lex(delims);\n\t\t// SAVE TO CACHE -------------------------------\n\t\tif (options.cache !== false) {\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\n\t\t\tLexer.$cache[str].push(result);\n\t\t}\n\t\treturn copyResult(result);\n\t\t\n\t}\n\n\t/**\n\t * Factory method for .split().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic split(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).tokens;\n\t}\n\n\t/**\n\t * Factory method for .match().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic match(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).matches;\n\t}\n\n\t/**\n\t * Creates a lexer instance on a string with the given options.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\n\t * @param number \t\tlimit\t\t\t\tMax results to return\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\n\t *\n\t * @return array\n\t */\n\tconstructor(str, options) {\n\t\tif (!_isString(str)) {\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\n\t\t}\n\t\tthis.$str = str;\n\t\tthis.$options = options || {};\n\t\tif (!this.$options.blocks) {\n\t\t\tthis.$options.blocks = Lexer.$blocks;\n\t\t}\n\t\tif (!this.$options.quotes) {\n\t\t\tthis.$options.quotes = Lexer.$quotes;\n\t\t}\n\t\tif (!this.$options.comments) {\n\t\t\tthis.$options.comments = Lexer.$comments;\n\t\t}\n\t}\n\n\t/**\n\t * Parses the instance string on the given delimeters.\n\t *\n\t * This method supports static calling,\n\t * in which case a string is required as the first argument.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tlex(delims, options) {\n\t\tvar runtime = {\n\t\t\tdelims: _arrFrom(delims),\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\n\t\t\tnesting: [],\n\t\t\tmaxDepth: 0,\n\t\t\tcomments: [],\n\t\t\ttokens: [],\n\t\t\tmatches: [],\n\t\t\tmatchesi: {},\n\t\t};\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tvar cursor = 0;\n\t\twhile(typeof cursor === 'number') {\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\n\t\t}\n\t\tif (runtime.nesting.length) {\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\n\t\t}\n\t\t// RETURN NEW ----------------------------------\n\t\treturn runtime;\n\t}\n\n\t/**\n\t * Expr helper: evaluates and handles the character on the current cursor.\n\t * Advances the cursor.\n\t *\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return void\n\t */\n\t_evalCharsAt(runtime, i) {\n\t\tif (i >= this.$str.length) {\n\t\t\treturn;\n\t\t}\n\t\tvar charWidth = 1;\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\n\t\t// Quotes inside comments must be ignored\n\t\tif (!runtime.openComment) {\n\t\t\tquoteTest = this._testQuotes(runtime, i);\n\t\t}\n\t\t// Comments inside quotes must be ignored\n\t\tif (!runtime.openQuote) {\n\t\t\tcommentTest = this._testComments(runtime, i);\n\t\t}\n\t\t// Save comments\n\t\tif (runtime.openComment || commentTest.ending) {\n\t\t\t// Save only outer comments\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\n\t\t\t\tcharWidth = chars.length;\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\n\t\t\t} else {\n\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t}\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\n\t\t\t// Yes add quotes\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\treturn i + 1;\n\t\t} else {\n\t\t\t// Nesting tags inside comments and quotes have been ignored\n\t\t\tnestingTest = this._testNesting(runtime, i);\n\t\t\t// ---------------------\n\t\t\t// STOP ON THIS CHARACTER...?\n\t\t\t// ---------------------\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\n\t\t\t// STOP CHAR(S)? at top level?\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\n\t\t\t\truntime.options.stopChar = stopChar;\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// ---------------------\n\t\t\t// Match and split now...\n\t\t\t// ---------------------\n\t\t\tif (!runtime.delims.length) {\n\t\t\t\t// BLOCK-BASED SPLITTING...\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t} else/*no-nesting flag*/ {\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// ---------------------\n\t\t\t\t// DELIMS-BASED SPLITTING\n\t\t\t\t// ---------------------\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\t\t// In case the chars at index 0 is a delim,\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\n\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\n\t\t\t\t\tif (matchedDelim !== false) {\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\n\t\t\t\t\t\t\t// The current character is a delimiter...\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\n\t\t\t\t\t\t\tvar nextIndex = i + (matchedDelim.length || 1);\n\t\t\t\t\t\t\tif (nextIndex === this.$str.length) {\n\t\t\t\t\t\t\t\t// In case the chars at last index is a delim,\n\t\t\t\t\t\t\t\t// the resulting split should last have an empty string\n\t\t\t\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn nextIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\n\t\t\t\t} else {\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\n\t\t\t\t\tcharWidth = chars.length;\n\t\t\t\t\tthis._push(runtime, chars);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn i + charWidth;\n\t}\n\n\t/**\n\t * Expr helper: tests for a quote start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testQuotes(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.quotes || []).forEach(quote => {\n\t\t\tif (this.$str.substr(i, 1) === quote) {\n\t\t\t\tif (!runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = quote;\n\t\t\t\t\tresult.starting = quote;\n\t\t\t\t} else if (quote === runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = false;\n\t\t\t\t\tresult.ending = quote;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a comment start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testComments(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.comments || []).forEach(block => {\n\t\t\tif (!runtime.openComment) {\n\t\t\t\tvar starting = _first(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\t\truntime.openComment = block;\n\t\t\t\t\tresult.starting = starting;\n\t\t\t\t}\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\n\t\t\t\tvar ending = _last(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\truntime.openComment = false;\n\t\t\t\t\tresult.ending = ending;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testNesting(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.blocks || []).forEach(block => {\n\t\t\tlet starting = _first(block), matchedStarting;\n\t\t\tif (starting instanceof RegExp) {\n\t\t\t\t[matchedStarting] = starting.exec(this.$str.substr(i)) || [];\n\t\t\t} else if (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\tmatchedStarting = starting;\n\t\t\t}\n\t\t\tif (matchedStarting) {\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\n\t\t\t\tresult.starting = matchedStarting;\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\n\t\t\t\tvar ending = _last(block), matchedEnding;\n\t\t\t\tif (ending instanceof RegExp) {\n\t\t\t\t\t[matchedEnding] = ending.exec(this.$str.substr(i)) || [];\n\t\t\t\t} else if (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\tmatchedEnding = ending;\n\t\t\t\t}\n\t\t\t\tif (matchedEnding) {\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\n\t\t\t\t\tresult.ending = matchedEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\n\t *\n\t * @param array\t\ttestList\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return mixed\n\t */\n\t_testChars(testList, runtime, i) {\n\t\tfor (var k = 0; k < testList.length; k ++) {\n\t\t\tconst testArg = {\n\t\t\t\tuseRegex: runtime.options.useRegex,\n\t\t\t\tci: runtime.options.ci,\n\t\t\t\t...(_isObject(testList[k]) ? testList[k] : { test: testList[k] })\n\t\t\t};\n\t\t\tif (_isFunction(testArg.test)) {\n\t\t\t\tvar ret = testArg.test(this.$str.substr(0, i), this.$str.substr(i), runtime.tokens.slice());\n\t\t\t\tif (ret !== false) return ret;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (testArg.useRegex) {\n\t\t\t\tconst regexFlags = testArg.useRegex !== true ? testArg.useRegex : '';\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + testArg.test, regexFlags));\n\t\t\t\tif (m && (!testArg.backtest || this.$str.substr(0, i).match(new RegExp(testArg.backtest, regexFlags)))) {\n\t\t\t\t\treturn m[0];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst match = (base, text) => testArg.ci ? base.toLowerCase() === text.toLowerCase() : base === text;\n\t\t\tif (match(this.$str.substr(i, testArg.test.length), testArg.test)) {\n\t\t\t\tif (!testArg.backtest || match(this.$str.substr(i - testArg.backtest.length, i), testArg.backtest)) {\n\t\t\t\t\treturn testArg.test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Expr helper: pushes a character or set of characters into the current split series.\n\t *\n\t * @param object \truntime\n\t * @param string\tchars\n\t * @param string\ttarget\n\t * @param bool\t\tisNewSeries\n\t *\n\t * @return void\n\t */\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\n\t\tvar splitSeries = runtime.matches.length;\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\n\t\t\truntime.tokens[splitSeries] = '';\n\t\t}\n\n\t\tif (target === 'comments') {\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\n\t\t\t\truntime.tokens[splitSeries].comments = [];\n\t\t\t}\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\n\t\t} else {\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\n\t\t}\n\t}\n\n\t/**\n\t * Splits the instance string on the given delimeters and returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tsplit(str, delims, options) {\n\t\treturn this.lex(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters and returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t *\n\t * @return array\n\t */\n\tmatch(str, delims, options) {\n\t\treturn this.lex(delims, options).matches;\n\t}\n\t\n\t/**\n\t * Parses the instance string on the given delimeters using regex.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tregParse(delims, options) {\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregSplit(delims, options) {\n\t\treturn this.regParse(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregMatch(delims, options) {\n\t\treturn this.regParse(delims, options).matches;\n\t}\n};\n\n/**\n * @var array\n */\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\n\n/**\n * @var array\n */\nLexer.$quotes = ['\"', \"'\", '`',];\n\n/**\n * @var array\n */\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\n\n/**\n * @var object\n */\nLexer.$cache = Object.create(null);", "\nimport $Lexer from '@webqit/util/str/Lexer.js';\n\nexport default class Lexer extends $Lexer {\n    static $blocks = [...$Lexer.$blocks, [new RegExp(`^CASE `, 'i'), new RegExp(`^ END`, 'i')]];\n}", "import Lexer from '../Lexer.js';\r\n\r\nexport default class Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONTEXT;\r\n\tFLAGS = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(context) {\r\n\t\tthis.CONTEXT = context;\r\n\t\tlet statementNode = this.statementNode;\r\n\t\tif (statementNode === this) {\r\n\t\t\t// Subquery case\r\n\t\t\tstatementNode = statementNode.CONTEXT?.statementNode;\r\n\t\t}\r\n\t\tstatementNode?.connectedNodeCallback?.(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Recursively accesses @params.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tget params() { return this.CONTEXT?.params || {}; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * NODE TREE\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget rootNode() { return this.CONTEXT && this.CONTEXT instanceof Node ? this.CONTEXT.rootNode : this; }\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget statementNode() { return this.CONTEXT && this.CONTEXT instanceof Node ? this.CONTEXT.statementNode : this; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUOTES and ESCAPING\r\n\t * -----------\r\n\t */\r\n\t\r\n\t/**\r\n\t * Determines the proper quote characters for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param Node|AbstractClient context \r\n\t * \r\n\t * @returns Array\r\n\t */\r\n\tstatic getQuoteChars(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? ['\"', \"'\"] : [\"'\"];\r\n\t}\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tget quoteChars() { return this.constructor.getQuoteChars(this); }\r\n\r\n\t/**\r\n\t * Determines the proper escape character for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param Node|AbstractClient context \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tstatic getEscChar(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? '`' : '\"';\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget escChar() { return this.constructor.getEscChar(this); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic autoUnesc(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\treturn (expr || '').replace(new RegExp(escChar + escChar, 'g'), escChar);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parseIdent(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\tconst parts = Lexer.split(expr, ['.']);\r\n\t\tconst parses = parts.map(s => (new RegExp(`^(?:(\\\\*|[\\\\w]+)|(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2)$`)).exec(s.trim())).filter(s => s);\r\n\t\tif (parses.length !== parts.length) return;\r\n\t\tconst get = x => x?.[1] || this.autoUnesc(context, x?.[3]);\r\n\t\treturn [get(parses.pop()), get(parses.pop())];\r\n\t}\r\n\r\n\t/**\r\n\t * An Escape helper\r\n\t * \r\n\t * @param String|Array string_s \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tautoEsc(string_s) {\r\n\t\tconst $strings = (Array.isArray(string_s) ? string_s : [string_s]).map(s => s && !/^(\\*|[\\w]+)$/.test(s) ? `${ this.escChar }${ s.replace(new RegExp(this.escChar, 'g'), this.escChar.repeat(2)) }${ this.escChar }` : s );\r\n\t\treturn Array.isArray(string_s) ? $strings : $strings[0];\r\n\t}\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUERY BUILDER\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * Helper for adding additional attributes to the instance.\r\n\t * \r\n\t * @params Object meta\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twith(meta) {\r\n\t\tfor (const attr in meta) { this[attr] = meta[attr]; }\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for adding flags to the instance.\r\n\t * \r\n\t * @params Array flags\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twithFlag(...flags) {\r\n\t\tthis.FLAGS.push(...flags.filter(f => f).map(flag => flag.toUpperCase()));\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for inspecting flags on the instance.\r\n\t * \r\n\t * @params String flag\r\n\t * \r\n\t * @return Bool\r\n\t */\r\n\thasFlag(flag) { return this.FLAGS.includes(flag.toUpperCase()); }\r\n\r\n\t/**\r\n\t * Helper for adding clauses to the instance.\r\n\t * \r\n\t * @params String LIST\r\n\t * @params Array args\r\n\t * @params Node|Array Type\r\n\t * @params String delegate\r\n\t * \r\n\t * @return this\r\n\t */\r\n\tbuild(attrName, args, Type, delegate) {\r\n\t\tconst Types = Array.isArray(Type) ? Type : (Type ? [Type] : []);\r\n\t\tif (!Types.length) throw new Error(`At least one node type must be defined.`);\r\n\t\t// ---------\r\n\t\tconst cast = arg => Types.reduce((prev, Type) => prev || (arg instanceof Type ? arg : Type.fromJson(this, arg)), null);\r\n\t\tconst set = (...args) => {\r\n\t\t\tfor (const arg of args) {\r\n\t\t\t\tif (Array.isArray(this[attrName])) this[attrName].push(arg);\r\n\t\t\t\telse this[attrName] = arg;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// ---------\r\n\t\t// Handle direct child node and json cases\r\n\t\tif (args.length === 1 && typeof args[0] !== 'function') {\r\n\t\t\tconst instance = cast(args[0]);\r\n\t\t\tif (instance) return set(instance);\r\n\t\t}\r\n\t\t// Handle delegation cases\r\n\t\tif (delegate) {\r\n\t\t\tif (Types.length !== 1) throw new Error(`To support argument delegation, number of node types must be 1.`);\r\n\t\t\tconst instance = this[attrName] && !Array.isArray(this[attrName]) ? this[attrName] : new Types[0](this);\r\n\t\t\tset(instance);\r\n\t\t\treturn instance[delegate](...args);\r\n\t\t}\r\n\t\t// Handle direct child callback cases\r\n\t\tfor (let arg of args) {\r\n\t\t\t// Pass an instance into provided callback for manipulation\r\n\t\t\tif (typeof arg === 'function') {\r\n\t\t\t\t// Singleton and already instantiated?\r\n\t\t\t\tif (this[attrName] && !Array.isArray(this[attrName])) {\r\n\t\t\t\t\targ(this[attrName]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// New instance and may be or not be singleton\r\n\t\t\t\tif (Types.length === 1) {\r\n\t\t\t\t\tconst instance = new Types[0](this);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\targ(instance);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// Any!!!\r\n\t\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\t\tconst instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (methodName in Type.factoryMethods && Type.factoryMethods[methodName](this, ...args)) : (methodName in Type.prototype && new Type(this))), null);\r\n\t\t\t\t\tif (!instance) throw new Error(`Unknow method: ${ methodName }()`);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\tif (instance[methodName]) return instance[methodName](...args); // Foward the call\r\n\t\t\t\t\tfor (const f of args) f(instance); // It's just magic method mode\r\n\t\t\t\t};\r\n\t\t\t\targ(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Attempt to cast to type\r\n\t\t\tconst instance = cast(arg);\r\n\t\t\tif (instance) {\r\n\t\t\t\tset(instance);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tthrow new Error(`Arguments must be of type ${ Types.map(Type => Type.name).join(', ') } or a JSON equivalent. Recieved: ${ typeof arg }`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the instance.\r\n\t */\r\n\tclone() { return this.constructor.fromJson(this.CONTEXT, this.toJson()); }\r\n\t\r\n\t/**\r\n\t * -----------\r\n\t * PARSING CONVERSIONS\r\n\t * -----------\r\n\t */\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param String expr\r\n\t * @param Function parseCallback\r\n\t *\r\n\t * @return Node\r\n\t */\r\n\tstatic parse(context, expr, parseCallback = null) {}\r\n\r\n\t/**\r\n\t * Serializes the instance.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\ttoString() { return this.stringify(); }\r\n\t\r\n\t/**\r\n\t * Attempts to cast a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param Object json\r\n\t *\r\n\t * @return Node\r\n\t */\r\n\tstatic fromJson(context, json) {}\r\n\r\n\t/**\r\n\t * Cast the instance to a plain object.\r\n\t * \r\n\t * @returns Object\r\n\t */\r\n\ttoJson() { return {}; }\r\n}\r\n", "\nimport Node from '../abstracts/Node.js';\n\nexport default class Identifier extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tBASENAME;\n\tNAME;\n\n\t/**\n\t * Sets the name.\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tconst nameParts = Array.isArray(name) ? [...name] : [name];\n\t\tthis.NAME = nameParts.pop();\n\t\tthis.BASENAME = nameParts.pop();\n\t\tif (nameParts.length) throw new Error(`Idents can be maximum of two parts. Recieved: ${ nameParts.reverse().join('.') }.${ this.BASENAME }.${ this.NAME }`);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.BASENAME ? [this.BASENAME,this.NAME] : this.NAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json === 'string' || Array.isArray(json)) json = { name: json };\n\t\telse if (typeof json?.name !== 'string' && !Array.isArray(json?.name)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json?.flags || []));\n\t\tinstance.name(json.name);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\treturn this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') + (\n\t\t\tthis.FLAGS.length ? ` ${ this.FLAGS.map(s => s.replace(/_/g, ' ')).join(' ') }` : ''\n\t\t);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [name, basename] = this.parseIdent(context, expr, true) || [];\n\t\tif (!name) return;\n\t\tconst instance = new this(context);\n\t\tinstance.name(basename ? [basename,name] : name);\n\t\treturn instance;\n\t}\n}", "\r\nimport Node from \"./Node.js\";\r\nimport Lexer from \"../Lexer.js\";\r\n\r\nexport default class StatementNode extends Node {\r\n\r\n    /**\r\n     * @returns String\r\n     */\r\n    get type() { return this.constructor.name.toUpperCase(); }\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n\tget statementNode() { return this }\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n    connectedNodeCallback(node) {}\r\n\r\n    /**\r\n     * @returns String\r\n     */\r\n    static mySubstitutePlaceholders(context, expr) {\r\n        if ((context?.params?.inputDialect || context?.params?.dialect) !== 'mysql' || expr.indexOf('?') === -1) return expr;\r\n\t\treturn Lexer.split(expr, ['?'], { blocks:[] }).reduce((expr, chunk, i) => !expr ? chunk : expr + '?' + i + chunk, null);\r\n    }\r\n\r\n    /**\r\n     * @returns Bool\r\n     */\r\n    get expandable() { return false; }\r\n\r\n    /**\r\n     * @returns Node\r\n     */\r\n    async expand(inPlace = false) { return !inPlace ? this.clone() : this; }\r\n}\r\n", "\nimport StatementNode from '../abstracts/StatementNode.js';\n\nexport default class CreateDatabase extends StatementNode {\n\t \n    /**\n\t * Instance properties\n\t */\n\tNAME = '';\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) { this.NAME = name; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.NAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\treturn (new this(context, json.name)).withFlag(...(json.flags || []));\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `CREATE SCHEMA${ this.hasFlag('IF_NOT_EXISTS') ? ' IF NOT EXISTS' : '' } ${ this.autoEsc(this.NAME) }`; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifNotExists, namePart ] = /^CREATE\\s+DATABASE\\s+(IF\\s+NOT\\s+EXISTS\\s+)?(.+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst [name] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!name) return;\n\t\tconst instance = new this(context, name, params);\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic cloneJson(json) {\n\t\tconst jsonClone = { name: json.name };\n\t\tconst rebase = (obj, key) => {\n\t\t\tconst value = obj[key];\n\t\t\tObject.defineProperty(obj, `$${ key }`, { get: () => value });\n\t\t};\n\t\trebase(jsonClone, 'name');\n\t\treturn jsonClone;\n\t}\n}", "\n/**\n * Return the remainder of a string after a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   afterLast\n *\n * @return string\n */\nexport default function(subject, search, afterLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn '';\n\t}\n\treturn subject.substr(pos + search.length);\n};\n", "\n/**\n * Return the part of a string before a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   beforeLast\n *\n * @return string\n */\nexport default function(subject, search, beforeLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn subject;\n\t}\n\treturn subject.substr(0, pos);\n};\n", "\n/**\n * @imports\n */\nimport _before from './before.js';\n\n/**\n * Return the part of a string before last occurence of a given value.\n *\n * @param  string  subject\n * @param  string  search\n *\n * @return string\n */\nexport default function(subject, search) {\n\treturn _before(subject, search, true);\n};\n", "\n/**\n * @imports\n */\nimport _after from './after.js';\nimport _beforeLast from './beforeLast.js';\n\n/**\n * Returns the string without the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return string\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\n};\n", "\n/**\n * Tells if the string is warapped with the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return bool\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\n};\n", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../Lexer.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class AbstractConstraint extends Node {\n\n    /**\n     * @returns Object\n     */\n    stringifyName() { return this.CONSTRAINT_NAME ? `CONSTRAINT ${ this.autoEsc(this.CONSTRAINT_NAME) }` : ''; }\n\n    /**\n     * @returns Object\n     */\n    stringifyReference() {\n        const basename = this.DETAIL.basename || this.BASENAME;\n        const serializeReferentialRule = rule => typeof rule === 'object' && rule ? `${ rule.rule } (${ rule.columns.join(',') })` : rule;\n        let sql = `${ this.autoEsc([basename, this.DETAIL.table].filter(s => s)).join('.') } (${\n            this.autoEsc(this.DETAIL.columns).join(',')\n        })`;\n        if (this.DETAIL.matchRule) { sql += ` MATCH ${ this.DETAIL.matchRule }`; }\n        if (this.DETAIL.updateRule) { sql += ` ON UPDATE ${ serializeReferentialRule(this.DETAIL.updateRule) }`; }\n        if (this.DETAIL.deleteRule) { sql += ` ON DELETE ${ serializeReferentialRule(this.DETAIL.deleteRule) }`; }\n        return sql;\n    }\n\n    /**\n     * @returns Object\n     */\n    stringifyCheck() { return `(${ this.DETAIL.expr })`; }\n\n    /**\n     * @returns Object\n     */\n    static parseName(context, expr, asInputDialect = false) {\n        const escChar = this.getEscChar(context, asInputDialect);\n        const nameRegex = `(?:CONSTRAINT(?:` + `\\\\s+(\\\\w+)` + `|` + `\\\\s+(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2` + `)\\\\s+)?`;\n        const [ , nameUnscaped, /*esc*/, nameEscaped, rest = '' ] = expr.match(new RegExp(`^${ nameRegex }([\\\\s\\\\S]+)$`, 'i')) || [];\n        return { constraintName: nameUnscaped || this.autoUnesc(context, nameEscaped), expr: rest.trim() };\n    }\n\n    /**\n     * @returns Object\n     */\n    static parseReference(context, expr) {\n        const [ table_maybeQualified, cols, opts = '' ] = Lexer.split(expr, []);\n        const [table, basename] = this.parseIdent(context, table_maybeQualified.trim(), true);\n        const columns = Lexer.split(_unwrap(cols, '(', ')'), [',']).map(col => this.parseIdent(context, col.trim(), true)[0]);\n        const matchReferentialRule = (str, type) => {\n            if (type === 'MATCH') return str.match(/MATCH\\s+(\\w+)/i)?.[1];\n            const referentialActionRe = /(NO\\s+ACTION|RESTRICT|CASCADE|(SET\\s+NULL|SET\\s+DEFAULT)(?:\\s+\\(([^\\)]+)\\))?)/;\n            const [ , keyword1, keyword2, keyword2Columns ] = str.match(new RegExp(`ON\\\\s+${ type }\\\\s+${ referentialActionRe.source }`, 'i')) || [];\n            return keyword2 ? (!keyword2Columns ? keyword2 : { rule: keyword2, columns: keyword2Columns.split(',').map(s => s.trim()) }) : keyword1;\n        };\n        return {\n            basename,\n            table,\n            columns,\n            matchRule: matchReferentialRule(opts, 'MATCH'),\n            updateRule: matchReferentialRule(opts, 'UPDATE'),\n            deleteRule: matchReferentialRule(opts, 'DELETE'),\n        };\n    }\n\n    /**\n     * @returns Object\n     */\n    static parseCheck(expr) {\n        const [ , $expr, opts = '' ] = Lexer.split(expr, []);\n\t\treturn { expr: _unwrap($expr, '(', ')') };\n    }\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractConstraint from './abstracts/AbstractConstraint.js';\nimport Lexer from '../Lexer.js';\n\nexport default class TableLevelConstraint extends AbstractConstraint {\n\n\t/**\n\t * Instance properties\n\t */\n\tCONSTRAINT_NAME = '';\n\tTYPE = '';\n\tCOLUMNS = [];\n\tDETAIL = {};\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, constraintName, type, columns, detail = {}) {\n        super(context);\n        this.CONSTRAINT_NAME = constraintName;\n        this.TYPE = type;\n        this.COLUMNS = columns;\n\t\tthis.DETAIL = detail;\n    }\n\n\t/**\n\t * @property String\n\t */\n\tget BASENAME() { return this.CONTEXT/*Create|AlterTable*/.BASENAME; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...(this.CONSTRAINT_NAME ? { constraintName: this.CONSTRAINT_NAME } : {}),\n\t\t\ttype: this.TYPE,\n\t\t\t...(this.COLUMNS.length ? { columns: this.COLUMNS } : {}),\n\t\t\tdetail: this.DETAIL,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n        const sql = [this.stringifyName(), this.TYPE.replace(/_/i, ' ')];\n\t\tif (this.COLUMNS?.length && this.TYPE !== 'CHECK') sql.push(`(${ this.autoEsc(this.COLUMNS).join(',') })`);\n\t\tif (this.TYPE === 'FOREIGN_KEY') sql.push('REFERENCES', this.stringifyReference());\n\t\telse if (this.TYPE === 'CHECK') sql.push(this.stringifyCheck());\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n\n\n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst parseColumns = columnsExpr => Lexer.split(_unwrap(columnsExpr, '(', ')'), [',']).map(columnExpr => {\n\t\t\treturn this.parseIdent(context, columnExpr.trim(), true)[0];\n\t\t});\n\t\t// Splice out the name part of the expression\n\t\tconst { constraintName = '', expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr) return; // Not a constraint\n\t\tconst [ $$expr, columnsExpr, ...rest ] = Lexer.split($expr, []);\n\t\t// PRIMARY KEY\n\t\tif (/^PRIMARY\\s+KEY/i.test($$expr)) {\n\t\t\treturn new this(context, constraintName.trim(), 'PRIMARY_KEY', parseColumns(columnsExpr));\n\t\t}\n\t\t// UNIQUE KEY]\n\t\tif (/^UNIQUE/i.test($$expr)) {\n\t\t\treturn new this(context, constraintName.trim(), 'UNIQUE', parseColumns(columnsExpr));\n\t\t}\n\t\t// REFERENCE\n\t\tif (/^FOREIGN\\s+KEY/i.test($expr)) {\n\t\t\treturn new this(context, constraintName, 'FOREIGN_KEY', parseColumns(columnsExpr), this.parseReference(context, rest.join('').trim().replace(/^REFERENCES\\s+/i, '')));\n\t\t}\n\t\t// CHECK\n\t\tif (/^CHECK/i.test($expr)) {\n\t\t\treturn new this(context, constraintName, 'CHECK', [], this.parseCheck(columnsExpr.replace(/^CHECK\\s+/i, '')));\n\t\t}\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json.constraintName !== 'string' && (typeof json?.type !== 'string' || !json.type.match(/PRIMARY_KEY|UNIQUE|CHECK|FOREIGN_KEY/i))) return;\n\t\treturn new this(context, json.constraintName, json.type.replace(/UNIQUE_KEY/i, 'UNIQUE'), json.columns, json.references/*from user-defined schema*/ || json.expr/*from user-defined schema*/ || json.detail/*the standard*/ );\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromColumnLevelConstraint(columnLevelConstraint, columnName) {\n\t\treturn new this(\n\t\t\tcolumnLevelConstraint.CONTEXT/*Column*/.CONTEXT/*Create|AlterTable*/,\n\t\t\tcolumnLevelConstraint.CONSTRAINT_NAME,\n\t\t\tcolumnLevelConstraint.TYPE,\n\t\t\t[columnName],\n\t\t\tcolumnLevelConstraint.DETAIL,\n\t\t);\n\t}\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractConstraint from './abstracts/AbstractConstraint.js';\n\nexport default class ColumnLevelConstraint extends AbstractConstraint {\n\n    /**\n\t * Instance properties\n\t */\n\tCONSTRAINT_NAME = '';\n\tTYPE = '';\n\tDETAIL = {};\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, constraintName, type, detail = {}) {\n        super(context);\n        this.CONSTRAINT_NAME = constraintName;\n        this.TYPE = type;\n        this.DETAIL = detail;\n    }\n\n\t/**\n\t * @property String\n\t */\n\tget BASENAME() { return this.CONTEXT/*Column*/.CONTEXT/*Create|AlterTable*/.BASENAME; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n        const sql = [this.stringifyName()];\n\t\tif (this.TYPE === 'DEFAULT') sql.push('DEFAULT', this.DETAIL.expr ? `(${ this.DETAIL.expr })` : this.DETAIL.value);\n\t\telse if (['IDENTITY', 'EXPRESSION'].includes(this.TYPE)) {\n\t\t\tsql.push('GENERATED', this.DETAIL.always ? 'ALWAYS' : 'BY DEFAULT', 'AS');\n\t\t\tif (this.TYPE === 'IDENTITY') sql.push(`IDENTITY`);\n\t\t\telse if (this.DETAIL.expr) sql.push(this.DETAIL.expr, 'STORED');\n\t\t}\n\t\telse if (this.TYPE === 'FOREIGN_KEY') sql.push('REFERENCES', this.stringifyReference());\n\t\telse if (this.TYPE === 'CHECK') sql.push('CHECK', this.stringifyCheck());\n\t\telse sql.push(this.TYPE.replace(/(?<!AUTO)_/i, ' ')); // Think: AUTO_INCREMENT\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...(this.CONSTRAINT_NAME ? { constraintName: this.CONSTRAINT_NAME } : {}),\n\t\t\ttype: this.TYPE,\n\t\t\tdetail: { ...this.DETAIL },\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Object.values(this.attrEquivalents).includes(json?.type)) return;\n\t\treturn (new this(context, json.constraintName, json.type, json.detail)).withFlag(...(json.flags || []));\n\t}\n\n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\t// Splice out the name part of the expression\n\t\tconst { constraintName, expr: $expr } = this.parseName(context, expr, true);\n\t\t// GENERATED\n\t\tif (/^GENERATED/i.test($expr)) {\n\t\t\tconst [ , alwaysOrByDefault, /*identity*/, expr ] = $expr.match(new RegExp(`^GENERATED\\\\s+` + `(ALWAYS|BY[ ]+DEFAULT)` + `\\\\s+AS` + `(?:\\\\s+(IDENTITY)?` + `|` + `(?:\\\\s+)?\\\\(` + `([\\\\s\\\\S]+)` + `` + `\\\\)(?:\\\\s+)?STORED$` + `)`, 'i'));\n\t\t\tif (expr) return new this(context, constraintName, 'EXPRESSION', { always: true, expr });\n\t\t\t// AS IDENTITY may not be explicitly mentioned in the case of an alter statement like: SET GENERATED { ALWAYS | BY DEFAULT }\n\t\t\treturn new this(context, constraintName, 'IDENTITY', { always: /^ALWAYS$/i.test(alwaysOrByDefault) });\n\t\t}\n\t\t// DEFAULT\n\t\tif (/^DEFAULT/i.test($expr)) {\n\t\t\tconst [ , value, $$expr, $$$expr ] = $expr.trim().match(/^DEFAULT\\s+(?:([\\w]+)|(\\w[\\s\\S]+\\))|\\(([\\s\\S]+)\\))$/i);\n\t\t\treturn new this(context, constraintName, 'DEFAULT', value ? { value: /^[\\d.]+$/.test(value) ? parseFloat(value) : value } : { expr: $$expr || _unwrap($$$expr, '(', ')') });\n\t\t}\n\t\t// PRIMARY_KEY|UNIQUE|AUTO_INCREMENT|NOT_NULL\n\t\tif (/^(PRIMARY[ ]+KEY|UNIQUE|AUTO_INCREMENT|NOT[ ]+NULL)/i.test($expr)) {\n\t\t\treturn new this(context, constraintName, $expr.replace(/\\s+/, '_').toUpperCase());\n\t\t}\n\t\t// FOREIGN_KEY\n\t\tif (/^REFERENCES/i.test($expr)) {\n\t\t\treturn new this(context, constraintName, 'FOREIGN_KEY', this.parseReference(context, $expr.replace(/^REFERENCES\\s+/i, '')));\n\t\t}\n\t\t// CHECK\n\t\tif (/^CHECK/i.test($expr)) {\n\t\t\treturn new this(context, constraintName, 'CHECK', this.parseCheck($expr.replace(/^CHECK\\s+/i, '')) );\n\t\t}\n\t}\n\n    /**\n     * @property Object\n\t * \n\t * this order makes serialized output make more sense given we're looping over these somewhere in code\n     */\n    static attrEquivalents = {\n        notNull: 'NOT_NULL',\n        primaryKey: 'PRIMARY_KEY',\n        uniqueKey: 'UNIQUE',\n        check: 'CHECK',\n        references: 'FOREIGN_KEY',\n        identity: 'IDENTITY',\n        expression: 'EXPRESSION',\n        autoIncrement: 'AUTO_INCREMENT',\n        default: 'DEFAULT', // Must appear after \"identity\" and \"expression\" for correct parsing of the keyword \"DEFAULT\"\n    };\n}", "\nimport { _after, _before } from '@webqit/util/str/index.js';\nimport Node from '../abstracts/Node.js';\t\t\n\nexport default class DataType extends Node {\n\n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tPRECISION = 0;\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, name, precision) {\n        super(context);\n        this.NAME = name;\n        this.PRECISION = precision;\n    }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\tif (!this.PRECISION) return this.NAME;\n\t\treturn { name: this.NAME, precision: this.PRECISION };\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `${ this.NAME }${ this.PRECISION ? `(${ this.PRECISION })` : `` }`; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json === 'string') { json = { name: json }; }\n\t\tif (!(typeof json === 'object' && json) || typeof json.name !== 'string') return;\n\t\tconst expr = json.name + (json.precision ? `(${ json.precision })` : '');\n\t\tconst [name, precision] = parse(expr);\n\t\tif (!name) return;\n\t\treturn new this(context, name, precision);\n\t}\n    \n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [name, precision] = parse(expr);\n\t\tif (!name) return;\n        return new this(context, name.toUpperCase(), precision);\n    }\n\n\tstatic pgFixedTypesRe = /(bigint|int8|bigserial|serial8|boolean|bool|box|bytea|cidr|circle|date|double\\s+precision|float8|inet|integer|int|int4|json|jsonb|line|lseg|macaddr|macaddr8|money|path|pg_lsn|pg_snapshot|point|polygon|real|float4|smallint|int2|smallserial|serial2|serial|serial4|text|timetz|timestamptz|tsquery|tsvector|txid_snapshot|uuid|xml)/;\n\tstatic pgVariableTypesRe = /(bit|bit\\s+varying|varbit|character|char|character\\s+varying|varchar|interval|numeric|time|timestamp)(?:\\s+)?(?:\\(([\\d, ]+)\\))?/;\n\tstatic myFixedTypesRe = /(tinyint|smallint|mediumint|enum|set|tinyblob|mediumblob|longblob|geometry|longstring|geometrycollection|multilinestring|multipoint|multipolygon)/;\n\tstatic myVariableTypesRe = /(float|decimal|double|tinytext|mediumtext|longtext|binary|varbinary|blob)(?:\\s+)?(?:\\(([\\d, ]+)\\))?/;\n}\n\nconst parse = expr => {\n\tlet name, precision;\n\tfor (const key of ['pgFixedTypesRe', 'pgVariableTypesRe', 'myFixedTypesRe', 'myVariableTypesRe']) {\n\t\t[ , name, precision ] = expr.match(new RegExp(DataType[key].source, 'i')) || [];\n\t\tif (name) break;\n\t}\n\treturn [name, precision];\n};", "\nimport Lexer from '../Lexer.js';\nimport { _after, _before, _unwrap, _toCamel } from '@webqit/util/str/index.js';\nimport ColumnLevelConstraint from './ColumnLevelConstraint.js';\nimport DataType from './DataType.js';\t\t\nimport Node from '../abstracts/Node.js';\n\nexport default class Column extends Node {\n\n    /**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tTYPE = null;\n\tCONSTRAINTS = [];\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, name) {\n        super(context);\n        this.NAME = name;\n    }\n\n\t/**\n\t * Sets the column type,\n\t * \n\t * @param DataType|Object value\n\t * \n\t * @returns this\n\t */\n\ttype(value) { return this.build('TYPE', [value], DataType); }\n\n\t/**\n\t * Adds a column-level constraint to the column,\n\t * \n\t * @param ColumnLevelConstraint constraint\n\t * \n\t * @returns this\n\t */\n\tconstraint(...constraints) { return this.build('CONSTRAINTS', constraints, ColumnLevelConstraint); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        let json = {\n            name: this.NAME,\n            type: this.TYPE?.toJson(),\n        };\n        for (const constraint of this.CONSTRAINTS) {\n            const { constraintName, type, detail } = constraint.toJson();\n            const equivProperty = Object.keys(ColumnLevelConstraint.attrEquivalents).find(prop => ColumnLevelConstraint.attrEquivalents[prop] === type);\n            json = { ...json, [ equivProperty ]: { constraintName, ...detail } };\n        }\n        return json;\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n        const instance = new this(context, json.name);\n        // Constraints\n        for (const property in ColumnLevelConstraint.attrEquivalents) {\n            if (!json[property]) continue;\n            const { constraintName, ...detail } = json[property];\n            const type = ColumnLevelConstraint.attrEquivalents[property];\n            instance.constraint(ColumnLevelConstraint.fromJson(instance, { constraintName, type, detail }));\n        }\n        // An instance with just the name is used in AlterTable.fromJson() for DROP col_name\n        if (json.type) instance.type(DataType.fromJson(instance, json.type));\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n        // Render constraints in the order of ColumnLevelConstraint.attrEquivalents;\n        let constraints = Object.values(ColumnLevelConstraint.attrEquivalents).map(type => this.CONSTRAINTS.find(cnst => cnst.TYPE === type)).filter(c => c);\n        if (this.params.dialect === 'mysql') { constraints = constraints.filter(c => c.TYPE !== 'FOREIGN_KEY'); }\n        return `${ this.autoEsc(this.NAME) } ${ this.TYPE }${ constraints.length ? ` ${ constraints.join(' ') }` : '' }`;\n    }\n    \n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ namePart, bodyPart ] = Lexer.split(expr, ['\\\\s+'], { useRegex: true, limit: 1 });\n        const [name] = this.parseIdent(context, namePart.trim(), true) || [];\n        if (!name) return;\n        const instance = new this(context, name);\n        // Parse into \"type\" and constraints\n        const qualifier = '(CONSTRAINT\\\\s+.+?\\\\s+)?';\n        const regexes = [\n            { test: `${ qualifier }(PRIMARY[ ]+KEY|NOT[ ]+NULL|GENERATED|REFERENCES|UNIQUE(?:[ ]+KEY)?|CHECK|AUTO_INCREMENT)` },\n            { backtest: '^(?!.*\\\\s+(NOT|SET)\\\\s+$)', test: `${ qualifier }NULL` },\n            { backtest: '^(?!.*\\\\s+BY\\\\s+$)', test: `${ qualifier }DEFAULT` },\n        ];\n        const [ columnType, ...tokens ] = Lexer.split(bodyPart, regexes, { useRegex:'i', preserveDelims: true });\n        // Type\n        instance.type(parseCallback(instance, columnType.trim(), [DataType]));\n        // Constraints\n        for (const constraint of tokens) {\n            instance.constraint(parseCallback(instance, constraint, [ColumnLevelConstraint]));\n        }\n        return instance;\n    }\n}", "import Lexer from '../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Node from '../abstracts/Node.js';\n\nexport default class Index extends Node {\n\n\t/**\n\t * Instance properties\n\t */\n\tINDEX_NAME = '';\n\tTYPE = '';\n\tCOLUMNS = [];\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, indexName, type, columns) {\n        super(context);\n        this.INDEX_NAME = indexName;\n        this.TYPE = type;\n        this.COLUMNS = columns;\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttype: this.TYPE,\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.INDEX_NAME ? { indexName: this.INDEX_NAME } : {})\n\t\t};\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `${ this.TYPE }${ this.INDEX_NAME ? ` ${ this.INDEX_NAME }` : '' } (${ this.COLUMNS.join(', ') })`; }\n\n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, type, rest ] = /^((?:(?:FULLTEXT|SPATIAL)(?:\\s+INDEX|\\s+KEY)?)|(?:INDEX|KEY))([\\s\\S]+)$/i.exec(expr) || [];\n        if (!match) return;\n\t\tconst [ namePart, columnsPart ] = Lexer.split(rest, []);\n\t\tconst [name] = this.parseIdent(context, namePart.trim(), true);\n\t\tconst columns = Lexer.split(_unwrap(columnsPart, '(', ')'), [',']).map(columnExpr => {\n\t\t\treturn this.parseIdent(context, columnExpr.trim(), true)[0];\n\t\t});\n        return new this(context, name, type.toUpperCase(), columns);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json.indexName !== 'string' && (typeof json?.type !== 'string' || !json.type.match(/INDEX|KEY|FULLTEXT/i))) return;\n\t\treturn new this(context, json.indexName, json.type, json.columns);\n\t}\n\n    /**\n     * @property Object\n     */\n    static attrEquivalents = {\n        fulltext: 'FULLTEXT',\n        index: 'INDEX',\n    };\n}", "\nimport Node from '../abstracts/Node.js';\nimport TableLevelConstraint from '../create/TableLevelConstraint.js';\nimport ColumnLevelConstraint from '../create/ColumnLevelConstraint.js';\nimport DataType from '../create/DataType.js';\nimport Column from '../create/Column.js';\nimport Index from '../create/Index.js';\n\nexport default class Action extends Node {\n\n    /**\n     * Instance properties\n     */\n    TYPE = '';\n    REFERENCE = null;\n    ARGUMENT = null;\n\n\t/**\n\t * Adds a \"RENAME\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns this\n\t */\n\trenameTo(newName) {\n        this.TYPE = 'RENAME';\n        this.ARGUMENT = newName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"RELOCATE\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns this\n\t */\n\trelocateTo(newDb) {\n        this.TYPE = 'RELOCATE';\n        this.ARGUMENT = newDb;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"DROP\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\tdrop(argument) {\n        this.TYPE = 'DROP';\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"ADD\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\tadd(argument) {\n        this.TYPE = 'ADD';\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"SET\" action to the instance,\n\t * \n\t * @param Object reference\n\t * \n\t * @returns this\n\t */\n\tset(argumentNew) {\n        this.TYPE = 'SET';\n        this.ARGUMENT = argumentNew;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"ALTER\" action to the instance,\n\t * \n\t * @param Object reference\n\t * \n\t * @returns this\n\t */\n\talter(reference, argument) {\n        this.TYPE = 'ALTER';\n        this.REFERENCE = reference;\n        this.build('ARGUMENT', [argument], Action);\n\t\treturn this;\n\t}\n\n    /**\n     * @inheritdoc\n     */\n    toJson() {\n        return {\n            type: this.TYPE,\n            ...(this.REFERENCE ? { reference: this.REFERENCE } : {}),\n            argument: typeof this.ARGUMENT?.toJson === 'function' ? this.ARGUMENT.toJson() : this.ARGUMENT,\n            flags: this.FLAGS,\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    static fromJson(context, json) {\n        if (typeof json?.type !== 'string' || !json.argument) return;\n        const instance = (new this(context)).withFlag(...(json.flags || []));\n        // RENAME/RELOCATE\n        if (['RENAME','RELOCATE'].includes(json.type)) {\n            instance[json.type === 'RENAME' ? 'renameTo' : 'relocateTo'](json.argument);\n            return instance;\n        }\n        // DROP/ADD\n        if (['DROP','ADD','SET'].includes(json.type)) {\n            const argument = [TableLevelConstraint,Index,Column].reduce((prev, Class) => prev || Class.fromJson(context, json.argument), null);\n            instance[json.type === 'DROP' ? 'drop' : (json.type === 'SET' ? 'set' : 'add')](argument);\n            return instance;\n        }\n        // ALTER\n        if (json.type === 'ALTER') {\n            // Handle columns specially\n            const { reference, argument: subAction } = json;\n            let arg = subAction.argument;\n            if (reference.kind === 'COLUMN') {\n                arg = [ColumnLevelConstraint,DataType].reduce((prev, Class) => prev || Class.fromJson(context, arg), null) || arg;\n            } else {\n                const Class = reference.kind === 'CONSTRAINT' ? TableLevelConstraint : Index;\n                arg = Class.fromJson(context, arg) || arg;\n            }\n            const methodName = subAction.type.toLowerCase() + (['RENAME', 'RELOCATE'].includes(subAction.type) ? 'To' : '');\n            instance.alter(reference, a => a[methodName](arg));\n            return instance;;\n        }\n    }\n}", "\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport Action from './Action.js';\n\nexport default class AlterDatabase extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tACTIONS = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) { this.NAME = name; }\n\n\t/**\n\t * Adds a \"RENAME\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns Action\n\t */\n\trenameTo(newName) { return this.build('ACTIONS', [newName], Action, 'renameTo'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tname: this.NAME,\n\t\t\tactions: this.ACTIONS.map(action => action.toJson()),\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\tconst instance = (new this(context, json.name)).withFlag(...(json.flags || []));\n\t\tfor (const action of json.actions) {\n\t\t\tinstance.ACTIONS.push(Action.fromJson(context, action));\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst newDbName = this.ACTIONS.find(action => action.TYPE === 'RENAME' && !action.REFERENCE)?.ARGUMENT;\n\t\tif (!newDbName) return '';\n\t\treturn `ALTER SCHEMA${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc(this.NAME) } RENAME TO ${ this.autoEsc(newDbName) }`;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifExists, rest ] = /^ALTER\\s+DATABASE\\s+(IF\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst [ name1Part, name2Part ] = Lexer.split(rest, ['RENAME\\\\s+TO'], { useRegex: 'i' });\n\t\tconst [name1] = this.parseIdent(context, name1Part.trim(), true) || [];\n\t\tconst [name2] = this.parseIdent(context, name2Part.trim(), true) || [];\n\t\tif (!name1 || !name2) return;\n\t\tconst instance = new this(context, name1);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tinstance.renameTo(name2);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromDiffing(context, jsonA, jsonB, flags = []) {\n\t\tif (!jsonA.name) throw new Error(`Could not assertain database1 name or database1 name invalid.`);\n\t\tif (!jsonB.name) throw new Error(`Could not assertain database2 name or database2 name invalid.`);\n\t\tconst instance = (new this(context, jsonA.name)).withFlag(...flags);\n\t\t// RENAME TO...\n\t\tif (jsonB.name !== jsonA.name) {\n\t\t\tinstance.renameTo(jsonB.name);\n\t\t}\n\t\treturn instance;\n\t}\n\n}", "\nimport StatementNode from '../abstracts/StatementNode.js';\n\nexport default class DropDatabase extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) { this.NAME = name; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.NAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\treturn (new this(context, json.name)).withFlag(...(json.flags || []));;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `DROP SCHEMA${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc(this.NAME) }${ this.hasFlag('CASCADE') ? ' CASCADE' : '' }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifExists, namePart ] = /^DROP\\s+DATABASE\\s+(IF\\s+EXISTS\\s+)?(.+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst [dbName] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!dbName) return;\n\t\tconst instance = new this(context, dbName);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\treturn instance;\n\t}\n\n}", "\nimport Lexer from '../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport TableLevelConstraint from './TableLevelConstraint.js';\nimport Column from './Column.js';\nimport Index from './Index.js';\t\t\n\nexport default class CreateTable extends StatementNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tBASENAME = '';\n\tCOLUMNS = [];\n\tCONSTRAINTS = [];\n\tINDEXES = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name, basename) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t\tthis.BASENAME = basename;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) {\n\t\tconst nameParts = Array.isArray(name) ? [...name] : [name];\n\t\tthis.NAME = nameParts.pop();\n\t\tthis.BASENAME = nameParts.pop();\n\t\tif (nameParts.length) throw new Error(`Idents can be maximum of two parts. Recieved: ${ nameParts.reverse().join('.') }.${ this.BASENAME }.${ this.NAME }`);\n\t}\n\n\t/**\n\t * Adds a column to the schema,\n\t * \n\t * @param Column column\n\t * \n\t * @returns this\n\t */\n\tcolumn(...columns) { return this.build('COLUMNS', columns, Column); }\n\n\t/**\n\t * Adds a table-level constraint to the schema,\n\t * \n\t * @param TableLevelConstraint constraint\n\t * \n\t * @returns this\n\t */\n\tconstraint(...constraints) { return this.build('CONSTRAINTS', constraints, TableLevelConstraint); }\n\n\t/**\n\t * Adds an index index to the schema,\n\t * \n\t * @param Index constraint\n\t * \n\t * @returns this\n\t */\n\tindex(...indexes) { return this.build('INDEXES', indexes, Index); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        const json = {\n            name: this.NAME,\n\t\t\tbasename: this.BASENAME,\n            columns: this.COLUMNS.map(column => column.toJson()),\n            constraints: this.CONSTRAINTS.map(constraint => constraint.toJson()),\n            indexes: this.INDEXES.map(index => index.toJson()),\n\t\t\tflags: this.FLAGS,\n        }\n        return json;\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.columns)) return;\n\t\tconst instance = (new this(context, json.name, json.basename)).withFlag(...(json.flags || []));\n\t\t// Lists\n\t\tinstance.column(...json.columns);\n\t\tif (json.constraints?.length) instance.constraint(...json.constraints);\n\t\tif (json.indexes?.length) instance.index(...json.indexes);\n\t\t// Instance\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst defs = [ this.COLUMNS.map(col => col.stringify()).join(',\\n\\t') ];\n\t\tconst constraints = this.CONSTRAINTS.slice(0);\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tconstraints.push(...this.COLUMNS.reduce((constraints, col) => {\n\t\t\t\tconst constraint = col.CONSTRAINTS.find(c => c.TYPE === 'FOREIGN_KEY');\n\t\t\t\tif (constraint) return constraints.concat(TableLevelConstraint.fromColumnLevelConstraint(constraint, col.NAME));\n\t\t\t\treturn constraints;\n\t\t\t}, []));\n\t\t}\n\t\tif (constraints.length) { defs.push(constraints.map(cnst => cnst.stringify()).join(',\\n\\t')); }\n\t\tif (this.INDEXES.length) { defs.push(this.INDEXES.map(ndx => ndx.stringify()).join(',\\n\\t')); }\n\t\treturn `CREATE TABLE${ this.hasFlag('IF_NOT_EXISTS') ? ' IF NOT EXISTS' : '' } ${ this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') } (\\n\\t${ defs.join(',\\n\\t') }\\n)`;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, ifNotExists, rest ] = /^CREATE\\s+TABLE\\s+(IF\\s+NOT\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [ namePart, bodyPart ] = Lexer.split(rest, [], { limit: 2 });\n\t\tconst [tblName, dbName] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = new this(context, tblName, dbName || context/*Database*/?.name);\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\tconst defs = Lexer.split(_unwrap(bodyPart, '(', ')'), [',']).map(def => {\n\t\t\treturn parseCallback(instance, def.trim(), [TableLevelConstraint,Index,Column]); // Note that Column must come last\n\t\t});\n\t\tfor (const def of defs) {\n\t\t\tif (def instanceof TableLevelConstraint) instance.constraint(def);\n\t\t\telse if (def instanceof Index) instance.index(def);\n\t\t\telse instance.column(def);\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic cloneJson(json) {\n\t\tconst jsonClone = structuredClone(json);\n\t\t// ----------------\n\t\tconst rebase = (obj, key) => {\n\t\t\tconst value = obj[key];\n\t\t\tObject.defineProperty(obj, `$${ key }`, { get: () => value, configurable: true });\n\t\t};\n\t\trebase(jsonClone, 'name');\n\t\tfor (const column of jsonClone.columns || []) {\n\t\t\tfor (const type of ['primaryKey', 'references', 'uniqueKey', 'check']) { column[type] && rebase(column[type], 'constraintName'); }\n\t\t\trebase(column, 'name');\n\t\t}\n\t\tfor (const constraint of jsonClone.constraints || []) { rebase(constraint, 'constraintName'); }\n\t\tfor (const index of jsonClone.indexes || []) { rebase(index, 'indexName'); }\n\t\t// ----------------\n\t\tconst redefine = (obj, key, nameKey) => {\n\t\t\tconst arr = obj[key];\n\t\t\tObject.defineProperty(obj, key, { get() { return arr; } });\n\t\t\tObject.defineProperties(arr, {\n\t\t\t\tget: { value: name => arr.find(x => x[nameKey] === name), configurable: true },\n\t\t\t\thas: { value: name => arr.get(name) ? true : false, configurable: true },\n\t\t\t\tdelete: { value: name => arr.splice(arr.findIndex(x => x[nameKey] === name), 1), configurable: true },\n\t\t\t});\n\t\t};\n\t\tredefine(jsonClone, 'columns', 'name');\n\t\tredefine(jsonClone, 'constraints', 'constraintName');\n\t\tredefine(jsonClone, 'indexes', 'indexName');\n\t\t// ----------------\n\t\treturn jsonClone;\n\t}\n\n}", "\nimport Lexer from '../Lexer.js';\nimport { _isObject, _isFunction } from '@webqit/util/js/index.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport CreateTable from '../create/CreateTable.js';\nimport TableLevelConstraint from '../create/TableLevelConstraint.js';\nimport ColumnLevelConstraint from '../create/ColumnLevelConstraint.js';\nimport DataType from '../create/DataType.js';\nimport Column from '../create/Column.js';\nimport Index from '../create/Index.js';\nimport Action from './Action.js';\n\nexport default class AlterTable extends StatementNode {\n\n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tBASENAME = '';\n\tJSON_BEFORE = {};\n\tACTIONS = [];\n\t\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name, basename = null, jsonBefore = {}) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t\tthis.BASENAME = basename;\n\t\tthis.JSON_BEFORE = jsonBefore;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) {\n\t\tconst nameParts = Array.isArray(name) ? [...name] : [name];\n\t\tthis.NAME = nameParts.pop();\n\t\tthis.BASENAME = nameParts.pop();\n\t\tif (nameParts.length) throw new Error(`Idents can be maximum of two parts. Recieved: ${ nameParts.reverse().join('.') }.${ this.BASENAME }.${ this.NAME }`);\n\t}\n\n\t/**\n\t * Adds a \"RENAME\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns Action\n\t */\n\trenameTo(newName) { return this.build('ACTIONS', [newName], Action, 'renameTo'); }\n\n\t/**\n\t * Adds a \"RELOCATE\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns Action\n\t */\n\trelocateTo(newDb) { return this.build('ACTIONS', [newDb], Action, 'relocateTo'); }\n\n\t/**\n\t * Adds a \"DROP\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns Action\n\t */\n\tdrop(argument) { return this.build('ACTIONS', [argument], Action, 'drop'); }\n\n\t/**\n\t * Adds a \"ADD\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\tadd(argument) { return this.build('ACTIONS', [argument], Action, 'add'); }\n\n\t/**\n\t * Adds a \"ALTER\" action to the instance,\n\t * \n\t * @param Object reference\n\t * \n\t * @returns Action\n\t */\n\talter(reference, argument) { return this.build('ACTIONS', [reference, argument], Action, 'alter'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tname: this.NAME,\n\t\t\tbasename: this.BASENAME,\n\t\t\tjsonBefore: this.JSON_BEFORE,\n\t\t\tactions: this.ACTIONS.map(action => action.toJson()),\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.actions)) return;\n\t\tconst instance = (new this(context, json.name, json.basename, json.jsonBefore)).withFlag(...(json.flags || []));\n\t\tfor (const action of json.actions) {\n\t\t\tinstance.ACTIONS.push(Action.fromJson(instance, action));\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tif (!this.ACTIONS.length) return '';\n\t\tconst stmts0 = [], stmts1 = [];\n\t\tfor (const action of this.ACTIONS) {\n\t\t\t// RENAME TO...\n\t\t\tif (action.TYPE === 'RENAME') {\n\t\t\t\tstmts0.push(`RENAME TO ${ this.autoEsc(action.ARGUMENT) }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// RELOCATE TO...\n\t\t\tif (action.TYPE === 'RELOCATE') {\n\t\t\t\tstmts0.push(`SET SCHEMA ${ this.autoEsc(action.ARGUMENT) }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP\n\t\t\tif (action.TYPE === 'DROP') {\n\t\t\t\tconst ifExists = action.hasFlag('IF_EXISTS');\n\t\t\t\tconst $flags = (action.FLAGS?.join(' ') || '').match(/RESTRICT|CASCADE/i) || [];\n\t\t\t\tconst nodeKind = action.ARGUMENT instanceof TableLevelConstraint ? 'CONSTRAINT' : (action.ARGUMENT instanceof Index ? 'INDEX' : 'COLUMN');\n\t\t\t\tif (this.params.dialect === 'mysql' && nodeKind === 'CONSTRAINT' && action.ARGUMENT.CONSTRAINT_NAME === 'PRIMARY') {\n\t\t\t\t\tstmts1.push(`DROP PRIMARY KEY`);\n\t\t\t\t} else {\n\t\t\t\t\tconst nameKey = nodeKind === 'CONSTRAINT' ? 'CONSTRAINT_NAME' : (nodeKind === 'INDEX' ? 'INDEX_NAME' : 'NAME');\n\t\t\t\t\tstmts1.push(`DROP ${ this.params.dialect === 'mysql' && nodeKind === 'CONSTRAINT' && action.ARGUMENT.TYPE/* being a table-level constraint */ === 'FOREIGN_KEY' ? 'FOREIGN KEY' : nodeKind }${ ifExists ? ' IF EXISTS' : '' } ${ this.autoEsc(action.ARGUMENT[nameKey]) }${ $flags.length ? ` ${ $flags[0] }` : '' }`);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD\n\t\t\tif (action.TYPE === 'ADD') {\n\t\t\t\tconst ifNotExists = action.hasFlag('IF_NOT_EXISTS');\n\t\t\t\tconst [ , first, afterCol ] = /(FIRST)|AFTER\\s+(\\w+)/i.exec(action.FLAGS?.join(' ') || '') || [];\n\t\t\t\tstmts1.push(`ADD ${ action.ARGUMENT instanceof Column ? `COLUMN ` : '' }${ ifNotExists ? 'IF NOT EXISTS ' : '' }${ action.ARGUMENT }${ first ? ' FIRST' : (afterCol ? ` AFTER ${ afterCol.toLowerCase() }` : '') }`);\n\t\t\t\tif (this.params.dialect === 'mysql' && action.ARGUMENT instanceof Column) {\n\t\t\t\t\tconst constraint = action.ARGUMENT.CONSTRAINTS.find(c => c.TYPE === 'FOREIGN_KEY');\n\t\t\t\t\tif (constraint) stmts1.push(`ADD ${ TableLevelConstraint.fromColumnLevelConstraint(constraint, action.ARGUMENT.NAME) }`);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER\n\t\t\tif (action.TYPE === 'ALTER') {\n\t\t\t\t// Handle columns specially\n\t\t\t\tconst { REFERENCE:reference, ARGUMENT:subAction } = action;\n\t\t\t\t// RENAME\n\t\t\t\tif (subAction.TYPE === 'RENAME') {\n\t\t\t\t\tstmts1.push(`RENAME ${ reference.kind } ${ this.autoEsc(reference.name) } TO ${ this.autoEsc(subAction.ARGUMENT) }`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (reference.kind === 'COLUMN') {\n\t\t\t\t\tconst asTableLevelConstraint = () => {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (subAction.TYPE === 'ADD') {\n\t\t\t\t\t\t\tstmts1.push(`ADD ${ TableLevelConstraint.fromColumnLevelConstraint(subAction.ARGUMENT, reference.name) }`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet dropStatement = dropTarget => `DROP CONSTRAINT ${ this.autoEsc(dropTarget.CONSTRAINT_NAME) }`;\n\t\t\t\t\t\t\tif (this.params.dialect === 'mysql' && ['PRIMARY_KEY', 'FOREIGN_KEY'].includes(dropTarget.TYPE)) {\n\t\t\t\t\t\t\t\tdropStatement = dropTarget => dropTarget.TYPE === 'PRIMARY_KEY' ? `DROP PRIMARY KEY` : `DROP FOREIGN KEY ${ this.autoEsc(dropTarget.CONSTRAINT_NAME) }`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (subAction.TYPE === 'DROP') {\n\t\t\t\t\t\t\t\tstmts1.push(dropStatement(subAction.ARGUMENT));\n\t\t\t\t\t\t\t} else if (subAction.TYPE === 'SET') {\n\t\t\t\t\t\t\t\tstmts1.push(dropStatement({ TYPE: subAction.ARGUMENT.TYPE, CONSTRAINT_NAME: reference.name })); // We process DROP first, then ADD\n\t\t\t\t\t\t\t\tstmts1.push(`ADD ${ TableLevelConstraint.fromColumnLevelConstraint(subAction.ARGUMENT, reference.name) }`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tconst asLiterals = () => {\n\t\t\t\t\t\tstmts1.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } ${ subAction.TYPE } ${ subAction.ARGUMENT }`);\n\t\t\t\t\t};\n\t\t\t\t\tif (this.params.dialect === 'mysql') {\n\t\t\t\t\t\tif (subAction.ARGUMENT instanceof ColumnLevelConstraint) {\n\t\t\t\t\t\t\tif (subAction.ARGUMENT.TYPE === 'DEFAULT') {\n\t\t\t\t\t\t\t\tstmts1.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } ${ subAction.TYPE === 'DROP' ? 'DROP' : 'SET' } ${ subAction.ARGUMENT }`);\n\t\t\t\t\t\t\t} else if (['PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE'].includes(subAction.ARGUMENT.TYPE)) {\n\t\t\t\t\t\t\t\tasTableLevelConstraint();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tasLiterals();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tasLiterals();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (subAction.ARGUMENT instanceof DataType) {\n\t\t\t\t\t\t\tstmts1.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } SET DATA TYPE ${ subAction.ARGUMENT }`);\n\t\t\t\t\t\t} else if (subAction.ARGUMENT instanceof ColumnLevelConstraint) {\n\t\t\t\t\t\t\tif (['IDENTITY', 'EXPRESSION', 'DEFAULT', 'NOT_NULL'].includes(subAction.ARGUMENT.TYPE)) {\n\t\t\t\t\t\t\t\tif (subAction.TYPE === 'DROP' || (subAction.ARGUMENT.TYPE === 'IDENTITY' && subAction.TYPE === 'SET')) {\n\t\t\t\t\t\t\t\t\tstmts1.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } DROP ${ subAction.ARGUMENT.TYPE.replace(/_/, ' ') }${ subAction.TYPE === 'DROP' && ['IDENTITY', 'EXPRESSION'].includes(subAction.ARGUMENT.TYPE) && action.FLAGS?.includes('IF_EXISTS') ? ` IF EXISTS` : '' }`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (['ADD', 'SET'].includes(subAction.TYPE) && subAction.ARGUMENT.TYPE !== 'EXPRESSION'/* Can't add a generated expression to a column after definition */) {\n\t\t\t\t\t\t\t\t\tstmts1.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } ${ subAction.ARGUMENT.TYPE === 'IDENTITY' ? 'ADD' : 'SET' } ${ subAction.ARGUMENT }`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (['PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE', 'CHECK'].includes(subAction.ARGUMENT.TYPE)) {\n\t\t\t\t\t\t\t\tasTableLevelConstraint();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tasLiterals();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tasLiterals();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof subAction.ARGUMENT === 'string') {\n\t\t\t\t\tstmts1.push(`ALTER ${ reference.kind } ${ this.autoEsc(reference.name) } ${ subAction.ARGUMENT }`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// From constraints diffing\n\t\t\t\tlet dropStatement = `DROP ${ reference.kind } ${ this.autoEsc(reference.name) }`;\n\t\t\t\tif (this.params.dialect === 'mysql' && ['PRIMARY_KEY', 'FOREIGN_KEY'].includes(subAction.ARGUMENT.TYPE/* being a table-level constraint */)) {\n\t\t\t\t\tdropStatement = subAction.ARGUMENT.TYPE === 'PRIMARY_KEY' ? `DROP PRIMARY KEY` : `DROP FOREIGN KEY ${ this.autoEsc(reference.name) }`;\n\t\t\t\t}\n\t\t\t\tstmts1.push(dropStatement, `ADD ${ subAction.ARGUMENT }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\treturn `ALTER TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') }\\n\\t${ [...stmts1, ...stmts0].join(',\\n\\t') }`;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, ifExists, rest ] = /^ALTER\\s+TABLE\\s+(IF\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [ namePart, bodyPart ] = Lexer.split(rest, ['\\\\s+'], { useRegex: true, limit: 1 });\n\t\tconst [tblName, dbName] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = new this(context, tblName, dbName || context/*Database*/?.name);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\t// ----------\n\t\tconst regex = name => new RegExp(`${ this[ name ].source }`, 'i');\n\t\tconst stmts = Lexer.split(bodyPart, [',']).map(s => s.trim());\n\t\tfor (const stmt of stmts) {\n\t\t\t// RENAME ... TO ...\n\t\t\tconst [ renameMatch, nodeKind_a, nodeNameUnescaped_a, /*esc*/, nodeNameEscaped_a, newNodeNameUnescaped_a, /*esc*/, newNodeNameEscaped_a ] = regex('renameRe').exec(stmt) || [];\n\t\t\tif (renameMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_a || this.autoUnesc(instance, nodeNameEscaped_a);\n\t\t\t\tconst newNodeName = newNodeNameUnescaped_a || this.autoUnesc(instance, newNodeNameEscaped_a);\n\t\t\t\tif (nodeName) {\n\t\t\t\t\tconst nodeKind = /KEY|INDEX/i.test(nodeKind_a) ? 'INDEX' : nodeKind_a.toUpperCase();\n\t\t\t\t\tconst reference = { kind: nodeKind, name: nodeName };\n\t\t\t\t\tinstance.alter(reference, a => a.renameTo(newNodeName));\n\t\t\t\t} else {\n\t\t\t\t\tinstance.renameTo(newNodeName);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// RELOCATE ... TO ...\n\t\t\tconst [ relocateMatch, newSchemaUnescaped, /*esc*/, newSchemaEscaped ] = regex('relocateRe').exec(stmt) || [];\n\t\t\tif (relocateMatch) {\n\t\t\t\tinstance.relocateTo(newSchemaUnescaped || this.autoUnesc(instance, newSchemaEscaped));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP\n\t\t\tconst [ dropMatch, nodeKind_b = 'COLUMN', ifExists_b/* postgresql-specific */, nodeNameUnescaped_b, /*esc*/, nodeNameEscaped_b, flags_b/* postgresql-specific */ ] = regex('dropRe').exec(stmt) || [];\n\t\t\tif (dropMatch) {\n\t\t\t\tconst nodeKind = /CONSTRAINT|PRIMARY\\s+KEY|FOREIGN\\s+KEY|CHECK/i.test(nodeKind_b) ? 'CONSTRAINT' : (/INDEX|KEY/i.test(nodeKind_b) ? 'INDEX' : 'COLUMN');\n\t\t\t\tconst nodeName = nodeNameUnescaped_b || this.autoUnesc(instance, nodeNameEscaped_b) || nodeKind_b.trim().replace(/\\s+KEY/i, '').toUpperCase()/* when, in mysql, it's just: drop PRIMARY KEY */;\n\t\t\t\tconst argument = nodeKind === 'CONSTRAINT' ? new TableLevelConstraint(instance, nodeName, nodeKind_b.trim().toUpperCase(), []/*columns*/, null) : (\n\t\t\t\t\tnodeKind === 'INDEX' ? new Index(instance, nodeName, nodeKind_b.trim().toUpperCase(), []/*columns*/) : new Column(instance, nodeName, null, [])\n\t\t\t\t);\n\t\t\t\tconst flags = [ifExists_b, flags_b].filter(s => s).map(s => s.trim().replace(/\\s+/g, '_').toUpperCase());\n\t\t\t\tinstance.drop(argument).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD\n\t\t\tconst [ addMatch, columnKeyword_c, ifColumnNotExists_c, spec_c ] = regex('addRe').exec(stmt) || [];\n\t\t\tif (addMatch) {\n\t\t\t\tconst [ , $spec, $flags ] = spec_c.match(/([\\s\\S]+)\\s+(FIRST|AFTER\\s+.+)$/i) || [ , spec_c ];\n\t\t\t\tconst argument = parseCallback(instance, $spec.trim(), columnKeyword_c ? [Column] : [TableLevelConstraint,Index,Column]); // Note that Column must come last\n\t\t\t\tconst flags = [ifColumnNotExists_c, $flags].filter(s => s).map(s => s.trim().replace(/\\s+/g, '_').toUpperCase());\n\t\t\t\tinstance.add(argument).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER\n\t\t\tconst [ alterMatch, nodeKind_d, nodeNameUnescaped_d, /*esc*/, nodeNameEscaped_d, subAction_d = '', argument_d = '', ifNodeExits_d, constraintOrIndexAttr_d ] = regex('alterRe').exec(stmt) || [];\n\t\t\tif (alterMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_d || this.autoUnesc(instance, nodeNameEscaped_d);\n\t\t\t\tconst nodeKind = /CONSTRAINT|CHECK/i.test(nodeKind_d) ? 'CONSTRAINT' : (/INDEX|KEY/i.test(nodeKind_d) ? 'INDEX' : 'COLUMN');\n\t\t\t\tlet subAction = subAction_d.toUpperCase() || 'SET', flags = ifNodeExits_d ? ['IF_EXISTS'] : [], $ = {};\n\t\t\t\tlet argumentNew;\n\t\t\t\t// Is column data type?\n\t\t\t\tif (subAction.endsWith('TYPE')) {\n\t\t\t\t\targumentNew = parseCallback(instance, argument_d, [DataType]);\n\t\t\t\t\tsubAction = 'SET';\n\t\t\t\t}\n\t\t\t\t// Is column constraint?\n\t\t\t\telse if ($.argument = parseCallback(instance, argument_d, [ColumnLevelConstraint], { assert: false })) {\n\t\t\t\t\targumentNew = $.argument;\n\t\t\t\t}\n\t\t\t\t// Is SET|DROP|ADD flag?\n\t\t\t\telse if (subAction_d/*NOTE: original*/) {\n\t\t\t\t\targumentNew = argument_d;\n\t\t\t\t}\n\t\t\t\t// Is just flag?\n\t\t\t\telse {\n\t\t\t\t\targumentNew = constraintOrIndexAttr_d;\n\t\t\t\t}\n\t\t\t\t// Push\n\t\t\t\tconst reference = { kind: nodeKind, name: nodeName };\n\t\t\t\tinstance.alter(reference, a => a[subAction.toLowerCase()](argumentNew)).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new SyntaxError(stmt);\n\t\t}\n\t\treturn instance;\n\t}\n\n\tstatic fromDiffing(context, jsonA, jsonB, flags = []) {\n\t\tif (!jsonA?.name) throw new Error(`Could not assertain table1 name or table1 name invalid.`);\n\t\tif (!jsonB?.name) throw new Error(`Could not assertain table2 name or table2 name invalid.`);\n\t\tconst instance = (new this(context, jsonA.name, jsonA.basename, jsonA)).withFlag(...flags);\n\t\t// RENAME TO...\n\t\tif (jsonB.name !== jsonA.name) {\n\t\t\tinstance.renameTo(jsonB.name);\n\t\t}\n\t\t// RELOCATE ... TO ...\n\t\tif (jsonB.basename !== jsonA.basename) {\n\t\t\tinstance.relocateTo(jsonB.basename);\n\t\t}\n\t\t// DIFF STRUCTURE\n\t\tfor (const listName of ['columns', 'constraints', 'indexes']) {\n\t\t\tconst nameKey = listName === 'constraints' ? 'constraintName' : (listName === 'indexes' ? 'indexName' : 'name');\n\t\t\tconst nodeKind = listName === 'constraints' ? 'CONSTRAINT' : (listName === 'indexes' ? 'INDEX' : 'COLUMN');\n\t\t\tconst NodeClass = nodeKind === 'CONSTRAINT' ? TableLevelConstraint : (nodeKind === 'INDEX' ? Index : Column);\n\t\t\tconst [ namesA, namesB, namesAll ] = makeSets(jsonA[listName], jsonB[listName], nameKey);\n\t\t\t// --------\n\t\t\tfor (const nodeName of namesAll) {\n\t\t\t\tconst nodeA = jsonA[listName].find(node => node[nameKey] === nodeName);\n\t\t\t\tconst nodeB = jsonB[listName].find(node => (`$${ nameKey }` in node ? node[`$${ nameKey }`] : node[nameKey]) === nodeName);\n\t\t\t\tconst reference = { kind: nodeKind, name: nodeName };\n\t\t\t\tif (namesA.has(nodeName) && !namesB.has(nodeName)) {\n\t\t\t\t\t// DROP\n\t\t\t\t\tinstance.drop(NodeClass.fromJson(instance, nodeA));\n\t\t\t\t} else if (!namesA.has(nodeName) && namesB.has(nodeName)) {\n\t\t\t\t\t// ADD\n\t\t\t\t\tinstance.add(NodeClass.fromJson(instance, nodeB));\n\t\t\t\t} else if (namesA.has(nodeName) && namesB.has(nodeName)) {\n\t\t\t\t\t// ALTER\n\t\t\t\t\tif (nodeKind === 'COLUMN') {\n\t\t\t\t\t\tconst [ propsA, propsB, propsAll ] = makeSets(nodeA, nodeB);\n\t\t\t\t\t\tfor (const property of propsAll) {\n\t\t\t\t\t\t\tconst createArg = node => {\n\t\t\t\t\t\t\t\tconst attrEquivalent = ColumnLevelConstraint.attrEquivalents[property];\n\t\t\t\t\t\t\t\tif (attrEquivalent) {\n\t\t\t\t\t\t\t\t\tconst { constraintName, ...detail } = node[property];\n\t\t\t\t\t\t\t\t\treturn ColumnLevelConstraint.fromJson(instance, { constraintName, type: attrEquivalent, detail });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthrow new Error(`Unkown attribute: ${ property }.`);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif ((propsA.has(property) && nodeA[property]) && (!propsB.has(property) || !nodeB[property])) {\n\t\t\t\t\t\t\t\t// Drop\n\t\t\t\t\t\t\t\tinstance.alter(reference, a => a.drop(createArg(nodeA)));\n\t\t\t\t\t\t\t} else if ((!propsA.has(property) || !nodeA[property]) && (propsB.has(property) && nodeB[property])) {\n\t\t\t\t\t\t\t\t// Add\n\t\t\t\t\t\t\t\tinstance.alter(reference, a => a.add(createArg(nodeB)));\n\t\t\t\t\t\t\t} else if (propsA.has(property) && propsB.has(property) && !isSame(nodeA[property], nodeB[property])) {\n\t\t\t\t\t\t\t\t// Rename/alter\n\t\t\t\t\t\t\t\tif (property === 'name') {\n\t\t\t\t\t\t\t\t\t// Column rename\n\t\t\t\t\t\t\t\t\tinstance.alter(reference, a => a.renameTo(nodeB[property]));\n\t\t\t\t\t\t\t\t} else if (property === 'type') {\n\t\t\t\t\t\t\t\t\t// Change data type\n\t\t\t\t\t\t\t\t\tinstance.alter(reference, a => a.set(DataType.fromJson(instance, nodeB[property])));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tinstance.alter(reference, a => a.set(createArg(nodeB)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!isSame(nodeA, nodeB)) {\n\t\t\t\t\t\t// Alter constraint/index\n\t\t\t\t\t\tinstance.alter(reference, a => a.set(NodeClass.fromJson(instance, nodeB)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromDiffing2d(context, jsonsA, jsonsB, flags = []) {\n\t\tconst nameKey = 'name';\n\t\tconst actions = [], [ namesA, namesB, namesAll ] = makeSets(jsonsA, jsonsB, nameKey);\n\t\tfor (const nodeName of namesAll) {\n\t\t\tif (namesA.has(nodeName) && !namesB.has(nodeName)) {\n\t\t\t\t// DROP\n\t\t\t\tactions.push({ type: 'DROP', argument: nodeName });\n\t\t\t} else if (!namesA.has(nodeName) && namesB.has(nodeName)) {\n\t\t\t\t// ADD\n\t\t\t\tconst nodeB = jsonsB.find(tblSchema => (`$${ nameKey }` in tblSchema ? tblSchema[`$${ nameKey }`] : tblSchema[nameKey]) === nodeName);\n\t\t\t\tactions.push({ type: 'ADD', argument: CreateTable.fromJson(context, nodeB, flags) });\n\t\t\t} else if (namesA.has(nodeName) && namesB.has(nodeName)) {\n\t\t\t\t// ALTER\n\t\t\t\tconst nodeA = jsonsA.find(tblSchema => tblSchema[nameKey] === nodeName);\n\t\t\t\tconst nodeB = jsonsB.find(tblSchema => ( tblSchema[`$${ nameKey }`] || tblSchema[nameKey]) === nodeName);\n\t\t\t\tconst tblAlterInstance = this.fromDiffing(context, nodeA, nodeB, flags);\n\t\t\t\tif (tblAlterInstance.ACTIONS.length) {\n\t\t\t\t\tactions.push({ type: 'ALTER', argument: tblAlterInstance });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn actions;\n\t}\n\n    /**\n\t * @property RegExp\n\t */\n\tstatic renameRe = /^RENAME\\s+(?:(?:(COLUMN|CONSTRAINT|INDEX|KEY)\\s+)?(?:(\\w+)|([`\"])((?:\\3\\3|[^\\3])+)\\3)\\s+)?(?:TO|AS)\\s+(?:(\\w+)|([`\"])([^\\6]+)\\6)$/;\n\tstatic relocateRe = /^SET\\s+SCHEMA\\s+(?:(\\w+)|([`\"])((?:\\2\\2|[^\\3])+)\\2)$/;\n\tstatic dropRe = /^DROP\\s+(COLUMN\\s+|CONSTRAINT\\s+|PRIMARY\\s+KEY|FOREIGN\\s+KEY\\s+|CHECK\\s+|INDEX\\s+|KEY\\s+)?(IF\\s+EXISTS\\s+)?(?:(\\w+)|([`\"])((?:\\4\\4|[^\\3])+)\\4)?(?:\\s+(RESTRICT|CASCADE))?$/;\n\tstatic addRe = /^ADD\\s+(COLUMN\\s+)?(IF\\s+NOT\\s+EXISTS\\s+)?([\\s\\S]+)$/;\n\tstatic alterRe = /^ALTER\\s+(?:(COLUMN|CONSTRAINT|CHECK|INDEX|KEY)\\s+)?(?:(\\w+)|([`\"])((?:\\3\\3|[^\\3])+?)\\3)\\s+(?:(ADD|DROP|(?:SET\\s+DATA\\s+)?TYPE|SET)\\s+(.+)(IF\\s+EXISTS)?$|(VISIBLE|(?:NOT\\s+)?INVISIBLE|NOT\\s+ENFORCED|ENFORCED|DEFERRABLE|NOT\\s+DEFERRABLE|INITIALLY\\s+DEFERRED|INITIALLY\\s+IMMEDIATE))/;\n}\n\nfunction makeSets(a, b, nameKey) {\n\tif (Array.isArray(a)) {\n\t\ta = a.map(x => x[nameKey]);\n\t\tb = b.map(x => `$${ nameKey }` in x ? x[`$${ nameKey }`] : x[nameKey]);\n\t} else {\n\t\ta = Object.keys(a);\n\t\tb = Object.keys(b).filter(s => !s.startsWith('$'));\n\t}\n\ta = new Set(a);\n\tb = new Set(b);\n\tconst ab = new Set([ ...a, ...b ]);\n\treturn [ a, b, ab ];\n}\n\nfunction isSame(a, b) {\n\tif (a === b) return true;\n\tif (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n\t\tconst $b = b.slice(0).sort();\n\t\treturn a.slice(0).sort().every((x, i) => isSame(x, $b[i]));\n\t}\n\tconst temp = {};\n\tif (typeof a === 'object' && a && typeof b === 'object' && b && (temp.keys_a = Object.keys(a)).length === (temp.keys_b = Object.keys(b)).length) {\n\t\treturn temp.keys_a.reduce((prev, k) => prev && isSame(a[k], b[k]), true);\n\t}\n\treturn false;\n}", "\nimport StatementNode from '../abstracts/StatementNode.js';\n\nexport default class DropTable extends StatementNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME = '';\n\tBASENAME = '';\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, name, basename) {\n\t\tsuper(context);\n\t\tthis.NAME = name;\n\t\tthis.BASENAME = basename;\n\t}\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns Void\n\t */\n\tname(name) {\n\t\tconst nameParts = Array.isArray(name) ? [...name] : [name];\n\t\tthis.NAME = nameParts.pop();\n\t\tthis.BASENAME = nameParts.pop();\n\t\tif (nameParts.length) throw new Error(`Idents can be maximum of two parts. Recieved: ${ nameParts.reverse().join('.') }.${ this.BASENAME }.${ this.NAME }`);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.NAME, basename: this.BASENAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\treturn (new this(context, json.name, json.basename)).withFlag(...(json.flags || []));\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `DROP TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') }${ this.hasFlag('CASCADE') ? ' CASCADE' : '' }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifExists, namePart ] = /^DROP\\s+TABLE\\s+(IF\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst [tblName, dbName] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = new this(context, tblName, dbName);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\treturn instance;\n\t}\n\n}", "\nimport { _isNumeric } from '@webqit/util/js/index.js';\nimport Node from '../abstracts/Node.js';\n\t\t\nexport default class Placeholder extends Node {\n\n\t/**\n\t * Instance properties\n\t */\n\tOFFSET;\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, offset) {\n\t\tsuper(context);\n\t\tthis.OFFSET = parseInt(offset);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { offset: this.OFFSET }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.offset !== 'number') return;\n\t\treturn new this(context, json.offset);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.params.dialect === 'mysql' ? '?' : '$' + this.OFFSET; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst notation = (context?.params?.inputDialect || context?.params?.dialect) === 'mysql' ? '?' : '$';\n\t\tconst [ match, offset ] = (new RegExp(`^\\\\${ notation }(\\\\d)$`)).exec(expr) || [];\n\t\tif (!match) return;\n\t\treturn new this(context, parseInt(offset));\n\t}\n}\n", "\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\n\r\nexport default class Str extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE = '';\r\n\tQUOTE = '';\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, expr, quote = \"'\") {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = expr;\r\n\t\tthis.QUOTE = quote;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value\r\n\t * \r\n\t * @param String expr \r\n\t */\r\n\tliteral(expr) { this.VALUE = expr; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst quote = this.QUOTE || this.quoteChars[0];\r\n\t\treturn `${ quote }${ this.VALUE.replace(new RegExp(quote, 'g'), quote.repeat(2)) }${ quote }`;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { value: this.VALUE }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.value !== 'string') return;\r\n\t\treturn new this(context, json.value, json.quote);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tconst [text, quote] = this.parseText(context, expr, true) || [];\r\n\t\tif (!quote) return;\r\n\t\treturn new this(\r\n\t\t\tcontext,\r\n\t\t\ttext,\r\n\t\t\tquote\r\n\t\t);\r\n\t}\r\n\r\n\tstatic parseText(context, expr, asInputDialect = false) {\r\n\t\tconst quoteChars = this.getQuoteChars(context, asInputDialect), $ = {};\r\n\t\tif (!($.quote = quoteChars.find(q => _wrapped(expr, q, q))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn [\r\n\t\t\t_unwrap(expr, $.quote, $.quote).replace(new RegExp($.quote + $.quote, 'g'), $.quote),\r\n\t\t\t$.quote\r\n\t\t];\r\n\t}\r\n}\r\n", "\r\n/**\r\n * @imports\r\n */\r\nimport { _wrapped } from '@webqit/util/str/index.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Str from '../str/Str.js';\r\n\r\nexport default class Json extends Str {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tTYPE = '';\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value, type, quote) {\r\n\t\tsuper(context, value, quote);\r\n\t\tthis.TYPE = type;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to an object\r\n\t * \r\n\t * @param Object value\r\n\t */\r\n\tobject(value) {\r\n\t\tthis.VALUE = typeof value === 'object' && value ? JSON.stringify(value) : value;\r\n\t\tthis.TYPE = 'OBJECT';\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to an array\r\n\t * \r\n\t * @param Object value\r\n\t */\r\n\tarray(value) {\r\n\t\tthis.VALUE = Array.isArray(value) ? JSON.stringify(value) : value;\r\n\t\tthis.TYPE = 'ARRAY';\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\ttype: this.TYPE,\r\n\t\t\t...super.toJson(),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.type !== 'string' || !/OBJECT|ARRAY/i.test(json.type) || !json.value) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance[json.type.toLowerCase()](json.value);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ super.stringify() }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tconst braces = [['{','}'], ['[',']']], $ = {};\r\n\t\tconst [text, quote] = this.parseText(context, expr) || [];\r\n\t\tif (!quote) return;\r\n\t\tif (!($.braces = braces.find(b => _wrapped(expr, b[0], b[1]))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn new this(context, text, $.braces[0] === '{' ? 'OBJECT' : 'ARRAY', quote);\r\n\t}\r\n}", "\r\nimport Node from \"../abstracts/Node.js\";\r\n\r\nexport default class Num extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE = 0;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value) {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { value: this.VALUE, flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json === 'number' || (typeof json === 'string' && /^[.\\d]+$/.test(json) && (json = parseFloat(json)))) {\r\n\t\t\tjson = { value: json };\r\n\t\t} else if (typeof json?.value !== 'number') return;\r\n\t\treturn (new this(context, json.value)).withFlag(...(json.flags || []));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.VALUE }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tif (/^\\d+$/.test(expr)) return new this(context, parseFloat(expr));\r\n\t}\r\n}", "\r\nimport Node from '../../abstracts/Node.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Identifier from '../Identifier.js';\r\nimport Json from './Json.js';\r\nimport Num from '../Num.js';\r\nimport Str from '../str/Str.js';\r\n\r\nexport default class JsonPath extends Node {\r\n\t\r\n\t/**\r\n\t * Static properties\r\n\t */\r\n\tstatic OPERATORS = [`->`, '->>', '#>', '#>>'];\r\n\r\n\t/**\r\n\t * Instance propeties\r\n\t */\r\n\tOPERATOR = '';\r\n\tLHS = null;\r\n\tRHS = null;\r\n\r\n\t/**\r\n\t * Builds the operands.\r\n\t * \r\n\t * @param Identifier lhs \r\n\t * @param String operator\r\n\t * @param Identifier,Path rhs \r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tpath(lhs, operator, rhs) {\r\n\t\tconst $static = this.constructor;\r\n\t\tif (!$static.OPERATORS.includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\r\n\t\tthis.build('LHS', [lhs], [Json,Identifier]);\r\n\t\tthis.build('RHS', [rhs], [Json,Num,Str]);\r\n\t\tthis.OPERATOR = operator;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tlhs: this.LHS?.toJson(),\r\n\t\t\trhs: this.RHS?.toJson(),\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!this.OPERATORS.includes(json?.operator)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`; }\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tlet { tokens, matches } = Lexer.lex(expr, this.OPERATORS, { limit: 1 });\r\n\t\tif (!matches.length) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst lhs = parseCallback(instance, tokens[0], [Json,Identifier]);\r\n\t\tconst rhs = parseCallback(instance, tokens[1].trim(), [Json,Num,Str]);\r\n\t\tinstance.path(lhs, matches[0], rhs);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => this.OPERATORS.includes(operator) && new this(context) };\r\n}\r\n", "\nimport Lexer from '../Lexer.js';\nimport Identifier from './Identifier.js';\nimport JsonPath from './json/JsonPath.js';\nimport Node from '../abstracts/Node.js';\n\nexport default class Path extends Node {\n\n\t/**\n\t * Static properties\n\t */\n\tstatic ARR_RIGHT = '~>';\n \tstatic ARR_LEFT = '<~';\n\n\t/**\n\t * Instance propeties\n\t */\n\tOPERATOR = '';\n\tLHS = null;\n\tRHS = null;\n\tUUID = null;\n\n\t/**\n\t * @property Bool\n\t */\n\tget isOutgoing() { return this.OPERATOR === this.constructor.ARR_RIGHT; }\n\n\t/**\n\t * @property Bool\n\t */\n\tget isIncoming() { return this.OPERATOR === this.constructor.ARR_LEFT; }\n\n\t/**\n\t * @property String\n\t */\n\tget uuid() {\n\t\tif (!this.UUID) { this.UUID = `$path:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`; }\n\t\treturn this.UUID;\n\t}\n\n\t/**\n\t * Builds the operands.\n\t * \n\t * @param Identifier lhs \n\t * @param String operator\n\t * @param Identifier,Path rhs \n\t * \n\t * @returns Void\n\t */\n\tpath(lhs, operator, rhs) {\n\t\tconst $static = this.constructor;\n\t\tif (![$static.ARR_LEFT, $static.ARR_RIGHT].includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\n\t\tthis.build('LHS', [lhs], Identifier);\n\t\tthis.build('RHS', [rhs], [$static,JsonPath,Identifier]);\n\t\tthis.OPERATOR = operator;\n\t}\n\n\t/**\n\t * Evaluates the relationship \n\t * and returns the parameters for plotting the join.\n\t * \n\t * @returns Object\n\t */\n\tasync eval() {\n\t\tconst getPrimaryKey = schema => schema.columns.find(col => col.primaryKey)?.name || schema.constraints.find(cons => cons.type === 'PRIMARY_KEY')?.columns[0];\n\t\tconst getKeyDef = (schema, foreignKey) => schema.columns.find(col => col.name === foreignKey.NAME)?.references || schema.constraints.find(cons => cons.type === 'FOREIGN_KEY' && cons.columns.includes(foreignKey.NAME))?.references;\n\t\tconst getSchema = async (tblName, dbName) => {\n\t\t\tconst clientApi = this.rootNode.CONTEXT;\n\t\t\tconst basename = dbName || await clientApi.getBasename(tblName);\n\t\t\tconst dbApi = clientApi.database(basename);\n\t\t\tif (!(await dbApi.tables({ name: tblName })).length) return;\n\t\t\treturn await dbApi.describeTable(tblName, { force: true });\n\t\t};\n\t\tif (!this.rootNode.CONTEXT) throw new Error(`No client API in context.`);\n\t\tif (this.isIncoming) {\n\t\t\tif (!(this.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS }`);\n\t\t\t// --------------------------\n\t\t\t// === {foreignKey}LHS<-RHS{table...}\n\t\t\tlet foreignKey_rhs, table_rhs, schema_rhs, path;\n\t\t\tif (this.RHS.isIncoming) {\n\t\t\t\tif (!(this.RHS.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS.RHS }`);\n\t\t\t\t// === {foreignKey}LHS<-RHS{foreignKey_rhs<-table->?...}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: path } = this);\n\t\t\t\tschema_rhs = (await path.eval()).lhs.schema;\n\t\t\t\ttable_rhs = Identifier.fromJson(this, schema_rhs);\n\t\t\t} else {\n\t\t\t\t// === {foreignKey}LHS<-RHS{table->path}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: { LHS: table_rhs/*Identifier*/, RHS: path/*Identifier|Path*/ } } = this);\n\t\t\t\tschema_rhs = await getSchema(table_rhs.NAME, table_rhs.BASENAME);\n\t\t\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t\t}\n\t\t\tconst keyDef_rhs = getKeyDef(schema_rhs, foreignKey_rhs);\n\t\t\t// Validate that schema_rhs has the implied foreign key (actingKey)\n\t\t\tif (!keyDef_rhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define the implied foreign key: ${ foreignKey_rhs }.`);\n\t\t\t// -------------\n\t\t\t// Get schema_lhs from keyDef\n\t\t\tconst table_lhs = Identifier.fromJson(this, keyDef_rhs.basename ? [keyDef_rhs.basename,keyDef_rhs.table] : keyDef_rhs.table);\n\t\t\tconst schema_lhs = await getSchema(table_lhs.NAME, table_lhs.BASENAME);\n\t\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\t\tconst primaryKey_lhs = getPrimaryKey(schema_lhs);\n\t\t\tif (!primaryKey_lhs) throw new Error(`[${ this }]: Table ${ schema_lhs.name } does not define a primary key.`);\n\t\t\t// -------------\n\t\t\t// Put together\n\t\t\treturn {\n\t\t\t\tlhs: { schema: schema_lhs, primaryKey: primaryKey_lhs, },\n\t\t\t\trhs: { schema: schema_rhs, foreignKey: foreignKey_rhs, path, },\n\t\t\t};\n\t\t}\n\t\t// -------------\n\t\t// reference === {foreignKey}LHS->RHS{path}\n\t\tconst table_lhs = this.statementNode.TABLES[0]?.EXPR/*Identifier*/;\n\t\tif (!table_lhs) throw new Error(`No tables in query.`);\n\t\tif (!(table_lhs instanceof Identifier)) throw new Error(`[${ this }]: Base query must not be derived.`);\n\t\t// Get lhs schema\n\t\tconst schema_lhs = await getSchema(table_lhs.NAME, table_lhs.BASENAME);\n\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\tconst { LHS: foreignKey_lhs/*Identifier*/, RHS: path/*Identifier|Path*/ } = this;\n\t\t// We get schema2 from schema_lhs\n\t\tconst keyDef_lhs = getKeyDef(schema_lhs, foreignKey_lhs);\n\t\t// Validate that schema_lhs has the implied foreign key (foreignKey)\n\t\tif (!keyDef_lhs) throw new Error(`[${ this }]: Table ${ table_lhs } does not define the implied foreign key: ${ foreignKey_lhs }.`);\n\t\t// -------------\n\t\t// Get schema_rhs from keyDef!\n\t\tconst table_rhs = Identifier.fromJson(this, keyDef_lhs.basename ? [keyDef_lhs.basename,keyDef_lhs.table] : keyDef_lhs.table);\n\t\tconst schema_rhs = await getSchema(table_rhs.NAME, table_rhs.BASENAME || table_lhs.BASENAME);\n\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\tconst primaryKey_rhs = getPrimaryKey(schema_rhs);\n\t\tif (!primaryKey_rhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define a primary key.`);\n\t\t// -------------\n\t\t// Put together\n\t\treturn {\n\t\t\tlhs: { schema: schema_lhs, foreignKey: foreignKey_lhs, },\n\t\t\trhs: { schema: schema_rhs, primaryKey: primaryKey_rhs, path, },\n\t\t};\n\t}\n\n\t/**\n\t * Plots the relationship.\n\t * \n\t * @returns Void\n\t */\n\tasync plot() {\n\t\tif (this.JOINT) return;\n\t\t// Resolve relation and validate\n\t\tconst stmt = this.statementNode;\n\t\tconst baseTable = stmt.TABLES[0];\n\t\tif (!baseTable) throw new Error(`No tables in query.`);\n\t\tif (!(baseTable.EXPR instanceof Identifier)) throw new Error(`[${ this }]: Base query must not be derived.`);\n\t\t// Do plotting\n\t\tconst { lhs, rhs } = await this.eval();\n\t\tconst baseKey = lhs.foreignKey || lhs.primaryKey;\n\t\tconst joinKey = rhs.primaryKey || rhs.foreignKey;\n\t\tif (lhs.primaryKey/*then incoming reference*/ && lhs.schema.name.toLowerCase() !== baseTable.EXPR.NAME.toLowerCase()) throw new Error(`[${ this }]: Cannot resolve incoming path to base table ${ baseTable.EXPR }.`);\n\t\tconst joinAlias = `$view:${ [baseKey, rhs.schema.basename, rhs.schema.name, joinKey].join(':') }`;\n\t\tconst joint = () => this.JOINT = stmt.JOIN_LIST.find(joint => joint.ALIAS.NAME === joinAlias);\n\t\tif (!joint()) {\n\t\t\t// Implement the join for the first time\n\t\t\tconst baseAlias = ['ALIAS','EXPR'].reduce((prev, key) => prev || baseTable[key]?.NAME, null);\n\t\t\tconst joinKeyAlias = `${ joinKey }:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`;\n\t\t\tstmt.leftJoin( j => j.query( q => q.select( field => field.name( joinKey ).as( joinKeyAlias ) ), q => q.from([rhs.schema.basename,rhs.schema.name]) ) )\n\t\t\t\t.with({ IS_SMART_JOIN: true }).as(joinAlias)\n\t\t\t\t.on( on => on.equals([joinAlias,joinKeyAlias], [baseAlias,baseKey]) );\n\t\t\tjoint();\n\t\t}\n\t\t// For something like: author~>name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"->\"name\"\n\t\t// For something like: author~>country->name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"country\"->\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"~>\"country\"->\"name\"\n\t\tthis.JOINT.EXPR/*Query*/.select( field => field.expr(rhs.path.toJson()).as(this.uuid) );\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tlhs: this.LHS?.toJson(),\n\t\t\trhs: this.RHS?.toJson(),\n\t\t\toperator: this.OPERATOR,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (![this.ARR_LEFT, this.ARR_RIGHT].includes(json?.operator)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tif (this.JOINT) return this.autoEsc([this.JOINT.ALIAS.NAME,this.uuid]).join('.');\n\t\treturn `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens, matches } = Lexer.lex(expr, [this.ARR_LEFT, this.ARR_RIGHT], { limit: 1 });\n\t\tif (!matches.length) return;\n\t\tconst instance = new this(context);\n\t\tconst lhs = parseCallback(instance, tokens[0], [Identifier]);\n\t\tconst rhs = parseCallback(instance, tokens[1], matches[0] === this.ARR_LEFT ? [this] : [this,JsonPath,Identifier]);\n\t\tinstance.path(lhs, matches[0], rhs);\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => [this.ARR_LEFT,this.ARR_RIGHT].includes(operator) && new this(context) };\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class WhenClause extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONDITION = null;\r\n\tCONSEQUENCE = null;\r\n\r\n\t/**\r\n\t * Sets the condition.\r\n\t * \r\n\t * @param Any condition\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcondition(condition) { return (this.build('CONDITION', [condition], Expr.Types), this); }\r\n\r\n\t/**\r\n\t * Sets the consequence.\r\n\t * \r\n\t * @param Any consequence\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tthen_(consequence) { return this.build('CONSEQUENCE', [consequence], Expr.Types); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tcondition: this.CONDITION?.toJson(),\r\n\t\t\tconsequence: this.CONSEQUENCE?.toJson(),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\t// json could be undefined or null, or json.condition could be set but 9\r\n\t\tif (!(typeof json === 'object' && json && 'condition' in json)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.condition(json.condition);\r\n\t\tinstance.then_(json.consequence);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.CONDITION } THEN ${ this.CONSEQUENCE }`; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst tokens = Lexer.split(expr, [`\\\\s+THEN\\\\s+`], { useRegex: 'i' });\r\n\t\tif (tokens.length !== 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst [condition, consequence] = tokens.map($expr => parseCallback(instance, $expr.trim()));\r\n\t\tinstance.condition(condition).then_(consequence);\r\n\t\treturn instance;\r\n\t}\r\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport WhenClause from './WhenClause.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class CaseConstruct extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tBASE_VALUE;\r\n\tWHEN_CLAUSES = [];\r\n\tELSE_CLAUSE;\r\n\r\n\t/**\r\n\t * Sets a given value for the cases.\r\n\t * \r\n\t * @param Any baseValue\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcompare(baseValue) {\r\n\t\tif (this.WHEN_CLAUSES.length || this.ELSE_CLAUSE) throw new Error(`A \"case\" clause must come before any \"when\" or \"else\" clauses.`);\r\n\t\treturn this.build('BASE_VALUE', [baseValue], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a \"when\" expression\r\n\t * \r\n\t * @param Any whenExpr\r\n\t * \r\n\t * @returns WhenClause\r\n\t */\r\n\twhen(whenExpr) {\r\n\t\tif (this.ELSE_CLAUSE) throw new Error(`A \"when\" clause cannot come after an \"else\" clause.`);\r\n\t\tthis.build('WHEN_CLAUSES', [whenExpr], WhenClause, 'condition');\r\n\t\treturn this.WHEN_CLAUSES[this.WHEN_CLAUSES.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an ELSE clause to the cases.\r\n\t * \r\n\t * @param Any elseClause\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\telse(elseClause) {\r\n\t\tif (!this.WHEN_CLAUSES.length) throw new Error(`An \"else\" clause cannot come before \"when\" clauses.`);\r\n\t\treturn this.build('ELSE_CLAUSE', [elseClause], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tbase_value: this.BASE_VALUE?.toJson(),\r\n\t\t\twhen_clauses: this.WHEN_CLAUSES.map(c => c.toJson()),\r\n\t\t\telse_clause: this.ELSE_CLAUSE?.toJson(),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.when_clauses)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tif (json.base_value) instance.compare(json.base_value);\r\n\t\tfor (const whenClause of json.when_clauses) instance.when(whenClause);\r\n\t\tif (json.else_clause) instance.else(json.else_clause);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst sql = [];\r\n\t\tif (this.BASE_VALUE) sql.push(this.BASE_VALUE);\r\n\t\tsql.push(`WHEN ${ this.WHEN_CLAUSES.join(' WHEN ') }`);\r\n\t\tif (this.ELSE_CLAUSE) sql.push('ELSE', this.ELSE_CLAUSE);\r\n\t\treturn `CASE ${ sql.join(' ') } END${ this.params.dialect === 'mysql' ? ' CASE' : '' }`;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [caseMatch,caseConstruct] = expr.match(/^CASE\\s+([\\s\\S]*)\\s+END(\\s+CASE)?$/i) || [];\r\n\t\tif (!caseMatch) return;\r\n\t\tconst { tokens: [ baseValue, ...assertions ], matches: clauses } = Lexer.lex(caseConstruct, ['WHEN','ELSE'], { useRegex: 'i' });\r\n\t\tconst instance = new this(context);\r\n\t\t// Has given value?\r\n\t\tif (baseValue.trim()) instance.compare(parseCallback(instance, baseValue.trim()));\r\n\t\t// On to the cases\r\n\t\tfor (const clause of clauses) {\r\n\t\t\tconst assertStmt = assertions.shift();\r\n\t\t\tif (/ELSE/i.test(clause)) {\r\n\t\t\t\tinstance.else(parseCallback(instance, assertStmt.trim()));\r\n\t\t\t} else if (/WHEN/i.test(clause)) {\r\n\t\t\t\tinstance.when(parseCallback(instance, assertStmt.trim(), [WhenClause]));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Can't have multiple \"${ clause }\" clauses in a CASE construct.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdocs\r\n\t */\r\n\tstatic factoryMethods = { case: context => new this(context) };\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Expr from './abstracts/Expr.js';\r\n\r\nexport default class TypeCast extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERAND = null;\r\n\tTYPE = '';\r\n\tSYNTAX2 = false;\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tcast(operand, type, syntax2 = false) {\r\n\t\tthis.TYPE = type;\r\n\t\tthis.SYNTAX2 = syntax2;\r\n\t\treturn this.build('OPERAND', [operand], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperand: this.OPERAND?.toJson(),\r\n\t\t\ttype: this.TYPE,\r\n\t\t\tsyntax2: this.SYNTAX2,\r\n\t\t\tflags: this.FLAGS\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!json?.operand || !json?.type) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.cast(json.operand, json.type, json.syntax2);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tif (this.SYNTAX2) return `${ this.OPERAND }::${ this.TYPE }`;\r\n\t\treturn `CAST(${ this.OPERAND } AS ${ this.TYPE })`;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tlet operand, type, syntax2 = false;\r\n\t\tif (/^CAST(?:\\s+)?\\([\\s\\S]+\\)$/i.test(expr)) {\r\n\t\t\tconst [ , parens ] = Lexer.split(expr, []);\r\n\t\t\t[operand, type] = Lexer.split(parens.slice(1, -1), [`AS`], { useRegex: 'i' });\r\n\t\t} else {\r\n\t\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\t\t[operand, type] = Lexer.split(expr, [`::`]);\r\n\t\t\tif (!type) return;\r\n\t\t\tsyntax2 = true;\r\n\t\t}\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.cast(parseCallback(instance, operand.trim()), type.trim(), syntax2);\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Select from './Select.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\nexport default class Parens extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\t$EXPR;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, expr) {\r\n\t\tsuper(context);\r\n\t\tthis.$EXPR = expr;\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget NAME() { return this.$EXPR?.NAME; }\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget BASENAME() { return this.$EXPR?.BASENAME; }\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget EXPR() { return this.$EXPR?.EXPR || this.$EXPR; }\r\n\r\n\t/**\r\n\t * Helper method to start a subquery.\r\n\t * \r\n\t * @param  Array fns\r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tquery(...fns) { return (this.build('$EXPR', fns, Select), this.$EXPR); }\r\n\r\n\t/**\r\n\t * Sets the expr\r\n\t * \r\n\t * @param Array fns\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\texpr(...fns) { return (this.build('$EXPR', fns, [Select, ...Expr.Types]), this.$EXPR); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { expr: this.$EXPR?.toJson(), flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!json?.expr || Object.keys(json).length !== (json.flags ? 2 : 1)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.expr(json.expr);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return '(' + this.$EXPR.stringify() + ')'; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')') || Lexer.match(expr, [' ']).length && Lexer.split(expr, []).length === 2/* recognizing the first empty slot */) return;\r\n\t\treturn new this(context, parseCallback(context, _unwrap(expr, '(', ')'), [Select, ...Expr.Types]));\r\n\t}\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Math extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic operations\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcalc(operator, ...operands) {\r\n\t\tif (this.OPERATOR && this.OPERATOR !== operator) {\r\n\t\t\treturn (new this.constructor(this)).calc(operator, this, ...operands);\r\n\t\t}\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"+\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsum(...operands) { return this.calc('+', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"-\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsub(...operands) { return this.calc('-', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"/\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tdiv(...operands) { return this.calc('/', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"*\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\ttimes(...operands) { return this.calc('*', ...operands); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.operator !== 'string' || !/\\+|\\-|\\*|\\//.test(json.operator) || !Array.isArray(json.operands)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.calc(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.OPERANDS.join(` ${ this.OPERATOR } `); }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const operator of ['\\\\*', '\\\\/','\\\\+', '\\\\-']) {\r\n\t\t\tlet { tokens, matches } = Lexer.lex(expr, [`(\\\\s+)?${ operator }(\\\\s+)?`], { useRegex: 'i' });\r\n\t\t\tif (tokens.filter(s => s.trim()).length < 2) continue; // Note that we're not simply asking matches.length; think SELECT * FROM\r\n\t\t\treturn new this(context, matches.pop().trim(), ...tokens.map(expr => parseCallback(context, expr.trim())));\r\n\t\t}\r\n\t}\r\n}", "\nimport Lexer from '../../Lexer.js';\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\n\nexport default class AbstractGroupBy extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.CRITERIA.map(criterion => criterion.stringify()).join(','); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { criteria: this.CRITERIA.map(c => c.toJson()), flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ groupByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!groupByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tinstance.criterion(parseCallback(instance, criterionExpr));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'GROUP\\\\s+BY';\n}", "\nimport AbstractGroupBy from './abstracts/AbstractGroupBy.js';\n\nexport default class PartitionByClause extends AbstractGroupBy {\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['PARTITION BY', super.stringify()].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic regex = 'PARTITION\\\\s+BY';\n}", "\nimport Lexer from '../../Lexer.js';\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\n\nexport default class AbstractOrderBy extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { criteria: this.CRITERIA.map(c => c.toJson()), flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.CRITERIA.map(criterion => [criterion, ...criterion.FLAGS].join(' ')).join(','); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ orderByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!orderByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tconst [ , expr, sort ] = /([\\s\\S]+)\\s+(ASC|DESC)$/i.exec(criterionExpr) || [ , criterionExpr ];\n\t\t\tinstance.criterion((parseCallback(instance, expr)).withFlag(sort));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ORDER\\\\s+BY';\n}", "\nimport Lexer from '../Lexer.js';\nimport AbstractOrderBy from './abstracts/AbstractOrderBy.js';\n\nexport default class OrderByClause extends AbstractOrderBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['ORDER BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../Lexer.js';\nimport PartitionByClause from '../PartitionByClause.js';\nimport OrderByClause from '../OrderByClause.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class WindowSpec extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tWINDOW_REF;\n\tPARTITION_BY_CLAUSE;\n\tORDER_BY_CLAUSE;\n\n\t/**\n\t * Sets the name.\n\t * \n\t * @param String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tthis.NAME = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\texisting(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\textends(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a PARTITION BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\tpartitionBy(...partitionBys) {\n\t\tif (this.WINDOW_REF) throw new Error(`The PARTITION BY clause is not allowed when inheriting from a base window.`);\n\t\treturn this.build('PARTITION_BY_CLAUSE', partitionBys, PartitionByClause, 'criterion');\n\t}\n\n\t/**\n\t * Adds an ORDER BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\torderBy(...orderBys) { return this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tname: this.NAME, \n\t\t\twindow_ref: this.WINDOW_REF, \n\t\t\tpartition_by_clause: this.PARTITION_BY_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json === 'string') json = { window_ref: json };\n\t\telse if (!(typeof json === 'object' && json) || !['name', 'window_ref', 'partition_by_clause', 'order_by_clause'].some(k => k in json)) return;\n\t\tconst instance = new this(context);\n\t\tif (json.name) instance.name(json.name);\n\t\tif (json.window_ref) instance.extends(json.window_ref);\n\t\tif (json.partition_by_clause) instance.partitionBy(json.partition_by_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = [];\n\t\tif (!this.NAME && this.WINDOW_REF && !this.PARTITION_BY_CLAUSE && !this.ORDER_BY_CLAUSE) {\n\t\t\t// It's an \"over w\" clause\n\t\t\tsql.push(this.WINDOW_REF);\n\t\t} else {\n\t\t\t// Might be an \"over (definedRef? ...)\" clause or a named window \"w AS ()\"\n\t\t\t// But certainly an enclosure\n\t\t\tif (this.NAME) sql.push(`${ this.NAME } AS `);\n\t\t\tsql.push(`(${ [\n\t\t\t\tthis.WINDOW_REF,\n\t\t\t\tthis.PARTITION_BY_CLAUSE,\n\t\t\t\tthis.ORDER_BY_CLAUSE\n\t\t\t].filter(x => x).join(' ') })`);\n\t\t}\n\t\treturn sql.join('');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst parseEnclosure = async enclosure => {\n\t\t\tconst { tokens: [ definedRef, ...clauses ], matches: clauseTypes } = Lexer.split(_unwrap(enclosure.trim(), '(', ')'), ['PARTITION\\\\s+BY', 'ORDER\\\\s+BY'], { useRegex:'i', preserveDelims: true });\n\t\t\tif (definedRef.trim()) instance.extends(definedRef.trim());\n\t\t\tfor (const clauseType of clauseTypes) {\n\t\t\t\t// PARTITION BY\n\t\t\t\tif (/PARTITION\\s+BY/i.test(clauseType)) {\n\t\t\t\t\tinstance.partitionBy(parseCallback(instance, clauses.shift().trim(), [PartitionByClause]));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ORDER BY\n\t\t\t\tinstance.orderBy(parseCallback(instance, clauses.shift().trim(), [OrderByClause]));\n\t\t\t}\n\t\t};\n\t\tconst hasEnclosure = expr.endsWith(')');\n\t\tconst isNamedWindow = hasEnclosure && !expr.startsWith('(');\n\t\tif (isNamedWindow) {\n\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\n\t\t\t// NOTICE below the space around \"AS\", important in view of \"city ASC\"\n\t\t\tconst [ name, enclosure ] = spec.split(new RegExp(' AS ', 'i'));\n\t\t\tinstance.name(name.trim());\n\t\t\tparseEnclosure(enclosure);\n\t\t} else if (hasEnclosure) {\n\t\t\tparseEnclosure(expr);\n\t\t} else {\n\t\t\t// FUNC OVER w\n\t\t\tinstance.existing(expr);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW|OVER';\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Func extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tNAME = '';\r\n\tARGS = [];\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tcall(name, ...args) {\r\n\t\tthis.NAME = name;\r\n\t\treturn this.build('ARGS', args, Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tname: this.NAME,\r\n\t\t\targs: this.ARGS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.args)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.call(json.name, ...json.args);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.NAME.toUpperCase() }(${ this.ARGS.join(',') })`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!expr.endsWith(')') || Lexer.match(expr, [' ']).length) return;\r\n\t\tconst [ , name, args = '' ] = /^(\\w+)\\(([\\s\\S]+)?\\)$/i.exec(expr);\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.call(name, ...Lexer.split(args, [',']).map(arg => parseCallback(instance, arg.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../Lexer.js';\nimport WindowSpec from './window/WindowSpec.js';\nimport OrderByClause from './OrderByClause.js';\nimport Func from './Func.js';\n\nexport default class Aggr extends Func {\n\n\t/**\n\t * Instance properties\n\t */\n\tORDER_BY_CLAUSE;\n\tOVER_CLAUSE;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tcall(...args) { return (super.call(...args), this); }\n\t\n\t/**\n\t * Adds an OVER clause\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this); }\n\n\t/**\n\t * Adds an OVER clause\n\t */\n\tover(window) {\n\t\t// For expressions like SUM OVER ()\n\t\tif (!window) window = { name: '' }; // At least an empty string to help pass the WindowSpec.fromJson() validation\n\t\treturn (this.build('OVER_CLAUSE', [window], WindowSpec), this.OVER_CLAUSE);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...super.toJson(), \n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tover_clause: this.OVER_CLAUSE?.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance) return;\n\t\tif (!this.names.flat().includes(instance.NAME.toUpperCase())) return instance;\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.over_clause) instance.over(json.over_clause);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = `${ this.NAME.toUpperCase() }(${ [...this.FLAGS, this.ARGS.join(','), this.ORDER_BY_CLAUSE].filter(s => s).join(' ') })`;\n\t\treturn sql + (this.OVER_CLAUSE ? ` OVER ${ this.OVER_CLAUSE }` : '');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\t// Break off any OVER clause, then assert that it's a function\n\t\tconst [ func, over ] = Lexer.split(expr, ['OVER\\\\s+'], { useRegex: 'i' }).map(s => s.trim());\n\t\tif (!func.endsWith(')') || Lexer.match(func, [' ']).length) return;\n\t\t// Match any ALL|DISTINCT flags; also assert that it's an aggr function\n\t\tconst [ , name, allOrDistinct, args = '' ] = /^(\\w+)\\((?:\\s+)?(?:(ALL|DISTINCT)\\s+)?([\\s\\S]+)?\\)$/i.exec(func);\n\t\tif (!this.names.flat().includes(name.toUpperCase())) return;\n\t\t// Break off any ORDER BY clause, then render\n\t\tconst [ , $args, orderByClause ] = /^([\\s\\S]+)(?:\\s+(ORDER\\s+BY\\s+.+))$/i.exec(args) || [ , args ];\n\t\tconst instance = super.parse(context, `${ name }(${ $args })`, parseCallback);\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tif (orderByClause) instance.orderBy(parseCallback(instance, orderByClause, [OrderByClause]));\n\t\telse if (over) instance.over(parseCallback(instance, over, [WindowSpec]));\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { call: (context, name, ...args) => this.names.flat().includes(name?.toUpperCase()) && new this(context) };\n\n\tstatic names = [\n\t\t[\n\t\t\t'AVG', \n\t\t\t'BIT_AND', \n\t\t\t'BIT_OR', \n\t\t\t'BIT_XOR', \n\t\t\t'COUNT', \n\t\t\t'JSON_ARRAYAGG', \n\t\t\t'JSON_OBJECTAGG', \n\t\t\t'MAX', \n\t\t\t'MIN',\n\t\t\t'STDDEV_POP',\n\t\t\t'STDDEV',\n\t\t\t'STD',\n\t\t\t'STDDEV_SAMP',\n\t\t\t'SUM',\n\t\t\t'VAR_POP',\n\t\t\t'VARIANCE',\n\t\t\t'VAR_SAMP',\n\t\t\t// May not apply to OVER()\n\t\t\t'GROUP_CONCAT',\n\t\t\t'GROUP_CONCAT_WS',\n\t\t],\n\t\t[\n\t\t\t'CUME_DIST', \n\t\t\t'DENSE_RANK', \n\t\t\t'FIRST_VALUE', \n\t\t\t'LAG', \n\t\t\t'LAST_VALUE', \n\t\t\t'LEAD', \n\t\t\t'NTH_VALUE', \n\t\t\t'NTLE',\n\t\t\t'PERCENT_RANK',\n\t\t\t'RANK',\n\t\t\t'ROW_NUMBER',\n\t\t],\n\t\t[\n\t\t\t'ANY_VALUE', \n\t\t\t'COLUMN', \n\t\t\t'COLUMNS', \n\t\t\t'GROUPING', \n\t\t]\n\t];\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class StrJoin extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tSTRINGS = [];\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tjoin(...strings) { return this.build('STRINGS', strings, Expr.Types); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { strings: this.STRINGS.map(str => str.toJson()), flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.strings)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.join(...json.strings);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.STRINGS.join(' || '); }\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tconst tokens = Lexer.split(expr, [`||`]);\r\n\t\tif (tokens.length < 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.join(...tokens.map(expr => parseCallback(instance, expr.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Prim extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value) {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to true\r\n\t */\r\n\ttrue() { this.VALUE = true; }\r\n\r\n\t/**\r\n\t * Sets the value to false\r\n\t */\r\n\tfalse() { this.VALUE = false; }\r\n\r\n\t/**\r\n\t * Sets the value to null\r\n\t */\r\n\tnull() { this.VALUE = null; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return this.VALUE; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (![true,false,null].includes(json)) return;\r\n\t\treturn new this(context, json);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.VALUE }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tif (!/^(TRUE|FALSE|NULL)$/i.test(expr)) return;\r\n\t\treturn new this(context, JSON.parse(expr));\r\n\t}\r\n}", "\r\nimport Identifier from '../Identifier.js';\r\nimport CaseConstruct from '../case/CaseConstruct.js';\r\nimport Condition from '../Condition.js';\r\nimport Assertion from '../Assertion.js';\r\nimport TypeCast from '../TypeCast.js';\r\nimport Parens from '../Parens.js';\r\nimport Path from '../Path.js';\r\nimport Math from '../Math.js';\r\nimport Aggr from '../Aggr.js';\r\nimport Func from '../Func.js';\r\nimport Json from '../json/Json.js';\r\nimport JsonPath from '../json/JsonPath.js';\r\nimport Str from '../str/Str.js';\r\nimport StrJoin from '../str/StrJoin.js';\r\nimport Num from '../Num.js';\r\nimport Prim from '../Prim.js';\r\nimport Placeholder from '../Placeholder.js';\r\n\r\nexport default class Expr {\r\n\r\n\t/**\r\n\t * Cast an input to a node\r\n\t */\r\n\tstatic cast(context, json, Types = this.Types) {\r\n\t\tif (typeof json === 'function') {\r\n\t\t\tif (Types.length === 1) {\r\n\t\t\t\tconst instance = new Types[0](context);\r\n\t\t\t\tjson(instance);\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t\tlet instance;\r\n\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\tconst $instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (methodName in Type.factoryMethods && Type.factoryMethods[methodName](context, ...args)) : (methodName in Type.prototype && new Type(context))), null);\r\n\t\t\t\tif (!$instance) throw new Error(`Unknow method: ${ methodName }()`);\r\n\t\t\t\tinstance = $instance;\r\n\t\t\t\tif ($instance[methodName]) return $instance[methodName](...args); // Foward the call\r\n\t\t\t\tfor (const f of args) f($instance); // It's just magic method mode\r\n\t\t\t};\r\n\t\t\tjson(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\treturn this.fromJson(context, json, Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, arg, Types = this.Types) {\r\n\t\tconst instance = Types.reduce((prev, Type) => prev || (arg instanceof Type ? arg : Type.fromJson(context, arg)), null);\r\n\t\tif (!instance) throw new Error(``);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) { return parseCallback(context, expr, this.Types); }\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tstatic get Types() {\r\n\t\treturn [\r\n\t\t\tParens,\r\n\t\t\tCaseConstruct,\r\n\t\t\tStrJoin,\r\n\t\t\tCondition,\r\n\t\t\tPath, // Must come before Assertion; think: ~> vs >\r\n\t\t\tJsonPath, // ...\r\n\t\t\tAssertion,\r\n\t\t\tMath,\r\n\t\t\tTypeCast, // After anything with operators, but before function types; think CAST(c as text) vs CAST()\r\n\t\t\tAggr,\r\n\t\t\tFunc,\r\n\t\t\tJson,\r\n\t\t\tStr,\r\n\t\t\tNum,\r\n\t\t\tPrim,\r\n\t\t\tPlaceholder,\r\n\t\t\tIdentifier,\r\n\t\t];\r\n\t}\r\n}", "\r\nimport { _unwrap } from '@webqit/util/str/index.js';\r\nimport Lexer from '../Lexer.js';\r\nimport Condition from './Condition.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Assertion extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic asserts\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tassert(operator, ...operands) {\r\n\t\tif (this.OPERATOR) this.OPERANDS.splice(0);\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tequals(...operands) { return this.assert('=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias equal\r\n\t */\r\n\teq(...operands) { return this.equal(...operands); }\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tnotEqual(...operands) { return this.assert('<>', ...operands); }\r\n\r\n\t/**\r\n\t * @alias notEqual\r\n\t */\r\n\tnotEq(...operands) { return this.notEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlesserThan(...operands) { return this.assert('<', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lesserThan\r\n\t */\r\n\tlt(...operands) { return this.lesserThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlessThanOrEqual(...operands) { return this.assert('<=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lessThanOrEqual\r\n\t */\r\n\tltOrEq(...operands) { return this.lessThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \">\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThan(...operands) { return this.assert('>', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThan\r\n\t */\r\n\tgt(...operands) { return this.greaterThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \">=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThanOrEqual(...operands) { return this.assert('>=', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThanOrEqual\r\n\t */\r\n\tgtOrEq(...operands) { return this.greaterThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"IN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tin(...operands) { return this.assert('IN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"ANY\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tany(...operands) { return this.assert('ANY', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"LIKE\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlike(...operands) { return this.assert('LIKE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNull(...operands) { return this.assert('IS NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotNull(...operands) { return this.assert('IS NOT NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisTrue(...operands) { return this.assert('IS TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotTrue(...operands) { return this.assert('IS NOT TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS FALSE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisFalse(...operands) { return this.assert('IS FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT FALSE\"\r\n\t * \r\n\t * @param Any operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotFalse(...operands) { return this.assert('IS NOT FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisUnknow(...operands) { return this.assert('IS UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotUnknow(...operands) { return this.assert('IS NOT UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisDistinctFrom(...operands) { return this.assert('IS DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotDistinctFrom(...operands) { return this.assert('IS NOT DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetween(...operands) { return this.assert('IS BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetween(...operands) { return this.assert('IS NOT BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetweenSymmetric(...operands) { return this.assert('IS BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetweenSymmetric(...operands) { return this.assert('IS NOT BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tand(...args) { return (new Condition(this, 'AND')).and(this, ...args); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tor(...args) { return (new Condition(this, 'OR')).or(this, ...args); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.operands) || typeof json?.operator !== 'string' || !this.regexes.some(re => (new RegExp(re.regex || re.test || re)).test(` ${ json.operator } `/*intentional space around*/))) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.assert(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst operands = this.OPERANDS.slice(0);\r\n\t\tconst sql = [\r\n\t\t\toperands.shift(), \r\n\t\t\tthis.OPERATOR.toUpperCase(),\r\n\t\t];\r\n\t\tconst rightHandSide = operands;\r\n\t\tif (this.OPERATOR === 'IN') sql.push(`(${ rightHandSide.join(',') })`);\r\n\t\telse if (/BETWEEN/i.test(this.OPERATOR)) sql.push(`(${ rightHandSide.join(' AND ') })`);\r\n\t\telse sql.push(`${ rightHandSide.join(' ') }`);\r\n\t\treturn sql.filter(s => s).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst { tokens: [lhs, rhs = ''], matches: [operator] } = Lexer.lex(expr, this.regexes, { useRegex: 'i' });\r\n\t\tif (!operator) return;\r\n\t\tconst $operator = operator.trim().toUpperCase();\r\n\t\tconst $operands = [lhs];\r\n\t\tif ($operator === 'IN') {\r\n\t\t\t$operands.push(...Lexer.split(_unwrap(rhs.trim(), '(', ')'), [',']));\r\n\t\t} else if (/BETWEEN/.test($operator)) {\r\n\t\t\t$operands.push(...Lexer.split(rhs, [' AND ']));\r\n\t\t} else if (rhs) {\r\n\t\t\t$operands.push(rhs);\r\n\t\t}\r\n\t\treturn new this(context, $operator, ...$operands.map(opr => parseCallback(context, opr.trim())));\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tstatic regexes = [\r\n\t\t{ test: '<(?!~)' },\r\n\t\t{ backtest: '^(?!.*~$)', test: '>', regex: '(?<!~)>' },\r\n\t\t'((\\\\s+(?:NOT\\\\s+)?IS\\\\s+(?:NOT\\\\s+)?(TRUE|FALSE|NULL|UNKNOWN|DISTINCT\\\\s+FROM)\\\\s+)|\\\\s+(ISNULL|NOTNULL|IN|ANY|LIKE|(?:NOT\\\\s+)?BETWEEN(?:\\\\s+SYMMETRIC)?)\\\\s+|(?:\\\\s+)?(=|<=|>=|!=|<>)(?:\\\\s+)?)',\r\n\t];\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Assertion from './Assertion.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Condition extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tLOGIC = '';\r\n\tASSERTIONS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, logic) {\r\n\t\tsuper(context);\r\n\t\tthis.LOGIC = logic;\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an AND logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tand(...assertions) {\r\n\t\tif (this.LOGIC === 'OR') return (new this.constructor(this)).and(this, ...assertions);\r\n\t\tthis.LOGIC = 'AND';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an OR logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tor(...assertions) {\r\n\t\tif (this.LOGIC === 'AND') return (new this.constructor(this)).or(this, ...assertions);\r\n\t\tthis.LOGIC = 'OR';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tlogic: this.LOGIC,\r\n\t\t\tassertions: this.ASSERTIONS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.logic !== 'string' || !/AND|OR/i.test(json.logic) || !Array.isArray(json.assertions)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance[json.logic.toLowerCase()](...json.assertions);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.ASSERTIONS.map(expr => expr instanceof Condition ? `(${ expr.stringify() })` : expr.stringify()).join(' ' + this.LOGIC + ' '); }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const logic of ['AND', 'OR']) {\r\n\t\t\tconst tokens = Lexer.split(expr, [`\\\\s+${ logic }\\\\s+`], { useRegex: 'i' });\r\n\t\t\tif (tokens.length > 1) {\r\n\t\t\t\tconst instance = new this(context, logic);\r\n\t\t\t\tfor (const $expr of tokens) instance[logic.toLowerCase()](parseCallback(instance, $expr));\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\nimport Identifier from '../Identifier.js';\nimport Parens from '../Parens.js';\nimport Path from '../Path.js';\n\nexport default class AbstractAliasableExpr extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\t$EXPR;\n\tALIAS;\n\tCLAUSED;\n\t\n\t/**\n\t * @property String\n\t */\n\tget NAME() { return this.$EXPR?.NAME; }\n\n\t/**\n\t * @property String\n\t */\n\tget BASENAME() { return this.$EXPR?.BASENAME; }\n\n\t/**\n\t * @property Node\n\t */\n\tget EXPR() { return this.$EXPR?.EXPR || this.$EXPR; }\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns this\n\t */\n\tname(name) { return (this.build('$EXPR', [name], Identifier, 'name'), this); }\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tquery(...fns) { return (this.build('$EXPR', fns, Parens, 'query'), this); }\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Any expr\n\t * \n\t * @returns this\n\t */\n\texpr(expr) { return (this.build('$EXPR', [expr], this.constructor.exprTypes), this); }\n\t\n\t/**\n\t * Sets the alias\n\t * \n\t * @param String alias\n\t * \n\t * @returns this\n\t */\n\tas(alias, claused = true) {\n\t\tthis.build('ALIAS', [alias], Identifier);\n\t\tthis.CLAUSED = claused;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { expr: this.$EXPR?.toJson(), alias: this.ALIAS?.toJson(), claused: this.CLAUSED, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json?.expr) {\n\t\t\tinstance.expr(json.expr);\n\t\t\tif (json.alias) instance.as(json.alias, json.claused);\n\t\t} else if (json) instance.expr(json);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst alias = this.ALIAS || this.$EXPR instanceof Path && this.$EXPR.JOINT && this.autoEsc(this.$EXPR.clone().stringify());\n\t\treturn [this.$EXPR, this.CLAUSED ? 'AS' : '', alias].filter(s => s).join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst escChar = this.getEscChar(context, true);\n\t\t// With an \"AS\" clause, its easy to obtain the alias...\n\t\t// E.g: SELECT first_name AS fname, 4 + 5 AS result, 5 + 5\n\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\n\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5, (SELECT ...) alias FROM ...,\n\t\tlet [ , $expr, $separator, aliasUnescaped, /*esc*/, aliasEscaped ] = (new RegExp(`^([\\\\s\\\\S]+?)` + `(?:` + `(\\\\s+AS\\\\s+|(?<!(?:~>|<~))\\\\s+)` + `(?:([\\\\w]+)|(${ escChar })((?:\\\\4\\\\4|[^\\\\4])+)\\\\4)` + `)?$`, 'i')).exec(expr.trim()) || [];\n\t\tlet exprNode, $alias = aliasUnescaped || aliasEscaped;\n\t\tif ($alias && !$separator?.trim() && !$expr.trim().endsWith(')')) {\n\t\t\ttry {\n\t\t\t\texprNode = parseCallback(instance, $expr, this.exprTypes);\n\t\t\t} catch(e) {}\n\t\t\tif (!exprNode) {\n\t\t\t\taliasUnescaped = aliasEscaped = null;\n\t\t\t\t$expr = expr; // IMPORTANT\n\t\t\t}\n\t\t}\n\t\tif (!exprNode) { exprNode = parseCallback(instance, $expr, this.exprTypes); }\n\t\tinstance.expr(exprNode);\n\t\tif ($alias) {\n\t\t\tconst alias = aliasUnescaped || this.autoUnesc(instance, aliasEscaped);\n\t\t\tconst claused = !!$separator?.trim();\n\t\t\tinstance.as(alias, claused);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return Expr.Types; }\n}", "\nimport AbstractAliasableExpr from './abstracts/AbstractAliasableExpr.js';\nimport Identifier from './Identifier.js';\nimport Parens from './Parens.js';\n\nexport default class Table extends AbstractAliasableExpr {\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return [Parens,Identifier]; }\n}", "\nimport Lexer from '../Lexer.js';\nimport Identifier from './Identifier.js';\nimport Condition from './Condition.js';\nimport Assertion from './Assertion.js';\nimport Table from './Table.js';\n\nexport default class JoinClause extends Table {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTYPE = '';\n\tCORRELATION = null;\n\n\t/**\n\t * Creates a full join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tfull(table) {\n\t\tthis.TYPE = 'JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a left join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tleft(table) {\n\t\tthis.TYPE = 'LEFT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a right join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tright(table) {\n\t\tthis.TYPE = 'RIGHT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates an inner join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tinner(table) {\n\t\tthis.TYPE = 'INNER_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a cross join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tcross(table) {\n\t\tthis.TYPE = 'CROSS_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Adds a condition\n\t * \n\t * @param Array assertions\n\t * \n\t * @returns this\n\t */\n\ton(...correlations) { return this.build('CORRELATION', correlations, Condition, 'and'); }\n\n\t/**\n\t * Sets the using clause\n\t * \n\t * @param String correlation\n\t * \n\t * @returns this\n\t */\n\tusing(correlation) { return this.build('CORRELATION', [correlation], Identifier); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttype: this.TYPE,\n\t\t\tcorrelation: this.CORRELATION?.toJson(),\n\t\t\t...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance || !json.type) return;\n\t\tif (json?.expr && json.type) instance.TYPE = json.type;\n\t\tif (json?.expr && json.correlation) instance.build('CORRELATION', [json.correlation], [Identifier,Condition]);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\treturn [\n\t\t\tthis.TYPE?.replace(/_/, ' ').toUpperCase() || 'JOIN',\n\t\t\tsuper.stringify(),\n\t\t\t...[ this.CORRELATION instanceof Identifier ? `USING ${ this.CORRELATION }` : `ON ${ this.CORRELATION }` ], \n\t\t].filter(s => s).join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ joinMatch, type, joinSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!joinMatch) return;\n\t\tconst { tokens: [ $table, $correlation ], matches } = Lexer.lex(joinSpec, ['ON|USING'], { useRegex:'i' });\n\t\tconst instance = super.parse(context, $table.trim(), parseCallback);\n\t\tinstance.TYPE = type.trim().toUpperCase() + '_JOIN';\n\t\tif (/^USING$/i.test(matches[0])) {\n\t\t\tinstance.using(parseCallback(instance, $correlation.trim(), [Identifier]));\n\t\t} else if (/^ON$/i.test(matches[0])) {\n\t\t\tinstance.on(parseCallback(instance, $correlation.trim(), [Condition,Assertion]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = '(INNER\\\\s+|CROSS\\\\s+|(?:LEFT|RIGHT)(?:\\\\s+OUTER)?\\\\s+)?JOIN';\n}\n", "\nimport AbstractGroupBy from './abstracts/AbstractGroupBy.js';\n\nexport default class GroupByClause extends AbstractGroupBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['GROUP BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr, parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport WindowSpec from './WindowSpec.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class WindowClause extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tWINDOWS_LIST = [];\n\n\t/**\n\t * Adds a window spec.\n\t * \n\t * @param Array windows\n\t * \n\t * @returns this\n\t */\n\tdefine(...windows) { return this.build('WINDOWS_LIST', windows, WindowSpec); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { window_list: this.WINDOWS_LIST.map(w => w.toJson()) }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.window_list)) return;\n\t\tconst instance = new this(context);\n\t\tinstance.define(...json.window_list);\n\t\treturn instance;\n\t}\n\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `WINDOW ${ this.WINDOWS_LIST.join(',') }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ windowMatch, windowSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!windowMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const spec of Lexer.split(windowSpec, [','])) {\n\t\t\tinstance.define(parseCallback(instance, spec.trim(), [Window]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW';\n}", "\nimport AbstractAliasableExpr from './abstracts/AbstractAliasableExpr.js';\nimport CaseConstruct from './case/CaseConstruct.js';\nimport JsonPath from './json/JsonPath.js';\nimport Path from './Path.js';\nimport Func from './Func.js';\nimport Aggr from './Aggr.js';\n\nexport default class Field extends AbstractAliasableExpr {\n\n\t/**\n\t * Plots a path\n\t * \n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tpath(lhs, operator, rhs) { return (this.build('$EXPR', [lhs, operator, rhs], JsonPath.OPERATORS.includes(operator) ? JsonPath : Path, 'path'), this); }\n\n\t/**\n\t * Function call\n\t * \n\t * @param String name\n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tcall(name, ...args) { return (this.build('$EXPR', [name, ...args], Aggr.names.flat().includes(name.toUpperCase()) ? Aggr : Func, 'call'), this); }\n\n\t/**\n\t * Case construct\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tcase(...fns) { return (this.build('$EXPR', fns, CaseConstruct), this); }\n\n}", "\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport Placeholder from './Placeholder.js';\nimport Path from './Path.js';\nimport JoinClause from './JoinClause.js';\nimport GroupByClause from './GroupByClause.js';\nimport OrderByClause from './OrderByClause.js';\nimport WindowClause from './window/WindowClause.js';\nimport Condition from './Condition.js';\nimport Assertion from './Assertion.js';\nimport Field from './Field.js';\nimport Table from './Table.js';\nimport Aggr from './Aggr.js';\n\nexport default class Select extends StatementNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tSELECT_LIST = [];\n\tFROM_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tGROUP_BY_CLAUSE = null;\n\tHAVING_CLAUSE = null;\n\tWINDOW_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tOFFSET_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.FROM_LIST; }\n\n\t/**\n\t * @properties Array\n\t */\n\tAGGRS = [];\n\tPATHS = [];\n\tVARS = [];\n\tSUBQUERIES = [];\n\n\t/**\n\t * Builds the statement's SELECT_LIST\n\t * \n\t * .select(\n\t * \t\t'col1',\n\t * \t\tf1 => f1.name('col2').as('alias1'),\n\t * \t\tf2 => f1.func('CONCAT_WS', i => i.name(...) ),\n\t * \t\tf3 => f1.aggr('SUM', 'col1'),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.existing('w1') ) ),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.partitionBy( p => p.name('col1') ) ) ),\n\t * \t\tf3 => f1.math('+', 'col1', 'col2'),\n\t * \t\tf3 => f1.math('/', i => i.name('col1'), i => i.func('AVG', ... ) ),\n\t * \t\tf3 => f1.case( c => c.given(2), c => c.when(2).then(4), c => c.else(4) ).as('alias3'),\n\t * \t\tf4 => f1.query(\n\t * \t\t\tq => q.select().from()...\n\t * \t\t).as('alias4'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tselect(...fields) { return this.build('SELECT_LIST', fields, Field); }\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tables) { return (this.build('FROM_LIST', tables, Table), this.FROM_LIST[this.FROM_LIST.length - 1]/* for: .as() */); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's GROUP_BY_CLAUSE\n\t * \n\t * .groupBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2'),\n\t * \t\tby => by.func('CONCAT_WS', ... ),\n\t * \t\tby => by.case(c => c.given(2), c => c.when(2).then(4), c => c.else(4) ),\n\t * ).withRollup()\n\t * \n\t * @return Void\n\t */\n\tgroupBy(...groupBys) { return (this.build('GROUP_BY_CLAUSE', groupBys, GroupByClause, 'criterion'), this.GROUP_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Builds the statement's HAVING_CLAUSE\n\t * \n\t * .having(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\thaving(...wheres) { return this.build('HAVING_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's WINDOW_CLAUSE\n\t * \n\t * .window(\n\t * \t\tw1 => w1.name('w1').partitionBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t).orderBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t),\n\t * \t\tw2 => w2.name('w2').extends('w1')\n\t * )\n\t * \n\t * @return Void\n\t */\n\twindow(...windows) { return this.build('WINDOW_CLAUSE', windows, WindowClause, 'define'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's OFFSET_CLAUSE\n\t * \n\t * .offset(3);\n\t * \n\t * @return string\n\t */\n\toffset(offset) {\n\t\tif (typeof offset !== 'number') throw new Error(`Offsets must be of type number.`);\n\t\tthis.OFFSET_CLAUSE = offset;\n\t}\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\n    /**\n\t * Catalog certain nodes\n\t * \n\t * @param Node node\n\t * \n\t * @returns Void\n\t */\n    connectedNodeCallback(node) {\n\t\tif (node instanceof Aggr) this.AGGRS.push(node);\n\t\tif (node instanceof Path && !(node.CONTEXT instanceof Path)) this.PATHS.push(node);\n\t\tif (node instanceof Placeholder) this.VARS.push(node);\n\t\tif (node instanceof Select) this.SUBQUERIES.push(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget expandable() { return this.PATHS.length > 0 || this.SUBQUERIES.some(q => q.expandable); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync expand(inPlace = false) {\n\t\tconst instance = !inPlace ? this.clone() : this;\n\t\tif (!instance.expandable) return instance;\n\t\tfor (const path of instance.PATHS) await path.plot();\n\t\tfor (const query of instance.SUBQUERIES) await query.expand(true);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tselect_list: this.SELECT_LIST.map(s => s.toJson()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\tgroup_by_clause: this.GROUP_BY_CLAUSE?.toJson(),\n\t\t\thaving_clause: this.HAVING_CLAUSE?.toJson(),\n\t\t\twindow_clause: this.WINDOW_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\toffset_clause: this.OFFSET_CLAUSE,\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.select_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.select(...json.select_list);\n\t\tif (json.from_list?.length) instance.from(...json.from_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.group_by_clause) instance.groupBy(json.group_by_clause);\n\t\tif (json.having_clause) instance.having(json.having_clause);\n\t\tif (json.window_clause) instance.window(json.window_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.offset_clause) instance.offset(json.offset_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify(params = {}) {\n\t\tconst sql = ['SELECT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.SELECT_LIST.join(', '));\n\t\tsql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.GROUP_BY_CLAUSE) sql.push(this.GROUP_BY_CLAUSE);\n\t\tif (this.HAVING_CLAUSE) sql.push('HAVING', this.HAVING_CLAUSE);\n\t\tif (this.WINDOW_CLAUSE) sql.push(this.WINDOW_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.OFFSET_CLAUSE) sql.push('OFFSET', this.OFFSET_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', (Array.isArray(this.LIMIT_CLAUSE) ? this.LIMIT_CLAUSE : [this.LIMIT_CLAUSE]).join(','));\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, allOrDistinct, body ] = /^SELECT\\s+(?:(WITH\\s+UAC)\\s+)?(ALL|DISTINCT)?([\\s\\S]+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, join:JoinClause, where:'WHERE', groupBy:GroupByClause, having:'HAVING', window:WindowClause, orderBy:OrderByClause, offset:'OFFSET', limit:'LIMIT' };\n\t\tconst { tokens: [ fieldsSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// SELECT_LIST\n\t\tfor (const fieldExpr of Lexer.split(fieldsSpec, [','])) {\n\t\t\tconst field = parseCallback(instance, fieldExpr.trim(), [Field]);\n\t\t\tinstance.select(field);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// FROM_LIST\n\t\t\tif (clauseKey === 'from') {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\t\t\tinstance.from(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE|HAVING_CLAUSE\n\t\t\telse if (['where', 'having'].includes(clauseKey)) {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t\t// OFFSET|LIMIT\n\t\t\telse if (['offset', 'limit'].includes(clauseKey)) {\n\t\t\t\tconst args = tokens.shift().split(',').map(s => parseInt(s.trim()));\n\t\t\t\tinstance[clauseKey](...args);\n\t\t\t}\n\t\t\t// JOIN|GROUP_BY|WINDOW|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Expr from '../select/abstracts/Expr.js';\r\nimport Identifier from '../select/Identifier.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\nexport default class AssignmentList extends Node {\r\n\r\n    /**\r\n\t * Instance properties\r\n\t */\r\n    ENTRIES = [];\r\n    \r\n    /**\r\n\t * Builds the statement's ENTRIES\r\n\t * \r\n\t * .set(i => i.name('col1'), 3);\r\n\t * \r\n\t * @return this\r\n\t */\r\n    set(target_s, value_s) {\r\n\t\tif (Array.isArray(target_s)) target_s = target_s.map(t => t instanceof Node ? t : Identifier.fromJson(this, t));\r\n\t\telse if (!(target_s instanceof Node)) target_s = Identifier.fromJson(this, target_s);\r\n\t\tif (Array.isArray(value_s)) value_s = value_s.map(v => v instanceof Node ? v : Expr.cast(this, v));\r\n\t\telse if (!(value_s instanceof Node)) value_s = Expr.cast(this, value_s);\r\n\t\tthis.ENTRIES.push([target_s, value_s]);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tentries: this.ENTRIES.map(([target_s, value_s]) => {\r\n\t\t\t\tif (Array.isArray(target_s)) target_s = target_s.map(t => t.toJson());\r\n\t\t\t\telse target_s = target_s.toJson();\r\n\t\t\t\tif (Array.isArray(value_s)) value_s = value_s.map(v => v.toJson());\r\n\t\t\t\telse value_s = value_s.toJson();\r\n\t\t\t\treturn [target_s, value_s];\r\n\t\t\t}),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.entries)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tfor (let [target_s, value_s] of json.entries) {\r\n\t\t\tinstance.set(target_s, value_s);\r\n\t\t};\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\treturn `\\n\\t${ this.ENTRIES.map(([target_s, value_s]) => {\r\n\t\t\tif (Array.isArray(target_s)) target_s = `(${ target_s.join(', ') })`;\r\n\t\t\tif (Array.isArray(value_s)) value_s = `(${ value_s.join(', ') })`;\r\n\t\t\treturn `${ target_s } = ${ value_s }`;\r\n\t\t}).join(',\\n\\t') }`;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst instance = new this(context);\r\n\t\tfor (const assignmentExpr of Lexer.split(expr, [','])) {\r\n\t\t\tconst [target_s, value_s] = Lexer.split(assignmentExpr, ['=']).map(s => s.trim()).filter(s => s);\r\n\t\t\tif (!value_s) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\tif (_wrapped(target_s, '(', ')')) {\r\n\t\t\t\tconst targets = Lexer.split(_unwrap(target_s, '(', ')'), [',']).map(expr => parseCallback(instance, expr.trim(), [Identifier]));\r\n\t\t\t\tif (!_wrapped(value_s, '(', ')')) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\t\tconst values = /^\\((\\s+)?SELECT\\s+/i.test(value_s) \r\n\t\t\t\t\t? parseCallback(instance, value_s) \r\n\t\t\t\t\t: Lexer.split(_unwrap(value_s, '(', ')'), [',']).map(expr => parseCallback(instance, expr.trim()));\r\n\t\t\t\tinstance.set(targets, values);\r\n\t\t\t} else {\r\n\t\t\t\tconst target = parseCallback(instance, target_s);\r\n\t\t\t\tconst value = parseCallback(instance, value_s);\r\n\t\t\t\tinstance.set(target, value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../Lexer.js';\nimport AssignmentList from './AssignmentList.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\n\nexport default class OnConflictClause extends AssignmentList {\n\n    /**\n\t * Instance properties\n\t */\n    WHERE_CLAUSE = null;\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...super.toJson(),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance) return;\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = [];\n        if (this.params.dialect === 'mysql') sql.push('ON DUPLICATE KEY UPDATE');\n        else { sql.push(`ON CONFLICT ${ !this.ENTRIES.length ? 'DO NOTHING' : 'DO UPDATE SET' }`); }\n        sql.push(super.stringify());\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ onConflictMatch, conflictTarget/* TODO */, action, updateSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!onConflictMatch) return;\n        if (/DO\\s+NOTHING/i.test(action)) return new this(context);\n        const [assignmentList, whereSpec] = Lexer.split(updateSpec, ['WHERE'], { ci: true });\n        const instance = super.parse(context, assignmentList, parseCallback);\n        if (whereSpec) instance.where(parseCallback(instance, whereSpec.trim(), [Condition,Assertion]));\n        return instance;\n    }\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ON\\\\s+(?:DUPLICATE\\\\s+KEY|CONFLICT(?:\\\\s+([\\\\s\\\\S]+))?)\\\\s+(UPDATE|DO\\\\s+NOTHING|DO\\\\s+UPDATE\\\\s+SET\\\\s+)';\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport AssignmentList from './AssignmentList.js';\nimport OnConflictClause from './OnConflictClause.js';\nimport Identifier from '../select/Identifier.js';\nimport Select from '../select/Select.js';\nimport Table from '../select/Table.js';\n\nexport default class Insert extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE = null;\n\tCOLUMNS_LIST = [];\n\tVALUES_LIST = [];\n\tSET_CLAUSE = null;\n\tSELECT_CLAUSE = null;\n\tON_CONFLICT_CLAUSE = null;\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.TABLE ? [this.TABLE] : []; }\n\n\t/**\n\t * Builds the statement's TABLE\n\t * \n\t * .into(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tinto(table) { return this.build('TABLE', [table], Table); }\n\n\t/**\n\t * Builds the statement's COLUMNS_LIST\n\t * \n\t * .columns('col1', 'col2');\n\t * \n\t * @return Void\n\t */\n\tcolumns(...columns) { return this.build('COLUMNS_LIST', columns, Identifier); }\n\n\t/**\n\t * Builds the statement's VALUES_LIST\n\t * \n\t * .values(100, 22);\n\t * \n\t * @return Void\n\t */\n\tvalues(...values) { return this.VALUES_LIST.push(values); }\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) { return this.build('SET_CLAUSE', assignments, AssignmentList, 'set'); }\n\n\t/**\n\t * Builds the statement's SELECT_CLAUSE\n\t * \n\t * .select(...);\n\t * \n\t * @return Void\n\t */\n\tselect(query) { return this.build('SELECT_CLAUSE', [query], Select); }\n\n\t/**\n\t * Builds the statement's ON_CONFLICT_CLAUSE\n\t * \n\t * .onConflict(\n\t * \t\tc => c.set('col1', 100),\n\t * \t\tc => c.set('col2', 22)\n\t * \t\tc => c.where(\n\t * \t\t\tx => x.equals(...)\n\t * \t\t)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tonConflict(...onConflictSpecs) { return this.build('ON_CONFLICT_CLAUSE', onConflictSpecs, OnConflictClause); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttable: this.TABLE.toJson(),\n\t\t\tcolumns_list: this.COLUMNS_LIST.map(c => c.toJson()),\n\t\t\tvalues_list: this.VALUES_LIST.map(v => v),\n\t\t\tset_clause: this.SET_CLAUSE?.toJson(),\n\t\t\tselect_clause: this.SELECT_CLAUSE?.toJson(),\n\t\t\ton_conflict_clause: this.ON_CONFLICT_CLAUSE?.toJson(),\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!json?.table) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.into(json.table);\n\t\tif (json.columns_list?.length) instance.columns(...json.columns_list);\n\t\tfor (const values of json.values_list || []) instance.values(...values);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.select_clause) instance.select(json.select_clause);\n\t\tif (json.on_conflict_clause) instance.onConflict(json.on_conflict_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['INSERT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push('INTO', this.TABLE);\n\t\tif (this.SET_CLAUSE) sql.push('SET', this.SET_CLAUSE);\n\t\telse {\n\t\t\tif (this.COLUMNS_LIST.length) sql.push(`(${ this.COLUMNS_LIST.join(', ') })`);\n\t\t\tif (this.SELECT_CLAUSE) sql.push(this.SELECT_CLAUSE);\n\t\t\telse sql.push('VALUES', `\\n\\t(${ this.VALUES_LIST.map(row => row.join(', ')).join(`),\\n\\t(`) })`);\n\t\t}\n\t\tif (this.ON_CONFLICT_CLAUSE) sql.push(this.ON_CONFLICT_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^INSERT(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?(?:\\s+INTO)?([\\s\\S]+)$/i.exec(expr) || [];\n\t\tif (!match ) return;\n\t\tconst $body = this.mySubstitutePlaceholders(context, body.trim());\n\t\tconst { tokens: [ tableSpec, payloadSpec, onConflictSpec ], matches: [insertType, onConflictClause] } = Lexer.lex($body, ['(VALUES|VALUE|SET|SELECT)', 'ON\\\\s+(DUPLICATE\\\\s+KEY|CONFLICT)'], { useRegex:'i' });\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tif (/^SET$/i.test(insertType)) {\n\t\t\t// INSERT ... SET\n\t\t\tinstance.into(parseCallback(instance, tableSpec, [Table]));\n\t\t\tinstance.set(parseCallback(instance, payloadSpec.trim(), [AssignmentList]));\n\t\t} else {\n\t\t\tconst tableColumnSplit = Lexer.split(tableSpec, []);\n\t\t\tinstance.into(parseCallback(instance, tableColumnSplit.shift().trim(), [Table]));\n\t\t\tif (tableColumnSplit.length) {\n\t\t\t\tconst columns = Lexer.split(_unwrap(tableColumnSplit.shift().trim(), '(', ')'), [',']).map(c => parseCallback(instance, c.trim(), [Identifier]));\n\t\t\t\tinstance.columns(...columns);\n\t\t\t}\n\t\t\tif (/^SELECT$/i.test(insertType)) {\n\t\t\t\t// INSERT ... SELECT\n\t\t\t\tinstance.select(parseCallback(instance, `SELECT ${ payloadSpec }`));\n\t\t\t} else {\n\t\t\t\t// INSERT ... VALUES|VALUE\n\t\t\t\tfor (const rowPayload of Lexer.split(payloadSpec, [','])) {\n\t\t\t\t\tconst rowPayloadArray = Lexer.split(_unwrap(rowPayload.trim(), '(', ')'), [',']).map(valueExpr => parseCallback(instance, valueExpr.trim()));\n\t\t\t\t\tinstance.values(...rowPayloadArray);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (onConflictClause) { instance.onConflict(parseCallback(instance, `${ onConflictClause } ${ onConflictSpec }`, [OnConflictClause])); }\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport AssignmentList from '../insert/AssignmentList.js';\nimport JoinClause from '../select/JoinClause.js';\nimport OrderByClause from '../select/OrderByClause.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\nimport Table from '../select/Table.js';\n\nexport default class Update extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE_LIST = [];\n\tJOIN_LIST = [];\n\tSET_CLAUSE = null;\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.TABLE_LIST; }\n\n\t/**\n\t * Builds the statement's TABLE_LIST\n\t * \n\t * .table(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\ttable(...tables) { return this.build('TABLE_LIST', tables, Table); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) { return this.build('SET_CLAUSE', assignments, AssignmentList, 'set'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttable_list: this.TABLE_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\tset_clause: this.SET_CLAUSE?.toJson(),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.table_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.table(...json.table_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['UPDATE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.TABLE_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tsql.push('SET', this.SET_CLAUSE);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^UPDATE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { join:JoinClause, set:'SET', where:'WHERE', orderBy:OrderByClause, limit:'LIMIT' };\n\t\tconst { tokens: [ tableSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// TABLE_LIST\n\t\tfor (const tblExpr of Lexer.split(tableSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\tinstance.table(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (clauseKey === 'set') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [AssignmentList]);\n\t\t\t\tinstance.set(node);\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../Lexer.js';\nimport Identifier from '../select/Identifier.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport JoinClause from '../select/JoinClause.js';\nimport OrderByClause from '../select/OrderByClause.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\nimport Table from '../select/Table.js';\n\n/*\nSyntax: 1 (Both; Order By and Limit: MySQL)\nDELETE FROM somelog WHERE user = 'jcole'\n\tORDER BY timestamp_column LIMIT 1;\n*/\n/*\nSyntax 2: (MySQL)\nDELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n/*\nSyntax 3: (Both)\nDELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n\nexport default class Delete extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tDELETE_LIST = [];\n\tFROM_LIST = [];\n\tUSING_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.USING_LIST.length ? this.USING_LIST : this.FROM_LIST; }\n\n\t/**\n\t * Builds an optional DELETE_LIST (for use with a FROM_LIST) (MySQL-specific)\n\t * \n\t * .delete('t11, 't2');\n\t * \n\t * @returns Void\n\t */\n\tdelete(...identifiers) { return this.build('DELETE_LIST', identifiers, Identifier); }\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * - as either Table objects or Identifiers (in connection with a USING_LIST, in which case \"false\" should be first argument)\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tablesOrIdentifiers) { return this.build('FROM_LIST', tablesOrIdentifiers, [Identifier,Table]); }\n\n\t/**\n\t * Builds the statement's USING_LIST\n\t * \n\t * .using(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tusing(...tables) { return this.build('USING_LIST', tables, Table); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tdelete_list: this.DELETE_LIST.map(t => t.toJson()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJson()),\n\t\t\tusing_list: this.USING_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.from_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json.delete_list?.length) instance.delete(...json.delete_list);\n\t\tinstance.from(...json.from_list);\n\t\tif (json.using_list?.length) instance.using(...json.using_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['DELETE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tif (this.DELETE_LIST.length) sql.push(this.DELETE_LIST.join(', '));\n\t\tsql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.USING_LIST.length) sql.push('USING', this.USING_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^DELETE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, using: { backtest: '^(?!.*\\\\s+JOIN\\\\s+)', test: 'USING' }, join:JoinClause, where:'WHERE', orderBy:OrderByClause, limit:'LIMIT' };\n\t\tconst { tokens: [ maybeTablesSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// MAYBE_TABLES_SPEC (BEFORE A FROM CLAUSE) - MYSQL\n\t\tfor (const tblExpr of Lexer.split(maybeTablesSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Identifier]);\n\t\t\tinstance.delete(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (['from', 'using'].includes(clauseKey)) {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\t// If we have both \"from\" and \"using\" clauses (Syntax 3 above), then \"using\" is the main table references\n\t\t\t\t\tconst asType = clauseKey === 'from' && clauses.some(s => s.toLowerCase() === 'using') ? Identifier : Table;\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [asType]);\n\t\t\t\t\tinstance[clauseKey](node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\n// Statements\nimport CreateTable from './create/CreateTable.js';\nimport CreateDatabase from './create/CreateDatabase.js';\nimport AlterTable from './alter/AlterTable.js';\nimport AlterDatabase from './alter/AlterDatabase.js';\nimport DropTable from './drop/DropTable.js';\nimport DropDatabase from './drop/DropDatabase.js';\nimport Delete from './delete/Delete.js';\nimport Insert from './insert/Insert.js';\nimport Select from './select/Select.js';\n//import Union from './select/Union.js';\nimport Update from './update/Update.js';\n// Expressions\nimport Expr from './select/abstracts/Expr.js';\n\n/**\n * @var object\n */\nexport default [\n\t// Statements\n\tCreateDatabase,\n\tAlterDatabase,\n\tDropDatabase,\n\tCreateTable,\n\tAlterTable,\n\tDropTable,\n\tInsert,\n\tUpdate,\n\tDelete,\n\t//Union,\n\tSelect,\n\t// Expressions\n\t...\n\tExpr.Types,\n]", "\r\nimport grammar from './grammar.js';\r\n\t\t\r\nexport default class Parser {\r\n\r\n\t/**\r\n\t * @property Object\r\n\t */\r\n\tstatic grammar = grammar;\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, grammar, params = {}) {\r\n\t\tif (!expr?.length) return;\r\n\r\n\t\tconst $grammar = grammar?.length ? grammar : this.grammar;\r\n\t\tfor (const Node of $grammar) {\r\n\t\t\tconst node = this.parseOne(context, expr, Node, params);\r\n\t\t\tif (!node) continue;\r\n\t\t\tif (params.log) console.log('.................', expr, '.................>', node.constructor.name);\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (params.assert === false) return;\r\n\t\tthrow new SyntaxError(expr);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parseOne(context, expr, Node, params = {}) {\r\n\t\treturn Node.parse(context, expr, ($context, $expr, $grammar, $params = {}) => {\r\n\t\t\treturn this.parse($context, $expr, $grammar, { ...params, ...$params });\r\n\t\t});\r\n\t}\r\n}", "\nexport default class Savepoint {\n    \n    /**\n     * @constructor\n     */\n    constructor(client, details, direction = 'backward') {\n        Object.defineProperty(this, '$', { value: {\n            client,\n            details,\n            direction,\n        }});\n    }\n\n    /**\n     * @property Driver\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @property String\n     */\n    get id() { return this.$.details.id; }\n\n    /**\n     * @property String\n     */\n    get name_snapshot() { return this.$.details.name_snapshot; }\n\n    /**\n     * @property String\n     */\n    get savepoint_desc() { return this.$.details.savepoint_desc; }\n\n    /**\n     * @property Date\n     */\n    get savepoint_date() { return this.$.details.savepoint_date; }\n\n    /**\n     * @property Date\n     */\n    get rollback_date() { return this.$.details.rollback_date; }\n\n    /**\n     * @property String\n     */\n    get current_name() { return this.$.details.current_name; }\n\n    /**\n     * @property Bool\n     */\n    get id_active() { return 'id_active' in this.$.details ? this.$.details.id_active : undefined }\n\n    /**\n     * @property String\n     */\n    get direction() { return this.$.direction; }\n\n    /**\n     * @returns Object\n     */\n    toJson() { return { ...this.$.details }; }\n\n    /**\n     * @returns Bool\n     */\n    async status() {\n        const currentSavepointInDb = (await this.client.database(this.current_name || this.name_snapshot).savepoint({ direction: this.direction })) || {};\n        if (currentSavepointInDb.id === this.id) {\n            this.$.details.rollback_date = currentSavepointInDb.rollback_date;\n            this.$.details.id_active = currentSavepointInDb.id_active;\n            return { canRollback: true };\n        }\n        return { canRollback: false };\n    }\n\n    /**\n     * Returns tables associated with current savepoint.\n     * \n     * @return Array\n     */\n    async getAssociatedSnapshots() {\n        const OBJ_INFOSCHEMA_DB = this.client.constructor.OBJ_INFOSCHEMA_DB;\n        return this.client.query('select', q => {\n            q.select('*');\n            q.from([OBJ_INFOSCHEMA_DB,'table_savepoints']);\n            q.where( c => c.equals('savepoint_id', q => q.literal(this.id)) );\n        });\n    }\n\n    /**\n     * Method for restoring db schema to an identified savepoint.\n     * \n     * @param Object            params\n     * \n     * @return Object\n     */\n    async rollback(params = {}) {\n        // Validate instance\n        if (!this.current_name && !this.name_snapshot) throw new Error(`Invalid savepoint; null record.`);\n        if (!(await this.status()).canRollback) throw new Error(`Invalid rollback order.`);\n        // Validated\n        const getTableSnapshots = async () => {\n            const tableSnapshots = await this.getAssociatedSnapshots();\n            return tableSnapshots.map(tableSnapshot => ({\n                // Identity\n                name: tableSnapshot.name_snapshot,\n                $name: tableSnapshot.current_name,\n                database: this.current_name,\n                // Lists\n                columns: tableSnapshot.columns_snapshot.map(col => ({\n                    ...col,\n                    ...(this.direction === 'forward' && col.$name ? { name: col.$name, $name: col.name } : {}),\n                })),\n                constraints: tableSnapshot.constraints_snapshot.map(cnst => ({\n                    ...cnst,\n                    ...(this.direction === 'forward' && cnst.$constraintName ? { constraintName: cnst.$constraintName, $constraintName: cnst.constraintName } : {}),\n                })),\n                indexes: tableSnapshot.indexes_snapshot.map(ndx => ({\n                    ...ndx,\n                    ...(this.direction === 'forward' && ndx.$indexName ? { indexName: ndx.$indexName, $indexName: ndx.indexName } : {}),\n                })),\n            }));\n        };\n        const errors = {}, noCreateSavepoint = this.direction === 'forward' || this.id_active;\n        if (!this.name_snapshot) {\n            // We are at db's creation point. Drop database - to non existence.\n            if (params.allowMutateDB) {\n                await this.client.dropDatabase(this.current_name, { cascade: true, noCreateSavepoint });\n            } else { errors.noMutateDB = true; }\n        } else if (!this.current_name) {\n            // We are at db's drop point. Recreate database - back to existence.\n            if (params.allowMutateDB) {\n                await this.client.createDatabase({ name: this.name_snapshot, tables: await getTableSnapshots() }, { noCreateSavepoint });\n            } else { errors.noMutateDB = true; }\n        } else {\n            const tables = await getTableSnapshots();\n            await this.client.alterDatabase({ name: this.current_name, tables: tables.map(tbl => tbl.$name/*if tbl is in db*/).filter(tblName => tblName) }, dbSchemaEdit => {\n                dbSchemaEdit.name = this.name_snapshot;\n                dbSchemaEdit.tables.splice(0);\n                dbSchemaEdit.tables.push(...tables.filter(tbl => tbl.name/*if tbl isn't in db*/));\n            }, { noCreateSavepoint });\n        }\n        if (Object.keys(errors).length) return false;\n        // Update records now\n        const OBJ_INFOSCHEMA_DB = this.client.constructor.OBJ_INFOSCHEMA_DB;\n        const dbName = [OBJ_INFOSCHEMA_DB,'database_savepoints'];\n        if (this.direction === 'forward') {\n            this.$.details.rollback_date = null;\n            await this.client.query('update', q => {\n                q.table(dbName);\n                q.set('rollback_date', null);\n                q.where( x => x.equals('current_name', y => y.literal(this.name_snapshot)), x => x.isNotNull('rollback_date') );\n            });\n        } else {\n            this.$.details.rollback_date = new Date;\n            await this.client.query('update', q => {\n                q.table(dbName);\n                q.set('rollback_date', x => x.call('now'));\n                q.where( x => x.or(\n                    y => y.equals('id', z => z.literal(this.id)),\n                    y => y.and( z => z.equals('name_snapshot', z => z.literal(this.current_name) ), z => z.isNull('rollback_date') )\n                ) );\n            });\n        }\n        return true;\n    }\n}", "\nimport { _isObject } from '@webqit/util/js/index.js';\nimport CreateDatabase from '../../query/create/CreateDatabase.js';\nimport AlterDatabase from '../../query/alter/AlterDatabase.js';\nimport DropDatabase from '../../query/drop/DropDatabase.js';\nimport CreateTable from '../../query/create/CreateTable.js';\nimport AlterTable from '../../query/alter/AlterTable.js';\nimport DropTable from '../../query/drop/DropTable.js';\nimport Select from '../../query/select/Select.js';\nimport Insert from '../../query/insert/Insert.js';\nimport Update from '../../query/update/Update.js';\nimport Delete from '../../query/delete/Delete.js';\nimport Parser from '../../query/Parser.js';\nimport Savepoint from './Savepoint.js';\n\nconst objInternals = {\n    infoSchemaDB: 'obj_information_schema',\n    instances: new Set,\n    schemas: new Map,\n};\nexport default class AbstractClient {\n    \n    /**\n     * @constructor\n     */\n    constructor(driver, params = {}) {\n        if (!this.constructor.kind) throw new Error(`Subclasses of Objective SQL Client must implement a static \"kind\" property.`);\n        if (!objInternals.schemas.has(this.constructor.kind)) { objInternals.schemas.set(this.constructor.kind, new Map); }\n        objInternals.instances.add(this);\n        Object.defineProperty(this, '$', { value: {\n            driver,\n            schemas: objInternals.schemas.get(this.constructor.kind),\n            params, \n        }});\n    }\n\n    /**\n     * @property String\n     */\n    static get OBJ_INFOSCHEMA_DB() { return objInternals.infoSchemaDB; }\n\n    /**\n     * @property Driver\n     */\n    get driver() { return this.$.driver; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n    /**\n     * Sets or returns default database.\n     * \n     * @param Array            args\n     * \n     * @return String\n     */\n    async searchPath(...args) { return this.searchPathCallback(() => {}, ...arguments); }\n\n    /**\n     * Returns internal schemas object.\n     * \n     * @return Map\n     */\n    async schemas() {\n        if (!this.$.schemas.size) await this.databases();\n        return this.$.schemas;\n    }\n\n    /**\n     * Returns list of databases.\n     * \n     * @param Object            params\n     * \n     * @return Array\n     */\n    async databases(params = {}) { return this.databasesCallback(() => ([]), ...arguments); }\n\n    /**\n     * Creates a database.\n     * \n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async createDatabase(dbName, params = {}) { return this.createDatabaseCallback(...arguments); }\n\n    /**\n     * Forwards to: createDatabase().\n     * @with: params.ifNotExixts = true\n     */\n    async createDatabaseIfNotExists(dbName, params = {}) { return this.createDatabase(dbName,  { ...params, ifNotExists: true }); }\n\n    /**\n     * Returns a database instance.\n     * \n     * @param String            dbName\n     * @param Function          editCallback\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async alterDatabase(dbName, editCallback, params = {}) { return this.alterDatabaseCallback(...arguments); }\n\n    /**\n     * Drops a database.\n     * \n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async dropDatabase(dbName, params = {}) { return this.dropDatabaseCallback(...arguments); }\n\n    /**\n     * @forwardsTo: dropDatabase().\n     * @with: params.ifExixts = true\n     */\n    async dropDatabaseIfExists(dbName, params = {}) { return this.dropDatabase(dbName, { ...params, ifNotExists: true }); }\n\n    /**\n     * Returns a database instance.\n     * \n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Database\n     */\n    database(dbName, params = {}) {\n        const schemasMap = this.$.schemas;\n        if (!schemasMap.has(dbName)) {\n            schemasMap.set(dbName, {\n                name: dbName,\n                tables: new Map,\n                hiddenAs: 'inmemory',\n            });\n        }\n        return new this.constructor.Database(this, ...arguments);\n    }\n\n    /**\n     * BASE LOGICS\n     */\n\n    /**\n     * Base logic for the searchPath() method.\n     * \n     * @param Function          callback\n     * @param Array             path\n     * \n     * @return String\n     */\n    async searchPathCallback(callback, ...path) {\n        if (path.length) {\n            const returnValue = await callback(path);\n            this.$.searchPath = path;\n            return returnValue;\n        }\n        if (!this.$.searchPath) { this.$.searchPath = await callback(); }\n        return this.$.searchPath;\n    }\n\n    /**\n     * Base logic for the searchPath() method.\n     * \n     * @param String          tblName\n     * \n     * @return String\n     */\n    async getBasename(tblName) {\n        const searchPath = await this.searchPath();\n        return searchPath.reduce(async (prev, dbName) => (await prev) || (await this.database(dbName).tables({ name: tblName })).length ? dbName : null, null);\n    }\n\n    /**\n     * Base logic for the databases() method.\n     * \n     * @param Function          callback\n     * @param Object            filter\n     * @param Array             standardExclusions\n     * \n     * @return Array\n     */\n    async databasesCallback(callback, filter = {}, standardExclusions = []) {\n        const schemasMap = this.$.schemas;\n        if (!schemasMap._touched || filter.force) {\n            schemasMap._touched = true;\n            for (let db of await callback()) {\n                if (typeof db === 'string') { db = { name: db }; }\n                if (schemasMap.has(db.name)) {\n                    delete schemasMap.get(db.name).hiddenAs;\n                } else { schemasMap.set(db.name, { ...db, tables: new Map }); }\n            }\n        }\n        let dbList = [...schemasMap.values()].filter(db => !db.hiddenAs).map(db => db.name);\n        if (filter.name) {\n            dbList = dbList.filter(dbName => dbName === filter.name);\n        } else if (!filter.includeStandardExclusions) {\n            const OBJ_INFOSCHEMA_DB = this.constructor.OBJ_INFOSCHEMA_DB;\n            const standardExclusionsRe = new RegExp(`^${ standardExclusions.concat(OBJ_INFOSCHEMA_DB).join('|') }$`, 'i');\n            dbList = dbList.filter(dbName => !standardExclusionsRe.test(dbName));\n        }\n        return dbList;\n    }\n\n    /**\n     * Base logic for describeTable()\n     * \n     * @param Function          callback\n     * @param String|Object|CreateDatabase     dbSchema\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async createDatabaseCallback(callback, dbSchema, params = {}) {\n        let dbCreateInstance;\n        if (dbSchema instanceof CreateDatabase) {\n            dbCreateInstance = dbSchema;\n            dbSchema = dbCreateInstance.toJson();\n        } else {\n            if (typeof dbSchema === 'string') { dbSchema = { name: dbSchema }; }\n            if (typeof dbSchema !== 'object' || !dbSchema.name) throw new Error(`Invalid argument#1 to createDatabase().`);\n            // First we validate operation\n            const dbFound = (await this.databases(dbSchema))[0];\n            if (dbFound) {\n                if (params.ifNotExists) return;\n                throw new Error(`Database ${ dbSchema.name } already exists.`);\n            }\n            // Then forward the operation for execution\n            dbCreateInstance = CreateDatabase.fromJson(this/*IMPORTANT: not db API*/, dbSchema);\n            if (params.ifNotExists) dbCreateInstance.withFlag('IF_NOT_EXISTS');\n        }\n        // ------\n        // Must be before db changes below\n        const dbApi = this.database(dbSchema.name, params);\n        const schemasMap = await this.schemas(), tablesSavepoints = new Set;\n        // DB changes now\n        let onAfterCreateCalled;\n        const onAfterCreate = async () => {\n            onAfterCreateCalled = true;\n            delete schemasMap.get(dbSchema.name).hiddenAs; // This does really exist now\n            schemasMap.get(dbSchema.name).schemaEdit = { get tablesSavepoints() { return tablesSavepoints; } };\n            for (const tblSchema of dbSchema.tables || []) {\n                await dbApi.createTable(tblSchema, params);\n            }\n            delete schemasMap.get(dbSchema.name).schemaEdit;\n        };\n        await callback(dbCreateInstance, onAfterCreate, params);\n        // AFTER WE NOW EXISTS\n        if (!onAfterCreateCalled) await onAfterCreate();\n        // Create savepoint?\n        let savepointCreation = true;\n        if (params.noCreateSavepoint || (new RegExp(`^${ this.constructor.OBJ_INFOSCHEMA_DB }$`)).test(dbSchema.name)) {\n            savepointCreation = false;\n        }\n        if (savepointCreation) {\n            await this.createSavepoint({\n                savepoint_desc: params.savepointDesc || 'Database create',\n                // Current state\n                name_snapshot: null, // How we know created\n                // New state\n                current_name: dbSchema.name,\n            }, tablesSavepoints);\n        }\n        return dbApi;\n    }\n\n    /**\n     * Base logic for alterDatabase()\n     * \n     * @param Function          callback\n     * @param String|Object|AlterDatabase     dbAlterRequest\n     * @param Function          editCallback\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async alterDatabaseCallback(callback, dbAlterRequest, editCallback, params = {}) {\n        const schemasMap = await this.schemas(), tablesSavepoints = new Set;\n        let dbAlterInstance, dbName, dbSchema;\n        let onAfterAfterCalled, onAfterAlter = () => {};\n        if (dbAlterRequest instanceof AlterDatabase) {\n            // Remap arguments\n            dbAlterInstance = dbAlterRequest;\n            dbName = dbAlterInstance.NAME;\n            params = editCallback || {};\n            // Create savepount data\n            dbSchema = schemasMap.get(dbName);\n        } else if (typeof editCallback === 'function') {\n            let tablesAlterRequest = [];\n            if (typeof dbAlterRequest === 'object' && dbAlterRequest) {\n                if (Array.isArray(dbAlterRequest.tables)) { tablesAlterRequest = dbAlterRequest.tables; }\n                dbName = dbAlterRequest.name;\n            } else { dbName = dbAlterRequest; }\n            if (typeof dbName !== 'string') throw new Error(`Invalid argument#1 to alterDatabase().`);\n            // First we validate operation\n            const dbFound = (await this.databases({ name: dbName }))[0];\n            if (!dbFound) {\n                if (params.ifExists) return;\n                throw new Error(`Database ${ dbName } does not exist.`);\n            }\n            // Singleton DB schema\n            dbSchema = schemasMap.get(dbName);\n            // For recursive operations\n            if (dbSchema.schemaEdit) return await editCallback(dbSchema.schemaEdit);\n            // On to snapshots; before the database changes below\n            const dbApi = this.database(dbName, params);\n            // On to editing work; but first load all necessary table schemas into memory\n            const dbSchemaEdit = CreateDatabase.cloneJson(dbSchema);\n            const tableSchemas = await dbApi.describeTable(tablesAlterRequest, params);\n            Object.defineProperty(dbSchemaEdit, 'tables', { value: tableSchemas.map(tableSchema => CreateTable.cloneJson(tableSchema)) });\n            Object.defineProperties(dbSchemaEdit.tables, {\n\t\t\t\tget: { value: name => dbSchemaEdit.tables.find(x => x.name === name), configurable: true },\n\t\t\t\thas: { value: name => dbSchemaEdit.tables.get(name) ? true : false, configurable: true },\n\t\t\t\tdelete: { value: name => dbSchemaEdit.tables.splice(dbSchemaEdit.tables.findIndex(x => x.name === name), 1), configurable: true },\n\t\t\t});\n            Object.defineProperty(dbSchemaEdit, 'tablesSavepoints', { get() { return tablesSavepoints; } });\n            // Call for editing\n            dbSchema.schemaEdit = dbSchemaEdit;\n            await editCallback(dbSchemaEdit);\n            // Diff into a AlterDatabase instance\n            dbAlterInstance = AlterDatabase.fromDiffing(this/*IMPORTANT: not db API*/, dbSchema, dbSchemaEdit);\n            // Handle tableSchema edits\n            onAfterAlter = async ($dbName = dbName) => {\n                onAfterAfterCalled = true;\n                const tableDiffs = AlterTable.fromDiffing2d(dbApi/*IMPORTANT: not client API*/, tableSchemas, dbSchemaEdit.tables);\n                for (const diff of tableDiffs) {\n                    if (diff.type === 'DROP') { await dbApi.dropTable(diff.argument, params); }\n                    if (diff.type === 'ADD') { await dbApi.createTable(diff.argument, params); }\n                    if (diff.type === 'ALTER') { await dbApi.alterTable(diff.argument, params); }\n                }\n                delete dbSchema.schemaEdit; // Cleanup\n            };\n        } else {\n            throw new Error(`Alter database \"${ dbName }\" called without a valid callback function.`);\n        }\n        // ------\n        // DB changes now\n        await callback(dbAlterInstance, onAfterAlter, params);\n        const newDbName = dbAlterInstance.ACTIONS.find(action => action.TYPE === 'RENAME' && !action.REFERENCE)?.ARGUMENT;\n        if (newDbName) {\n            // Modify original schema to immediately reflect the db changes\n            dbSchema.name = newDbName;\n            schemasMap.delete(dbName);\n            schemasMap.set(dbSchema.name, dbSchema);\n        }\n        // ------\n        // AFTER WE NOW Executed ALTER\n        if (!onAfterAfterCalled) await onAfterAlter(newDbName || dbName);\n        // ------\n        // Create savepoint\n        let savepoint, savepointCreation = dbAlterInstance.ACTIONS.length || tablesSavepoints.size;\n        if (params.noCreateSavepoint || (new RegExp(`^${ this.constructor.OBJ_INFOSCHEMA_DB }$`)).test(dbName)) {\n            savepointCreation = false;\n        }\n        if (savepointCreation) {\n            savepoint = await this.createSavepoint({\n                savepoint_desc: params.savepointDesc || 'Database alter',\n                // Current state\n                name_snapshot: dbName, // Old name\n                // New state\n                current_name: newDbName || dbName,\n            }, tablesSavepoints);\n        }\n        // ------\n        // Done\n        return savepoint;\n    }\n\n    /**\n     * Base logic for dropDatabase()\n     * \n     * @param Function          callback\n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async dropDatabaseCallback(callback, dbName, params = {}) {\n        let dbDropInstance;\n        if (dbName instanceof DropDatabase) {\n            dbDropInstance = dbName;\n            dbName = dbDropInstance.NAME;\n        } else {\n            // First we validate operation\n            const dbFound = (await this.databases({ name: dbName }))[0];\n            if (!dbFound) {\n                if (params.ifExists) return;\n                throw new Error(`Database ${ dbName } does not exist.`);\n            }\n            // Then forward the operation for execution\n            dbDropInstance = new DropDatabase(this/*IMPORTANT: not db API*/, dbName);\n            if (params.ifExists) dbDropInstance.withFlag('IF_EXISTS');\n            if (params.cascade) dbDropInstance.withFlag('CASCADE');\n        }\n        const schemasMap = await this.schemas();\n        const dbSchema = schemasMap.get(dbName);\n        if (dbSchema.schemaEdit) throw new Error(`Cannot delete database when already in edit mode.`);\n        // -----------------\n        // Must be before db changes below\n        let savepointCreation = true, tablesSavepoints;\n        if (params.noCreateSavepoint || (new RegExp(`^${ this.constructor.OBJ_INFOSCHEMA_DB }$`)).test(dbSchema.name)) {\n            savepointCreation = false;\n        }\n        if (savepointCreation) {\n            const dbApi = this.database(dbName, params);\n            tablesSavepoints = new Set((await dbApi.describeTable('*')).map(tblSchema => ({\n                // Snapshot\n                name_snapshot: tblSchema.name,\n                columns_snapshot: JSON.stringify(tblSchema.columns),\n                constraints_snapshot: JSON.stringify(tblSchema.constraints),\n                indexes_snapshot: JSON.stringify(tblSchema.indexes),\n                // New state\n                current_name: null, // How we know deleted\n            })));\n        }\n        // -----------------\n        // DB changes now\n        await callback(dbDropInstance, params);\n        // -----------------\n        // Then update records\n        dbSchema.hiddenAs = 'dropped';\n        //dbSchema.tables.clear();\n        for (const [ , tblSchema ] of dbSchema.tables) { tblSchema.hiddenAs = 'dropped'; }\n        // -----------------\n        // Main savepoints\n        if (savepointCreation) {\n            return this.createSavepoint({\n                savepoint_desc: params.savepointDesc || 'Database drop',\n                // Current state\n                name_snapshot: dbSchema.name,\n                // New state\n                current_name: null, // How we know deleted\n            }, tablesSavepoints);\n        }\n    }\n\n    /**\n     * Base logic for dropDatabase()\n     * \n     * @param Function                  callback\n     * @param String|Object|Function    ...query\n     * \n     * @return Object\n     */\n    async queryCallback(callback, ...args) {\n        const Types = [ Insert, Update, Delete, Select, DropDatabase, DropTable, CreateDatabase, CreateTable, AlterDatabase, AlterTable ];\n        const params = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n        const exec = async instance => {\n            if (instance instanceof CreateDatabase) return await this.createDatabase(instance, params);\n            if (instance instanceof AlterDatabase) return await this.alterDatabase(instance, params);\n            if (instance instanceof DropDatabase) return await this.dropDatabase(instance, params);\n            let basename = instance.BASENAME;\n            if (!basename) {\n                const searchPath = await this.searchPath();\n                basename = searchPath.find(s => !s.startsWith('$')) || searchPath[0];\n            }\n            if (instance instanceof CreateTable) return await this.database(basename).createTable(instance, params);\n            if (instance instanceof AlterTable) return await this.database(basename).alterTable(instance, params);\n            if (instance instanceof DropTable) return await this.database(basename).dropTable(instance, params);\n            // For Insert, Update, Delete, Select queries...\n            return await callback(instance, params);\n        };\n        if (typeof args[0] === 'string' && typeof args[1] === 'function') {\n            const $queryType = args.shift(), queryType = $queryType.toLowerCase().replace(/^\\w|_./g, m => m.toUpperCase().replace('_', ''));\n            const Type = Types.find(Type => Type.name === queryType);\n            if (!Type) throw new Error(`Unknown query type: ${ $queryType }.`);\n            const instance = new Type(this);\n            args.forEach((arg, i) => {\n                if (typeof arg !== 'function') throw new Error(`Invalid argument at #${ i }.`);\n                arg(instance);\n            });\n            return await exec(instance);\n        }\n        if (args.length > 1) throw new Error(`Invalid argument count.`);\n        if (typeof args[0] === 'object' && args[0]) {\n            const instance = Types.reduce((prev, Type) => prev || Type.fromJson(this, args[0]), null);\n            if (instance) return await exec(instance);\n        }\n        if (typeof args[0] === 'string') {\n            const instance = Parser.parse(this, args[0]);\n            return await exec(instance);\n        } \n        throw new Error(`Invalid arguments.`);\n    }\n\n    /**\n     * Method for saving snapshots to internal OBJ_INFOSCHEMA db.\n     * \n     * @param Object            entry\n     * @param Set               tblEntires\n     * \n     * @return Object\n     */\n    async createSavepoint(entry, tblEntries = new Set) {\n        // Commit to DB\n        const OBJ_INFOSCHEMA_DB = this.constructor.OBJ_INFOSCHEMA_DB;\n        const infoSchemaDB = this.database(OBJ_INFOSCHEMA_DB);\n        if (!(await this.databases({ name: OBJ_INFOSCHEMA_DB }))[0]) {\n            await this.createDatabase(OBJ_INFOSCHEMA_DB);\n            await infoSchemaDB.createTable({\n                name: 'database_savepoints',\n                columns: [\n                    { name: 'id', type: 'uuid', primaryKey: true, default: { expr: 'gen_random_uuid()' } },\n                    { name: 'name_snapshot', type: 'varchar' },\n                    { name: 'savepoint_desc', type: 'varchar' },\n                    { name: 'savepoint_date', type: 'timestamp' },\n                    { name: 'rollback_date', type: 'timestamp' },\n                    { name: 'current_name', type: 'varchar' },\n                ],\n            });\n            await infoSchemaDB.createTable({\n                name: 'table_savepoints',\n                columns: [\n                    { name: 'savepoint_id', type: 'uuid', references: { table: 'database_savepoints', columns: ['id'], deleteRule: 'cascade' } },\n                    { name: 'name_snapshot', type: 'varchar' },\n                    { name: 'columns_snapshot', type: 'json' },\n                    { name: 'constraints_snapshot', type: 'json' },\n                    { name: 'indexes_snapshot', type: 'json' },\n                    { name: 'current_name', type: 'varchar' },\n                ],\n            });\n        }\n        // ------------------\n        // Resolve forward histories before creating new one\n        const dbName = [OBJ_INFOSCHEMA_DB,'database_savepoints'];\n        let where = x => x.in( y => y.literal(entry.name_snapshot || entry.current_name), ['active','name_snapshot'], ['active','current_name']);\n        while(where) {\n            const rolledbackSavepoints = await this.query('select', q => {\n                q.select(['active','id'], x => x.name(['following','id']).as('id_following'));\n                q.from(dbName).as('active');\n                q.leftJoin(dbName).as('following').on( x => x.equals(['following','name_snapshot'], ['active','current_name']) );\n                q.where( where );\n                q.where( x => x.isNotNull(['active','rollback_date']) );\n                q.orderBy(['active','savepoint_date']).withFlag('ASC');\n                q.limit(1);\n            });\n            if (rolledbackSavepoints[0]?.id) {\n                await this.query('delete', q => {\n                    q.from(dbName);\n                    q.where( x => x.equals('id', y => y.literal(rolledbackSavepoints[0].id) ) );\n                });\n            }\n            if (rolledbackSavepoints[0]?.id_following) { where = x => x.equals(['active','id'], y => y.literal(rolledbackSavepoints[0].id_following) ); }\n            else { where = null; }\n        }\n        // ------------------\n        // Create savepoint\n        const insertResult = await infoSchemaDB.table('database_savepoints').add({ ...entry, savepoint_date: 'now()' });\n        const savepoint = new Savepoint(this, { ...insertResult.toJson(), id_active: null });\n        if (tblEntries.size) {\n            tblEntries = [ ...tblEntries ].map(tblEntry => ({ ...tblEntry, savepoint_id: savepoint.id }));\n            await infoSchemaDB.table('table_savepoints').addAll(tblEntries);\n        }\n        return savepoint;\n    }\n}", "\n/**\n * Tells if ALL items pass the test.\n *\n * @param array \tarr\n * @param function \tcallback\n *\n * @return bool\n */\nexport default function(arr, callback) {\n\treturn arr.reduce((prevTest, itm, i) => prevTest && callback(itm, i), true);\n};\n", "\n/**\n * Tells if ANY items pass the test.\n *\n * @param array \tarr\n * @param function \tcallback\n *\n * @return bool\n */\nexport default function(arr, callback) {\n\treturn arr.reduce((prevTest, itm, i) => prevTest || callback(itm, i), false);\n};\n", "\n/**\n * Returns a list of unique items.\n *\n * @param array\t \t\t\t\tarr\n *\t *\n * @return array\n */\nexport default function(arr) {\n\tconst distinct = (value, index, self) => {\n\t\treturn self.indexOf(value) === index;\n\t};\n\treturn arr.filter(distinct);\n};\n", "\nimport CreateTable from '../../query/create/CreateTable.js';\nimport AlterTable from '../../query/alter/AlterTable.js';\nimport DropTable from '../../query/drop/DropTable.js';\nimport Savepoint from './Savepoint.js';\n\nexport default class AbstractDatabase {\n\t\n\t/**\n\t * @constructor\n\t */\n\tconstructor(client, dbName, params = {}) {\n        this.$ = {\n            client,\n            schema: client.$.schemas.get(dbName),\n            params\n        };\n\t}\n\n    /**\n     * @property Client\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.schema.name; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n    /**\n     * @property Bool\n     */\n    get dropped() { return this.$.schema.hiddenAs === 'dropped'; }\n\t\n    /**\n     * Returns list of tables.\n     * \n     * @param Object            params\n     * \n     * @return Array\n     */\n    async tables(params = {}) { return this.tablesCallback(() => ([]), ...arguments); }\n\n    /**\n     * Describes table.\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async describeTable(tblName, params = {}) { return this.describeTableCallback((tblName, params) => {}, ...arguments); }\n\n    /**\n     * Creates table.\n     * \n     * @param String            tblName\n     * @param Object            tblSchema\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async createTable(tblName, tblSchema = {}, params = {}) { return this.createTableCallback(() => ([]), ...arguments); }\n\n    /**\n     * Forwards to: createTable().\n     * @with: params.ifNotExixts = true\n     */\n    async createTableIfNotExists(tblName, tblSchema = {}, params = {}) { return this.createTable(tblName, tblSchema, { ...params, ifNotExists: true }); }\n\n    /**\n     * Alters table.\n     * \n     * @param String            tblName\n     * @param Object            tblSchema\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async alterTable(tblName, tblSchema, params = {}) { return this.alterTableCallback((tblName, tblSchema, params) => {}, ...arguments); }\n\n    /**\n     * Drops table.\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async dropTable(tblName, params = {}) { return this.dropTableCallback((tblName, params) => {}, ...arguments); }\n\n    /**\n     * Forwards to: dropTable().\n     * @with: params.ifExixts = true\n     */\n    async dropTableIfExists(tblName, params = {}) { return this.dropTable(tblName, { ...params, ifNotExists: true }); }\n\n    /**\n     * Returns a table instance.\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    table(tblName, params = {}) {\n        const tablesMap = this.$.schema.tables;\n        if (!tablesMap.has(tblName)) {\n            tablesMap.set(tblName, {\n                name: tblName,\n                hiddenAs: 'inmemory',\n            });\n        }\n        return new this.constructor.Table(this, ...arguments);\n    }\n\n    /**\n\t * Returns the database's current savepoint.\n\t * \n     * @param Object params\n\t * \n\t * @returns Object\n     */\n    async savepoint(params = {}) {\n        const OBJ_INFOSCHEMA_DB = this.client.constructor.OBJ_INFOSCHEMA_DB;\n        if ((await this.client.databases({ name: OBJ_INFOSCHEMA_DB }))[0]) {\n            const forward = params.direction === 'forward';\n            const dbName = [OBJ_INFOSCHEMA_DB,'database_savepoints'];\n            const result = await this.client.query('select', q => {\n                q.from(dbName).as(forward ? 'active' : 'preceding');\n                if (forward) {\n                    q.select( ['following','*'], f => f.name(['active','id']).as('id_active') );\n                    q.rightJoin(dbName).as('following').on( x => x.equals(['following','name_snapshot'], ['active','current_name']) );\n                    q.where( x => x.in( x => x.literal(this.name), ['active','name_snapshot'], ['active','current_name'] ), x => x.isNotNull(['active','rollback_date']) );\n                    q.orderBy(['active','savepoint_date']).withFlag('ASC');\n                } else {\n                    q.select( ['preceding','*'], f => f.name(['active','id']).as('id_active') );\n                    q.leftJoin(dbName).as('active').on( x => x.equals(['active','name_snapshot'], ['preceding','current_name']) );\n                    q.where( x => x.in( x => x.literal(this.name), ['preceding','name_snapshot'], ['preceding','current_name'] ), x => x.isNull(['preceding','rollback_date']) );\n                    q.orderBy(['preceding','savepoint_date']).withFlag('DESC');\n                }\n                q.limit(1);\n            });\n            return result[0] && new Savepoint(this.client, result[0], params.direction);\n        }\n    }\n\n    /**\n     * Base logic for the tables() method.\n     * \n     * @param Function callback\n     * @param Object filter\n     * \n     * @return Array\n     */\n    async tablesCallback(callback, filter = {}) {\n        const tablesMap = this.$.schema.tables;\n        if (!tablesMap._touched || filter.force) {\n            tablesMap._touched = true;\n            for (let tbl of await callback()) {\n                if (typeof tbl === 'string') { tbl = { name: tbl }; }\n                if (tablesMap.has(tbl.name)) {\n                    delete tablesMap.get(tbl.name).hiddenAs;\n                } else { tablesMap.set(tbl.name, { ...tbl }); }\n            }\n        }\n        let tblList = [...tablesMap.values()].filter(tbl => !tbl.hiddenAs).map(tbl => tbl.name);\n        if (filter.name) { tblList = tblList.filter(tblName => tblName === filter.name); }\n        return tblList;\n    }\n\n    /**\n     * Base logic for describeTable()\n     * \n     * @param Function          callback\n     * @param String|Array      tblName_s\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async describeTableCallback(callback, tblName_s, params = {}) {\n        const isMultiple = Array.isArray(tblName_s);\n        const tblNames = isMultiple ? tblName_s : [tblName_s];\n        const isAll = tblNames.length === 1 && tblNames[0] === '*';\n        if (this.dropped) return isAll || isMultiple ? [] : undefined;\n        const tablesMap = this.$.schema.tables;\n        const requestList = isAll ? ['*'] : tblNames;//TODO.filter(tblName => !tablesMap.get(tblName)?.columns && !tablesMap.get(tblName)?.hiddenAs);\n        if (requestList.length) {\n            const tblSchemas = await callback(requestList, params); // Describe should always add constraint names\n            for (const tblSchema of tblSchemas) {\n                if (tablesMap.has(tblSchema.name)) {\n                    delete tablesMap.get(tblSchema.name).hiddenAs;\n                    Object.assign(tablesMap.get(tblSchema.name), tblSchema);\n                } else { tablesMap.set(tblSchema.name, tblSchema); }\n            }\n        }\n        if (isAll) return [...tablesMap.values()].filter(tbl => !tbl.hiddenAs);\n        if (isMultiple) return tblNames.map(tblName => tablesMap.get(tblName)).filter(tbl => !tbl.hiddenAs);\n        return !tablesMap.get(tblName_s)?.hiddenAs ? tablesMap.get(tblName_s) : undefined;\n    }\n\n    /**\n     * Base logic for createTable()\n     * \n     * @param Function          callback\n     * @param Object            tblSchema\n     * @param Object            params\n     */\n    async createTableCallback(callback, tblSchema, params = {}) {\n        await this.client.alterDatabase(this.name, async dbSchemaEdit => {\n            let tblCreateRequest;\n            if (tblSchema instanceof CreateTable) {\n                tblCreateRequest = tblSchema;\n                tblSchema = tblCreateRequest.toJson();\n            } else {\n                const tblFound = (await this.tables({ name: tblSchema.name }))[0];\n                if (tblFound) {\n                    if (params.ifNotExists) return;\n                    throw new Error(`Table ${ tblSchema.name } already exists.`);\n                }\n                if (tblSchema.basename && tblSchema.basename !== this.name) {\n                    throw new Error(`A table schema of database ${ tblSchema.basename } is being passed to ${ this.name }.`);\n                }\n                tblCreateRequest = CreateTable.fromJson(this.client/*IMPORTANT: client API*/, tblSchema);\n                if (params.ifNotExists) tblCreateRequest.withFlag('IF_NOT_EXISTS');\n            }\n            // Important:\n            tblCreateRequest.name([this.name,tblCreateRequest.NAME]);\n            // Create savepoint\n            dbSchemaEdit.tablesSavepoints.add({\n                // Snapshot\n                name_snapshot: null,\n                columns_snapshot: JSON.stringify([]),\n                constraints_snapshot: JSON.stringify([]),\n                indexes_snapshot: JSON.stringify([]),\n                // New state\n                current_name: tblSchema.name\n            });\n            await callback(tblCreateRequest, params);\n            // Update original objects in place\n            const tablesMap = this.$.schema.tables;\n            if (tablesMap.get(tblSchema.name)?.hiddenAs) {\n                delete tablesMap.get(tblSchema.name).hiddenAs; // This does really exist now\n            } else {\n                tablesMap.set(tblSchema.name, { name: tblSchema.name });\n            }\n        }, { savepointDesc: 'Table create', ...params });\n        return this.table(tblSchema.name, params);\n    }\n\n    /**\n     * Base logic for alterTable()\n     * \n     * @param Function          callback\n     * @param String            tblName\n     * @param Function          editCallback\n     * @param Object            params\n     */\n    async alterTableCallback(callback, tblName, editCallback, params = {}) {\n        return this.client.alterDatabase(this.name, async dbSchemaEdit => {\n            let tblAlterRequest, tblSchema;\n            if (tblName instanceof AlterTable) {\n                // Remap arguments\n                tblAlterRequest = tblName;\n                tblName = tblAlterRequest.NAME;\n                params = editCallback || {};\n                // Create savepount data\n                tblSchema = tblAlterRequest.JSON_BEFORE?.columns ? tblAlterRequest.JSON_BEFORE : await this.describeTable(tblName, params);\n            } else if (typeof editCallback === 'function') {\n                // First we validate operation\n                const tblFound = (await this.tables({ name: tblName }))[0];\n                if (!tblFound) {\n                    if (params.ifExists) return;\n                    throw new Error(`Table ${ tblName } does not exist.`);\n                }\n                // Singleton TBL schema\n                tblSchema = await this.describeTable(tblName, params);\n                // For recursive edits\n                if (tblSchema.schemaEdit) return await editCallback(tblSchema.schemaEdit);\n                // Fresh edit\n                tblSchema.schemaEdit = CreateTable.cloneJson(tblSchema); // One global object\n                // ------\n                // Call for modification\n                await editCallback(tblSchema.schemaEdit);\n                // Diff into a AlterTable instance\n                tblAlterRequest = AlterTable.fromDiffing(this.client/*IMPORTANT: client API*/, tblSchema, tblSchema.schemaEdit);\n                if (params.ifExists) tblAlterRequest.withFlag('IF_EXISTS');\n                delete tblSchema.schemaEdit;\n            } else {\n                throw new Error(`Alter table \"${ tblName }\" called with invalid arguments.`);\n            }\n            // Important:\n            tblAlterRequest.name([this.name,tblAlterRequest.NAME]);\n            const newTblName = tblAlterRequest.ACTIONS.find(action => action.TYPE === 'RENAME' && !action.REFERENCE)?.ARGUMENT;\n            const newTblLocation = tblAlterRequest.ACTIONS.find(action => action.TYPE === 'RELOCATE')?.ARGUMENT;\n            if (tblAlterRequest.ACTIONS.length) {\n                // Create savepoint\n                for (const action of tblAlterRequest.ACTIONS) {\n                    if (action.TYPE === 'RENAME' && action.REFERENCE) {\n                        const listName = action.REFERENCE.type === 'CONSTRAINT' ? 'constraints' : (action.REFERENCE.type === 'INDEX' ? 'indexes' : 'columns');\n                        const nameKey = listName === 'constraints' ? 'constraintName' : (listName === 'indexes' ? 'indexName' : 'name');\n                        tblSchema[listName].find(obj => obj[nameKey] === action.REFERENCE.name)[`$${ nameKey }`] = action.ARGUMENT;\n                    }\n                }\n                dbSchemaEdit.tablesSavepoints.add({\n                    // Snapshot\n                    name_snapshot: tblSchema.name,\n                    columns_snapshot: JSON.stringify(tblSchema.columns),\n                    constraints_snapshot: JSON.stringify(tblSchema.constraints || []),\n                    indexes_snapshot: JSON.stringify(tblSchema.indexes || []),\n                    // New state\n                    current_name: newTblName || tblName,\n                });\n                // Effect changes\n                await callback(tblAlterRequest, params);\n            }\n            // Update original schema object in place\n            // This lets describeTable() know to lookup remote db\n            const tablesMap = this.$.schema.tables;\n            delete tablesMap.get(tblName).columns;\n            if (newTblName) { tblSchema.name = newTblName; }\n            if (newTblLocation) {\n                tblSchema.basename = newTblLocation;\n                tablesMap.delete(tblName);\n            }\n        }, { savepointDesc: 'Table alter', ...params });\n    }\n\n    /**\n     * Base logic for dropTable()\n     * \n     * @param Function          callback\n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async dropTableCallback(callback, tblName, params = {}) {\n        return this.client.alterDatabase(this.name, async dbSchemaEdit => {\n            let tblDropRequest;\n            if (tblName instanceof DropTable) {\n                tblDropRequest = tblName;\n                tblName = tblDropRequest.NAME;\n            } else {\n                // First we validate operation\n                const tblFound = (await this.tables({ name: tblName }))[0];\n                if (!tblFound) {\n                    if (params.ifExists) return;\n                    throw new Error(`Table ${ tblName } does not exist.`);\n                }\n                // Then forward the operation for execution\n                tblDropRequest = new DropTable(this.client/*IMPORTANT: client API*/, tblName, this.name);\n                if (params.ifExists) tblDropRequest.withFlag('IF_EXISTS');\n                if (params.cascade) tblDropRequest.withFlag('CASCADE');\n            }\n            // Important:\n            tblDropRequest.name([this.name,tblDropRequest.NAME]);\n            // Create savepoint\n            const tblSchema = await this.describeTable(tblName, params);\n            if (tblSchema.schemaEdit) throw new Error(`Cannot delete table when already in edit mode.`);\n            dbSchemaEdit.tablesSavepoints.add({\n                // Snapshot\n                name_snapshot: tblSchema.name,\n                columns_snapshot: JSON.stringify(tblSchema.columns),\n                constraints_snapshot: JSON.stringify(tblSchema.constraints),\n                indexes_snapshot: JSON.stringify(tblSchema.indexes),\n                // New state\n                current_name: null, // How we know deleted\n            });\n            await callback(tblDropRequest, params);\n            // Then update original schema object in place\n            const tablesMap = this.$.schema.tables;\n            tablesMap.get(tblName).hiddenAs = 'dropped';\n            delete tablesMap.get(tblName).columns;\n            delete tablesMap.get(tblName).constraints;\n            delete tablesMap.get(tblName).indexes;\n        }, { savepointDesc: 'Table drop', ...params });\n    }\n}", "\nimport _all from '@webqit/util/arr/all.js';\nimport _any from '@webqit/util/arr/any.js';\nimport _unique from '@webqit/util/arr/unique.js';\nimport _isArray from '@webqit/util/js/isArray.js';\n\nexport default class AbstractInsertQueryInspector {\n\n    /**\n     * Accepts the insert payload\n     * \n     * @param AbstractTable table\n     * @param Object rawResultMeta\n     * @param Array columns\n     * @param Array entries\n     * @param Object duplicateKeyUpdateObj\n     */\n    constructor(table, rawResultMeta, columns, entries, duplicateKeyUpdateObj = {}) {\n        this.table = table;\n        this.rawResultMeta = rawResultMeta;\n        this.columns = columns;\n        this.entries = entries;\n        this.duplicateKeyUpdateObj = duplicateKeyUpdateObj;\n    }\n\n    toJson() { return (this.rawResultMeta.rows || this.rawResultMeta)[0]; }\n    lastInsertID() { return (this.rawResultMeta.rows || this.rawResultMeta)[0]?.id; }\n\n\t/**\n\t * Returns the pointers for the inserts.\n     * \n     * @return Object\n\t */\n    async getAffectedRowsPointers() {\n        if (!_isArray(this.columns) || !_isArray(this.entries)) {\n            return;\n        }\n\t\tvar keyPaths = [], wheres = { all: {}, each: [], };\n\t\tvar primaryKeyColumns = await this.table.primaryKeyColumns();\n\t\tif (_any(primaryKeyColumns, columnName => this.columns.includes(columnName))) {\n\t\t\tkeyPaths = [primaryKeyColumns];\n\t\t\twheres.by = 'primaryKey';\n\t\t} else {\n\t\t\tvar uniqueColumns = this.table.columnsForConstraint('UNIQUE');\n\t\t\tkeyPaths = uniqueColumns.filter(keyPath => _any(keyPath, columnName => this.columns.includes(columnName)));\n\t\t\twheres.by = 'uniqueKeys';\n\t\t}\n\t\tif (keyPaths.length) {\n\t\t\t// -------------\n            var columnIndexes = {};\n            _unique(keyPaths.reduce((all, keyPath) => all.concat(keyPath), [])).forEach(columnName => {\n                var columnNameIndexInRows = this.columns.indexOf(columnName);\n                if (columnNameIndexInRows === -1) {\n                    // Use default value\n                    wheres.all[columnName] = this.table.def.schema.columns[columnName].default;\n                } else {\n                    columnIndexes[columnName] = columnNameIndexInRows;\n                }\n            });\n            var columnIndexNames = Object.keys(columnIndexes);\n            if (columnIndexNames.length) {\n                this.entries.forEach(entry => {\n                    var where = {};\n                    columnIndexNames.forEach(columnName => {\n                        if (_isArray(entry)) {\n                            where[columnName] = entry[columnIndexes[columnName]];\n                        } else {\n                            where[columnName] = entry[columnName];\n                        }\n                        if (this.duplicateKeyUpdateObj && (columnName in this.duplicateKeyUpdateObj)) {\n                            where[columnName] = [where[columnName], this.duplicateKeyUpdateObj[columnName]];\n                        }\n                    });\n                    wheres.each.push(where);\n                });\n            }\n\t\t\t// -------------\n\t\t}\n        return wheres;\n\t}\n}", "\nimport _isEmpty from '@webqit/util/js/isEmpty.js';\nimport _isArray from '@webqit/util/js/isArray.js';\nimport _isNumeric from '@webqit/util/js/isNumeric.js';\nimport _all from '@webqit/util/arr/all.js';\nimport AbstractInsertQueryInspector from '../abstracts/AbstractInsertQueryInspector.js';\n\nexport default class SQLInsertQueryInspector extends AbstractInsertQueryInspector {\n\n    /**\n     * Returns the query result info.\n     * \n     * @return Object\n     */\n    info() {\n        var infoArray;\n        var match = (this.rawResultMeta.info || '').replace(/ /g, '').match(/Records:([0-9]*)Duplicates:([0-9]*)Warnings:([0-9]*)/);\n        if (match) {\n            infoArray = match.slice(1).map(n => parseInt(n));\n        } else {\n            infoArray = [0, 0, 0];\n        }\n        return {\n            records: infoArray[0],\n            duplicates: infoArray[1],\n            warnings: infoArray[2],\n        };\n    }\n\n    /**\n     * Returns the affected rows for the query.\n     * \n     * @param Bool withIDs\n     * \n     * @return Array\n     */\n    async getAffectedRows(withIDs = false) {\n        // Lets first attemp to inspect the entries themselves\n        var pointers = this.getAffectedRowsPointers();\n        // ---------------------\n        // If IDs where explicitly assigned to each entry...\n        if (pointers.by === 'primaryKey') {\n            var primaryKeys = Object.keys(pointers.each[0]);\n            if (primaryKeys.length === 1) {\n                var affectedRows = pointers.each.map(entryPointer => entryPointer[primaryKeys[0]]);\n                if (_all(affectedRows, id => _isNumeric(id))) {\n                    if (!withIDs) {\n                        return affectedRows.length;\n                    }\n                    return affectedRows.map(id => parseInt(id));\n                }\n            }\n        }\n        // ---------------------\n        var primaryKey = 'id';\n        // Here we query the databse with the pointers\n        const where = pointerObj => {\n            var pointerNames = Object.keys(pointerObj);\n            var sql = pointerNames.reduce((sql, columnName) => sql.concat((\n                _isArray(pointerObj[columnName]) ? `${columnName} IN (\"${pointerObj[columnName].join('\", \"')}\")` : `${columnName} = \"${pointerObj[columnName]}\"`)\n            ), []).join(' AND ');\n            return pointerNames.length > 1 ? `(${sql})` : sql;\n        };\n        // ---------------------\n        var whereAll = '', whereEach = '';\n        if (!_isEmpty(pointers.all)) {\n            whereAll = where(pointers.all);\n        }\n        if (!_isEmpty(pointers.each)) {\n            var pointerNames = Object.keys(pointers.each[0]);\n            if (pointerNames.length === 1 && !_isArray(pointers.each[0][pointerNames[0]])) {\n                whereEach = `${pointerNames[0]} IN (${pointers.each.map(pointerObj => pointerObj[pointerNames[0]]).join(', ')})`\n            } else {\n                whereEach = pointers.each.map(pointerObj => where(pointerObj)).join(' OR ');\n            }\n        }\n        if (whereAll || whereEach) {\n            var driver = this.table.database.client.params.driver;\n            return new Promise((resolve, reject) => {\n                var whereSql = whereAll && whereEach ? `${whereAll} AND (${whereEach})` : whereAll || whereEach;\n                var query = `SELECT ${!withIDs ? `COUNT(*) AS count` : primaryKey} FROM ${this.table.name} WHERE ${whereSql} ORDER BY ${primaryKey} ASC`;\n                driver.query(query, (err, result) => {\n                    if (err) return reject(err);\n                    if (!withIDs) {\n                        return resolve(result[0].count);\n                    }\n                    resolve(result.map(row => row[primaryKey]));\n                });\n            });\n        }\n        // ---------------------\n        if (this.rawResultMeta.insertId) {\n            return !withIDs ? this.entries.length : this.entries.map(\n                (entry, i) => this.rawResultMeta.insertId + 1\n            );\n        }\n        return !withIDs ? 0 : [];\n    }\n}", "\nexport default class AbstractDeleteQueryInspector {\n\n    /**\n     * Accepts the insert payload\n     * \n     * @param AbstractTable table\n     * @param Object rawResultMeta\n     * @param Object whereObj\n     */\n    constructor(table, rawResultMeta, whereObj) {\n        this.table = table;\n        this.rawResultMeta = rawResultMeta;\n        this.whereObj = whereObj;\n    }\n}", "\nimport AbstractDeleteQueryInspector from '../abstracts/AbstractDeleteQueryInspector.js';\n\n/**\n * ---------------------\n * The SQLDeleteQueryInspector class\n * ---------------------\n */\nexport default class SQLDeleteQueryInspector extends AbstractDeleteQueryInspector {\n\n    /**\n     * Returns the affected rows for the query.\n     * \n     * @param Bool withIDs\n     * \n     * @return Array\n     */\n    async getAffectedRows(withIDs = false) {\n        if (withIDs) { throw new Error(`The \"withIDs\" argument is not supported for delete queries.`) }\n        return this.rawResultMeta.affectedRows;\n    }\n}", "\nimport { _isTypeObject, _isNull, _isString, _isNumeric, _isUndefined, _isObject } from '@webqit/util/js/index.js';\nimport { _from as _arrFrom, _intersect } from '@webqit/util/arr/index.js';\nimport { _wrapped } from '@webqit/util/str/index.js';\nimport Savepoint from './Savepoint.js';\n\nexport default class AbstractTable {\n\t \n\t/**\n\t * @constructor\n\t */\n\tconstructor(database, tblName, params = {}) {\n        this.$ = {\n            database,\n            schema: database.$.schema.tables.get(tblName),\n            params\n        };\n\t}\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.schema.name; }\n\n    /**\n     * @property Database\n     */\n    get database() { return this.$.database; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n    /**\n     * @property Bool\n     */\n    get dropped() { return this.$.schema.hiddenAs === 'dropped'; }\n\n\t/**\n     * @returns Object\n     */\n\tasync schema() { return await this.database.describeTable(this.name); }\n\n    /**\n\t * Returns the table's current savepoint.\n\t * \n     * @param Object params\n\t * \n\t * @returns Object\n     */\n    async savepoint(params = {}) {\n\t\tconst OBJ_INFOSCHEMA_DB = this.database.client.constructor.OBJ_INFOSCHEMA_DB;\n\t\tif ((await this.database.client.databases({ name: OBJ_INFOSCHEMA_DB }))[0]) {\n\t\t\tconst forward = params.direction === 'forward';\n            const dbName = [OBJ_INFOSCHEMA_DB,'database_savepoints'];\n            const tblName = [OBJ_INFOSCHEMA_DB,'table_savepoints'];\n\t\t\tconst tblFields = ['name_snapshot', 'columns_snapshot', 'constraints_snapshot', 'indexes_snapshot', 'current_name'];\n\t\t\tconst dbFields = ['id', 'name_snapshot', 'savepoint_desc', 'savepoint_date', 'rollback_date', 'current_name'];\n            const result = await this.database.client.query('select', q => {\n                q.from(tblName).as('tbl');\n\t\t\t\tq.select( ...tblFields.map(name => ['tbl',name]) );\n\t\t\t\tq.select( ...dbFields.map(name => f => f.name(['db',name]).as(`db_${ name }`)) );\n\t\t\t\tq.rightJoin(dbName).as('db').on( x => x.equals(['db','id'], ['tbl','savepoint_id']), x => x.in( y => y.literal(this.database.name), ['db','name_snapshot'], ['db','current_name'] ), x => x[forward ? 'isNotNull' : 'isNull'](['db','rollback_date']) );\n\t\t\t\tq.where( x => x.in( x => x.literal(this.name), ['tbl','name_snapshot'], ['tbl','current_name'] ) );\n\t\t\t\tq.orderBy(['db','savepoint_date']).withFlag(forward ? 'ASC' : 'DESC');\n                q.limit(1);\n            });\n\t\t\tif (!result[0]) return;\n\t\t\tconst [ tblDetails, dbDetails ] = Object.keys(result[0]).reduce(([tblDetails, dbDetails], key) => {\n\t\t\t\tif (key.startsWith('db_')) return [tblDetails, { ...dbDetails, [key.replace('db_', '')]: result[0][key] }];\n\t\t\t\treturn [{ ...tblDetails, [key]: result[0][key] }, dbDetails];\n\t\t\t}, [{}, {}]);\n\t\t\tconst context = new Savepoint(this.database.client, dbDetails, params.direction);\n\t\t\treturn Object.defineProperty(tblDetails, 'context', { get: () => context, });\n\t\t}\n    }\n\n\t/**\n\t * ----------\n\t * SCHEMA UTILS\n\t * ----------\n\t */\n\n\t/**\n\t * Get Primary Key columns from schema.\n\t * \n\t * @returns Array\n\t */\n\tasync primaryKeyColumns() { return (await this.columnsForConstraint('PRIMARY_KEY'))[0]; }\n\n\t/**\n\t * Get columns that have given constraintType.\n\t * \n\t * @param String constraintType\n\t * \n\t * @returns Array\n\t */\n\tasync columnsForConstraint(constraintType) {\n\t\tconst schema = await this.database.describeTable(this.name);\n\t\tconst inlineConstraintTypesMap = { 'PRIMARY_KEY': 'primaryKey', 'UNIQUE': 'uniqueKey', 'CHECK': 'check', 'FOREIGN_KEY': 'references' };\n\t\tlet columns = !(constraintType in inlineConstraintTypesMap) ? [] : schema.columns.filter(col => col[inlineConstraintTypesMap[constraintType]]).map(col => [col.name]);\n\t\tif (schema.constraints.length) { columns = columns.concat(schema.constraints.filter(cnst => cnst.type === constraintType).reduce((cols, cnst) => cols.concat([cnst.columns]))); }\n\t\treturn columns;\n\t}\n\n\t/**\n\t * Get columns that have given indexType.\n\t * \n\t * @param String indexType\n\t * \n\t * @returns Array\n\t */\n\tasync columnsForIndex(indexType) {\n\t\tconst schema = await this.database.describeTable(this.name);\n\t\tif (schema.indexes.length) { return schema.indexes.filter(index => index.type === indexType).reduce((cols, index) => cols.concat([index.columns])); }\n\t\treturn [];\n\t}\n\n\t/**\n\t * ----------\n\t * QUERY UTILS\n\t * ----------\n\t */\n\n\t/**\n\t * Syncs a cursor.\n\t * \n\t * @param Cursor cursor\n\t * \n\t * @return Number\n\t */\n\tasync syncCursor(cursor) { return await this.putAll(cursor.cache); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync match(rowObj) {\n\t\t// -----------\n\t\tlet primaryKey, existing;\n\t\tif (this.def.schema.primaryKey \n\t\t&& (primaryKey = readKeyPath(rowObj, this.def.schema.primaryKey)) \n\t\t&& (existing = await this.get(primaryKey))) {\n\t\t\treturn {\n\t\t\t\tmatchingKey: 'PRIMARY_KEY',\n\t\t\t\tprimaryKey,\n\t\t\t\trow: existing,\n\t\t\t};\n\t\t}\n\t\t// -----------\n\t\tconst primaryKeyColumns = await this.primaryKeyColumns();\n\t\tconst uniqueKeyColumns = await this.columnsForConstraint('UNIQUE');\n\t\tprimaryKeyColumns.concat(uniqueKeyColumns).map(columns => {\n\t\t\treturn `(${ columns.map(col => `${ this.quote(obj[col]) } IN (${ columns.join(',') })`).join(' AND ') })`;\n\t\t}).join(' OR ');\n\n\t\tvar match, uniqueKeys = Object.keys(this.def.schema.indexes).filter(alias => this.def.schema.indexes[alias].type === 'unique');\n\t\tif (uniqueKeys.length) {\n\t\t\t(await this.getAll()).forEach((existingRow, i) => {\n\t\t\t\tif (match) return;\n\t\t\t\tuniqueKeys.forEach(constraintName => {\n\t\t\t\t\tvar keyPath = this.def.schema.indexes[constraintName].keyPath;\n\t\t\t\t\tif (existingRow && readKeyPath(rowObj, keyPath) === readKeyPath(existingRow, keyPath)) {\n\t\t\t\t\t\tmatch = {\n\t\t\t\t\t\t\tmatchingKey: constraintName,\n\t\t\t\t\t\t\tprimaryKey: this.def.schema.primaryKey ? readKeyPath(existingRow, this.def.schema.primaryKey) : i,\n\t\t\t\t\t\t\trow: {...existingRow},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn match;\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync addAll(multiValues, columns = [], duplicateKeyCallback = null, forceAutoIncrement = false) {\n\t\tconst inserts = [], forUpdates = [];\n\t\tfor (const values of multiValues) {\n\t\t\tlet rowObj = values;\n\t\t\tif (Array.isArray(values)) {\n\t\t\t\tconst columnNames = columns.length ? columns : (await this.schema()).columns.map(col => col.name);\n\t\t\t\tif (columnNames.length && columnNames.length !== values.length) {\n\t\t\t\t\tthrow new Error(`Column/values count mismatch at line ${ multiValues.indexOf(values) }.`);\n\t\t\t\t}\n\t\t\t\trowObj = columnNames.reduce((rowObj, name, i) => ({ ...rowObj, [name]: values[i], }), {});\n\t\t\t}\n\t\t\t// -------------\n\t\t\tawait this.handleInput(rowObj, true);\t\t\t\t\t\n\t\t\t// -------------\n\t\t\tif (await this.shouldMatchInput(rowObj) || duplicateKeyCallback) {\n\t\t\t\tconst match = await this.match(rowObj);\n\t\t\t\tif (match && duplicateKeyCallback) {\n\t\t\t\t\tconst duplicateRow = { ...match.row };\n\t\t\t\t\tif (duplicateKeyCallback(duplicateRow, rowObj)) {\n\t\t\t\t\t\tforUpdates.push(duplicateRow);\n\t\t\t\t\t}\n\t\t\t\t\t// The duplicate situation had been handled\n\t\t\t\t\t// ...positive or negative\n\t\t\t\t\tinserts.push('0');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// We're finally going to add!\n\t\t\t\t// We must not do this earlier...\n\t\t\t\t// as \"onupdate\" rows will erronously take on a new timestamp on this column\n\t\t\t\tawait this.beforeAdd(rowObj, match);\n\t\t\t\tinserts.push(await this.add(rowObj));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait this.beforeAdd(rowObj);\n\t\t\tinserts.push(await this.add(rowObj));\n\t\t}\n\t\t// OnDuplicateKey updates\n\t\tif (forUpdates.length) { inserts.push(...(await this.putAll(forUpdates))); }\n\t\treturn inserts.filter((n, i) => n !== 0 && inserts.indexOf(n) === i);\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforeAdd(rowObj, match) {\n\t\tconst timestamp = (new Date).toISOString();\n\t\tfor (const column of (await this.schema()).columns) {\n\t\t\tconst columnType = _isObject(column.type) ? column.type.name : column.type;\n\t\t\tif ((columnType === 'datetime' || columnType === 'timestamp') && column.default.expr === 'CURRENT_TIMESTAMP') {\n\t\t\t\trowObj[column.name] = timestamp;\n\t\t\t}\n\t\t}\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync putAll(multiRows) {\n\t\tconst updates = [];\n\t\tfor (const rowObj of multiRows) {\n\t\t\t// -------------\n\t\t\tawait this.handleInput(rowObj);\t\t\t\t\t\n\t\t\t// -------------\n\t\t\tif (await this.shouldMatchInput(rowObj)) {\n\t\t\t\tawait this.beforePut(rowObj, await this.match(rowObj));\n\t\t\t\tupdates.push(await this.put(rowObj));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait this.beforePut(rowObj);\n\t\t\tupdates.push(await this.put(rowObj));\n\t\t}\n\t\treturn updates;\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforePut(rowObj, match) {\n\t\tif (match && !Object.keys(rowObj).every(key => rowObj[key] === match.row[key])) {\n\t\t\tconst timestamp = (new Date).toISOString();\n\t\t\tfor (const column of (await this.schema()).columns) {\n\t\t\t\tconst columnType = _isObject(column.type) ? column.type.name : column.type;\n\t\t\t\tif ((columnType === 'datetime' || columnType === 'timestamp') && column.onupdate === 'CURRENT_TIMESTAMP') {\n\t\t\t\t\trowObj[column.name] = timestamp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync deleteAll(multiIDs) {\n\t\tconst deletes = [];\n\t\tfor (const primaryKey of multiIDs) {\n\t\t\tdeletes.push(this.delete(await this.beforeDelete(primaryKey)));\n\t\t}\n\t\treturn deletes;\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync beforeDelete(primaryKey) {\t\n\t\treturn primaryKey;\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync handleInput(rowObj, applyDefaults = false) {\n\t\tconst rowObjColumns = Object.keys(rowObj);\n\t\tconst schema = await this.schema();\n\t\tconst schemaColumns = schema.columns.map(col => col.name);\n\t\t// ------------------\n\t\tconst unknownFields = rowObjColumns.filter(col => schemaColumns.indexOf(col) === -1);\n\t\tif (unknownFields.length) { throw new Error(`Unknown column: ${ unknownFields[0] }`); }\n\t\t// ------------------\n\t\tfor (const columnName of schemaColumns) {\n\t\t\tconst value = rowObj[columnName];\n\t\t\tconst column = schema.columns.find(col => col.name === columnName) || {};\n\t\t\tif (rowObjColumns.includes(columnName)) {\n\t\t\t\tconst columnType = _isObject(column.type) ? column.type.name : column.type;\n\t\t\t\t// TODO: Validate supplied value\n\t\t\t\tif (columnType === 'json') {\n\t\t\t\t\tif (!_isTypeObject(value) && (!_isString(value) || (!_wrapped(value, '[', ']') && !_wrapped(value, '{', '}')))) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['char', 'tinytext', 'smalltext', 'text', 'bigtext', 'varchar'].includes(columnType)) {\n\t\t\t\t\tif (!_isString(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['bit', 'tinyint', 'smallint', 'int', 'bigint', 'decimal', 'number', 'float', 'real'].includes(columnType)) {\n\t\t\t\t\tif (!_isNumeric(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['enum', 'set'].includes(columnType)) {\n\t\t\t\t\tif (!_isNumeric(value)) {\n\t\t\t\t\t}\n\t\t\t\t} else if (['date', 'datetime', 'timestamp'].includes(columnType)) {\n\t\t\t\t\tif (!_isString(value)) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (applyDefaults && !_intersect([columnName], await this.primaryKeyColumns()).length) {\n\t\t\t\t// DONE: Apply defaults...\n\t\t\t\trowObj[columnName] = ('default' in column) && !(['date', 'datetime', 'timestamp'].includes(columnType) && column.default.expr === 'CURRENT_TIMESTAMP') \n\t\t\t\t\t? column.default.value\n\t\t\t\t\t: null;\n\t\t\t}\n\t\t\t// Non-nullable\n\t\t\tif (column.notNull && (_isNull(rowObj[columnName]) || _isUndefined(rowObj[columnName]))) {\n\t\t\t\tthrow new Error(`Inserting NULL on non-nullable column: ${ columnName }.`);\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync shouldMatchInput(rowObj) {\n\t\treturn (await this.schema()).columns.some(column => {\n\t\t\tconst columnType = _isObject(column.type) ? column.type.name : column.type;\n\t\t\treturn ['datetime', 'timestamp'].includes(columnType) && (\n\t\t\t\tcolumn.default.expr === 'CURRENT_TIMESTAMP' || column.onupdate === 'CURRENT_TIMESTAMP'\n\t\t\t);\n\t\t});\n\t}\n}\n\n/**\n * @AutoIncremen\n */\nconst readKeyPath = (rowObj, keyPath) => {\n\treturn _arrFrom(keyPath).map(key => rowObj[key]).filter(v => v).join('-');\n};\n", "\n\nexport default class AbstractCursor {\n\t \n\t_pos = 0;\n\t_eof = false;\n\t_onfinish = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(rows) {\n\t\tthis._cache = rows;\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\tget eof() { return !this._cache.length || this._pos === this._cache.length - 1; }\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tonfinish(callback) { this._onfinish.push(callback); }\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tnext() {\n\t\tif (this.eof) {\n\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\tthis._pos = 0;\n\t\t\treturn;\n\t\t}\n        this._pos ++;\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tif (this.eof) return;\n\t\treturn this._cache[this._pos];\n\t}\n}", "\nimport AbstractCursor from '../abstracts/AbstractCursor.js';\n\nexport default class SQLCursor extends AbstractCursor {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(store) {\n\t\tsuper([]);\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis._storeFetch = new Promise(async resolve => {\n\t\t\tthis.cache = await this._store.getAll();\n\t\t\tresolve();\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tawait this._storeFetch;\n\t\treturn super.fetch();\n\t}\n}\n", "\nimport { _isObject, _isNull, _isNumeric } from '@webqit/util/js/index.js';\nimport SQLInsertQueryInspector from './SQLInsertQueryInspector.js';\nimport SQLDeleteQueryInspector from './SQLDeleteQueryInspector.js';\nimport AbstractTable from '../abstracts/AbstractTable.js';\nimport SQLCursor from './SQLCursor.js';\n\n/**\n * ---------------------------\n * SQLTable class\n * ---------------------------\n */\n\nexport default class SQLTable extends AbstractTable {\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return SQLCursor\n\t */\n\tgetCursor() { return new SQLCursor(this); }\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync getAll() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.database.client.driver.query(`SELECT * FROM ${ this.database.name }.${ this.name }`, (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve((result.rows || result));\n\t\t\t});\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync get(primaryKey) {\n\t\tconst primaryKeyColumns = await this.primaryKeyColumns();\n\t\tif (!primaryKeyColumns.length) throw new Error(`Table has no primary key defined.`);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.database.client.driver.query(`SELECT * FROM ${ this.database.name }.${ this.name } WHERE '${ primaryKey }' IN (${ primaryKeyColumns.join(',') })`, [], (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve((result.rows || result)[0]);\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync count(query = '*') {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.database.client.driver.query(`SELECT COUNT(${ query }) AS c FROM ${ this.database.name }.${ this.name }`, (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve((result.rows || result)[0].c);\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync addAll(entries, columns = [], duplicateKeyCallback = null) {\n\t\tif (!entries.length) return;\n\t\tlet duplicateKeyUpdateObj = {};\n\t\tif (!columns.length) {\n\t\t\tif (_isObject(entries[0])) {\n\t\t\t\tcolumns = Object.keys(entries[0]);\n\t\t\t} else {\n\t\t\t\tconst schema = await this.database.describeTable(this.name);\n\t\t\t\tcolumns = schema.columns.map(col => col.name);\n\t\t\t}\n\t\t}\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet insertSql = `INSERT INTO ${ this.database.name }.${ this.name }\\n\\t${ columns.length ? `(${ columns.join(',') })\\n\\t` : `` }`;\n\t\t\tinsertSql += `VALUES\\n\\t${ entries.map(row => formatAddRow(Object.values(row), this.database.client.params.dialect)).join(`,\\n\\t`) }`;\n\t\t\tif (duplicateKeyCallback) {\n\t\t\t\tduplicateKeyCallback(duplicateKeyUpdateObj);\n\t\t\t\tinsertSql += ` ${ this.database.client.params.dialect === 'mysql' ? 'ON DUPLICATE KEY UPDATE' : /*postgres*/'ON CONFLICT DO UPDATE SET' } ${ formatAssignments(duplicateKeyUpdateObj, this.database.client.params.dialect) }`;\n\t\t\t}\n\t\t\tthis.database.client.driver.query(insertSql, (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve(new SQLInsertQueryInspector(\n\t\t\t\t\tthis, \n\t\t\t\t\tresult, \n\t\t\t\t\tcolumns, \n\t\t\t\t\tentries, \n\t\t\t\t\tduplicateKeyUpdateObj\n\t\t\t\t));\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync add(rowObj) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet insertSql = `INSERT INTO ${ this.database.name }.${ this.name }\\n\\t(${ Object.keys(rowObj).join(',') })\\n\\t`;\n\t\t\tinsertSql += `VALUES\\n\\t${ formatAddRow(Object.values(rowObj), this.database.client.params.dialect) }\\n\\t`;\n\t\t\tinsertSql += 'RETURNING *';\n\t\t\tthis.database.client.driver.query(insertSql, (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve(new SQLInsertQueryInspector(\n\t\t\t\t\tthis,\n\t\t\t\t\tresult,\n\t\t\t\t\tObject.keys(rowObj), \n\t\t\t\t\tObject.values(rowObj), \n\t\t\t\t));\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync putAll(rowObjs) {\n\t\tawait Promise.all(rowObjs.map(rowObj => this.put(rowObj)));\n\t\treturn new SQLInsertQueryInspector(\n\t\t\tthis, \n\t\t\t{}, \n\t\t\tObject.keys(rowObjs[0]), \n\t\t\trowObjs, \n\t\t);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync put(rowObj) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst putSql = `INSERT INTO ${ this.database.name }.${ this.name }\\n\\t${ formatPutRow(rowObj, this.database.client.params.dialect) }`;\n\t\t\tthis.database.client.driver.query(putSql, (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve(new SQLInsertQueryInspector(\n\t\t\t\t\tthis, \n\t\t\t\t\tresult, \n\t\t\t\t\tObject.keys(rowObj), \n\t\t\t\t\tObject.values(rowObj), \n\t\t\t\t));\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tasync deleteAll(IDs = []) {\n\t\tconst primaryKeyColumns = await this.primaryKeyColumns();\n\t\tif (!primaryKeyColumns.length) throw new Error(`Table has no primary key defined.`);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst deleteSql = `DELETE FROM ${ this.database.name }.${ this.name }${ IDs.length ? ` WHERE ${ IDs.map(id => `'${ id }' in (${ primaryKeyColumns.join(',') })`).join(' OR ') }` : ''}`;\n\t\t\tthis.database.client.driver.query(deleteSql, [], (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve(new SQLDeleteQueryInspector(\n\t\t\t\t\tthis,\n\t\t\t\t\tresult\n\t\t\t\t));\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync delete(primaryKey) {\n\t\tconst primaryKeyColumns = await this.primaryKeyColumns();\n\t\tif (!primaryKeyColumns.length) throw new Error(`Table has no primary key defined.`);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst deleteSql = `DELETE FROM ${ this.database.name }.${ this.name } WHERE ${ primaryKey } IN (${ primaryKeyColumns.join(',') })`;\n\t\t\tthis.database.client.driver.query(deleteSql, [], (err, result) => {\n\t\t\t\tif (err) return reject(err);\n\t\t\t\tresolve(new SQLDeleteQueryInspector(\n\t\t\t\t\tthis,\n\t\t\t\t\tresult\n\t\t\t\t));\n\t\t\t});\n\t\t});\n\t}\n\n}\n\n/**\n * --------\n * HELPERS\n * --------\n */\nconst formatVal = (val, dialect) => {\n\tif (val instanceof Date) {\n\t\ttry { return `'${ val.toISOString().split('.')[0] }'`; }\n\t\tcatch(e) { return 'NULL'; }\n\t}\n\treturn _isNumeric(val) ? val : (_isNull(val) ? 'NULL' : (dialect === 'mysql' ? `'${ val.replace(/'/g, `\\\\'`) }'` : `'${ val.replace(/'/g, `''`) }'`));\n};\nconst formatAddRow = (values, dialect) => '(' + values.map(val => formatVal(val, dialect)).join(',') + ')';\nconst formatAssignments = (rowObj, dialect) => Object.keys(rowObj).map(key => `${ key } = ${ formatVal(rowObj[key], dialect) }`).join(',');\nconst formatPutRow = (rowObj, dialect) => {\n\tconst assignments = formatAssignments(rowObj, dialect);\n\treturn `SET ${ assignments } ${ dialect === 'mysql' ? 'ON DUPLICATE KEY UPDATE' : /*postgres*/'ON CONFLICT DO UPDATE SET' } ${ assignments }`;\n};\n\n", "\n\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport AbstractDatabase from '../abstracts/AbstractDatabase.js';\nimport SQLTable from './SQLTable.js';\n\n/**\n * ---------------------------\n * SQLDatabase class\n * ---------------------------\n */\t\t\t\t\n\nexport default class SQLDatabase extends AbstractDatabase {\n\t\n    /**\n\t * SQLTable class.\n     * \n     * @property Object\n\t */\n    static Table = SQLTable;\n\n    /**\n     * Returns a list of tables.\n     * \n     * @param Object params\n     * \n     * @return Array\n\t */\n    async tables(params = {}) {\n        return this.tablesCallback(() => {\n            return new Promise((resolve, reject) => {\n                const sql = `SELECT table_name FROM information_schema.tables WHERE table_schema = '${ this.name }'`;\n                return this.client.driver.query(sql, (err, result) => {\n                    if (err) return reject(err);\n                    resolve((result.rows || result).map(row => row.table_name));\n                });\n            });\n        }, ...arguments);\n    }\n\n     /**\n     * Describes table.\n     * \n     * @param String|Array      tblName_s\n     * @param Object            params\n     * \n     * @return Object\n     */\n    describeTable(tblName_s, params = {}) {\n        return this.describeTableCallback((tblNames, params) => {\n            return new Promise((resolve, reject) => {\n                const driver = this.client.driver;\n                const [ sql0, sql1 ] = this.getDescribeTableSql(tblNames);\n                return driver.query(sql0, (err, columns) => {\n                    if (err) return reject(err);\n                    return driver.query(sql1, (err, constraints) => {\n                        if (err) return reject(err);\n                        const tblSchemas = this.formatDescribeTableResult(tblNames, (columns.rows || columns), (constraints.rows || constraints), []);\n                        resolve(tblSchemas);\n                    });\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Creates table.\n     * \n     * @param Object            tblSchema\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async createTable(tblSchema, params = {}) {\n        return this.createTableCallback((tblCreateRequest, params) => {\n            return new Promise((resolve, reject) => {\n                return this.client.driver.query(tblCreateRequest.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(this.formatSideEffectResult(result));\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Alters table.\n     * \n     * @param String            tblName\n     * @param Function          schemaCallback\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async alterTable(tblName, schemaCallback, params = {}) {\n        return this.alterTableCallback((tblAlterRequest, params) => {\n            if (!tblAlterRequest.ACTIONS.length) return;\n            return new Promise((resolve, reject) => {\n                return this.client.driver.query(tblAlterRequest.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(this.formatSideEffectResult(result));\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Drops table.\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Bool\n     */\n    async dropTable(tblName, params = {}) {\n        return this.dropTableCallback((tblDropRequest, params) => {\n            return new Promise((resolve, reject) => {\n                return this.client.driver.query(tblDropRequest.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(this.formatSideEffectResult(result));\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Composes the SQL for a SHOW TABLE operation.\n     * \n     * @param Array tblNames\n     * \n     * @returns Array\n     */\n    getDescribeTableSql(tblNames) {\n        // SHOW CREATE TABLE isn't supported by postgreSql, plus we need that would add auto-added constraint names that the querying the information_schema adds\n        const sql0 = `\n        SELECT\n            COLUMNS.column_name,\n            COLUMNS.table_name,\n            COLUMNS.ordinal_position,\n            COLUMNS.column_default,\n            COLUMNS.is_nullable,\n            COLUMNS.data_type,\n            COLUMNS.character_maximum_length,\n            ${ this.client.params.dialect === 'mysql' ? '' : `\n            COLUMNS.is_identity,\n            COLUMNS.identity_generation,\n            COLUMNS.identity_start,\n            COLUMNS.identity_increment,\n            COLUMNS.identity_maximum,\n            COLUMNS.identity_minimum,\n            COLUMNS.identity_cycle,\n            ` }\n            COLUMNS.is_generated,\n            COLUMNS.generation_expression\n\n        FROM INFORMATION_SCHEMA.COLUMNS AS COLUMNS\n\n        WHERE COLUMNS.TABLE_SCHEMA='${ this.name }'\n            ${ tblNames.length && tblNames[0] !== '*' ? `AND COLUMNS.TABLE_NAME IN ('${ tblNames.join(`','`) }')` : '' }\n        ORDER BY COLUMNS.ordinal_position\n        `;\n\n        const ANY_VALUE = col => this.client.params.dialect === 'mysql' ? col : `ANY_VALUE(${ col })`;\n        const GROUP_CONCAT = (col, orderBy) => this.client.params.dialect === 'mysql' ? `GROUP_CONCAT(${ col }${ orderBy ? ` ORDER BY ${ orderBy }` : `` } SEPARATOR ',')` : `STRING_AGG(${ col }, ','${ orderBy ? ` ORDER BY ${ orderBy }` : `` })`;\n\n        const sql1 = `\n        SELECT\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.table_name`) } AS table_name,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.column_name`, `TABLE_CONSTRAINTS_DETAILS.ordinal_position`) } AS column_name,\n            TABLE_CONSTRAINTS.constraint_name AS constraint_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.constraint_type`) } AS constraint_type,\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.check_clause`) } AS check_clause,\n                \n            ${ this.client.params.dialect === 'mysql' ? `\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.level`) } AS check_constraint_level,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.referenced_column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_schema`) } AS referenced_table_schema,\n            ` : `\n            ${ GROUP_CONCAT(`RELATION_DETAILS.column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_schema`) } AS referenced_table_schema,\n            ` }\n            --${ GROUP_CONCAT(`RELATION.unique_constraint_name`) } AS referenced_constraint_name,\n            ${ ANY_VALUE(`RELATION.match_option`) } AS match_rule,\n            ${ ANY_VALUE(`RELATION.update_rule`) } AS update_rule,\n            ${ ANY_VALUE(`RELATION.delete_rule`) } AS delete_rule\n\n        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TABLE_CONSTRAINTS\n\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS TABLE_CONSTRAINTS_DETAILS\n            ON TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.TABLE_NAME = TABLE_CONSTRAINTS.TABLE_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS CHECK_CONSTRAINTS_DETAILS\n            ON CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n\n        LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RELATION\n            ON RELATION.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND RELATION.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND RELATION.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        ${ this.client.params.dialect === 'mysql' ? '' : `\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS RELATION_DETAILS\n            ON RELATION_DETAILS.CONSTRAINT_NAME = RELATION.UNIQUE_CONSTRAINT_NAME\n            AND RELATION_DETAILS.CONSTRAINT_SCHEMA = RELATION.UNIQUE_CONSTRAINT_SCHEMA\n            AND RELATION_DETAILS.CONSTRAINT_CATALOG = RELATION.UNIQUE_CONSTRAINT_CATALOG\n            ` }\n\n        WHERE TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = '${ this.name }'\n            ${ tblNames.length && tblNames[0] !== '*' ? `AND TABLE_CONSTRAINTS.TABLE_NAME IN ('${ tblNames.join(`','`) }')` : '' }\n        GROUP BY (TABLE_CONSTRAINTS.constraint_name)\n        `;\n\n        return [sql0, sql1];\n    }\n\n    /**\n     * Builds a schema object from the results of querying the information schema.\n     * \n     * @param Array tblNames\n     * @param Array columns\n     * @param Array constraints\n     * @param Array indexes\n     * \n     * @returns Object\n     */\n    formatDescribeTableResult(tblNames, columns, constraints, indexes) {\n        // PG likes using verbose data types\n        const dataType = val => val === 'character varying' ? 'varchar' : (val === 'integer' ? 'int' : val);\n        const formatRelation = (key, tableScope = false) => ({\n            ...(!tableScope ? { constraintName: key.constraint_name } : {}),\n            basename: key.referenced_table_schema,\n            table: key.referenced_table_name,\n            columns: key.referenced_column_name.split(',').map(s => s.trim()),\n            ...(key.match_rule !== 'NONE' ? { matchRule: key.match_rule } : {}),\n            updateRule: key.update_rule,\n            deleteRule: key.delete_rule,\n        });\n        return (tblNames.length && tblNames[0] !== '*' ? tblNames : [...new Set(columns.map(col => col.table_name))]).map(tblName => {\n            const $columns = columns.filter(col => col.table_name === tblName);\n            const $constraints = constraints.filter(constr => constr.table_name === tblName);\n            const $indexes = indexes.filter(constr => constr.table_name === tblName);\n            // -----\n            const columnNames = $columns.map(col => col.column_name);\n            const normalizeCheckConstraint = key => {\n                // Which columns are referenced in the check expr? We first eliminate all quoted strings, obtain all literals, and intersect with columnNames\n                const literals = (key.check_clause.replace(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, '').match( /\\w+/g ) || []).map(s => s.toLowerCase());\n                key.columns = _intersect(columnNames, literals);\n                return key;\n            };\n            let [ primaryKey, uniqueKeys, foreignKeys, checks ] = $constraints.reduce(([ primarys, uniques, foreigns, checks ], key) => {\n                if (key.constraint_type === 'PRIMARY KEY') return [ primarys.concat(key), uniques, foreigns, checks ];\n                if (key.constraint_type === 'UNIQUE') return [ primarys, uniques.concat(key), foreigns, checks ];\n                if (key.constraint_type === 'FOREIGN KEY') return [ primarys, uniques, foreigns.concat(key), checks ];\n                if (key.constraint_type === 'CHECK' && !(this.client.params.dialect === 'postgres' && /^[\\d_]+not_null/.test(key.constraint_name))) return [ primarys, uniques, foreigns, checks.concat(normalizeCheckConstraint(key)) ];\n                return [ primarys, uniques, foreigns, checks ];\n            }, [[], [], [], []]);\n            // -----\n            const schema = {\n                name: tblName,\n                basename: this.name,\n                columns: $columns.reduce((cols, col) => {\n                    const temp = {};\n                    return cols.concat({\n                        name: col.column_name,\n                        type: col.character_maximum_length ? { name: dataType(col.data_type), maxLen: col.character_maximum_length } : dataType(col.data_type),\n                        ...(primaryKey.length === 1 && primaryKey[0].column_name === col.column_name && (temp.pKeys = primaryKey.pop()) ? {\n                            primaryKey: { constraintName: temp.pKeys.constraint_name }\n                        } : {}),\n                        ...((temp.uKeys = uniqueKeys.filter(key => key.column_name === col.column_name)).length === 1 && (uniqueKeys = uniqueKeys.filter(key => key !== temp.uKeys[0])) ? {\n                            uniqueKey: { constraintName: temp.uKeys[0].constraint_name }\n                        } : {}),\n                        ...((temp.fKeys = foreignKeys.filter(key => key.column_name === col.column_name)).length === 1 && (foreignKeys = foreignKeys.filter(key => key !== temp.fKeys[0])) ? {\n                            references: formatRelation(temp.fKeys[0])\n                        } : {}),\n                        ...((temp.cKeys = checks.filter(key => key.check_constraint_level !== 'Table' && key.columns.length === 1 && key.columns[0] === col.column_name)).length === 1 && (checks = checks.filter(key => key !== temp.cKeys[0])) ? {\n                            check: { constraintName: temp.cKeys[0].constraint_name, expr: temp.cKeys[0].check_clause }\n                        } : {}),\n                        ...(col.is_identity !== 'NO' ? {\n                            identity: { always: col.identity_generation === 'ALWAYS' }\n                        } : {}),\n                        ...(col.is_generated !== 'NEVER' ? {\n                            generated: { always: col.is_generated === 'ALWAYS', expr: col.generation_expression }\n                        } : {}),\n                        ...(col.is_nullable === 'NO' ? {\n                            notNull: true\n                        } : {}),\n                        ...(col.default ? {\n                            default: col.default\n                        } : {}),\n                    });\n                }, []),\n                constraints: [],\n                indexes: [],\n            };\n            schema.constraints.push(...[...primaryKey, ...uniqueKeys, ...foreignKeys].map(key => ({\n                constraintName: key.constraint_name,\n                type: key.constraint_type,\n                columns: key.column_name.split(',').map(col => col.trim()),\n                ...(key.constraint_type === 'FOREIGN KEY' ? { references: formatRelation(key, true) } : {}),\n            })));\n            schema.constraints.push(...checks.map(key => ({\n                constraintName: key.constraint_name,\n                type: key.constraint_type,\n                columns: key.columns,\n                expr: key.check_clause,\n            })));\n            return schema;\n        });\n    }\n\n    /**\n     * Standardizes the return value of a side-effect query.\n     * \n     * @param Array|Object result\n     * \n     * @returns Object\n     */\n    formatSideEffectResult(result) { return result; }\n}", "\nimport Lexer from '../../query/Lexer.js';\nimport Identifier from '../../query/select/Identifier.js';\nimport AbstractClient from '../abstracts/AbstractClient.js';\nimport SQLDatabase from './SQLDatabase.js';\t\n\nexport default class SQLClient extends AbstractClient {\n\n    /**\n     * Instance.\n     * \n     * @param Object params \n     */\n    constructor(driver, params = {}) {\n        if (typeof driver !== 'object') throw new Error(`The options.driver parameter is required and must be an object.`);\n        if (typeof driver.query !== 'function') throw new Error(`The provided driver must expose a .query() function.`);\n        super(driver, params);\n    }\n\n    /**\n\t * Client kind.\n     * \n     * @property String\n\t */\n    static kind = 'sql';\n\n    /**\n\t * Database class.\n     * \n     * @property Object\n\t */\n    static Database = SQLDatabase;\n\n    /**\n\t * List: system database.\n     * \n     * @var Array\n\t */\n    static systemDBs = [ 'information_schema', 'mysql', 'performance_schema', 'sys', 'pg_catalog', 'pg_toast' ];\n\n\t/**\n\t * Sets default database.\n\t * \n\t * @param String dbName\n\t * @param Object params\n     * \n     * @return String|Null\n\t */\n\tasync searchPath(...args) {\n        return this.searchPathCallback(path => {\n            return new Promise((resolve, reject) => {\n                const driver = this.driver;\n                if (path) {\n                    path = path.map(name => Identifier.fromJson(this, name));\n                    const sql = this.params.dialect === 'mysql' ? `USE ${ path[0] }` : `SET SEARCH_PATH TO ${ path.join(',') }`;\n                    return driver.query(sql, (err, result) => {\n                        if (err) return reject(err);\n                        resolve(result);\n                    });\n                }\n                let sql, key;\n                if (this.params.dialect === 'mysql') {\n                    sql = 'SELECT database() AS default_db', key = 'default_db';\n                } else {\n                    // Here, what we need is SHOW SEARCH_PATH not SELECT current_database()\n                    sql = `SHOW SEARCH_PATH`, key = 'search_path';\n                    sql = `SELECT current_setting('SEARCH_PATH')`, key = 'current_setting';\n                }\n                return driver.query(sql, (err, result) => {\n                    if (err) return reject(err);\n                    const rows = result.rows || result;\n                    const value = (rows[0] || {})[key];\n                    resolve(Lexer.split(value, [',']).map(s => Identifier.parseIdent(this, s.trim())[0]));\n                });\n            });\n        }, ...args);\n\t}\n\n\t/**\n     * Returns a list of databases.\n     * \n     * @param Object params\n     * \n     * @return Array\n\t */\n    async databases(params = {}) {\n        return this.databasesCallback(() => {\n            return new Promise((resolve, reject) => {\n                const sql = `SELECT schema_name FROM information_schema.schemata`;\n                return this.driver.query(sql, (err, result) => {\n                    if (err) return reject(err);\n                    resolve((result.rows || result).map(row => row.schema_name));\n                });\n            });\n        }, params, this.constructor.systemDBs);\n\t}\n\n    /**\n     * Creates a database.\n     * \n     * @param String dbName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async createDatabase(dbName, params = {}) {\n        return this.createDatabaseCallback((dbCreateInstance, handleTables, params) => {\n            return new Promise((resolve, reject) => {\n                return this.driver.query(dbCreateInstance.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Alters a database.\n     * \n     * @param String    dbName\n     * @param Function  schemaCallback\n     * @param Object    params\n     * \n     * @return Bool\n     */\n    async alterDatabase(dbName, schemaCallback, params = {}) {\n        return this.alterDatabaseCallback(async (dbAlterInstance, handleTables, params) => {\n            if (!dbAlterInstance.ACTIONS.length) return;\n            await handleTables(); // Handle tables before rename DB\n            return new Promise((resolve, reject) => {\n                return this.driver.query(dbAlterInstance.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * Drops a database.\n     * \n     * @param String dbName\n     * @param Object params\n     * \n     * @return Bool\n     */\n    async dropDatabase(dbName, params = {}) {\n        return this.dropDatabaseCallback((dbDropInstance, params) => {\n            return new Promise((resolve, reject) => {\n                return this.driver.query(dbDropInstance.toString(), (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * ---------\n     * QUERY\n     * ---------\n     */\n\t \n\t/**\n     * @inheritdoc\n\t */\n\tasync query(...query) {\n        return this.queryCallback(async (query, params) => {\n            if (query.expandable) await query.expand(true);\n            return new Promise((resolve, reject) => {\n                console.log('..........////////', params);\n                this.driver.query(`${ query }`, params.params || [], (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result.rows || result);\n                });\n            });\n        }, ...query);\n    }\n}"],
  "mappings": "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",
  "names": ["isString_default", "val", "isUndefined_default", "val", "isTypeFunction_default", "val", "isFunction_default", "val", "isTypeFunction_default", "isArray_default", "val", "isTypeArray_default", "val", "isString_default", "isUndefined_default", "isNull_default", "val", "isTypeObject_default", "val", "isTypeFunction_default", "isEmpty_default", "val", "isNull_default", "isUndefined_default", "isTypeObject_default", "isObject_default", "val", "from_default", "val", "castObject", "isArray_default", "isObject_default", "isEmpty_default", "isTypeArray_default", "isNumber_default", "val", "isNumeric_default", "val", "isNumber_default", "_flatten", "arr", "depth", "withObjects", "isNumeric_default", "isArray_default", "isObject_default", "acc", "val", "flatten_default", "first_default", "arr", "amount", "count", "itm", "firsts", "last_default", "arr", "amount", "first_default", "pushUnique_default", "arr", "items", "itm", "getPrototypeChain_default", "obj", "until", "isArray_default", "prototypalChain", "getAllPropertyNames_default", "obj", "until", "keysAll", "getPrototypeChain_default", "pushUnique_default", "mergeCallback", "objs", "callback", "deepProps", "isReplace", "withSymbols", "depth", "obj1", "isNumeric_default", "obj2", "i", "isTypeObject_default", "isFunction_default", "getAllPropertyNames_default", "key", "valAtObj1", "valAtObj2", "isArray_default", "isObject_default", "merge_default", "objs", "mergeCallback", "k", "obj1", "obj2", "isPlainObject_default", "obj", "isObject_default", "isBoolean_default", "val", "each_default", "obj", "callback", "returnValue", "isTypeObject_default", "k", "i", "isNumeric_default", "compareCallback_default", "obj1", "obj2", "assertion", "netComparison", "contrast", "returnOnFirstFalse", "isArray_default", "result", "contn", "v1", "testPass", "each_default", "k", "v2", "isTypeObject_default", "isObject_default", "isBoolean_default", "_even", "obj1", "obj2", "assertion", "depth", "isArray_default", "isObject_default", "obj1Keys", "obj2Keys", "isPlainObject_default", "result", "compareCallback_default", "v1", "v2", "isFunction_default", "isNumber_default", "even_default", "copyPlain_default", "obj", "filter", "mergeCallback", "key", "obj1", "obj2", "isFunction_default", "isArray_default", "intersect_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "Lexer", "_Lexer", "str", "delims", "options", "isString_default", "copyResult", "result", "copyPlain_default", "i", "cached", "even_default", "instance", "runtime", "from_default", "merge_default", "cursor", "flatten_default", "charWidth", "commentTest", "quoteTest", "nestingTest", "chars", "stopChar", "matchedDelim", "nextIndex", "quote", "block", "last_default", "ending", "starting", "first_default", "matchedStarting", "matchedEnding", "testList", "k", "testArg", "isObject_default", "isFunction_default", "ret", "regexFlags", "m", "match", "base", "text", "target", "isNewSeries", "splitSeries", "isUndefined_default", "splitSeries2", "comments", "Lexer", "Node", "_Node", "context", "statementNode", "asInputDialect", "expr", "escChar", "parts", "Lexer", "parses", "s", "get", "x", "string_s", "$strings", "meta", "attr", "flags", "f", "flag", "attrName", "args", "Type", "delegate", "Types", "cast", "arg", "prev", "set", "instance", "router", "methodName", "t", "name", "parseCallback", "json", "Identifier", "Node", "name", "nameParts", "context", "json", "instance", "s", "expr", "basename", "StatementNode", "Node", "node", "context", "expr", "Lexer", "chunk", "i", "inPlace", "CreateDatabase", "StatementNode", "context", "name", "json", "expr", "match", "ifNotExists", "namePart", "instance", "jsonClone", "obj", "key", "value", "after_default", "subject", "search", "afterLast", "pos", "before_default", "subject", "search", "beforeLast", "pos", "beforeLast_default", "subject", "search", "before_default", "unwrap_default", "subject", "openingTag", "closingTag", "beforeLast_default", "after_default", "wrapped_default", "subject", "openingTag", "closingTag", "AbstractConstraint", "Node", "basename", "serializeReferentialRule", "rule", "sql", "s", "context", "expr", "asInputDialect", "nameRegex", "nameUnscaped", "nameEscaped", "rest", "table_maybeQualified", "cols", "opts", "Lexer", "table", "columns", "unwrap_default", "col", "matchReferentialRule", "str", "type", "referentialActionRe", "keyword1", "keyword2", "keyword2Columns", "$expr", "TableLevelConstraint", "AbstractConstraint", "context", "constraintName", "type", "columns", "detail", "sql", "s", "expr", "parseColumns", "columnsExpr", "Lexer", "unwrap_default", "columnExpr", "$expr", "$$expr", "rest", "json", "columnLevelConstraint", "columnName", "ColumnLevelConstraint", "AbstractConstraint", "context", "constraintName", "type", "detail", "sql", "s", "json", "expr", "$expr", "alwaysOrByDefault", "value", "$$expr", "$$$expr", "unwrap_default", "DataType", "Node", "context", "name", "precision", "json", "expr", "parse", "key", "Column", "Node", "context", "name", "value", "DataType", "constraints", "ColumnLevelConstraint", "json", "constraint", "constraintName", "type", "detail", "equivProperty", "prop", "instance", "property", "cnst", "c", "expr", "parseCallback", "namePart", "bodyPart", "Lexer", "qualifier", "regexes", "columnType", "tokens", "Index", "Node", "context", "indexName", "type", "columns", "expr", "match", "rest", "namePart", "columnsPart", "Lexer", "name", "unwrap_default", "columnExpr", "json", "Action", "_Action", "Node", "newName", "newDb", "argument", "argumentNew", "reference", "context", "json", "instance", "TableLevelConstraint", "Index", "Column", "prev", "Class", "subAction", "arg", "ColumnLevelConstraint", "DataType", "methodName", "a", "AlterDatabase", "StatementNode", "context", "name", "newName", "Action", "action", "json", "instance", "newDbName", "expr", "match", "ifExists", "rest", "name1Part", "name2Part", "Lexer", "name1", "name2", "jsonA", "jsonB", "flags", "DropDatabase", "StatementNode", "context", "name", "json", "expr", "match", "ifExists", "namePart", "dbName", "instance", "CreateTable", "StatementNode", "context", "name", "basename", "nameParts", "columns", "Column", "constraints", "TableLevelConstraint", "indexes", "Index", "column", "constraint", "index", "json", "instance", "defs", "col", "c", "cnst", "ndx", "expr", "parseCallback", "match", "ifNotExists", "rest", "namePart", "bodyPart", "Lexer", "tblName", "dbName", "unwrap_default", "def", "jsonClone", "rebase", "obj", "key", "value", "type", "redefine", "nameKey", "arr", "x", "AlterTable", "StatementNode", "context", "name", "basename", "jsonBefore", "nameParts", "newName", "Action", "newDb", "argument", "reference", "action", "json", "instance", "stmts0", "stmts1", "ifExists", "$flags", "nodeKind", "TableLevelConstraint", "Index", "nameKey", "ifNotExists", "first", "afterCol", "Column", "constraint", "c", "subAction", "asTableLevelConstraint", "dropStatement", "dropTarget", "asLiterals", "ColumnLevelConstraint", "DataType", "expr", "parseCallback", "match", "rest", "namePart", "bodyPart", "Lexer", "tblName", "dbName", "regex", "stmts", "s", "stmt", "renameMatch", "nodeKind_a", "nodeNameUnescaped_a", "nodeNameEscaped_a", "newNodeNameUnescaped_a", "newNodeNameEscaped_a", "nodeName", "newNodeName", "a", "relocateMatch", "newSchemaUnescaped", "newSchemaEscaped", "dropMatch", "nodeKind_b", "ifExists_b", "nodeNameUnescaped_b", "nodeNameEscaped_b", "flags_b", "flags", "addMatch", "columnKeyword_c", "ifColumnNotExists_c", "spec_c", "$spec", "alterMatch", "nodeKind_d", "nodeNameUnescaped_d", "nodeNameEscaped_d", "subAction_d", "argument_d", "ifNodeExits_d", "constraintOrIndexAttr_d", "$", "argumentNew", "jsonA", "jsonB", "listName", "NodeClass", "namesA", "namesB", "namesAll", "makeSets", "nodeA", "node", "nodeB", "propsA", "propsB", "propsAll", "property", "createArg", "attrEquivalent", "constraintName", "detail", "isSame", "jsonsA", "jsonsB", "actions", "tblSchema", "CreateTable", "tblAlterInstance", "b", "x", "ab", "$b", "i", "temp", "prev", "k", "DropTable", "StatementNode", "context", "name", "basename", "nameParts", "json", "s", "expr", "match", "ifExists", "namePart", "tblName", "dbName", "instance", "Placeholder", "Node", "context", "offset", "json", "expr", "notation", "match", "Str", "Node", "context", "expr", "quote", "json", "text", "asInputDialect", "quoteChars", "$", "q", "wrapped_default", "Lexer", "unwrap_default", "Json", "Str", "context", "value", "type", "quote", "json", "instance", "expr", "braces", "$", "text", "b", "wrapped_default", "Lexer", "Num", "Node", "context", "value", "json", "expr", "JsonPath", "Node", "lhs", "operator", "rhs", "Json", "Identifier", "Num", "Str", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "Path", "_Path", "Node", "lhs", "operator", "rhs", "$static", "Identifier", "JsonPath", "getPrimaryKey", "schema", "col", "cons", "getKeyDef", "foreignKey", "getSchema", "tblName", "dbName", "clientApi", "basename", "dbApi", "foreignKey_rhs", "table_rhs", "schema_rhs", "path", "keyDef_rhs", "table_lhs", "schema_lhs", "primaryKey_lhs", "foreignKey_lhs", "keyDef_lhs", "primaryKey_rhs", "stmt", "baseTable", "baseKey", "joinKey", "joinAlias", "joint", "baseAlias", "prev", "key", "joinKeyAlias", "j", "q", "field", "on", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "WhenClause", "Node", "condition", "Expr", "consequence", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "CaseConstruct", "Node", "baseValue", "Expr", "whenExpr", "WhenClause", "elseClause", "c", "context", "json", "instance", "whenClause", "sql", "expr", "parseCallback", "caseMatch", "caseConstruct", "assertions", "clauses", "Lexer", "clause", "assertStmt", "TypeCast", "Node", "operand", "type", "syntax2", "Expr", "context", "json", "instance", "expr", "parseCallback", "parens", "Lexer", "Parens", "Node", "context", "expr", "fns", "Select", "Expr", "json", "instance", "parseCallback", "wrapped_default", "Lexer", "unwrap_default", "Math", "Node", "context", "operator", "operands", "Expr", "o", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "s", "AbstractGroupBy", "Node", "args", "Expr", "criterion", "c", "context", "json", "instance", "expr", "parseCallback", "groupByMatch", "criteriaExpr", "criterionExpr", "Lexer", "PartitionByClause", "AbstractGroupBy", "AbstractOrderBy", "Node", "args", "Expr", "c", "context", "json", "instance", "criterion", "expr", "parseCallback", "orderByMatch", "criteriaExpr", "criterionExpr", "Lexer", "sort", "OrderByClause", "AbstractOrderBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "Lexer", "instance", "WindowSpec", "Node", "name", "windowRef", "partitionBys", "PartitionByClause", "orderBys", "OrderByClause", "context", "json", "k", "instance", "sql", "x", "expr", "parseCallback", "parseEnclosure", "enclosure", "definedRef", "clauses", "clauseTypes", "Lexer", "unwrap_default", "clauseType", "hasEnclosure", "Func", "Node", "name", "args", "Expr", "o", "context", "json", "instance", "expr", "parseCallback", "Lexer", "arg", "Aggr", "Func", "args", "orderBys", "OrderByClause", "window", "WindowSpec", "context", "json", "instance", "s", "expr", "parseCallback", "func", "over", "Lexer", "name", "allOrDistinct", "$args", "orderByClause", "StrJoin", "Node", "strings", "Expr", "str", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "Prim", "Node", "context", "value", "json", "expr", "Expr", "context", "json", "Types", "instance", "router", "methodName", "args", "$instance", "prev", "Type", "f", "t", "name", "arg", "expr", "parseCallback", "Parens", "CaseConstruct", "StrJoin", "Condition", "Path", "JsonPath", "Assertion", "Math", "TypeCast", "Aggr", "Func", "Json", "Str", "Num", "Prim", "Placeholder", "Identifier", "Assertion", "Node", "context", "operator", "operands", "Expr", "args", "Condition", "o", "json", "re", "instance", "sql", "rightHandSide", "s", "expr", "parseCallback", "lhs", "rhs", "Lexer", "$operator", "$operands", "unwrap_default", "opr", "Condition", "_Condition", "Node", "context", "logic", "assertions", "Assertion", "o", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "AbstractAliasableExpr", "Node", "name", "Identifier", "fns", "Parens", "expr", "alias", "claused", "context", "json", "instance", "Path", "s", "parseCallback", "escChar", "$expr", "$separator", "aliasUnescaped", "aliasEscaped", "exprNode", "$alias", "Expr", "Table", "AbstractAliasableExpr", "Parens", "Identifier", "JoinClause", "Table", "table", "correlations", "Condition", "correlation", "Identifier", "context", "json", "instance", "s", "expr", "parseCallback", "joinMatch", "type", "joinSpec", "$table", "$correlation", "matches", "Lexer", "Assertion", "GroupByClause", "AbstractGroupBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "instance", "WindowClause", "Node", "windows", "WindowSpec", "w", "context", "json", "instance", "expr", "parseCallback", "windowMatch", "windowSpec", "spec", "Lexer", "Field", "AbstractAliasableExpr", "lhs", "operator", "rhs", "JsonPath", "Path", "name", "args", "Aggr", "Func", "fns", "CaseConstruct", "Select", "_Select", "StatementNode", "fields", "Field", "tables", "Table", "table", "JoinClause", "wheres", "Condition", "groupBys", "GroupByClause", "windows", "WindowClause", "orderBys", "OrderByClause", "offset", "limit", "l", "node", "Aggr", "Path", "Placeholder", "q", "inPlace", "instance", "path", "query", "s", "context", "json", "params", "sql", "expr", "parseCallback", "match", "withUac", "allOrDistinct", "body", "$body", "clausesMap", "fieldsSpec", "tokens", "clauses", "Lexer", "x", "fieldExpr", "field", "clause", "$clause", "clauseKey", "key", "tblExpr", "Assertion", "args", "AssignmentList", "Node", "target_s", "value_s", "t", "Identifier", "v", "Expr", "context", "json", "instance", "expr", "parseCallback", "assignmentExpr", "Lexer", "s", "wrapped_default", "targets", "unwrap_default", "values", "target", "value", "OnConflictClause", "AssignmentList", "wheres", "Condition", "context", "json", "instance", "sql", "expr", "parseCallback", "onConflictMatch", "conflictTarget", "action", "updateSpec", "assignmentList", "whereSpec", "Lexer", "Assertion", "Insert", "StatementNode", "table", "Table", "columns", "Identifier", "values", "assignments", "AssignmentList", "query", "Select", "onConflictSpecs", "OnConflictClause", "c", "v", "context", "json", "instance", "sql", "s", "row", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "tableSpec", "payloadSpec", "onConflictSpec", "insertType", "onConflictClause", "Lexer", "tableColumnSplit", "unwrap_default", "rowPayload", "rowPayloadArray", "valueExpr", "Update", "StatementNode", "tables", "Table", "table", "JoinClause", "assignments", "AssignmentList", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "tableSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "Assertion", "Delete", "StatementNode", "identifiers", "Identifier", "tablesOrIdentifiers", "Table", "tables", "table", "JoinClause", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "maybeTablesSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "asType", "Assertion", "grammar_default", "CreateDatabase", "AlterDatabase", "DropDatabase", "CreateTable", "AlterTable", "DropTable", "Insert", "Update", "Delete", "Select", "Expr", "Parser", "grammar_default", "context", "expr", "grammar", "params", "$grammar", "Node", "node", "$context", "$expr", "$params", "Savepoint", "client", "details", "direction", "currentSavepointInDb", "OBJ_INFOSCHEMA_DB", "q", "c", "params", "getTableSnapshots", "tableSnapshot", "col", "cnst", "ndx", "errors", "noCreateSavepoint", "tables", "tbl", "tblName", "dbSchemaEdit", "dbName", "x", "y", "z", "objInternals", "AbstractClient", "driver", "params", "args", "dbName", "editCallback", "schemasMap", "callback", "path", "returnValue", "tblName", "prev", "filter", "standardExclusions", "db", "dbList", "OBJ_INFOSCHEMA_DB", "standardExclusionsRe", "dbSchema", "dbCreateInstance", "CreateDatabase", "dbApi", "tablesSavepoints", "onAfterCreateCalled", "onAfterCreate", "tblSchema", "savepointCreation", "dbAlterRequest", "dbAlterInstance", "onAfterAfterCalled", "onAfterAlter", "AlterDatabase", "tablesAlterRequest", "dbSchemaEdit", "tableSchemas", "tableSchema", "CreateTable", "name", "x", "$dbName", "tableDiffs", "AlterTable", "diff", "newDbName", "action", "savepoint", "dbDropInstance", "DropDatabase", "Types", "Insert", "Update", "Delete", "Select", "DropTable", "exec", "instance", "basename", "searchPath", "s", "$queryType", "queryType", "m", "Type", "arg", "i", "Parser", "entry", "tblEntries", "infoSchemaDB", "where", "y", "rolledbackSavepoints", "q", "insertResult", "Savepoint", "tblEntry", "all_default", "arr", "callback", "prevTest", "itm", "i", "any_default", "arr", "callback", "prevTest", "itm", "i", "unique_default", "arr", "distinct", "value", "index", "self", "AbstractDatabase", "client", "dbName", "params", "tblName", "tblSchema", "tablesMap", "OBJ_INFOSCHEMA_DB", "forward", "result", "q", "f", "x", "Savepoint", "callback", "filter", "tbl", "tblList", "tblName_s", "isMultiple", "tblNames", "isAll", "requestList", "tblSchemas", "dbSchemaEdit", "tblCreateRequest", "CreateTable", "editCallback", "tblAlterRequest", "AlterTable", "newTblName", "action", "newTblLocation", "listName", "nameKey", "obj", "tblDropRequest", "DropTable", "AbstractInsertQueryInspector", "table", "rawResultMeta", "columns", "entries", "duplicateKeyUpdateObj", "isArray_default", "keyPaths", "wheres", "primaryKeyColumns", "any_default", "columnName", "uniqueColumns", "keyPath", "columnIndexes", "unique_default", "all", "columnNameIndexInRows", "columnIndexNames", "entry", "where", "SQLInsertQueryInspector", "AbstractInsertQueryInspector", "infoArray", "match", "n", "withIDs", "pointers", "primaryKeys", "affectedRows", "entryPointer", "all_default", "id", "isNumeric_default", "primaryKey", "where", "pointerObj", "pointerNames", "sql", "columnName", "isArray_default", "whereAll", "whereEach", "isEmpty_default", "driver", "resolve", "reject", "whereSql", "query", "err", "result", "row", "entry", "i", "AbstractDeleteQueryInspector", "table", "rawResultMeta", "whereObj", "SQLDeleteQueryInspector", "AbstractDeleteQueryInspector", "withIDs", "AbstractTable", "database", "tblName", "params", "OBJ_INFOSCHEMA_DB", "forward", "dbName", "tblFields", "dbFields", "result", "q", "name", "f", "x", "y", "tblDetails", "dbDetails", "key", "context", "Savepoint", "constraintType", "schema", "inlineConstraintTypesMap", "columns", "col", "cnst", "cols", "indexType", "index", "cursor", "rowObj", "primaryKey", "existing", "readKeyPath", "primaryKeyColumns", "uniqueKeyColumns", "match", "uniqueKeys", "alias", "existingRow", "i", "constraintName", "keyPath", "multiValues", "duplicateKeyCallback", "forceAutoIncrement", "inserts", "forUpdates", "values", "columnNames", "duplicateRow", "n", "timestamp", "column", "columnType", "isObject_default", "multiRows", "updates", "multiIDs", "deletes", "applyDefaults", "rowObjColumns", "schemaColumns", "unknownFields", "columnName", "value", "isTypeObject_default", "isString_default", "wrapped_default", "isNumeric_default", "intersect_default", "isNull_default", "isUndefined_default", "from_default", "v", "AbstractCursor", "rows", "callback", "SQLCursor", "AbstractCursor", "store", "resolve", "SQLTable", "AbstractTable", "SQLCursor", "resolve", "reject", "err", "result", "primaryKey", "primaryKeyColumns", "query", "entries", "columns", "duplicateKeyCallback", "duplicateKeyUpdateObj", "isObject_default", "col", "insertSql", "row", "formatAddRow", "formatAssignments", "SQLInsertQueryInspector", "rowObj", "rowObjs", "putSql", "formatPutRow", "IDs", "deleteSql", "id", "SQLDeleteQueryInspector", "formatVal", "val", "dialect", "isNumeric_default", "isNull_default", "values", "key", "assignments", "SQLDatabase", "AbstractDatabase", "SQLTable", "params", "resolve", "reject", "sql", "err", "result", "row", "tblName_s", "tblNames", "driver", "sql0", "sql1", "columns", "constraints", "tblSchemas", "tblSchema", "tblCreateRequest", "tblName", "schemaCallback", "tblAlterRequest", "tblDropRequest", "ANY_VALUE", "col", "GROUP_CONCAT", "orderBy", "indexes", "dataType", "val", "formatRelation", "key", "tableScope", "s", "$columns", "$constraints", "constr", "$indexes", "columnNames", "normalizeCheckConstraint", "literals", "intersect_default", "primaryKey", "uniqueKeys", "foreignKeys", "checks", "primarys", "uniques", "foreigns", "schema", "cols", "temp", "SQLClient", "AbstractClient", "driver", "params", "SQLDatabase", "args", "path", "resolve", "reject", "name", "Identifier", "sql", "err", "result", "key", "value", "Lexer", "s", "row", "dbName", "dbCreateInstance", "handleTables", "schemaCallback", "dbAlterInstance", "dbDropInstance", "query"]
}
