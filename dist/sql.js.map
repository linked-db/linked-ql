{
  "version": 3,
  "sources": ["../node_modules/@webqit/util/js/isString.js", "../node_modules/@webqit/util/js/isUndefined.js", "../node_modules/@webqit/util/js/isTypeFunction.js", "../node_modules/@webqit/util/js/isFunction.js", "../node_modules/@webqit/util/js/isArray.js", "../node_modules/@webqit/util/js/isTypeArray.js", "../node_modules/@webqit/util/js/isNull.js", "../node_modules/@webqit/util/js/isTypeObject.js", "../node_modules/@webqit/util/js/isEmpty.js", "../node_modules/@webqit/util/js/isObject.js", "../node_modules/@webqit/util/arr/from.js", "../node_modules/@webqit/util/js/isNumber.js", "../node_modules/@webqit/util/js/isNumeric.js", "../node_modules/@webqit/util/arr/flatten.js", "../node_modules/@webqit/util/arr/first.js", "../node_modules/@webqit/util/arr/last.js", "../node_modules/@webqit/util/arr/pushUnique.js", "../node_modules/@webqit/util/obj/getPrototypeChain.js", "../node_modules/@webqit/util/obj/getAllPropertyNames.js", "../node_modules/@webqit/util/obj/mergeCallback.js", "../node_modules/@webqit/util/obj/merge.js", "../node_modules/@webqit/util/js/isPlainObject.js", "../node_modules/@webqit/util/js/isBoolean.js", "../node_modules/@webqit/util/obj/each.js", "../node_modules/@webqit/util/obj/compareCallback.js", "../node_modules/@webqit/util/obj/even.js", "../node_modules/@webqit/util/obj/copyPlain.js", "../node_modules/@webqit/util/arr/intersect.js", "../node_modules/@webqit/util/str/Lexer.js", "../src/lang/Lexer.js", "../node_modules/@webqit/util/str/after.js", "../node_modules/@webqit/util/str/before.js", "../node_modules/@webqit/util/arr/difference.js", "../node_modules/@webqit/util/str/beforeLast.js", "../node_modules/@webqit/util/str/fromCamel.js", "../node_modules/@webqit/util/str/toTitle.js", "../node_modules/@webqit/util/str/toCamel.js", "../node_modules/@webqit/util/str/unwrap.js", "../node_modules/@webqit/util/str/wrapped.js", "../src/lang/AbstractNode.js", "../src/lang/expr/Identifier.js", "../src/lang/expr/abstracts/AbstractNodeList.js", "../src/lang/expr/refs/RefErrorAmbiguous.js", "../src/lang/expr/refs/RefErrorUnknown.js", "../src/lang/expr/refs/AbstractRef.js", "../src/lang/expr/abstracts/AbstractAliasableExpr.js", "../src/lang/ddl/abstracts/AbstractDiffableNode.js", "../src/lang/ddl/abstracts/AbstractNameableNode.js", "../src/lang/ddl/abstracts/AbstractPrefixableNameableNode.js", "../src/lang/expr/refs/DatabaseRef.js", "../src/lang/expr/refs/GlobalDatabaseRef.js", "../src/lang/expr/refs/TableRef.js", "../src/lang/expr/refs/GlobalTableRef.js", "../src/lang/ddl/abstracts/AbstractCDL.js", "../src/lang/ddl/abstracts/AbstractAction.js", "../src/lang/ddl/constraints/actions/Flag.js", "../src/lang/ddl/constraints/ConstraintCDL.js", "../src/lang/ddl/constraints/abstracts/AbstractConstraint.js", "../src/lang/ddl/constraints/abstracts/AbstractLevel2Constraint.js", "../src/lang/ddl/abstracts/AbstractColumnsMixin.js", "../src/lang/ddl/constraints/PrimaryKeyConstraint.js", "../src/lang/ddl/abstracts/AbstractReferenceMixin.js", "../src/lang/ddl/abstracts/AbstractArgumentMixin.js", "../src/lang/ddl/abstracts/AbstractAlterAction.js", "../src/lang/AbstractStatementNode.js", "../src/lang/AbstractSugar.js", "../src/lang/AbstractDDLStatement.js", "../src/lang/ddl/constraints/UniqueKeyConstraint.js", "../src/lang/expr/refs/ColumnRef.js", "../src/lang/expr/Literal.js", "../src/lang/ddl/constraints/abstracts/AbstractExprMixin.js", "../src/lang/ddl/constraints/CheckConstraint.js", "../src/lang/ddl/constraints/abstracts/AbstractLevel1Constraint.js", "../src/lang/ddl/constraints/IdentityConstraint.js", "../src/lang/ddl/constraints/AutoIncrementConstraint.js", "../src/lang/ddl/constraints/ExpressionConstraint.js", "../src/lang/ddl/constraints/DefaultConstraint.js", "../src/lang/ddl/constraints/NotNullConstraint.js", "../src/lang/ddl/constraints/OnUpdateClause.js", "../src/lang/ddl/constraints/NullConstraint.js", "../src/lang/ddl/column/actions/Add.js", "../src/lang/ddl/column/actions/Drop.js", "../src/lang/ddl/column/DataType.js", "../src/lang/ddl/column/actions/Set.js", "../src/lang/ddl/column/ColumnCDL.js", "../src/lang/ddl/column/ColumnSchema.js", "../src/lang/ddl/index/actions/Flag.js", "../src/lang/ddl/index/IndexCDL.js", "../src/lang/ddl/index/IndexSchema.js", "../src/lang/ddl/table/actions/Add.js", "../src/lang/ddl/table/actions/Modify.js", "../src/lang/ddl/table/actions/Change.js", "../src/lang/ddl/table/actions/Drop.js", "../src/lang/ddl/table/actions/Set.js", "../src/lang/ddl/table/actions/Alter.js", "../src/lang/ddl/table/actions/Rename.js", "../src/lang/ddl/table/TableCDL.js", "../src/lang/ddl/database/actions/AlterTable.js", "../src/lang/ddl/abstracts/AbstractCreateAction.js", "../src/lang/ddl/database/actions/CreateTable.js", "../src/lang/ddl/abstracts/AbstractDropAction.js", "../src/lang/ddl/database/actions/DropTable.js", "../src/lang/ddl/abstracts/AbstractRenameAction.js", "../src/lang/ddl/database/actions/Rename.js", "../src/lang/ddl/database/actions/Set.js", "../src/lang/ddl/database/DatabaseCDL.js", "../src/lang/ddl/AlterDatabase.js", "../src/lang/ddl/CreateDatabase.js", "../src/lang/ddl/DropDatabase.js", "../src/lang/ddl/RenameDatabase.js", "../src/lang/ddl/RootCDL.js", "../src/lang/ddl/constraints/ForeignKeyConstraint.js", "../src/lang/ddl/table/TableSchema.js", "../src/lang/ddl/database/DatabaseSchema.js", "../src/lang/expr/abstracts/AbstractOperator2Expr.js", "../src/lang/expr/logic/Assertion.js", "../src/lang/dql/clauses/OrderCriteria.js", "../src/lang/dql/clauses/OrderByClause.js", "../src/lang/dql/clauses/LimitClause.js", "../src/lang/expr/abstracts/AbstractOperator1Expr.js", "../src/lang/expr/logic/Condition.js", "../src/lang/dql/clauses/WhereClause.js", "../src/lang/dql/clauses/Table.js", "../src/lang/dql/clauses/OnClause.js", "../src/lang/dql/clauses/JoinClause.js", "../src/lang/expr/path/AbstractPath.js", "../src/lang/expr/path/PathLeft.js", "../src/lang/expr/path/PathJunction.js", "../src/lang/expr/json/Property.js", "../src/lang/expr/types/Str.js", "../src/lang/expr/functions/Fn.js", "../src/lang/expr/json/JsonObjectSpec.js", "../src/lang/expr/json/JsonArraySpec.js", "../src/lang/dml/clauses/ColumnsSpec.js", "../src/lang/dml/clauses/RowSpec.js", "../src/lang/dql/clauses/PartitionByClause.js", "../src/lang/dql/clauses/Window.js", "../src/lang/expr/functions/Aggr.js", "../src/lang/expr/json/JsonAgg.js", "../src/lang/expr/types/TypeCast.js", "../src/lang/expr/types/Json.js", "../src/lang/expr/types/Num.js", "../src/lang/expr/json/JsonPath.js", "../src/lang/expr/path/PathRight.js", "../src/lang/dql/AbstractQueryStatement.js", "../src/lang/ddl/RootSchema.js", "../src/lang/expr/Binding.js", "../src/lang/AbstractNonDDLStatement.js", "../src/lang/dql/clauses/OffsetClause.js", "../src/lang/dql/clauses/GroupByClause.js", "../src/lang/dql/clauses/HavingClause.js", "../src/lang/dql/clauses/WindowClause.js", "../src/lang/dql/SelectStatement.js", "../src/lang/expr/Parens.js", "../src/lang/dql/SubQuery.js", "../src/lang/expr/logic/WhenClause.js", "../src/lang/expr/logic/CaseConstruct.js", "../src/lang/expr/types/Array.js", "../src/lang/expr/types/StrJoin.js", "../src/lang/expr/operators/Math.js", "../src/lang/expr/types/Bool.js", "../src/lang/dml/clauses/ValuesClause.js", "../src/lang/dml/clauses/RowSpecClause.js", "../src/lang/dml/clauses/ValuesSubClause.js", "../src/lang/expr/ForeignBinding.js", "../src/lang/expr/grammar.js", "../src/lang/dql/clauses/Field.js", "../src/lang/dql/clauses/FieldsSpec.js", "../src/lang/dml/clauses/ReturningClause.js", "../src/lang/dml/AbstractDMLStatement.js", "../src/lang/dml/DeleteStatement.js", "../src/lang/expr/operators/Assignment.js", "../src/lang/dml/clauses/SetClause.js", "../src/lang/dml/AbstractPayloadStatement.js", "../src/lang/dml/clauses/OnConflictClause.js", "../src/lang/dml/InsertStatement.js", "../src/api/Savepoint.js", "../src/lang/ddl/database/actions/RenameTable.js", "../src/lang/dml/UpsertStatement.js", "../src/lang/dml/UpdateStatement.js", "../src/lang/grammar.js", "../src/lang/Parser.js", "../src/api/AbstractClient.js", "../src/api/AbstractTable.js", "../src/api/AbstractCursor.js", "../src/api/sql/SQLCursor.js", "../src/api/sql/SQLTable.js", "../src/api/AbstractDatabase.js", "../src/api/sql/SQLDatabase.js", "../src/api/sql/SQLClient.js"],
  "sourcesContent": ["\n/**\n * Tells if val is of type \"string\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\n};\n", "\n/**\n * Tells if val is undefined or is of type \"undefined\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\n};\n", "\n/**\n * Tells if val is of type \"function\".\n * This holds true for both regular functions and classes.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn typeof val === 'function';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"function\".\n *\n * @param object \t\tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\n};\n", "\n/**\n * Tells if val is of type \"array\".\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val);\n};\n", "\n/**\n * @imports\n */\nimport _isString from './isString.js';\nimport _isUndefined from './isUndefined.js';\n\n/**\n * Tells if val is \"array-like\".\n * This holds true for anything that has a length property.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !_isString(val) && !_isUndefined(val.length);\n};\n", "\n/**\n * Tells if val is undefined or is null.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === null || val === '';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"object\".\n * This holds true for anything object, including built-ins.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\n};\n", "\n/**\n * @imports\n */\nimport _isNull from './isNull.js';\nimport _isUndefined from './isUndefined.js';\nimport _isTypeObject from './isTypeObject.js';\n\n/**\n * Tells if val is empty in its own type.\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\n * objects without keys, empty arrays.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\n};\n", "\n/**\n * Tells if val is pure object.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isTypeArray from '../js/isTypeArray.js';\nimport _isEmpty from '../js/isEmpty.js';\nimport _isObject from '../js/isObject.js';\n\n/**\n * Casts an array-like object to an array.\n *\n * @param mixed \tval\n * @param bool\t \tcastObject\n *\n * @return array\n */\nexport default function(val, castObject = true) {\n\tif (_isArray(val)) {\n\t\treturn val;\n\t};\n\tif (!castObject && _isObject(val)) {\n\t\treturn [val];\n\t};\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\n\t\treturn [];\n\t};\n\tif (_isTypeArray(val)) {\n\t\treturn Array.prototype.slice.call(val);\n\t};\n\tif (_isObject(val)) {\n\t\treturn Object.values(val);\n\t};\n\treturn [val];\n};\n", "\n/**\n * Tells if val is of type \"number\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof Number || (typeof val === 'number');\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from './isNumber.js';\n/**\n * Tells if val is of type \"string\" or a numeric string.\n * This holds true for both numbers and numeric strings.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNumber(val) || (val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1));\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Flattens a nested array to the given depth.\n *\n * @param array \tarr\n * @param int \t \tdepth\n * @param bool \t \twithObjects\n *\n * @return array\n */\nconst _flatten = function(arr, depth = 1, withObjects = true) {\n\tif (!_isNumeric(depth) || depth <= 0) {\n\t\treturn arr;\n\t};\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\n\t\tarr = Object.values(arr);\n\t};\n\tif (!_isArray(arr)) {\n\t\treturn arr;\n\t};\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \n\t\t: acc.concat(val), []);\n};\n\n/**\n * @exports\n */\nexport default _flatten;", "\n/**\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\tvar count = 0;\n\tarr.forEach(itm => {\n\t\tcount ++;\n\t});\n\tvar firsts = arr.slice(arr.length - count, amount);\n\treturn arguments.length > 1 ? firsts : firsts[0];\n};\n", "\n/**\n * @imports\n */\nimport _first from './first.js';\n\n/**\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\treturn arguments.length > 1\n\t\t? _first(arr.slice().reverse(), amount).reverse()\n\t\t: _first(arr.slice().reverse());\n};\n", "\n/**\n * Adds an item if not already exist.\n *\n * @param array \tarr\n * @param array\t \t...itms\n *\n * @return array\n */\nexport default function(arr, ...items) {\n\titems.forEach(itm => {\n\t\tif (arr.indexOf(itm) < 0) {\n\t\t\tarr.push(itm);\n\t\t}\n\t});\n\treturn arr;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the prototype chain.\n *\n * @param object \t\tobj\n * @param object\t \tuntil\n *\n * @return bool\n */\nexport default function(obj, until) {\n\tuntil = until || Object.prototype;\n\tuntil = until && !_isArray(until) ? [until] : until;\n\t// We get the chain of inheritance\n\tvar prototypalChain = [];\n\tvar obj = obj;\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\n\t\tprototypalChain.push(obj);\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\n\t}\n\treturn prototypalChain;\n};\n", "\n/**\n * @imports\n */\nimport _pushUnique from '../arr/pushUnique.js';\nimport _getPrototypeChain from './getPrototypeChain.js';\n\n/**\n * Eagerly retrieves object members all down the prototype chain.\n *\n * @param object\t \tobj\n * @param object\t \tuntil\n *\n * @return array\n */\nexport default function(obj, until) {\n\tvar keysAll = [];\n\t_getPrototypeChain(obj, until).forEach(obj => {\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\n\t});\n\treturn keysAll;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\nimport _getAllPropertyNames from './getAllPropertyNames.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\n\tvar depth = 0;\n\tvar obj1 = objs.shift();\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\n\t\tdepth = obj1;\n\t\tobj1 = objs.shift();\n\t}\n\tif (!objs.length) {\n\t\tthrow new Error('_merge() requires two or more array/objects.');\n\t}\n\tobjs.forEach((obj2, i) => {\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\n\t\t\treturn;\n\t\t}\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.keys(obj2)).forEach(key => {\n\t\t\tif (!callback(key, obj1, obj2, i)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valAtObj1 = obj1[key];\n\t\t\tvar valAtObj2 = obj2[key];\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \n\t\t\t&& (depth === true || depth > 0)) {\n\t\t\t\t// RECURSE...\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\n\t\t\t} else {\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\t\t\t\tif (isReplace) {\n\t\t\t\t\t\tobj1[key] = valAtObj2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj1.push(valAtObj2);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// In case we're setting a read-only property\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (withSymbols) {\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn obj1;\n};\n", "\n/**\n * @imports\n */\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function(...objs) {\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\n\t\treturn true;\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isObject from './isObject.js';\n\n/**\n * Tells if an object is direct instance of Object.prototype.\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\n *\n * @param object \tobj\n *\n * @return bool\n */\nexport default function(obj) {\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n};\n", "\n/**\n * Tells if val is undefined or is of type \"boolean\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === true || val === false;\n};\n", "\n/**\n * @imports\n */\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Loops thru obj flatly with a callback function.\n * Stops when callback returns a non-undefined value.\n *\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\n * @param function \t\t\t\tcallback \t\tThe callback function.\n *\n * @return mixed|null\t\t\tAny non-null return from callback\n */\nexport default function(obj, callback) {\n\tvar returnValue = undefined;\n\tif (_isTypeObject(obj)) {\n\t\tObject.keys(obj).forEach((k, i) => {\n\t\t\tif (returnValue !== false) {\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\n\t\t\t}\n\t\t});\n\t}\n\treturn returnValue;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isBoolean from '../js/isBoolean.js';\nimport _each from './each.js';\n\n/**\n * Gets the match(es) between (members of) two values;\n * assertion optionally custom.\n *\n * @param mixed \t\t\tob1\n * @param mixed \t\t\tobj2\n * @param string|function\tassertion\n * @param bool\t\t\t\tnetComparison\n * @param bool\t\t\t\tcontrast\n * @param bool\t\t\t\treturnOnFirstFalse\n *\n * @return bool|array|object\n */\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\n\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\tvar result = [];\n\t\tvar contn = true;\n\t\tobj1.forEach(v1 => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = false;\n\t\t\t_each(obj2, (k, v2) => {\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\n\t\t\t\t\ttestPass = assertion(v1, v2);\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\t\t\ttestPass = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\n\t\t\t\t\t\tv1 = testPass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult.push(netComparison ? testPass : v1);\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult.push(testPass);\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult.push(v1);\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\t\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar result = {};\n\t\tvar contn = true;\n\t\tObject.keys(obj1).forEach(k => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\ttestPass = false;\n\t\t\t}\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult[k] = testPass;\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult[k] = obj1[k];\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from '../js/isNumber.js';\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isPlainObject from '../js/isPlainObject.js';\nimport _compareCallback from './compareCallback.js';\n\n/**\n * Asserts (members of) the first value against (members of) subsequent values.\n * Assertion could be TRUE, FALSE, or custom.\n *\n * @param mixed \t\t\tobj1\n * @param mixed \t\t\tobj2\n * @param bool|function\t\tassertion\n * @param int\t\t\t\tdepth\n *\n * @return bool\n */\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\n\t\treturn !assertion;\n\t}\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar obj1Keys = Object.keys(obj1);\n\t\tvar obj2Keys = Object.keys(obj2);\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\n\t\t\t// Objects that won't show keys must be compared by instance\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \n\t\t\t\t? assertion\n\t\t\t\t: (obj1 === obj2) === assertion;\n\t\t}\n\t\tif (!_even(obj1Keys, obj2Keys)) {\n\t\t\treturn !assertion;\n\t\t}\n\t}\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\n\t\treturn _isArray(result) \n\t\t\t? result.length === obj1.length && result.length === obj2.length \n\t\t\t: (_isObject(result) && _isObject(obj1) \n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \n\t\t\t\t: result);\n\t}\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \n\t\t\t? assertion \n\t\t\t: (obj1 === obj2) === assertion\n\t);\n};\n\n/**\n * @exports\n */\nexport default _even;\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n * Copies only properties of an object.\n *\n * @param object\t \tobj\n * @param array\t\t \tonly\n * @param array\t\t \texcept\n *\n * @return object\n */\nexport default function(obj, filter = []) {\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\n\t\tif (!_isFunction(obj2[key])) {\n\t\t\treturn _isFunction(filter) ? filter(key) \n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\n\t\t}\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the intersection of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) !== -1\n\t);\n};\n", "\n/**\n * @imports\n */\nimport _isString from '../js/isString.js';\nimport _isUndefined from '../js/isUndefined.js';\nimport _isFunction from '../js/isFunction.js';\nimport _arrFrom from '../arr/from.js';\nimport _flatten from '../arr/flatten.js';\nimport _first from '../arr/first.js';\nimport _last from '../arr/last.js';\nimport _merge from '../obj/merge.js';\nimport _even from '../obj/even.js';\nimport _copyPlain from '../obj/copyPlain.js';\nimport { _isObject } from '../js/index.js';\n\n/**\n * --------------------------\n * TOKENIZER\n * --------------------------\n */\n\nexport default class Lexer {\n\n\t/**\n\t * Factory method.\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic lex(str, delims, options = {}) {\n\t\tif (!_isString(str = str + '')) {\n\t\t\tthrow new Error('Argument1 must be a string!');\n\t\t}\n\t\tvar copyResult = result => {\n\t\t\treturn {\n\t\t\t\tdelims: result.delims.slice(),\n\t\t\t\toptions: _copyPlain(result.options),\n\t\t\t\tnesting: result.nesting.slice(),\n\t\t\t\tmaxDepth: result.maxDepth,\n\t\t\t\tcomments: result.comments.slice(),\n\t\t\t\ttokens: result.tokens.slice(),\n\t\t\t\tmatches: result.matches.slice(),\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\n\t\t\t};\n\t\t};\n\t\t// ASK CACHE ---------------------------\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\n\t\t\t\tvar cached = Lexer.$cache[str][i];\n\t\t\t\tif (_even(cached.delims, delims)) {\n\t\t\t\t\treturn copyResult(cached);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// FRESH PARSE\t -------------------------------\n\t\tvar instance = new Lexer(str, options);\n\t\tvar result = instance.lex(delims);\n\t\t// SAVE TO CACHE -------------------------------\n\t\tif (options.cache !== false) {\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\n\t\t\tLexer.$cache[str].push(result);\n\t\t}\n\t\treturn copyResult(result);\n\t\t\n\t}\n\n\t/**\n\t * Factory method for .split().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic split(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).tokens;\n\t}\n\n\t/**\n\t * Factory method for .match().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic match(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).matches;\n\t}\n\n\t/**\n\t * Creates a lexer instance on a string with the given options.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\n\t * @param number \t\tlimit\t\t\t\tMax results to return\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\n\t *\n\t * @return array\n\t */\n\tconstructor(str, options) {\n\t\tif (!_isString(str)) {\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\n\t\t}\n\t\tthis.$str = str;\n\t\tthis.$options = options || {};\n\t\tif (!this.$options.blocks) {\n\t\t\tthis.$options.blocks = Lexer.$blocks;\n\t\t}\n\t\tif (!this.$options.quotes) {\n\t\t\tthis.$options.quotes = Lexer.$quotes;\n\t\t}\n\t\tif (!this.$options.comments) {\n\t\t\tthis.$options.comments = Lexer.$comments;\n\t\t}\n\t}\n\n\t/**\n\t * Parses the instance string on the given delimeters.\n\t *\n\t * This method supports static calling,\n\t * in which case a string is required as the first argument.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tlex(delims, options) {\n\t\tvar runtime = {\n\t\t\tdelims: _arrFrom(delims),\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\n\t\t\tnesting: [],\n\t\t\tmaxDepth: 0,\n\t\t\tcomments: [],\n\t\t\ttokens: [],\n\t\t\tmatches: [],\n\t\t\tmatchesi: {},\n\t\t};\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tvar cursor = 0;\n\t\twhile(typeof cursor === 'number') {\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\n\t\t}\n\t\tif (runtime.nesting.length) {\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\n\t\t}\n\t\t// RETURN NEW ----------------------------------\n\t\treturn runtime;\n\t}\n\n\t/**\n\t * Expr helper: evaluates and handles the character on the current cursor.\n\t * Advances the cursor.\n\t *\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return void\n\t */\n\t_evalCharsAt(runtime, i) {\n\t\tif (i >= this.$str.length) {\n\t\t\treturn;\n\t\t}\n\t\tvar charWidth = 1;\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\n\t\t// Quotes inside comments must be ignored\n\t\tif (!runtime.openComment) {\n\t\t\tquoteTest = this._testQuotes(runtime, i);\n\t\t}\n\t\t// Comments inside quotes must be ignored\n\t\tif (!runtime.openQuote) {\n\t\t\tcommentTest = this._testComments(runtime, i);\n\t\t}\n\t\t// Save comments\n\t\tif (runtime.openComment || commentTest.ending) {\n\t\t\t// Save only outer comments\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\n\t\t\t\tcharWidth = chars.length;\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\n\t\t\t} else {\n\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t}\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\n\t\t\t// Yes add quotes\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\treturn i + 1;\n\t\t} else {\n\t\t\t// Nesting tags inside comments and quotes have been ignored\n\t\t\tnestingTest = this._testNesting(runtime, i);\n\t\t\t// ---------------------\n\t\t\t// STOP ON THIS CHARACTER...?\n\t\t\t// ---------------------\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\n\t\t\t// STOP CHAR(S)? at top level?\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\n\t\t\t\truntime.options.stopChar = stopChar;\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// ---------------------\n\t\t\t// Match and split now...\n\t\t\t// ---------------------\n\t\t\tif (!runtime.delims.length) {\n\t\t\t\t// BLOCK-BASED SPLITTING...\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t} else/*no-nesting flag*/ {\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// ---------------------\n\t\t\t\t// DELIMS-BASED SPLITTING\n\t\t\t\t// ---------------------\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\t\t// In case the chars at index 0 is a delim,\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\n\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\n\t\t\t\t\tif (matchedDelim !== false) {\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\n\t\t\t\t\t\t\t// The current character is a delimiter...\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\n\t\t\t\t\t\t\tvar nextIndex = i + (matchedDelim.length || 1);\n\t\t\t\t\t\t\tif (nextIndex === this.$str.length) {\n\t\t\t\t\t\t\t\t// In case the chars at last index is a delim,\n\t\t\t\t\t\t\t\t// the resulting split should last have an empty string\n\t\t\t\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn nextIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\n\t\t\t\t} else {\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\n\t\t\t\t\tcharWidth = chars.length;\n\t\t\t\t\tthis._push(runtime, chars);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn i + charWidth;\n\t}\n\n\t/**\n\t * Expr helper: tests for a quote start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testQuotes(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.quotes || []).forEach(quote => {\n\t\t\tif (this.$str.substr(i, 1) === quote) {\n\t\t\t\tif (!runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = quote;\n\t\t\t\t\tresult.starting = quote;\n\t\t\t\t} else if (quote === runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = false;\n\t\t\t\t\tresult.ending = quote;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a comment start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testComments(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.comments || []).forEach(block => {\n\t\t\tif (!runtime.openComment) {\n\t\t\t\tvar starting = _first(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\t\truntime.openComment = block;\n\t\t\t\t\tresult.starting = starting;\n\t\t\t\t}\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\n\t\t\t\tvar ending = _last(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\truntime.openComment = false;\n\t\t\t\t\tresult.ending = ending;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testNesting(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.blocks || []).forEach(block => {\n\t\t\tlet starting = _first(block), matchedStarting;\n\t\t\tif (starting instanceof RegExp) {\n\t\t\t\t[matchedStarting] = starting.exec(this.$str.substr(i)) || [];\n\t\t\t} else if (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\tmatchedStarting = starting;\n\t\t\t}\n\t\t\tif (matchedStarting) {\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\n\t\t\t\tresult.starting = matchedStarting;\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\n\t\t\t\tvar ending = _last(block), matchedEnding;\n\t\t\t\tif (ending instanceof RegExp) {\n\t\t\t\t\t[matchedEnding] = ending.exec(this.$str.substr(i)) || [];\n\t\t\t\t} else if (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\tmatchedEnding = ending;\n\t\t\t\t}\n\t\t\t\tif (matchedEnding) {\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\n\t\t\t\t\tresult.ending = matchedEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\n\t *\n\t * @param array\t\ttestList\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return mixed\n\t */\n\t_testChars(testList, runtime, i) {\n\t\tfor (var k = 0; k < testList.length; k ++) {\n\t\t\tconst testArg = {\n\t\t\t\tuseRegex: runtime.options.useRegex,\n\t\t\t\tci: runtime.options.ci,\n\t\t\t\t...(_isObject(testList[k]) ? testList[k] : { test: testList[k] })\n\t\t\t};\n\t\t\tif (_isFunction(testArg.test)) {\n\t\t\t\tvar ret = testArg.test(this.$str.substr(0, i), this.$str.substr(i), runtime.tokens.slice());\n\t\t\t\tif (ret !== false) return ret;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (testArg.useRegex) {\n\t\t\t\tconst regexFlags = testArg.useRegex !== true ? testArg.useRegex : '';\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + testArg.test, regexFlags));\n\t\t\t\tif (m && (!testArg.backtest || this.$str.substr(0, i).match(new RegExp(testArg.backtest, regexFlags)))) {\n\t\t\t\t\treturn m[0];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst match = (base, text) => testArg.ci ? base.toLowerCase() === text.toLowerCase() : base === text;\n\t\t\tif (match(this.$str.substr(i, testArg.test.length), testArg.test)) {\n\t\t\t\tif (!testArg.backtest || match(this.$str.substr(i - testArg.backtest.length, i), testArg.backtest)) {\n\t\t\t\t\treturn testArg.test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Expr helper: pushes a character or set of characters into the current split series.\n\t *\n\t * @param object \truntime\n\t * @param string\tchars\n\t * @param string\ttarget\n\t * @param bool\t\tisNewSeries\n\t *\n\t * @return void\n\t */\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\n\t\tvar splitSeries = runtime.matches.length;\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\n\t\t\truntime.tokens[splitSeries] = '';\n\t\t}\n\n\t\tif (target === 'comments') {\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\n\t\t\t\truntime.tokens[splitSeries].comments = [];\n\t\t\t}\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\n\t\t} else {\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\n\t\t}\n\t}\n\n\t/**\n\t * Splits the instance string on the given delimeters and returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tsplit(str, delims, options) {\n\t\treturn this.lex(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters and returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t *\n\t * @return array\n\t */\n\tmatch(str, delims, options) {\n\t\treturn this.lex(delims, options).matches;\n\t}\n\t\n\t/**\n\t * Parses the instance string on the given delimeters using regex.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tregParse(delims, options) {\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregSplit(delims, options) {\n\t\treturn this.regParse(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregMatch(delims, options) {\n\t\treturn this.regParse(delims, options).matches;\n\t}\n};\n\n/**\n * @var array\n */\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\n\n/**\n * @var array\n */\nLexer.$quotes = ['\"', \"'\", '`',];\n\n/**\n * @var array\n */\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\n\n/**\n * @var object\n */\nLexer.$cache = Object.create(null);", "import $Lexer from '@webqit/util/str/Lexer.js';\n\nexport class Lexer extends $Lexer {\n    static $blocks = [...$Lexer.$blocks, [new RegExp(`^CASE `, 'i'), new RegExp(`^ END`, 'i')]];\n}", "\n/**\n * Return the remainder of a string after a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   afterLast\n *\n * @return string\n */\nexport default function(subject, search, afterLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn '';\n\t}\n\treturn subject.substr(pos + search.length);\n};\n", "\n/**\n * Return the part of a string before a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   beforeLast\n *\n * @return string\n */\nexport default function(subject, search, beforeLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn subject;\n\t}\n\treturn subject.substr(0, pos);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the difference of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) === -1\n\t);\n};\n", "\n/**\n * @imports\n */\nimport _before from './before.js';\n\n/**\n * Return the part of a string before last occurence of a given value.\n *\n * @param  string  subject\n * @param  string  search\n *\n * @return string\n */\nexport default function(subject, search) {\n\treturn _before(subject, search, true);\n};\n", "\n/**\n * Splits a camel-cased string.\n *\n * @param string \tstr\n * @param string \tdelimiter\n *\n * @return string\n */\nexport default function(str, delimiter) {\n\treturn str === undefined ? '' : str.split(/(?=[A-Z])/).join(delimiter ? delimiter : ' '); // positive lookahead to keep the capital letters\n};\n", "\n/**\n * Converts a string to title case.\n *\n * @param string \tstr\n * @param bool \t\tstrict\n *\n * @return string\n */\nexport default function(str, strict) {\n\tif (typeof str !== 'string') {\n\t\treturn str;\n\t}\n\treturn str.replace(/\\w\\S*/g,  function(txt) { return txt.charAt(0).toUpperCase() + ((typeof strict !== undefined && strict) ? txt.substr(1).toLowerCase() : txt.substr(1)); })\n};\n", "\n/**\n * @imports\n */\nimport _toTitle from './toTitle.js';\n\n/**\n * Makes a string camel-cased.\n *\n * @param string \tstr\n * @param bool\t \tfromStart\n *\n * @return string\n */\nexport default function(str, fromStart) {\n\t// Make disting words\n\tstr = _toTitle(str.replace(/-/g, ' ')).replace(/ /g, '');\n\treturn fromStart ? str : str[0].toLowerCase() + str.substr(1);\n};\n", "\n/**\n * @imports\n */\nimport _after from './after.js';\nimport _beforeLast from './beforeLast.js';\n\n/**\n * Returns the string without the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return string\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\n};\n", "\n/**\n * Tells if the string is warapped with the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return bool\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\n};\n", "import { _fromCamel } from '@webqit/util/str/index.js';\r\nimport { _isObject } from '@webqit/util/js/index.js';\r\nimport { Lexer } from './Lexer.js';\r\n\r\nexport class AbstractNode {\r\n\r\n\t#contextNode;\r\n\t#flags = [];\r\n\t#additionalDetails;\r\n\r\n\tconstructor(contextNode) {\r\n\t\tthis.#contextNode = contextNode;\r\n\t\tthis.#additionalDetails = new Map;\r\n\t}\r\n\r\n\tstatic get NODE_NAME() { return _fromCamel(this.name, '_').toUpperCase(); }\r\n\tget NODE_NAME() { return this.constructor.NODE_NAME; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * NODE TREE\r\n\t * -----------\r\n\t */\r\n\r\n\tget baseClient() { return this.#contextNode?.baseClient || this.#contextNode; }\r\n\r\n\tget params() { return this.#contextNode?.params || {}; }\r\n\r\n\tget additionalDetails() { return this.#additionalDetails; }\r\n\r\n\tget rootNode() { return this.#contextNode?.contextNode || this; }\r\n\r\n\tget statementNode() { return this.#contextNode?.statementNode; }\r\n\r\n\tget contextNode() { return this.#contextNode; }\r\n\r\n\r\n\tcapture(requestName) {\r\n\t\tif (arguments.length !== 1) throw new Error(`capture() expects exactly 1 parameter.`);\r\n\t\treturn this.#contextNode?.$capture(requestName, this);\r\n\t}\r\n\r\n\tbubble(eventType) {\r\n\t\tif (arguments.length !== 1) throw new Error(`bubble() expects exactly 1 parameter.`);\r\n\t\treturn this.#contextNode?.$bubble?.(eventType, this);\r\n\t}\r\n\r\n\t$capture(requestName, requestSource) {\r\n\t\tif (arguments.length !== 2) throw new Error(`$capture() expects exactly 2 parameters.`);\r\n\t\treturn this.#contextNode?.$capture?.(requestName, requestSource);\r\n\t}\r\n\r\n\t$bubble(eventType, eventSource) {\r\n\t\tif (arguments.length !== 2) throw new Error(`$bubble() expects exactly 2 parameters.`);\r\n\t\tthis.#contextNode?.$bubble?.(eventType, eventSource);\r\n\t\tif (eventSource === this && eventType === 'DISCONNECTED') { this.#contextNode = null; }\r\n\t}\r\n\r\n\t$castInputs(args, Type, slot, slotName, delegatesTo = null, dedupeCallback = null) {\r\n\t\t// --------------\r\n\t\tconst Types = [].concat(Type || []);\r\n\t\tif (!Types.length) throw new Error(`At least one node type must be defined.`);\r\n\t\tif (delegatesTo && Types.length !== 1) throw new Error(`Only one Type expected for delegatable operations.`);\r\n\t\tconst $ = { result: slot };\r\n\t\t// --------------\r\n\t\tconst fromInstanceOrJson = arg => {\r\n\t\t\tlet instance = Types.reduce((prev, Type) => prev || (arg instanceof Type && arg), null);\r\n\t\t\tif (instance) return instance;\r\n\t\t\tconst contextNode = ['dependencies', 'dependents'].includes(slotName) ? this.baseClient : this;\r\n\t\t\treturn Types.reduce((prev, Type) => prev || Type.fromJSON(contextNode, arg), null);\r\n\t\t};\r\n\t\tconst createFactoryMethodHandler = ({ returnPairs = false, autoThrow = false }) => {\r\n\t\t\tconst fromFactoryMethod = (methodName, ...args) => Types.reduce((prev, Type) => prev || (() => {\r\n\t\t\t\tif (Type.expose) {\r\n\t\t\t\t\tconst $methodName = Object.keys(Type.expose).find(k => k.split('|').includes(methodName));\r\n\t\t\t\t\tconst instance = $methodName && Type.expose[$methodName](this, ...args);\r\n\t\t\t\t\treturn instance && [instance, instance];\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof Type.prototype[methodName] === 'function') {\r\n\t\t\t\t\tconst instance = new Type(this);\r\n\t\t\t\t\treturn [instance, instance[methodName](...args)];\r\n\t\t\t\t}\r\n\t\t\t})(), null);\r\n\t\t\treturn new Proxy({}, {\r\n\t\t\t\tget: (t, methodName) => (...args) => {\r\n\t\t\t\t\tconst resultPair = fromFactoryMethod(methodName, ...args);\r\n\t\t\t\t\tif (resultPair) {\r\n\t\t\t\t\t\t$.result = adoptNode($.result, resultPair[0]);\r\n\t\t\t\t\t\treturn returnPairs ? resultPair : resultPair[1];\r\n\t\t\t\t\t} else if (autoThrow) throw new Error(`[${this.NODE_NAME}::${slotName}]: The ${methodName}(${args}) method is undefined in any of ${Types.map(Type => Type.name).join(', ')}.`);\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t};\r\n\t\tconst adoptNode = (slot, instance) => {\r\n\t\t\tinstance?.bubble('CONNECTED');\r\n\t\t\tif (instance && typeof this.params.nodeCallback === 'function') {\r\n\t\t\t\tthis.params.nodeCallback(instance);\r\n\t\t\t}\r\n\t\t\tif (Array.isArray(slot) && instance) {\r\n\t\t\t\tconst duplicate = dedupeCallback?.(instance);\r\n\t\t\t\tif (duplicate) {\r\n\t\t\t\t\tduplicate.bubble('DISCONNECTED');\r\n\t\t\t\t\treturn slot.map((node) => node === duplicate ? instance : node);\r\n\t\t\t\t}\r\n\t\t\t\treturn slot.concat(instance);\r\n\t\t\t}\r\n\t\t\tif (slot && instance !== slot) slot.bubble('DISCONNECTED');\r\n\t\t\treturn instance;\r\n\t\t};\r\n\t\t// --------------\r\n\t\tif (args.length === 1 && args[0] === undefined) {\r\n\t\t\tif (Array.isArray($.result)) throw new Error(`[${this.NODE_NAME}::${slotName}]: Cannot unset array property.`);\r\n\t\t\treturn adoptNode($.result, undefined);\r\n\t\t}\r\n\t\t// --------------\r\n\t\t// Handle args\r\n\t\tconst delegatables = new Set;\r\n\t\tif (args.length > 1 && !Array.isArray($.result)) {\r\n\t\t\twhile (args.length) delegatables.add(args.shift());\r\n\t\t}\r\n\t\tfor (let i = 0; i < args.length; i++) {\r\n\t\t\tconst arg = args[i];\r\n\t\t\t// Function args\r\n\t\t\tif (typeof arg === 'function') {\r\n\t\t\t\tif (delegatesTo) delegatables.add(arg);\r\n\t\t\t\telse arg(createFactoryMethodHandler({ returnPairs: false, autoThrow: true }));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Instance of JSON hydration\r\n\t\t\tif ($.instance = fromInstanceOrJson(arg)) {\r\n\t\t\t\t$.result = adoptNode($.result, $.instance);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Object factories\r\n\t\t\tconst $$ = {};\r\n\t\t\tif (_isObject(arg) && !arg.nodeName && ($$.keys = Object.keys(arg)).length) {\r\n\t\t\t\tconst proxy = createFactoryMethodHandler({ returnPairs: true, autoThrow: !delegatesTo });\r\n\t\t\t\tlet baseMethodName = $$.keys.shift(), $nextMethodName;\r\n\t\t\t\tlet [instance, chainTarget] = proxy[baseMethodName](...[].concat(arg[baseMethodName])) || [];\r\n\t\t\t\tif (instance) {\r\n\t\t\t\t\twhile ($nextMethodName = $$.keys.shift()) {\r\n\t\t\t\t\t\tconst nextMethod = chainTarget?.[$nextMethodName];\r\n\t\t\t\t\t\tif (typeof nextMethod !== 'function') throw new Error(`[${this.NODE_NAME}::${slotName}][${i + 1}/${args.length}]: The implied chaining: ${chainTarget.NODE_NAME}.${baseMethodName}().${$nextMethodName}() is invalid.`);\r\n\t\t\t\t\t\tchainTarget = nextMethod.call(chainTarget, ...[].concat(arg[$nextMethodName]));\r\n\t\t\t\t\t\tbaseMethodName = $nextMethodName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Delegable?\r\n\t\t\tif (delegatesTo) {\r\n\t\t\t\tdelegatables.add(arg);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet content;\r\n\t\t\tif (_isObject(arg)) { try { content = JSON.stringify(arg); } catch (e) { content = arg.constructor.name; } }\r\n\t\t\telse content = arg + '';//typeof arg;\r\n\t\t\tthrow new Error(`[${this.NODE_NAME}::${slotName}][${i + 1}/${args.length}]: Arguments must be of type ${Types.map(Type => Type.name).join(', ')} or a JSON equivalent. Recieved: ${content}`);\r\n\t\t}\r\n\t\t// --------------\r\n\t\t// Delegate arguments\r\n\t\tif (delegatables.size) {\r\n\t\t\tlet instance;\r\n\t\t\tif (Array.isArray($.result)) {\r\n\t\t\t\tinstance = new Types[0](this);\r\n\t\t\t\t$.result = adoptNode($.result, instance);\r\n\t\t\t} else {\r\n\t\t\t\t$.result = $.result || new Types[0](this);\r\n\t\t\t\tinstance = $.result;\r\n\t\t\t}\r\n\t\t\tinstance[delegatesTo](...delegatables);\r\n\t\t\treturn $.result;\r\n\t\t}\r\n\t\t// --------------\r\n\t\t// Return result\r\n\t\treturn $.result;\r\n\t}\r\n\r\n\t/**\r\n\t * -----------\r\n\t * ESCAPING & QUOTING\r\n\t * -----------\r\n\t */\r\n\r\n\tstatic getQuoteChars(contextNode, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && contextNode?.params?.inputDialect) || contextNode?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !contextNode.params.ansiQuotes ? [\"'\", '\"'] : [\"'\"];\r\n\t}\r\n\r\n\tstatic getEscChar(contextNode, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && contextNode?.params?.inputDialect) || contextNode?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !contextNode.params.ansiQuotes ? '`' : '\"';\r\n\t}\r\n\r\n\tget quoteChars() { return this.constructor.getQuoteChars(this); }\r\n\r\n\tget escChar() { return this.constructor.getEscChar(this); }\r\n\r\n\tstatic esc(escChar, expr, quote = false) { return quote || !/^(\\*|[\\w]+)$/.test(expr)/*not alphanumeric*/ ? `${escChar}${(expr || '').replace(new RegExp(escChar, 'g'), escChar.repeat(2))}${escChar}` : expr; }\r\n\r\n\tstatic unesc(escChar, expr, unquote = false) { return (!unquote || (new RegExp(`^${escChar}.*${escChar}$`)).test(expr) && (expr = expr.slice(1, -1))) && expr.replace(new RegExp(escChar.repeat(2), 'g'), escChar); }\r\n\r\n\tstatic parseIdent(contextNode, expr, unquote = false, asInputDialect = true) {\r\n\t\tconst escChar = this.getEscChar(contextNode, asInputDialect);\r\n\t\tconst parts = Lexer.split(expr, ['.']);\r\n\t\tconst parses = parts.map(s => (new RegExp(`^(?:(\\\\*|[\\\\w]+)|(${escChar})((?:\\\\2\\\\2|[^\\\\2])+)\\\\2)$`)).exec(s.trim())).filter(s => s);\r\n\t\treturn parses.length < parts.length ? [] : parses.map(s => s?.[1] || this.unesc(escChar, s?.[3], unquote));\r\n\t}\r\n\r\n\tstringifyIdent(ident_s, quote = false) {\r\n\t\tconst esc = ident => this.constructor.esc(this.escChar, ident, quote);\r\n\t\tif (Array.isArray(ident_s)) return ident_s.filter(s => s).map(esc).join('.');\r\n\t\treturn esc(ident_s);\r\n\t}\r\n\r\n\tstatic parseString(contextNode, expr, unquote = false, asInputDialect = true) {\r\n\t\tconst quoteChars = this.getQuoteChars(contextNode, asInputDialect), $ = {};\r\n\t\twhile (($.quoteChar = quoteChars.pop()) && ($.resultString = this.unesc($.quoteChar, expr, unquote)) !== false) {\r\n\t\t\treturn [$.resultString, $.quoteChar];\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tstringifyString(str, quote = false) { return this.constructor.esc(this.quoteChars[0], str, quote); }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * PARSING CONVERSIONS\r\n\t * -----------\r\n\t */\r\n\r\n\twithDetail(key, value) {\r\n\t\tthis.#additionalDetails.set(key, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\thasDetail(key) { return this.#additionalDetails.has(key); }\r\n\r\n\tgetDetail(key) { return this.#additionalDetails.get(key); }\r\n\r\n\twithFlag(...flags) {\r\n\t\tflags = new Set(flags.filter(f => f));\r\n\t\tthis.#flags = this.#flags.reduce(($flags, $flag) => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\tfor (const flag of flags) {\r\n\t\t\t\tconst b = flag.split(':');\r\n\t\t\t\tif (b[0] === a[0]) {\r\n\t\t\t\t\t$flag = [...(new Set([...a, ...b]))].join(':');\r\n\t\t\t\t\tflags.delete(flag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $flags.concat($flag);\r\n\t\t}, []).concat(...flags);\r\n\t\treturn this;\r\n\t}\r\n\r\n\thasFlag(flag) { return !!this.getFlag(flag); }\r\n\r\n\tgetFlag(flag) {\r\n\t\tif (!arguments.length) return this.#flags;\r\n\t\tconst b = flag.toUpperCase().split(':');\r\n\t\treturn this.#flags.find($flag => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\treturn b[0] === a[0] && b.every(f => a.includes(f));\r\n\t\t});\r\n\t}\r\n\r\n\t$eq(a, b, caseMatch = null) {\r\n\t\tif (Array.isArray(a) && Array.isArray(b)) {\r\n\t\t\treturn a.length === b.length && (b = b.slice(0).sort())\r\n\t\t\t&& a.slice(0).sort().every((x, i) => this.$eq(x, b[i], caseMatch));\r\n\t\t}\r\n\t\tif (a instanceof AbstractNode) a = a.jsonfy();\r\n\t\tif (b instanceof AbstractNode) b = b.jsonfy();\r\n\t\tif (_isObject(a) && _isObject(b)) {\r\n\t\t\tconst temp = {};\r\n\t\t\treturn (temp.keys_a = Object.keys(a)).length === (temp.keys_b = Object.keys(b)).length\r\n\t\t\t&& temp.keys_a.reduce((prev, k) => prev && this.$eq(a[k], b[k], caseMatch), true);\r\n\t\t}\r\n\t\tif (typeof a === 'string' && typeof b === 'string' && caseMatch === 'ci') {\r\n\t\t\treturn a.toLowerCase() === b.toLowerCase();\r\n\t\t}\r\n\t\treturn a === b;\r\n\t}\r\n\r\n\tidentifiesAs(value) {\r\n\t\tif (typeof value === 'undefined') return false;\r\n\t\tif (typeof value?.toJSON === 'function') return this.$eq(this.jsonfy(), value.jsonfy(), 'ci');\r\n\t}\r\n\r\n\tcontains(possibleChild) {\r\n\t\tif (!possibleChild) return false;\r\n\t\treturn this === possibleChild.contextNode || this.contains(possibleChild.contextNode);\r\n\t}\r\n\r\n\tstatic fromJSON(contextNode, json, callback = null) {\r\n\t\tif (json instanceof AbstractNode) throw new Error(`Illegal instance passed as JSON: ${json.NODE_NAME}`);\r\n\t\tif (_isObject(json) && 'nodeName' in json && json.nodeName !== this.NODE_NAME) return;\r\n\t\tconst instance = (new this(contextNode)).withFlag(...(json?.flags || []));\r\n\t\tif (typeof callback === 'function') callback(instance);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn {\r\n\t\t\t...(options.nodeNames !== false ? { nodeName: this.NODE_NAME } : {}),\r\n\t\t\t...(typeof jsonIn === 'function' ? jsonIn() : jsonIn),\r\n\t\t\t...(this.#flags.length ? { flags: this.#flags.slice(0) } : {}),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic parse(contextNode, expr, parseCallback = null) { }\r\n\r\n\ttoString() { return this.stringify(); }\r\n\r\n\ttoJSON(keyHint = null, options = {}) { return this.jsonfy(options); }\r\n\r\n\tclone(options = {}) {\r\n\t\tconst json = this.jsonfy(options);\r\n\t\tconst Classes = [this.constructor].concat(this.constructor.DESUGARS_TO || []);\r\n\t\treturn Classes.reduce((prev, C) => prev || C.fromJSON(this.#contextNode, json), undefined);\r\n\t}\r\n\r\n\tdeSugar(options = {}) {\r\n\t\toptions = { ...options, deSugar: true };\r\n\t\treturn this.clone(options);\r\n\t}\r\n}\r\n", "import { AbstractNode } from '../AbstractNode.js';\n\nexport class Identifier extends AbstractNode {\n\t\n\t#name;\n\n\tname(value) {\n\t\tif (!arguments.length) return this.#name;\n\t\tif (typeof value !== 'string') throw new TypeError(`Invalid argument as identifier name: ${ value }.`);\n\t\treturn (this.#name = value, this);\n\t}\n\n\tidentifiesAs(value) {\n\t\tif (typeof value === 'string') return this.$eq(this.#name, value, 'ci');\n\t\treturn super.identifiesAs(value);\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (typeof json === 'string') json = { name: json };\n\t\telse if (typeof json?.name !== 'string') return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.name(json.name);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tname: this.#name,\n\t\t\t...jsonIn,\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr) {\n\t\tif (/^(TRUE|FALSE|NULL)$/i.test(expr)) return;\n\t\tconst [name] = this.parseIdent(context, expr).reverse();\n\t\tif (!name) return;\n\t\treturn (new this(context)).name(name);\n\t}\n\t\n\tstringify() { return this.stringifyIdent(this.#name); }\n}", "import { Lexer } from '../../Lexer.js';\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\nimport { AbstractNode } from '../../AbstractNode.js';\n\nexport class AbstractNodeList extends AbstractNode {\n    static get EXPECTED_TYPES() { return []; }\n    static get TAGS() { return []; }\n\n    #entries = [];\n    \n    [ Symbol.iterator ]() { return this.#entries[ Symbol.iterator ](); }\n    \n    get length() { return this.#entries.length; }\n\n    entries() { return this.#entries.slice(); }\n\n    add(...args) {\n        this.#entries = this.$castInputs(\n            args, \n            this.constructor.EXPECTED_TYPES, \n            this.#entries,\n            'add',\n            this.constructor.ARGS_DELEGATION,\n        );\n        return this;\n    }\n\n    has(ref) { return !!this.get(ref); }\n\n    get(ref) {\n        if (typeof ref === 'number') return this.#entries[ref];\n        return this.#entries.find(e => e.identifiesAs(ref));\n    }\n\n    static fromJSON(context, json, callback = null) {\n        if (!Array.isArray(json?.entries)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n            for (const entry of json.entries) { instance.add(entry); }\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n    jsonfy(options = {}, jsonIn = {}, reducer = null) {\n\t\treturn super.jsonfy(options, {\n            entries: this.#entries.reduce((aggr, entry, i) => {\n                if (reducer) {\n                    const result = reducer(entry, i);\n                    if (!result) return aggr;\n                    if (![entry, true].includes(result)) {\n                        if (result instanceof AbstractNode) throw new Error(`A JSON object not a node instance expected from reducer`);\n                        return aggr.concat(result);\n                    }\n                }\n                return aggr.concat(entry.jsonfy(options));\n            }, []),\n            ...jsonIn\n\t\t});\n    }\n\n    static parse(context, expr, parseCallback) {\n        if (this.CLAUSE) {\n            const [ clauseMatch, spec ] = expr.match(new RegExp(`^${ this.CLAUSE }[\\\\W]([\\\\s\\\\S]*)$`, 'i')) || [];\n            if (!clauseMatch) return;\n            expr = spec.trim();\n        }\n        if (this.TAGS.length) {\n            if (!_wrapped(expr, ...this.TAGS) || Lexer.split(expr, [' ']).length > 1) return;\n            expr = _unwrap(expr, ...this.TAGS);\n        }\n        const $entries = Lexer.split(expr, [',']);\n        if (this.MIN_ENTRIES && $entries.length < this.MIN_ENTRIES) return;\n        const instance = new this(context);\n        const entries = $entries.map(entry => parseCallback(instance, entry.trim(), this.EXPECTED_TYPES)).filter(s => s);\n        for (const entry of entries) { instance.add(entry); }\n\t\treturn instance;\n    }\n\n    stringify() {\n        let str = this.#entries.join(', ');\n        if (this.constructor.TAGS.length) {\n            // E.g. ARRAY[]/Columns/Values/JsonArray/JsonObject Spec Tags: ()\n            str = this.constructor.TAGS.join(str);\n        }\n        if (this.constructor.CLAUSE) {\n            // e.g. SET|RETURNING|WINDOW\n            if (!this.#entries.length && !this.constructor.TAGS.length) return '';\n            str = `\\n${this.constructor.CLAUSE} ${str}`;\n        }\n        return str;\n    }\n}", "export class RefErrorAmbiguous extends Error {}", "export class RefErrorUnknown extends Error {}", "import { _toTitle } from '@webqit/util/str/index.js';\nimport { RefErrorAmbiguous } from './RefErrorAmbiguous.js';\nimport { RefErrorUnknown } from './RefErrorUnknown.js';\nimport { Identifier } from '../Identifier.js';\n\nexport class AbstractRef extends Identifier {\n\tstatic get PREFIX_TYPE() { return []; }\n\t\n\t#prefix;\n\t#autoPrefixed;\n\t#schema;\n\n\tget autoPrefixed() { return this.#autoPrefixed; }\n\n\tname(value) {\n\t\tif (arguments.length && value !== this.name()) this.#schema = null;\n\t\treturn super.name(...arguments);\n\t}\n\n\tprefix(value) {\n\t\tif (value === true && !this.#prefix) {\n\t\t\tthis.prefix('').schema();\n\t\t\tthis.#autoPrefixed = true;\n\t\t}\n\t\tif (!arguments.length || typeof value === 'boolean') return this.#prefix;\n\t\tthis.#prefix = this.$castInputs([value], this.constructor.PREFIX_TYPE, this.#prefix, 'prefix_spec');\n\t\treturn this;\n\t}\n\n\tidentifiesAs(value) {\n\t\tif (value instanceof AbstractRef) {\n\t\t\treturn this.$eq(this.name(), value.name(), 'ci') \n\t\t\t&& (!value.prefix() || !!this.prefix()?.identifiesAs(value.prefix()));\n\t\t}\n\t\treturn super.identifiesAs(value);\n\t}\n\n\tschema(filter = null) {\n\t\tif (this.#schema) {\n\t\t\tif (filter) return filter(this.#schema) && [this.#schema] || [];\n\t\t\treturn this.#schema;\n\t\t}\n\t\tconst resultSchema = (schema) => {\n\t\t\tif (!schema) return;\n\t\t\tthis.#schema = schema;\n\t\t\tif (this.#schema.name() && !this.name()) this.name(this.#schema.name());\n\t\t\treturn this.#schema;\n\t\t};\n\t\tconst name = this.name();\n\t\tconst KIND = this.constructor.KIND, kind = KIND.toLowerCase();\n\t\tlet superSchemas = [], subSchemas = [];\n\t\t// Can capture from context?\n\t\tconst canCapture = /(TABLE|DATABASE)/.test(KIND) && !this.global;\n\t\tif (!canCapture || !(subSchemas = [].concat(this.contextNode?.capture(`${ KIND }_SCHEMA`)?.clone() || [])).length) {\n\t\t\t// Otherwise, search mode\n\t\t\tif (!filter && !name) return;\n\t\t\tconst $getTarget = superSchema => superSchema?.[kind](name);\n\t\t\tsuperSchemas = /DATABASE$/.test(KIND) ? [this.capture('ROOT_SCHEMA')] : this.prefix(true).schema(subSchema => name ? $getTarget(subSchema) : /*all*/true);\n\t\t\tsubSchemas = superSchemas.reduce((subSchemas, subSchema) => subSchemas.concat(name ? ($getTarget(subSchema) || []) : /*all*/subSchema[`${ kind }s`]()), []);\n\t\t}\n\t\tif (filter) {\n\t\t\t// Return all filtered results. Duplicacy errors will be handled there\n\t\t\tconst subSchemas_filtered = subSchemas.filter(filter);\n\t\t\tif (subSchemas_filtered.length === 1) resultSchema(subSchemas_filtered[0]);\n\t\t\treturn subSchemas_filtered;\n\t\t}\n\t\tif (subSchemas.length > 1) {\n\t\t\t// This was a search by name, so we handle the errors here\n\t\t\tthrow new RefErrorAmbiguous(`[${ this.contextNode?.clone({ fullyQualified: true }) }]: ${ _toTitle(kind) } ${ this.stringifyIdent(name) } is ambiguous. (Is it ${ superSchemas.map(s => this.stringifyIdent([s.name(), name])).join(' or ') }?)`);\n\t\t} else if (!resultSchema(subSchemas[0])) {\n\t\t\t// Same idea as above\n\t\t\tthrow new RefErrorUnknown(`[${ this.clone({ fullyQualified: true }) }]: Unknown ${ kind }: ${ this.stringifyIdent(name) }`);\n\t\t}\n\t\treturn this.#schema;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (typeof json === 'string') json = { name: json };\n\t\telse if (Array.isArray(json) && json.some(s => typeof s === 'string') && (json = json.slice())) {\n\t\t\tjson = { name: json.pop(), prefix: json.pop() };\n\t\t} else if (typeof json?.name !== 'string') return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.prefix) instance.prefix(json.prefix);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\tconst prefix = ((!this.#autoPrefixed || options.deSugar || options.fullyQualified) && this.#prefix)?.jsonfy?.(options);\n\t\treturn super.jsonfy(options, {\n\t\t\t...(prefix?.name ? { prefix: prefix } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tif (/^(TRUE|FALSE|NULL)$/i.test(expr)) return;\n\t\tconst [name, ...prefix] = this.parseIdent(context, expr).reverse();\n\t\tif (!name) return;\n\t\tconst instance = (new this(context)).name(name);\n\t\tif (prefix.length) instance.prefix(prefix);\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return [].concat(!this.#autoPrefixed && this.#prefix?.stringify() || [], this.stringifyIdent(this.name())).join('.'); }\n}", "import { AbstractNode } from '../../AbstractNode.js';\nimport { AbstractRef } from '../refs/AbstractRef.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class AbstractAliasableExpr extends AbstractNode {\n\tstatic get EXPECTED_TYPES() { return []; }\n\t\n\t#expr;\n\t#alias;\n\t#claused;\n\n\texpr(expr) {\n\t\tif (!arguments.length) return this.#expr;\n\t\tthis.#expr = this.$castInputs([expr], this.constructor.EXPECTED_TYPES, this.#expr, 'expr');\n\t\treturn this;\n\t}\n\t\n\talias(value, claused = true) {\n\t\tif (!arguments.length || typeof value === 'boolean') {\n\t\t\tif (this.#alias || !value) return this.#alias;\n\t\t\tif (typeof this.#expr.prettyName === 'function' && this.#expr.prettyName()) return this.#expr.prettyName();\n\t\t\tif (typeof this.#expr.name === 'function' && this.#expr.name() !== '*') return this.#expr.name();\n\t\t\treturn;\n\t\t}\n\t\tthis.#claused = claused;\n\t\treturn (this.#alias = value, this);\n\t}\n\t\n\tas(...args) { return this.alias(...args); }\n\n\tidentifiesAs(value) { return this.#expr?.identifiesAs(value); }\n\n\tschema() {\n\t\tconst schema = this.expr()?.schema?.()/*ColumnSchema|TableSchema*/?.clone({ fullyQualified: true });\n\t\treturn schema && this.#alias ? schema.name(this.#alias) : schema;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json?.expr) {\n\t\t\t\tinstance.expr(json.expr);\n\t\t\t\tif (json.alias || json.as) instance.as(json.alias || json.as, json.claused);\n\t\t\t} else if (json) instance.expr(json);\n\t\t\tif (![AbstractRef].some(c => instance.expr() instanceof c) && !instance.expr().isPath && !instance.alias() && this.requireAliasForNoneIdents) {\n\t\t\t\tthrow new Error(`[${ this }]: An alias is required for a non-path properties.`);\n\t\t\t}\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\tconst alias = this.#alias || (options.deSugar && this.#expr.prettyName?.());\n\t\treturn super.jsonfy(options, {\n\t\t\texpr: this.#expr?.jsonfy(options),\n\t\t\t...(alias ? { alias: alias, claused: this.#claused } : {}),\n\t\t\t...jsonIn,\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\t// With an \"AS\" clause, its easy to obtain the alias...\n\t\t// E.g: SELECT first_name AS fname, 4 + 5 AS result, 5 + 5\n\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\n\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5, (SELECT ...) alias FROM ...,\n\t\tlet claused = true;\n\t\tlet [$$expr, $$alias] = Lexer.split(expr, ['AS\\\\s+'], { useRegex: 'i' }).map((s) => s.trim());\n\t\tif (!$$alias) {\n\t\t\tconst tokens = Lexer.split(expr, ['\\\\s+'], { useRegex: 'i' });\n\t\t\tif (tokens.length > 1 && /[\\w\"'`\\]\\)\\}]$/.test(tokens[tokens.length - 2])) {\n\t\t\t\t$$alias = tokens.pop().trim();\n\t\t\t\t$$expr = tokens.join(' ');\n\t\t\t}\n\t\t\tclaused = false;\n\t\t};\n\t\tinstance.expr(parseCallback(instance, $$expr, this.EXPECTED_TYPES));\n\t\tif ($$alias) {\n\t\t\t[$$alias] = this.parseIdent(instance, $$alias.trim());\n\t\t\tinstance.as($$alias, claused);\n\t\t} else if (![AbstractRef].some(c => instance.expr() instanceof c) && !instance.expr().isPath && this.requireAliasForNoneIdents) {\n\t\t\tthrow new Error(`[${ this }]: An alias is required for a non-path properties.`);\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return [this.#expr, this.#claused ? 'AS' : '', this.#alias ? this.stringifyIdent(this.#alias) : null].filter(s => s).join(' '); }\n}", "import { _isObject } from '@webqit/util/js/index.js';\nimport { AbstractNode } from '../../AbstractNode.js';\n\nexport class AbstractDiffableNode extends AbstractNode {\n\n\t#status;\n\t#CDLIgnoreList = [];\n\n\tstatus() { return this.#status; }\n\n\tCDLIgnoreList() { return this.#CDLIgnoreList.slice(); }\n\n\talterWith(nodeCDL, options = {}) {\n\t\treturn this.constructor.fromJSON(this, this.renderCDL(nodeCDL, options));\n\t}\n\n\tdiffWith(nodeB, options = {}) {\n\t\treturn this.constructor.fromJSON(this, this.generateDiff(nodeB, options));\n\t}\n\n\tdirtyCheck(deeply = false) {\n\t\treturn ['new', 'obsolete'].includes(this.#status) ? ['status'] : [];\n\t}\n\n\tgenerateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n\t\t\tstatus: this.status()\n\t\t}, {\n\t\t\tstatus: nodeB.status()\n\t\t}, options);\n    }\n\n\tdirtyCheckProperties(props) {\n\t\treturn props.filter(p => !this.$eq(this[p](), this[`$${p}`](), 'ci'));\n\t}\n\n\tdiffMergeJsons(jsonA, jsonB, options = {}) {\n\t\tfor (const k of Object.keys(jsonB)) {\n\t\t\tif (['nodeName', 'flags', 'CDLIgnoreList'].includes(k)) continue;\n\t\t\tif (!this.$isDirty(jsonB[k]) || this.$eq(jsonA[k], jsonB[k], 'ci')) continue;\n\t\t\tif (options.diff === 'reverse') {\n\t\t\t\tif (k === 'status' || (options.honourCDLIgnoreList && jsonA.CDLIgnoreList?.includes(k))) continue;\n\t\t\t\tjsonA = { ...jsonA, [k]: jsonB[k], [`$${k}`]: jsonA[k] };\n\t\t\t} else {\n\t\t\t\tif (k === 'status') {\n\t\t\t\t\tjsonA = { ...jsonA, status: jsonB[k] };\n\t\t\t\t} else {\n\t\t\t\t\tjsonA = { ...jsonA, [options.diff === false ? k : `$${k}`]: jsonB[k] };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn jsonA;\n\t}\n\n\tdiffMergeTrees(treeA, treeB, existingCallback, options) {\n\t\tif (Array.isArray(treeA)) {\n\t\t\ttreeA = new Map(treeA.map(node => [node.name().toLowerCase(), node]));\n\t\t\ttreeB = new Map(treeB.map(node => [node.name().toLowerCase(), node]));\n\t\t}\n\t\tconst [dropped, existing, added] = [new Set, new Set, new Set];\n\t\tfor (const name of new Set([...treeA.keys(), ...treeB.keys()])) {\n\t\t\tif (!treeB.has(name) && treeA.has(name)) dropped.add(treeA.get(name));\n\t\t\telse if (treeB.has(name) && !treeA.has(name)) added.add(treeB.get(name));\n\t\t\telse existing.add(treeA.get(name));\n\t\t}\n\t\treturn [...treeA.entries()].reduce((jsons, [name, node]) => {\n\t\t\tif (dropped.has(node)) return jsons.concat({ ...node.jsonfy(options), status: 'obsolete' });\n\t\t\tif (existing.has(node)) {\n\t\t\t\tconst subDiff = existingCallback(node, treeB.get(name));\n\t\t\t\t// Should we be in subtractive diffing mode\n\t\t\t\tif (!Object.keys(subDiff).length) return jsons;\n\t\t\t\treturn jsons.concat(subDiff);\n\t\t\t}\n\t\t\treturn jsons;\n\t\t}, []).concat([...added].map(\n\t\t\tnode => ({ ...node.jsonfy(options), status: 'new' })\n\t\t));\n\t}\n\n\treverseDiff(options = {}) {\n\t\treturn this.constructor.fromJSON(\n\t\t\tthis.contextNode,\n\t\t\tthis.jsonfy({ ...options, diff: 'reverse' })\n\t\t);\n\t}\n\n\t/* -- MODES */\n\n\t#$diffTagHydrate = false;\n\t$diffTagHydrate(...args) {\n\t\tif (!arguments.length) return this.#$diffTagHydrate;\n\t\tif (this.$isDirty(args[0])) {\n\t\t\tconst settingBefore = this.#$diffTagHydrate;\n\t\t\tthis.#$diffTagHydrate = true;\n\t\t\targs[1](args[0]);\n\t\t\tthis.#$diffTagHydrate = settingBefore;\n\t\t}\n\t\treturn this;\n\t}\n\n\t$isDirty(value) { return Array.isArray(value) ? !!value.length : typeof value !== 'undefined'; }\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.#status = json.status;\n\t\t\tif (Array.isArray(json.CDLIgnoreList)) {\n\t\t\t\tinstance.#CDLIgnoreList.push(...json.CDLIgnoreList);\n\t\t\t}\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...jsonIn,\n\t\t\t...(this.#status && options.diff !== false ? { status: options.diff === 'reverse' && ['new', 'obsolete'].includes(this.#status) ? (this.#status === 'new' ? 'obsolete' : 'new') : this.#status } : {}),\n\t\t\t...(this.#CDLIgnoreList.length && options.diff !== false ? { CDLIgnoreList: this.#CDLIgnoreList.slice() } : {}),\n\t\t});\n\t}\n}\n", "import { AbstractDiffableNode } from './AbstractDiffableNode.js';\n\nexport class AbstractNameableNode extends AbstractDiffableNode {\n\n\t#name;\n\t#$name;\n\n    name(value) {\n        if (!arguments.length) return this.#name;\n\t\tif (this.$diffTagHydrate() || (this.$nameLock() && this.#name)) {\n\t\t\tthis.#$name = value;\n\t\t} else this.#name = value;\n        return this;\n    }\n\n\t$name() { return this.#$name || this.#name; }\n\n\tidentifiesAs(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn this.$eq(this.#name, value, 'ci');\n\t\t}\n\t\treturn super.identifiesAs(value);\n\t}\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['name'])\n\t\t);\n\t}\n\n\tgenerateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n\t\t\t...super.generateDiff(nodeB, options),\n\t\t\tname: this.$name()\n\t\t}, {\n\t\t\tname: nodeB.$name()\n\t\t}, options);\n    }\n\n\t/* -- MODES */\n\n\t#$nameLock = false;\n\t$nameLock(set) {\n\t\tif (!arguments.length) return this.#$nameLock || !!this.contextNode?.$nameLock?.();\n\t\tif (typeof set === 'function') {\n\t\t\tconst settingBefore = this.#$nameLock;\n\t\t\tthis.#$nameLock = true;\n\t\t\tset();\n\t\t\tthis.#$nameLock = settingBefore;\n\t\t} else this.#$nameLock = !!set;\n\t\treturn this;\n\t}\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (json?.name && typeof json.name !== 'string') return;\n\t\tif (json?.$name && typeof json.$name !== 'string') return;\n        return super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.name(json.name);\n\t\t\tinstance.$diffTagHydrate(json.$name, ($name) => instance.name($name));\n\t\t\tcallback?.(instance);\n\t\t});\n    }\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, this.diffMergeJsons({\n\t\t\tname: this.#name,\n\t\t\t...jsonIn\n\t\t}, {\n\t\t\tname: this.#$name,\n\t\t}, options));\n\t}\n}\n", "import { AbstractNameableNode } from './AbstractNameableNode.js';\n\nexport class AbstractPrefixableNameableNode extends AbstractNameableNode {\n\n\t#prefix;\n\t#$prefix;\n\n    prefix(value) {\n\t\tif (!arguments.length || typeof value === 'boolean') {\n\t\t\tlet prefix = this.#prefix;\n\t\t\tif (!prefix && value === true) {\n\t\t\t\tconst RefClass = this.constructor.PREFIX_TYPE[0];\n\t\t\t\tconst $$prefix = [];\n\t\t\t\tif (this.contextNode instanceof AbstractPrefixableNameableNode) {\n\t\t\t\t\t$$prefix.push(this.contextNode.prefix(true).jsonfy());\n\t\t\t\t}\n\t\t\t\tif (this.contextNode instanceof AbstractNameableNode) {\n\t\t\t\t\t$$prefix.push(this.contextNode.name());\n\t\t\t\t\tprefix = RefClass?.fromJSON(this, $$prefix);\n\t\t\t\t} else prefix = RefClass?.fromJSON(this, '');\n\t\t\t}\n\t\t\treturn prefix;\n\t\t}\n\t\tif (this.$diffTagHydrate()) {\n\t\t\tthis.#$prefix = this.$castInputs([value], this.constructor.PREFIX_TYPE, this.#$prefix, '$prefix');\n\t\t} else this.#prefix = this.$castInputs([value], this.constructor.PREFIX_TYPE, this.#prefix, 'prefix');\n        return this;\n    }\n\n\t$prefix(...args) { return this.#$prefix || this.prefix(...args); }\n\n\tidentifiesAs(value) {\n\t\treturn super.identifiesAs(value)\n\t\t&& (!value?.prefix?.() || !!this.prefix()?.identifiesAs(value.prefix()));;\n\t}\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['prefix'])\n\t\t);\n\t}\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n\t\t\t...super.generateDiff(nodeB, options),\n\t\t\tprefix: this.$prefix(!!nodeB.$prefix())?.jsonfy()\n\t\t}, {\n\t\t\tprefix: nodeB.$prefix()?.jsonfy()\n\t\t}, options);\n    }\n\n\t/* -- I/O */\n\n    static fromJSON(context, json, callback = null) {\n        return super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.prefix) instance.prefix(json.prefix);\n\t\t\tinstance.$diffTagHydrate(json.$prefix, ($prefix) => instance.prefix($prefix));\n\t\t\tcallback?.(instance);\n\t\t});\n    }\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\tconst prefix = this.#prefix || options.fullyQualified \n\t\t\t? (this.#prefix || this.prefix(true)).jsonfy(options)\n\t\t\t: {};\n\t\treturn super.jsonfy(options, this.diffMergeJsons({\n\t\t\t...(prefix.name ? { prefix: prefix } : {}),\n\t\t\t...jsonIn\n\t\t}, {\n\t\t\tprefix: this.#$prefix?.jsonfy(options),\n\t\t}, options));\n\t}\n}", "import { AbstractRef } from './AbstractRef.js';\n\nexport class DatabaseRef extends AbstractRef {\n\tstatic get KIND() { return 'DATABASE'; }\n\t\n\tprefix(value) {}\n}", "import { DatabaseRef } from './DatabaseRef.js';\n\nexport class GlobalDatabaseRef extends DatabaseRef {\n\tstatic get NODE_NAME() { return DatabaseRef.NODE_NAME; }\n\tget global() { return true; }\n}", "import { AbstractRef } from './AbstractRef.js';\nimport { DatabaseRef } from './DatabaseRef.js';\n\nexport class TableRef extends AbstractRef {\n\tstatic get PREFIX_TYPE() { return DatabaseRef; }\n\tstatic get KIND() { return 'TABLE'; }\n}", "import { GlobalDatabaseRef } from './GlobalDatabaseRef.js';\nimport { TableRef } from './TableRef.js';\n\nexport class GlobalTableRef extends TableRef {\n\tstatic get NODE_NAME() { return TableRef.NODE_NAME; }\n\tstatic get PREFIX_TYPE() { return GlobalDatabaseRef; }\n\tget global() { return true; }\n}", "import { AbstractNode } from './../../AbstractNode.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class AbstractCDL extends AbstractNode {\n\n    #actions = [];\n\n    [Symbol.iterator]() { return this.#actions[Symbol.iterator](); }\n\n    get length() { return this.#actions.length; }\n\n    actions() { return this.#actions; }\n\n    add(...args) {\n        if (typeof args[0] === 'string') {\n            const clause = args.shift();\n            const callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n            const Type = this.constructor.EXPECTED_TYPES.find(t => t.CLAUSE === clause);\n            if (!Type) throw new Error(`Unsupported clause: ${clause}`);\n            const action = new Type(this, ...args);\n            this.#actions = this.$castInputs([action], this.constructor.EXPECTED_TYPES, this.#actions, 'actions');\n            if (callback) callback(action);\n            else return action;\n        } else this.#actions = this.$castInputs(args, this.constructor.EXPECTED_TYPES, this.#actions, 'actions');\n        return this;\n    }\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!Array.isArray(json?.actions)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n            instance.add(...json.actions);\n            callback?.(instance);\n        });\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tactions: this.#actions.map(action => action.jsonfy(options)),\n\t\t\t...jsonIn\n\t\t});\n\t}\n    \n    static parse(context, expr, parseCallback) {\n        const instance = new this(context);\n        return instance.add(...Lexer.split(expr, [',']).map(actionExpr => parseCallback(instance, actionExpr.trim(), this.EXPECTED_TYPES)));\n    }\n\n    stringify() { return this.actions().join(',\\n'); }\n}", "import { AbstractNode } from '../../AbstractNode.js';\n\nexport class AbstractAction extends AbstractNode {\n    \n\tstatic get CLAUSE() { return this.NODE_NAME; }\n\n\t#KIND;\n\t#$KIND;\n    \n\tget CLAUSE() { return this.constructor.CLAUSE; }\n\tget KIND() { return this.#KIND; }\n    get $KIND() { return this.#$KIND || this.KIND; }\n\n    constructor(contextNode, kind = null, $kind = null) {\n        super(contextNode);\n        this.#KIND = kind;\n        this.#$KIND = $kind;\n    }\n\n\tstatic fromJSON(context, json, callback = null) {\n        if (json.clause && json.clause !== this.CLAUSE) return;\n        return super.fromJSON(context, json, (instance) => {\n            instance.#KIND = json.kind;\n            instance.#$KIND = json.$kind;\n            callback?.(instance);\n        });\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n        return super.jsonfy(options, {\n\t\t\tclause: this.CLAUSE,\n            kind: this.#KIND,\n            ...(this.#$KIND ? { $kind: this.#$KIND } : {}),\n\t\t\t...jsonIn\n        });\n    }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\n\nexport class Flag extends AbstractAction {\n\n    #value;\n\n    value(value) {\n        if (!arguments.length) return this.#value;\n        return (this.#value = value, this);\n    }\n\n    static fromJSON(context, json, callback = null) {\n\t\tif (!json?.value) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.value(json.value);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tvalue: this.#value,\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n    static parse(context, expr) {\n        const [value] = expr.match(/DEFERRABLE|NOT\\s+DEFERRABLE|INITIALLY\\s+DEFERRED|INITIALLY\\s+IMMEDIATE|VISIBLE|INVISIBLE/i) || [];\n        if (value) return (new this(context)).value(value.replace(/\\s+/, '_').toUpperCase());\n    }\n\n    stringify() { return this.#value?.replace(/_/, ' ') || ''; }\n}", "import { AbstractCDL } from '../abstracts/AbstractCDL.js';\nimport { Flag } from './actions/Flag.js';\n\nexport class ConstraintCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [Flag];\n    }\n}", "import { AbstractNameableNode } from '../../abstracts/AbstractNameableNode.js';\nimport { ConstraintCDL } from '../ConstraintCDL.js';\n\nexport class AbstractConstraint extends AbstractNameableNode {\n    static get TYPE() { return this.NODE_NAME.replace(/TABLE_|COLUMN_|_CONSTRAINT|_CLAUSE/ig, ''); }\n\n\tget TYPE() { return this.constructor.TYPE; }\n\n    renderCDL(columnCDL, options) {\n        let json = this.jsonfy(options);\n        return json;\n    }\n\n    generateCDL() {\n        const constraintCDL = ConstraintCDL.fromJSON(this, { actions: [] });\n        return constraintCDL;\n    }\n\n    generateDiff(nodeB, options) {\n        return {\n            type: this.TYPE,\n            ...super.generateDiff(nodeB, options),\n        };\n    }\n\n    /* -- I/O */\n\n    static fromJSON(context, json, callback = null) {\n        if (json?.type !== this.TYPE) return;\n        return super.fromJSON(context, json, callback);\n    }\n\n\tjsonfy(options = {}, jsonIn = {}) {\n        return super.jsonfy(options, {\n            type: this.TYPE, ...jsonIn\n        });\n    }\n\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !(new RegExp(`^${ this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : this.TYPE.replace('_', '\\\\s+') }$`, 'i')).test($expr)) return;\n        return (new this(context)).name(name);\n    }\n\n    stringify() { return this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : `${ this.stringifyName() }${ this.TYPE.replace('_', ' ') }`; }\n\n    /* -- UTILS */\n\n    static parseName(context, expr, asInputDialect = false) {\n        const escChar = this.getEscChar(context, asInputDialect);\n        const nameRegex = `(?:CONSTRAINT(?:` + `\\\\s+(\\\\w+)` + `|` + `\\\\s+(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2` + `)\\\\s+)?`;\n        const [ , nameUnscaped, /*esc*/, nameEscaped = '', rest = '' ] = expr.match(new RegExp(`^${ nameRegex }([\\\\s\\\\S]+)$`, 'i')) || [];\n        return { name: nameUnscaped || this.unesc(escChar, nameEscaped), expr: rest.trim() };\n    }\n\n    stringifyName() { return this.$name() ? `CONSTRAINT ${ this.stringifyIdent(this.$name()) } ` : ''; }\n}", "import { AbstractConstraint } from './AbstractConstraint.js';\n\nexport class AbstractLevel2Constraint extends AbstractConstraint {\n\n    get constraintLevel() { return 2; }\n    get isColumnLevel() { return this.constructor.checkIsColumn(this.contextNode); }\n\n    static checkIsColumn(contextNode) { return contextNode?.constructor?.NODE_NAME === 'COLUMN_SCHEMA'; }\n\n    /* -- I/O */\n\n    static fromJSON(context, json, callback = null) {\n        if (json?.type !== this.TYPE) return;\n        if (!('name' in json) && context?.params?.dialect !== 'mysql') {\n            // Automatically generate a default name for PRIMARY_KEY,FOREIGN_KEY,UNIQUE_KEY,CHECK\n            json = { name: `auto_name_${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`, ...json };\n        }\n        return super.fromJSON(context, json, callback);\n    }\n\n\tjsonfy(options = {}, jsonIn = {}) {\n        let $json = super.jsonfy(options, jsonIn);\n        if (!('name' in $json) && this.params.dialect !== 'mysql') {\n            // Key needs to be present\n            $json = { name: undefined, ...$json };\n        }\n\t\treturn $json;\n\t}\n}", "import { _unwrap } from '@webqit/util/str/index.js';\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport const AbstractColumnsMixin = Class => class extends Class {\n\n    #columns = [];\n    #$columns = [];\n\n    columns(columns) {\n        if (this.isColumnLevel) {\n            if (arguments.length) throw new Error(`The \"columns\" attributes for column-level constraints is implicit.`);\n            return [this.contextNode.name()];\n        }\n        if (!arguments.length) return this.#columns;\n        if (!Array.isArray(columns) || !columns.length) throw new Error(`Columns list must be a non-empty array`);\n        if (this.$diffTagHydrate()) {\n            this.#$columns = columns;\n        } else this.#columns = columns;\n        return this;\n    }\n\n    $columns() { return this.#$columns.length ? this.#$columns : this.columns(); }\n\n    /* -- TRANSFORMS */\n\n    dirtyCheck(deeply = false) {\n        return super.dirtyCheck(deeply).concat(\n            this.dirtyCheckProperties(['columns'])\n        );\n    }\n\n    generateDiff(nodeB, options) {\n        if (this.isColumnLevel) return super.generateDiff(nodeB, options);\n        return this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n            columns: this.$columns(),\n        }, {\n            columns: nodeB.$columns(),\n        }, options);\n    }\n\n    resolveColumnReferences(cols, actions, requireCascadeDirective = false) {\n        return cols.reduce((cc, c) => {\n            const transforms = actions.filter(a => ['DROP', 'RENAME'].includes(a.CLAUSE) && a.KIND === 'COLUMN' && a.reference().identifiesAs(c)).reduce((aa, a) => a.CLAUSE === 'DROP' ? [a].concat(aa) : aa.concat(a), []);\n            if (!transforms.length) return cc.concat(c);\n            if (transforms[0].CLAUSE === 'DROP') {\n                if (!transforms[0].hasFlag('CASCADE') && requireCascadeDirective) throw new Error(`Cannot drop column ${transforms[0].reference()} because other objects depend on it.`);\n                return cc;\n            }\n            if (transforms[0].CLAUSE === 'RENAME') return cc.concat(transforms[0].argument().name());\n        }, []);\n    }\n\n    /* -- I/O */\n\n    static fromJSON(context, json, callback = null) {\n        if (!this.checkIsColumn(context) && !Array.isArray(json.columns)) return;\n        return super.fromJSON(context, json, (instance) => {\n            if (!this.checkIsColumn(context) && Array.isArray(json.columns)) instance.columns(json.columns);\n            if (!this.checkIsColumn(context)) instance.$diffTagHydrate(json.$columns, ($columns) => instance.columns($columns));\n            callback?.(instance);\n        });\n    }\n\n    jsonfy(options = {}, jsonIn = {}) {\n        if (this.isColumnLevel && !options.withColumns) return super.jsonfy(options, jsonIn);\n        let json = super.jsonfy(options, this.diffMergeJsons({\n            columns: this.columns()/* IMPORTANT; options.withColumns */.slice(),\n            ...jsonIn\n        }, {\n            columns: this.#$columns.slice(),\n        }, options));\n        if (!options.tableCDL) return json;\n        const columns = this.resolveColumnReferences(json.columns, options.tableCDL.actions());\n        if (columns.length !== json.columns.length) {\n            // A column was dropped\n            if (!options.diff) return;\n            return { ...json, status: 'obsolete' };\n        }\n        if (_intersect(columns, json.columns).length !== json.columns.length) {\n            // A column was renamed\n            json = this.diffMergeJsons(json, { columns }, options);\n            if (options.diff !== false) {\n                if (!json.CDLIgnoreList) json.CDLIgnoreList = [];\n                json.CDLIgnoreList.push('columns');\n            }\n        }\n        return json;\n    }\n\n    /* -- UTILS */\n\n    static parseColumns(context, columnsExpr, asInputDialect = true) {\n        return Lexer.split(_unwrap(columnsExpr, '(', ')'), [',']).map(columnExpr => {\n            return this.parseIdent(context, columnExpr.trim(), false, asInputDialect)[0];\n        });\n    }\n\n    stringifyColumns() { return ` (${this.$columns().map(c => this.stringifyIdent(c)).join(', ')})`; }\n}", "import { AbstractLevel2Constraint } from './abstracts/AbstractLevel2Constraint.js';\nimport { AbstractColumnsMixin } from '../abstracts/AbstractColumnsMixin.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class PrimaryKeyConstraint extends AbstractColumnsMixin(AbstractLevel2Constraint) {\n\n    static parse(context, expr, parseCallback) {\n        const { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !/^PRIMARY\\s+KEY/i.test($expr)) return;\n\t\tconst instance = (new this(context)).name(name);\n        if (this.checkIsColumn(context)) return instance;\n        const [ , columnsExpr ] = Lexer.split(expr, []);\n        return instance.columns(this.parseColumns(instance, columnsExpr));\n    }\n\n    stringify() {\n        return `${ this.stringifyName() }PRIMARY KEY${ !this.isColumnLevel ? this.stringifyColumns() : ''}`;\n    }\n}", "export const AbstractReferenceMixin = Class => class extends Class {\n\n\t#reference;\n\n\tget REF_TYPES() { return this.constructor.REF_TYPES[this.KIND]; }\n\n\treference(reference) {\n\t\tif (!arguments.length) return this.#reference;\n\t\tthis.#reference = this.$castInputs([reference], this.REF_TYPES, this.#reference, 'reference');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.reference) instance.reference(json.reference);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\treference: this.#reference?.jsonfy(options),\n\t\t\t...jsonIn\n\t\t});\n\t}\n}", "export const AbstractArgumentMixin = Class => class extends Class {\n\n\t#argument;\n\n\tget EXPECTED_TYPES() { return this.constructor.EXPECTED_TYPES[this.KIND]; }\n\n\targument(argument) {\n\t\tif (!arguments.length) return this.#argument;\n\t\tthis.#argument = this.$castInputs([argument], this.EXPECTED_TYPES, this.#argument, 'argument');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.argument) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.argument(json.argument);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\targument: this.#argument?.jsonfy(options),\n\t\t\t...jsonIn\n\t\t});\n\t}\n}", "import { AbstractAction } from './AbstractAction.js';\nimport { AbstractReferenceMixin } from './AbstractReferenceMixin.js';\nimport { AbstractArgumentMixin } from './AbstractArgumentMixin.js';\n\nexport class AbstractAlterAction extends AbstractReferenceMixin(AbstractArgumentMixin(AbstractAction)) {\n \n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [, kindExpr, referenceExpr, argumentExpr ] = expr.match(new RegExp(`^ALTER\\\\s+(${Object.keys(this.EXPECTED_TYPES).join('|')})\\\\s+([\\\\s\\\\S]+?)\\\\s+([\\\\s\\\\S]+)$`, 'i')) || [];\n\t\tif (!referenceExpr) return;\n\t\tconst instance = new this(context, kindExpr.toUpperCase());\n\t\tinstance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\tinstance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n\t\treturn instance;\n\t}\n}", "export const AbstractStatementNode = Class => class extends Class {\r\n\r\n\t#querySugars = new Set;\r\n\t\r\n\tget statementNode() { return this; }\r\n\r\n\tget querySugars() { return this.#querySugars; }\r\n\r\n\tget hasSugars() { return this.isSugar || !!this.#querySugars.size; }\r\n\r\n\t$bubble(eventType, eventSource) {\r\n\t\tif (['CONNECTED', 'DISCONNECTED'].includes(eventType) && eventSource.isSugar) {\r\n\t\t\tif (eventType === 'DISCONNECTED') this.#querySugars.delete(eventSource);\r\n\t\t\telse this.#querySugars.add(eventSource);\r\n\t\t\t// return; // Don't bubble beyond this point. think dimensional queries\r\n\t\t}\r\n\t\treturn super.$bubble(eventType, eventSource);\r\n\t}\r\n\r\n}\r\n", "export const AbstractSugar = Class => class extends Class {\n    get isSugar() { return true; }\n}", "import { AbstractStatementNode } from './AbstractStatementNode.js';\r\nimport { AbstractSugar } from './AbstractSugar.js';\r\nimport { Lexer } from './Lexer.js';\r\n\r\nexport const AbstractDDLStatement = Class => class extends AbstractStatementNode(AbstractSugar(Class)) {\r\n    static get CLAUSE() { return this.NODE_NAME.replace(/_DATABASE|_TABLE/gi, ''); }\r\n        \r\n    #returningClause;\r\n\r\n    get statementType() { return 'DDL'; }\r\n\r\n\treturning(value) {\r\n\t\tif (!arguments.length) return this.#returningClause;\r\n        if (!/^SCHEMA|SAVEPOINT$/i.test(value)) throw new Error(`Unsupported value for a RETURNING clause.`);\r\n\t\tthis.#returningClause = value.toUpperCase();\r\n\t\treturn this;\r\n\t}\r\n\r\n    static fromJSON(context, json, callback = null) {\r\n        // Let's set sensible default for kind\r\n        const [kind] = this.NODE_NAME.match(/DATABASE|TABLE/);\r\n        return super.fromJSON(context, { ...json, kind: json.kind || (kind === 'DATABASE' ? 'SCHEMA' : kind) }, (instance) => {\r\n\t\t\tif (json.returningClause) instance.returning(json.returningClause);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n    }\r\n\r\n\tjsonfy(options, jsonInCallback) {\r\n\t\treturn super.jsonfy(options, () => ({\r\n\t\t\t...(this.#returningClause && !options.deSugar ? { returningClause: this.#returningClause } : {}),\r\n\t\t\t...jsonInCallback(),\r\n\t\t}));\r\n\t}\r\n\r\n    static parse(context, expr, parseCallback) {\r\n        let returningClause;\r\n        if (/^CREATE|ALTER|DROP|RENAME/.test(expr)) {\r\n            [expr, returningClause] = Lexer.split(expr, ['RETURNING'], { useRegex: 'i' }).map((s) => s.trim());\r\n        }\r\n        const instance = super.parse(context, expr, parseCallback);\r\n        if (returningClause) instance?.returning(returningClause);\r\n        return instance;\r\n    }\r\n\r\n\tstringify() {\r\n        const str = super.stringify();\r\n        if (this.#returningClause) return `${str} RETURNING ${this.#returningClause}`;\r\n        return str;\r\n\t}\r\n}\r\n", "import { AbstractLevel2Constraint } from './abstracts/AbstractLevel2Constraint.js';\nimport { AbstractColumnsMixin } from '../abstracts/AbstractColumnsMixin.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class UniqueKeyConstraint extends AbstractColumnsMixin(AbstractLevel2Constraint) {\n\n    static parse(context, expr, parseCallback) {\n        const { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !/^UNIQUE(\\s+KEY)?/i.test($expr)) return;\n\t\tconst instance = (new this(context)).name(name);\n        if (this.checkIsColumn(context)) return instance;\n        const [ , columnsExpr ] = Lexer.split(expr, []);\n        return instance.columns(this.parseColumns(instance, columnsExpr));\n    }\n\n    stringify() {\n        return `${ this.stringifyName() }UNIQUE${ !this.isColumnLevel ? this.stringifyColumns() : ''}`;\n    }\n}", "import { AbstractRef } from './AbstractRef.js';\nimport { TableRef } from './TableRef.js';\n\nexport class ColumnRef extends AbstractRef {\n\tstatic get PREFIX_TYPE() { return TableRef; }\n\tstatic get KIND() { return 'COLUMN'; }\n\n\t#prettyName;\n\n\tprettyName(value) {\n\t\tif (!arguments.length) return this.#prettyName;\n\t\tif (typeof value !== 'string') throw new TypeError(`Invalid argument as prettyName: ${ value }.`);\n\t\treturn (this.#prettyName = value, this);\n\t}\n\n\tidentifiesAs(value) {\n\t\treturn super.identifiesAs(value) || this.$eq(this.#prettyName, value, 'ci');\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (typeof json?.prettyName === 'string') instance.prettyName(json.prettyName);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...( this.#prettyName ? { prettyName: this.#prettyName } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n}", "import { AbstractNode } from '../AbstractNode.js';\r\n\r\nexport class Literal extends AbstractNode {\r\n\r\n\t#value;\r\n\t\r\n\tvalue(value) {\r\n\t\tif (!arguments.length) return this.#value;\r\n\t\treturn (this.#value = value, this);\r\n\t}\r\n\r\n\tidentifiesAs(value) { return value === this.#value || super.identifiesAs(value); }\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\tnull: context => this.fromJSON(context, { value: null }),\r\n\t\t\tliteral: (context, value) => this.fromJSON(context, { value }),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif ((typeof json?.value !== 'string' && ![null].includes(json?.value))\r\n\t\t|| Object.keys(json).filter((k) => !['nodeName', 'value'].includes(k)).length) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.value(json.value);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tvalue: this.#value,\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tconst instance = new this(context);\r\n\t\tif (/^NULL$/i.test(expr)) return instance.value(null);\r\n\t\treturn instance.value(expr);\r\n\t}\r\n\r\n\tstringify() { return `${ this.#value }`; }\r\n}", "import { _unwrap, _wrapped } from '@webqit/util/str/index.js';\nimport { ColumnRef } from '../../../expr/refs/ColumnRef.js';\nimport { Exprs } from '../../../expr/grammar.js';\nimport { Literal } from '../../../expr/Literal.js';\n\nexport const AbstractExprMixin = Class => class extends Class {\n\n    #expr;\n    #$expr;\n    #columns = new Set;\n\n\t$bubble(eventType, eventSource) {\n\t\tif (['CONNECTED', 'DISCONNECTED'].includes(eventType) && eventSource instanceof ColumnRef) {\n\t\t\tif (eventType === 'DISCONNECTED') this.#columns.delete(eventSource.name().toLowerCase());\n\t\t\telse this.#columns.add(eventSource.name().toLowerCase());\n\t\t}\n\t\treturn super.$bubble(eventType, eventSource);\n\t}\n\n\texpr(value) {\n        if (!arguments.length || typeof value === 'boolean') {\n\t\t\tlet expr = this.#expr;\n\t\t\tif (!expr && value === true && this.TYPE === 'DEFAULT') {\n                expr = Literal.fromJSON(this, { value: null });\n            }\n            return expr;\n        }\n\t\tif (this.$diffTagHydrate()) {\n            this.#$expr = this.$castInputs([value], Exprs, this.#$expr, '$expr');\n\t\t} else this.#expr = this.$castInputs([value], Exprs, this.#expr, 'expr');\n\t\treturn this;\n    }\n\n\t$expr(...args) { return this.#$expr ?? this.expr(...args) }\n\n    columns() {\n        if (arguments.length) throw new Error(`The \"columns\" attributes for CHECK constraints is implicit.`);\n        return [...this.#columns];\n    }\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['expr'])\n\t\t);\n\t}\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\texpr: this.$expr(!!nodeB.$expr())?.jsonfy(options),\n\t\t}, {\n\t\t\texpr: nodeB.$expr()?.jsonfy(options),\n\t\t}, options);\n    }\n\n    /* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n        if (typeof json?.expr === 'undefined') return;\n        return super.fromJSON(context, json, (instance) => {\n            instance.expr(json.expr);\n            instance.$diffTagHydrate(json.$expr, ($expr) => instance.expr($expr));\n            callback?.(instance);\n        });\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, this.diffMergeJsons({\n            expr: this.#expr?.jsonfy(options),\n\t\t\t...jsonIn\n        }, {\n            expr: this.#$expr?.jsonfy(options),\n\t\t}, options));\n\t}\n\n    static parse(context, expr, parseCallback) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !($expr = $expr.match(new RegExp(`^${ this.TYPE.replace(/_/g, '\\\\s+') }\\\\s+([\\\\s\\\\S]+)$`, 'i'))?.[1])) return;\n        const instance = new this(context);\n        return instance\n            .expr(parseCallback(instance, $expr))\n            .name(name);\n    }\n\n    stringify() { return `${ super.stringify() } ${ this.$expr() }`; }\n}", "import { AbstractLevel2Constraint } from './abstracts/AbstractLevel2Constraint.js';\nimport { AbstractExprMixin } from './abstracts/AbstractExprMixin.js';\nimport { ColumnRef } from '../../expr/refs/ColumnRef.js';\n\nexport class CheckConstraint extends AbstractExprMixin(AbstractLevel2Constraint) {\n\n    $columns() { return this.columns(); }\n    \n    stringify() { return `${ super.stringifyName() }CHECK (${ this.$expr() })`; }\n}", "import { AbstractConstraint } from './AbstractConstraint.js';\n\nexport class AbstractLevel1Constraint extends AbstractConstraint {\n    get constraintLevel() { return 1; }\n}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\nimport { AutoIncrementConstraint } from './AutoIncrementConstraint.js';\n\nexport class IdentityConstraint extends AbstractLevel1Constraint {\n\n\t#always;\n\t#$always;\n\n\talways(value) {\n\t\tif (!arguments.length) return this.#always;\n\t\tif (typeof value !== 'boolean') throw new Error(`The \"always\" directive must be of type boolean`);\n\t\tif (this.$diffTagHydrate()) {\n\t\t\tthis.#$always = value;\n\t\t} else this.#always = value;\n\t\treturn this;\n    }\n\n\t$always() { return this.#$always ?? this.#always; }\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['always'])\n\t\t);\n\t}\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\talways: this.$always(),\n\t\t}, {\n\t\t\talways: nodeB.$always(),\n\t\t}, options);\n    }\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.always(!!json.always);\n\t\t\tinstance.$diffTagHydrate(json.$always, ($always) => instance.always($always));\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, this.diffMergeJsons({\n            always: this.#always,\n\t\t\t...jsonIn\n\t\t}, {\n\t\t\talways: this.#$always,\n\t\t}, options));\n\t}\n\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !($expr = $expr.match(new RegExp(`^GENERATED\\\\s+` + `(ALWAYS|BY[ ]+DEFAULT)` + `(?:\\\\s+AS\\\\s+IDENTITY)?$`, 'i'))?.[1])) return;\n\t\treturn (new this(context)).name(name).always(/^ALWAYS$/i.test($expr));\n    }\n\n    stringify() {\n\t\tif (this.params.dialect === 'mysql') return (new AutoIncrementConstraint(this.CONTEXT)).stringify();\n\t\treturn `GENERATED ${ this.$always() ? 'ALWAYS' : 'BY DEFAULT' } AS IDENTITY`;\n\t}\n}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\nimport { IdentityConstraint } from './IdentityConstraint.js';\n\nexport class AutoIncrementConstraint extends AbstractLevel1Constraint {\n\tstatic get TYPE() { return 'AUTO_INCREMENT'; }\n\n    stringify() {\n        return this.params.dialect !== 'mysql' \n            ? (new IdentityConstraint(this.contextNode)).stringify() \n            : `AUTO_INCREMENT`;\n    }\n}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\nimport { AbstractExprMixin } from './abstracts/AbstractExprMixin.js';\n\nexport class ExpressionConstraint extends AbstractExprMixin(AbstractLevel1Constraint) {\n\n\t#stored;\n\t#$stored;\n\n\tstored(value) {\n\t\tif (!arguments.length) return this.#stored;\n\t\tif (typeof value !== 'boolean') throw new Error(`The \"stored\" directive must be of type boolean`);\n\t\tif (this.$diffTagHydrate()) {\n\t\t\tthis.#$stored = value;\n\t\t} else this.#stored = value;\n\t\treturn this;\n    }\n\n\t$stored() { return this.#$stored ?? this.#stored; }\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['stored'])\n\t\t);\n\t}\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\tstored: this.$stored(),\n\t\t}, {\n\t\t\tstored: nodeB.$stored(),\n\t\t}, options);\n    }\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.stored(!!json.stored);\n\t\t\tinstance.$diffTagHydrate(json.$stored, ($stored) => instance.stored($stored));\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, this.diffMergeJsons({\n            stored: this.#stored,\n\t\t\t...jsonIn\n\t\t}, {\n\t\t\tstored: this.#$stored,\n\t\t}, options));\n\t}\n\n    static parse(context, expr, parseCallback) {\n        let stored, { name, expr: $expr } = this.parseName(context, expr, true);\n\t\t[ , $expr, stored = '' ] = $expr.match(new RegExp(`^GENERATED\\\\s+ALWAYS\\\\s+AS\\\\s+\\\\(` + `([\\\\s\\\\S]+)` + `\\\\)(?:\\\\s+(VIRTUAL|STORED))?$`, 'i')) || [];\n        if (!$expr) return;\n\t\tconst instance = new this(context);\n\t\treturn instance\n\t\t\t.expr(parseCallback(instance, $expr))\n\t\t\t.stored(/^STORED$/i.test(stored))\n\t\t\t.name(name);\n    }\n\n    stringify() { return `GENERATED ALWAYS AS (${ this.$expr() })${ this.$stored() ? ` STORED` : '' }`; }\n}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\nimport { AbstractExprMixin } from './abstracts/AbstractExprMixin.js';\n\nexport class DefaultConstraint extends AbstractExprMixin(AbstractLevel1Constraint) {}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\n\nexport class NotNullConstraint extends AbstractLevel1Constraint {}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\nimport { AbstractExprMixin } from './abstracts/AbstractExprMixin.js';\n\nexport class OnUpdateClause extends AbstractExprMixin(AbstractLevel1Constraint) {}", "import { AbstractLevel1Constraint } from './abstracts/AbstractLevel1Constraint.js';\n\nexport class NullConstraint extends AbstractLevel1Constraint {}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { IdentityConstraint } from '../../constraints/IdentityConstraint.js';\n\nexport class Add extends AbstractArgumentMixin(AbstractAction) {\n\tstatic get EXPECTED_TYPES() {\n\t\treturn { CONSTRAINT: [IdentityConstraint] };\n\t}\n\n\tget $KIND() { return this.argument()?.TYPE; }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ , argumentExpr ] = expr.match(/^ADD\\s+([\\s\\S]+)$/i) || [];\n\t\tif (argumentExpr) {\n\t\t\tconst instance = new this(context, 'CONSTRAINT');\n\t\t\treturn instance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES.CONSTRAINT));\n\t\t}\n\t}\n\n\tstringify() { return `ADD ${this.argument() }`; }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\n\nexport class Drop extends AbstractAction {\n    static get EXPECTED_KINDS() {\n\t\treturn { CONSTRAINT: ['IDENTITY', 'EXPRESSION', 'DEFAULT', 'NOT_NULL', /* 'NULL', 'AUTO_INCREMENT', 'ON_UPDATE' */], };\n\t}\n\n\tstatic parse(context, expr) {\n\t\tconst [ , kindExpr ] = expr.match(new RegExp(`^DROP\\\\s+(${this.EXPECTED_KINDS.CONSTRAINT.map(s => s.replace(/(?<!AUTO)_/gi, '\\\\s+')).join('|')})$`, 'i')) || [];\n\t\tif (kindExpr) return (new this(context, 'CONSTRAINT', kindExpr.replace(/\\s+/, '_').toUpperCase()));\n\t}\n\n\tstringify() { return `DROP ${this.$KIND.replace(/(?<!AUTO)_/gi, ' ') }`; }\n}", "import { AbstractNode } from '../../AbstractNode.js';\t\n\nexport class DataType extends AbstractNode {\n\n\t#value = [];\n\n    constructor(context, spec) {\n        super(context);\n        this.#value = spec;\n    }\n\n\tname() { return this.#value; }\n\n\tstatic fromJSON(context, json) {\n\t\tconst spec = [].concat(json);\n\t\tif (typeof spec[0] !== 'string') return;\n\t\tconst [name, precision, flags] = parse.call(this, spec[0]);\n        // Note that some columns associated with system tables in information schema don't have standard types. e.g. \"oid\" on postgres\n\t\tif (!name) return new this(context, nornalizeSpec( ...[].concat(json)) );\n        return new this(context, nornalizeSpec(name, ...precision.split(','), ...flags, ...spec.slice(1)));\n\t}\n\t\n\tjsonfy() {\n\t\tif (this.#value.length === 1) return this.#value[0];\n\t\treturn this.#value;\n\t}\n    \n\tstatic parse(context, expr) {\n\t\tconst [name, precision, flags] = parse.call(this, expr);\n\t\tif (!name) return;\n        return new this(context, nornalizeSpec(name, ...precision.split(','), ...flags));\n    }\n\t\n\tstringify() {\n\t\tconst [precision, flags] = this.#value.slice(1).reduce(([d, f], x) => /^\\d+$/.test(x) ? [d.concat(x), f] : [d, f.concat(x)], [[], []]);\n\t\treturn `${ this.#value[0] }${ precision.length ? `(${ precision.join(',') })` : `` }${ flags.length ? ` ${ flags.join(' ') }` : '' }`;\n\t}\n\n\tstatic pgFixedTypesRe = /^(bigint|int8|bigserial|serial8|boolean|bool|box|bytea|cidr|circle|date|double\\s+precision|float8|inet|integer|int|int4|jsonb|json|line|lseg|macaddr8|macaddr|money|path|pg_lsn|pg_snapshot|point|polygon|real|float4|smallint|int2|smallserial|serial2|serial4|serial|text|timetz|timestamptz|tsquery|tsvector|txid_snapshot|uuid|xml)$/;\n\tstatic pgVariableTypesRe = /^(bit\\s+varying|bit|varbit|character\\s+varying|character|char|varchar|interval|numeric|timestamp|time)(?:\\s+)?(?:\\(([\\d, ]+)\\))?(\\s+(?:with|without)\\s+time\\s+zone)?$/;\n\tstatic myFixedTypesRe = /^(tinyint|smallint|mediumint|enum|set|tinyblob|mediumblob|longblob|geometry|longstring|geometrycollection|multilinestring|multipoint|multipolygon)$/;\n\tstatic myVariableTypesRe = /^(float|decimal|double|tinytext|mediumtext|longtext|binary|varbinary|blob)(?:\\s+)?(?:\\(([\\d, ]+)\\))?$/;\n}\n\nconst nornalizeSpec = (...spec) => spec.map(s => /^\\d+$/.test(s) ? parseFloat(s) : s?.trim().replace(/\\s+/, ' ').toUpperCase()).filter(s => s);\nfunction parse(expr) {\n\tlet name, precision, flags;\n\tfor (const key of ['pgFixedTypesRe', 'pgVariableTypesRe', 'myFixedTypesRe', 'myVariableTypesRe']) {\n\t\t[ , name, precision = '', ...flags ] = expr.match(new RegExp(this[key].source, 'i')) || [];\n\t\tif (name) break;\n\t}\n\treturn [name, precision, flags];\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { IdentityConstraint } from '../../constraints/IdentityConstraint.js';\nimport { ExpressionConstraint } from '../../constraints/ExpressionConstraint.js';\nimport { DefaultConstraint } from '../../constraints/DefaultConstraint.js';\nimport { NotNullConstraint } from '../../constraints/NotNullConstraint.js';\nimport { Literal } from '../../../expr/Literal.js';\nimport { DataType } from '../DataType.js';\n\nexport class Set extends AbstractArgumentMixin(AbstractAction) {\n    static get EXPECTED_TYPES() {\n        return {\n            FLAG: [Literal],\n            DATA_TYPE: [DataType],\n            CONSTRAINT: [IdentityConstraint, ExpressionConstraint, DefaultConstraint, NotNullConstraint, /* NullConstraint, AutoIncrementConstraint, OnUpdateConstraint */],\n        };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n        let [, clauseMatch, restExpr] = (new RegExp(`^(SET|TYPE)\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr) || [];\n        if (!clauseMatch) return;\n        let subMatch, $KIND, argumentExpr;\n        if (subMatch = restExpr.match(/^DATA\\s+TYPE\\s+([\\s\\S]+)$/i)) {\n            $KIND = 'DATA_TYPE';\n            argumentExpr = subMatch[1];\n        } else if (/^TYPE$/i.test(clauseMatch)) {\n            $KIND = 'DATA_TYPE';\n            argumentExpr = restExpr;\n        } else if (subMatch = restExpr.match(/^GENERATED\\s+([\\s\\S]+)$/i)) {\n            $KIND = 'IDENTITY';\n            argumentExpr = `GENERATED ${subMatch[1]} AS IDENTITY`;\n        } else if (subMatch = restExpr.match(/^EXPRESSION\\s+AS\\s+([\\s\\S]+)$/i)) {\n            $KIND = 'EXPRESSION';\n            argumentExpr = `GENERATED ALWAYS AS ${subMatch[1]} STORED`;\n        } else if (subMatch = restExpr.match(/^(DEFAULT|NOT\\s+NULL)[\\s\\S]+$/i)) {\n            $KIND = subMatch[1].replace(/\\s+/g, '_').toUpperCase();\n            argumentExpr = restExpr;\n        } else {\n            const [,name,value] = restExpr.match(/(\\w+)(?:\\s+)?(.+)/);\n            const instance = new this(context, 'FLAG', name.toUpperCase());\n            return instance.argument((q) => q.literal(value));\n        }\n        const instance = new this(context, $KIND === 'DATA_TYPE' ? $KIND : 'CONSTRAINT', $KIND);\n\t\treturn instance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n\t}\n\n    stringify() {\n        let kindExpr = this.$KIND.replace(/(?<!AUTO)_/gi, ' ');\n        let argumentExpr = this.argument();\n        if (this.KIND === 'DATA_TYPE') {\n            argumentExpr = `${kindExpr} ${argumentExpr}`;\n        } else if (this.$KIND === 'EXPRESSION') {\n            argumentExpr = `${kindExpr} AS ${this.argument().$expr()}`;\n        } else if (this.$KIND === 'IDENTITY') {\n            argumentExpr = `GENERATED ${this.argument().$always() ? 'ALWAYS' : 'BY DEFAULT'}`;\n        }\n        return `SET ${argumentExpr}`;\n    }\n}", "import { AbstractCDL } from '../abstracts/AbstractCDL.js';\nimport { Add } from './actions/Add.js';\nimport { Drop } from './actions/Drop.js';\nimport { Set } from './actions/Set.js';\n\nexport class ColumnCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [Add, Drop, Set];\n    }\n}", "import { Lexer } from '../../Lexer.js';\nimport { _toCamel, _fromCamel } from '@webqit/util/str/index.js';\nimport { GlobalTableRef } from '../../expr/refs/GlobalTableRef.js';\nimport { AbstractNode } from '../../AbstractNode.js';\nimport { AbstractPrefixableNameableNode } from '../abstracts/AbstractPrefixableNameableNode.js'\nimport { AbstractLevel2Constraint } from '../constraints/abstracts/AbstractLevel2Constraint.js';\nimport { AutoIncrementConstraint } from '../constraints/AutoIncrementConstraint.js';\nimport { ExpressionConstraint } from '../constraints/ExpressionConstraint.js';\nimport { IdentityConstraint } from '../constraints/IdentityConstraint.js';\nimport { DefaultConstraint } from '../constraints/DefaultConstraint.js';\nimport { NotNullConstraint } from '../constraints/NotNullConstraint.js';\nimport { CheckConstraint } from '../constraints/CheckConstraint.js';\nimport { OnUpdateClause } from '../constraints/OnUpdateClause.js';\nimport { NullConstraint } from '../constraints/NullConstraint.js';\nimport { PrimaryKeyConstraint } from '../constraints/PrimaryKeyConstraint.js';\nimport { ForeignKeyConstraint } from '../constraints/ForeignKeyConstraint.js';\nimport { UniqueKeyConstraint } from '../constraints/UniqueKeyConstraint.js';\nimport { ColumnCDL } from './ColumnCDL.js';\nimport { DataType } from './DataType.js';\nimport { _isObject } from '@webqit/util/js/index.js';\n\nexport class ColumnSchema extends AbstractPrefixableNameableNode {\n    static get CONSTRAINT_TYPES() { return [AutoIncrementConstraint,IdentityConstraint,ExpressionConstraint,DefaultConstraint,NotNullConstraint,NullConstraint,OnUpdateClause,PrimaryKeyConstraint,ForeignKeyConstraint,UniqueKeyConstraint,CheckConstraint]; }\n    static get PREFIX_TYPE() { return [GlobalTableRef]; }\n\n    #type;\n    #$type;\n    #constraints = [];\n\n\ttype(value) {\n        if (!arguments.length) return this.#type;\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$type = this.$castInputs([value], DataType, this.#$type, '$type');\n\t\t} else this.#type = this.$castInputs([value], DataType, this.#type, 'type');\n        return this;\n    }\n\n\t$type() { return this.#$type || this.#type; }\n\n    autoIncrement(...args) { return this.constraint('AUTO_INCREMENT', ...args); }\n\n    identity(...args) { return this.constraint('IDENTITY', ...args); }\n\n    expression(...args) { return this.constraint('EXPRESSION', ...args); }\n\n    default(...args) { return this.constraint('DEFAULT', ...args); }\n\n    notNull(...args) { return this.constraint('NOT_NULL', ...args); }\n\n    null(...args) { return this.constraint('NULL', ...args); }\n\n    onUpdate(...args) { return this.constraint('ON_UPDATE', ...args); }\n\n    primaryKey(...args) { return this.constraint('PRIMARY_KEY', ...args); }\n\n    foreignKey(...args) { return this.constraint('FOREIGN_KEY', ...args); }\n\n    uniqueKey(...args) { return this.constraint('UNIQUE_KEY', ...args); }\n\n    check(...args) { return this.constraint('CHECK', ...args); }\n\n\t/* -- SUBTREE I/O */\n\n    constraint(arg1, ...args) {\n        if (typeof arg1 === 'string') {\n            const existing = this.#constraints.find((cons) => cons.TYPE === arg1);\n            if (!args.length) return existing;\n            if (args[0] === false) {\n                this.#constraints = this.#constraints.filter((c) => c !== existing);\n                existing?.bubble('DISCONNECTED');\n                return this;\n            }\n            arg1 = { type: arg1, ...(['CHECK', 'DEFAULT', 'EXPRESSION', 'ON_UPDATE'].includes(arg1) && !(_isObject(args[0]) && args[0].expr) ? { expr: args[0] } : (typeof args[0] === 'object' ? args[0] : {})) };\n        }\n        this.#constraints = this.$castInputs([arg1], this.constructor.CONSTRAINT_TYPES, this.#constraints, 'constraint', null, (existing) => {\n\t\t\treturn this.#constraints.find((cons) => cons.TYPE === existing.TYPE);\n\t\t});\n        return this;\n    }\n\n\t/* -- TRAVERSALS */\n\n\tconstraints(asInstances = true, level = 0) {\n\t\tconst constraints = !level ? this.#constraints : this.#constraints.filter(node => (node instanceof AbstractLevel2Constraint) === (level === 2));\n\t\treturn !asInstances ? constraints.map(c => c.TYPE) : constraints;\n\t}\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\tconst dirtyCheck = super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['type'])\n\t\t);\n\t\tif (!deeply) return dirtyCheck;\n\t\treturn dirtyCheck.concat(['constraints'].filter((key) => {\n\t\t\treturn this[key]().some(node => node.dirtyCheck(deeply).length);\n\t\t}));\n\t}\n\n    renderCDL(columnCDL, options) {\n        let json = this.jsonfy(options);\n        for (const cd of columnCDL) {\n            let argumentJson, argumentJsonNew;\n            if (['ADD', 'SET'].includes(cd.CLAUSE)) {\n                argumentJson = cd.argument().jsonfy(options);\n                argumentJsonNew = { ...argumentJson, ...(options.diff !== false ? { status: 'new' } : {}) };\n            }\n            if (cd.CLAUSE === 'ADD') {\n                if (cd.$KIND === 'IDENTITY') {\n                    if (json.identity) throw new Error(`IDENTITY constraint already exists.`);\n                    json = { ...json, identity: argumentJsonNew };\n                }\n            } else if (cd.CLAUSE === 'SET') {\n                if (cd.KIND === 'DATA_TYPE') {\n                    json = this.diffMergeJsons(json, { type: argumentJson });\n                } else if (cd.$KIND === 'IDENTITY') {\n                    if (!json.identity) throw new Error(`IDENTITY constraint not exists.`);\n                    json = { ...json, identity: this.diffMergeJsons(json.identity, { always: argumentJson.always }, options) };\n                } else if (cd.$KIND === 'EXPRESSION') {\n                    json = { ...json, expression: json.expression ? this.diffMergeJsons(json.expression, { expr: argumentJson.expr }, options) : argumentJsonNew };\n                } else if (cd.$KIND === 'DEFAULT') {\n                    json = { ...json, default: json.default ? this.diffMergeJsons(json.default, { expr: argumentJson.expr }, options) : argumentJsonNew };\n                }\n            } else if (cd.CLAUSE === 'DROP') {\n                const attrName = _toCamel(cd.$KIND.toLowerCase().replace('_', ' '));\n                if (!json[attrName]) throw new Error(`${cd.$KIND} constraint does not exist.`);\n                json = options.diff === false ? json : { ...json, [attrName]: this.diffMergeJsons(json[attrName], { status: 'obsolete' }) };\n            }\n        }\n        return json;\n    }\n\n    generateCDL(options = {}) {\n        const columnCDL = ColumnCDL.fromJSON(this, { actions: [] });\n        if (this.#$type && !this.$eq(this.#$type, this.#type, 'ci')) {\n            columnCDL.add('SET', 'DATA_TYPE', (cd) => cd.argument(this.#$type.jsonfy(options)));\n        }\n        for (const cons of this.#constraints) {\n            if (cons.constraintLevel === 2) continue;\n            if (cons.status() === 'obsolete') {\n                columnCDL.add('DROP', 'CONSTRAINT', cons.TYPE);\n            } else if (cons.status() === 'new' && cons.TYPE === 'IDENTITY') {\n                columnCDL.add('ADD', 'CONSTRAINT', cons.TYPE, (cd) => cd.argument(cons.jsonfy({ ...options, diff: false })));\n            } else {\n                const dirtyCheck = cons.dirtyCheck();\n                if (!dirtyCheck.length) continue;\n                columnCDL.add('SET', 'CONSTRAINT', cons.TYPE, (cd) => cd.argument(cons.jsonfy({ ...options, diff: false })));\n            }\n        }\n        return columnCDL;\n    }\n\n    generateDiff(nodeB, options) {\n\t\tconst attributesDiff = this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\ttype: this.$type()?.jsonfy(options)\n\t\t}, {\n\t\t\ttype: nodeB.$type()?.jsonfy(options)\n\t\t}, options);\n        const constraintsDiff = this.flattenConstraintJsons(this.diffMergeTrees(\n            new Map(this.constraints().map(cons => [cons.TYPE, cons])),\n            new Map(nodeB.constraints().map(cons => [cons.TYPE, cons])),\n            (a, b) => a.generateDiff(b, options)\n        ), options);\n        return { ...attributesDiff, ...constraintsDiff };\n    }\n\n    /* -- UTILS */\n\n    flattenConstraintJsons(constraints) {\n        let json = {};\n        for (const cons of constraints) {\n            const { type, ...rest } = cons;\n            const attrName = _toCamel(type.toLowerCase().replace('_', ' '));\n            json = { ...json, [ attrName ]: !Object.keys(rest).filter((k) => rest[k] !== undefined ).length ? true : rest };\n        }\n        return json;\n    }\n\n    static unflattenConstraintJsons(json) {\n        return Object.entries(json).map(([type, body]) => {\n            const $throw = (subKey) => {\n                throw new Error(`Invalid ${subKey ? `or missing attribute \"${subKey}\"` : 'format'} for constraint \"${ type }\"`);\n            };\n            type = _fromCamel((type + ''), '_').toUpperCase();\n            body = body === true ? {} : (body === false ? { status: 'obsolete' } : body);\n            // Validation\n            if (['CHECK', 'EXPRESSION', 'DEFAULT', 'ON_UPDATE'].includes(type)) {\n                if (!_isObject(body) || !body.expr) body = { expr: body };\n            } else if (type === 'FOREIGN_KEY') {\n                if (!GlobalTableRef.fromJSON({}, body?.targetTable)) $throw('targetTable');\n                if (!Array.isArray(body?.targetColumns)) $throw('targetColumns');\n            } else if (!['PRIMARY_KEY', 'UNIQUE_KEY', 'IDENTITY', 'NOT_NULL', 'NULL', 'AUTO_INCREMENT'].includes(type)) {\n                throw new Error(`Unknown attribute or constraint: ${type}`);\n            } else if (!_isObject(body)) $throw();\n            return { type, ...body };\n        });\n    }\n\n    /* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n        const { nodeName, name, $name, prefix, $prefix, type, $type, status, CDLIgnoreList, ...constraints } = json;\n        if (!DataType.fromJSON({}, type)) return;\n        return super.fromJSON(context, json, (instance) => {\n            instance.type(type);\n            instance.$diffTagHydrate($type, ($type) => instance.type($type));\n            for (const cons of this.unflattenConstraintJsons(constraints)) {\n                instance.constraint(cons);\n            }\n            callback?.(instance);\n        });\n\t}\n\t\n\tjsonfy(options = {}, jsonIn = {}, reducer = null) {\n        const constraints = this.#constraints.reduce((aggr, entry, i) => {\n            if (reducer) {\n                const result = reducer(entry, i);\n                if (!result) return aggr;\n                if (![entry, true].includes(result)) {\n                    if (result instanceof AbstractNode) throw new Error(`A JSON object not a node instance expected from reducer`);\n                    return aggr.concat(result);\n                }\n            }\n            return aggr.concat(entry.jsonfy(options) || []);\n        }, []);\n        return super.jsonfy(options, {\n            type: this.#type?.jsonfy(options),\n            ...(this.#$type ? { $type: this.#$type.jsonfy(options) } : {}),\n            ...this.flattenConstraintJsons(constraints),\n            ...jsonIn\n        });\n    }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ namePart, bodyPart ] = Lexer.split(expr, ['\\\\s+'], { useRegex: true, limit: 1 });\n        const [name] = this.parseIdent(context, namePart.trim());\n        if (!name) return;\n        const instance = (new this(context)).name(name);\n        // Parse into \"type\" and constraints\n        const qualifier = '(CONSTRAINT\\\\s+.+?\\\\s+)?';\n        const regexes = [\n            { test: `${ qualifier }(PRIMARY[ ]+KEY|NOT[ ]+NULL|GENERATED|REFERENCES|UNIQUE(?:[ ]+KEY)?|CHECK|AUTO_INCREMENT)` },\n            { backtest: '^(?!.*\\\\s+(NOT|SET)\\\\s+$)', test: `${ qualifier }NULL` },\n            { backtest: '^(?!.*\\\\s+BY\\\\s+$)', test: `${ qualifier }DEFAULT` },\n            { backtest: '^(?!.*\\\\s+REFERENCES\\\\s+)', test: `ON\\\\s+UPDATE` },\n        ];\n        const [ columnType, ...tokens ] = Lexer.split(bodyPart, regexes, { useRegex:'i', preserveDelims: true });\n        // Type\n        instance.type(parseCallback(instance, columnType.trim(), [DataType]));\n        // Constraints\n        for (const constraint of tokens) {\n            const cons = parseCallback(instance, constraint, this.CONSTRAINT_TYPES);\n            instance.constraint(cons);\n        }\n        return instance;\n    }\n\n\tstringify() {\n        let constraints = this.#constraints;\n        if (this.params.dialect === 'mysql') { constraints = constraints.filter(c => c.TYPE !== 'FOREIGN_KEY'); }\n        return `${ this.stringifyIdent(this.$name()) } ${ this.$type() }${ constraints.length ? ` ${ constraints.join(' ') }` : '' }`;\n    }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\n\nexport class Flag extends AbstractAction {\n\n    #value;\n\n    value(value) {\n        if (!arguments.length) return this.#value;\n        return (this.#value = value, this);\n    }\n\n    static fromJSON(context, json, callback = null) {\n\t\tif (!json?.value) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.value(json.value);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tvalue: this.#value,\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n    static parse(context, expr) {\n        const [value] = expr.match(/TODO/i) || [];\n        if (value) return (new this(context)).value(value.replace(/\\s+/, '_').toUpperCase());\n    }\n\n    stringify() { return this.#value?.replace(/_/, ' ') || ''; }\n}", "import { AbstractCDL } from '../abstracts/AbstractCDL.js';\nimport { Flag } from './actions/Flag.js';\n\nexport class IndexCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [Flag];\n    }\n}", "import { AbstractNameableNode } from '../abstracts/AbstractNameableNode.js';\nimport { AbstractColumnsMixin } from '../abstracts/AbstractColumnsMixin.js';\nimport { IndexCDL } from './IndexCDL.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class IndexSchema extends AbstractColumnsMixin(AbstractNameableNode) {\n\n\t#type;\n\t#$type;\n\n\ttype(value) {\n\t\tif (!arguments.length) return this.#type;\n\t\tif (typeof value !== 'string') throw new Error(`The \"type\" directive must be of type string. Recieved ${value}`);\n\t\tif (this.$diffTagHydrate()) {\n\t\t\tthis.#$type = value;\n\t\t} else this.#type = value;\n\t\treturn this;\n    }\n\n\t$type() { return this.#$type ?? this.#type; }\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties(['type'])\n\t\t);\n\t}\n\t\n\trenderCDL(columnCDL, options) {\n        let json = this.jsonfy(options);\n        return json;\n    }\n\n    generateCDL() {\n        const indexCDL = IndexCDL.fromJSON(this, { actions: [] });\n        return indexCDL;\n    }\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\ttype: this.$type(),\n\t\t}, {\n\t\t\ttype: nodeB.$type(),\n\t\t}, options);\n    }\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!/^(INDEX|KEY|FULLTEXT)$/i.test(json.type)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.type(json.type);\n\t\t\tinstance.$diffTagHydrate(json.$type, ($type) => instance.type($type));\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n            type: this.#type,\n\t\t\t...(this.#$type ? { $type: this.#$type } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n    static checkIsColumn(contextNode) { return false; }\n\n\tstatic parse(context, expr) {\n\t\tconst [ match, type, rest ] = /^((?:(?:FULLTEXT|SPATIAL)(?:\\s+INDEX|\\s+KEY)?)|(?:INDEX|KEY))([\\s\\S]+)$/i.exec(expr) || [];\n        if (!match) return;\n\t\tconst instance = new this(context);\n\t\tconst [ nameExpr, columnsExpr ] = Lexer.split(rest, []);\n\t\tconst [name] = this.parseIdent(context, nameExpr.trim());\n        return instance\n\t\t\t.type(type.replace(/\\s+(INDEX|KEY)/i, '').toUpperCase())\n\t\t\t.columns(this.parseColumns(instance, columnsExpr))\n\t\t\t.name(name);\n    }\n\t\n\tstringify() { return `${ this.$type() }${ this.$name() ? ` ${ this.stringifyIdent(this.$name()) }` : '' }${ this.stringifyColumns() }`; }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { PrimaryKeyConstraint } from '../../constraints/PrimaryKeyConstraint.js';\nimport { ForeignKeyConstraint } from '../../constraints/ForeignKeyConstraint.js';\nimport { UniqueKeyConstraint } from '../../constraints/UniqueKeyConstraint.js';\nimport { CheckConstraint } from '../../constraints/CheckConstraint.js';\nimport { ColumnSchema } from '../../column/ColumnSchema.js';\nimport { ColumnRef } from '../../../expr/refs/ColumnRef.js';\nimport { Identifier } from '../../../expr/Identifier.js';\nimport { IndexSchema } from '../../index/IndexSchema.js';\n\nexport class Add extends AbstractArgumentMixin(AbstractAction) {\n\tstatic get EXPECTED_TYPES() {\n        return {\n            COLUMN: [ColumnSchema],\n            CONSTRAINT: [PrimaryKeyConstraint, ForeignKeyConstraint, UniqueKeyConstraint, CheckConstraint],\n\t\t\tINDEX: [IndexSchema],\n        };\n    }\n\n    static get REF_TYPES() {\n        return {\n            COLUMN: [ColumnRef],\n            CONSTRAINT: [Identifier],\n\t\t\tINDEX: [Identifier],\n        };\n    }\n\n\tget $KIND() { return this.KIND === 'COLUMN' ? this.argument()?.type()?.name() : this.argument()?.TYPE; }\n\t\n\t#first;\n\t#after;\n\n\tfirst(value) {\n\t\tif (!arguments.length) return this.#first;\n\t\treturn (this.#first = !!value, this);\n\t}\n\n\tafter(value) {\n\t\tif (!arguments.length) return this.#after;\n\t\tthis.#after = this.$castInputs([value], this.constructor.REF_TYPES[this.KIND], this.#after, 'ref');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.first) instance.first(true);\n\t\t\tif (json.after) instance.after(json.after);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...(this.#first ? { first: true } : {}),\n\t\t\t...(this.#after ? { after: this.#after.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback, argParseCallback = null) {\n\t\tlet autoFiguredKind;\n\t\tlet [, kindExpr, argumentExpr, afterRef, first] = expr.match(new RegExp(`^${this.CLAUSE}\\\\s+(?:(${Object.keys(this.EXPECTED_TYPES).join('|')})\\\\s+)?([\\\\s\\\\S]+?)(?:\\\\s+AFTER\\\\s+(.+)|\\\\s+(FIRST))?$`, 'i')) || [];\n\t\tif (!kindExpr) {\n\t\t\tif (/^(PRIMARY|FOREIGN|UNIQUE|CHECK)/i.test(argumentExpr)) {\n\t\t\t\tkindExpr = 'CONSTRAINT';\n\t\t\t\tautoFiguredKind = true;\n\t\t\t} else if (/^(FULLTEXT|SPATIAL)/i.test(argumentExpr)) {\n\t\t\t\tkindExpr = 'INDEX';\n\t\t\t\tautoFiguredKind = true;\n\t\t\t} else if (argumentExpr) kindExpr = 'COLUMN';\n\t\t}\n\t\tif (!kindExpr) return;\n\t\tconst instance = new this(context, kindExpr.toUpperCase());\n\t\tif (instance.CLAUSE === 'ADD') {\n\t\t\tconst [, ifNotExists, $argumentExpr] = argumentExpr.match(/(IF\\s+NOT\\s+EXISTS\\s+)?([\\s\\S]+)$/i);\n\t\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\t\targumentExpr = $argumentExpr;\n\t\t}\n\t\t// Handle positional details\n\t\tif (afterRef) instance.after(parseCallback(instance, afterRef, this.REF_TYPES[instance.KIND]));\n\t\telse if (first) instance.first();\n\t\t// Handle argument\n\t\tconst argument = (argParseCallback || parseCallback)(instance, instance.KIND === 'COLUMN' || autoFiguredKind ? argumentExpr : `${instance.KIND} ${argumentExpr}`, this.EXPECTED_TYPES[instance.KIND]);\n\t\treturn instance.argument(argument);\n\t}\n\n\tstringify() {\n\t\tconst sql = [this.CLAUSE];\n\t\tif (this.hasFlag('IF_NOT_EXISTS')) sql.push('IF NOT EXISTS');\n\t\tsql.push(this.argument());\n\t\tif (this.#first) sql.push('FIRST');\n\t\telse if (this.#after) sql.push('AFTER', this.#after);\n        return sql.join(' ');\n\t}\n}", "import { Add } from './Add.js';\n\nexport class Modify extends Add {}", "import { Modify } from './Modify.js';\nimport { AbstractReferenceMixin } from '../../abstracts/AbstractReferenceMixin.js';\n\nexport class Change extends AbstractReferenceMixin(Modify) {\n\tstatic parse(context, expr, parseCallback) {\n\t\treturn super.parse(context, expr, parseCallback, (instance, argumentExpr, Types) => {\n\t\t\tconst [$referenceExpr, $argumentExpr] = Lexer.split(argumentExpr, ['\\\\s+'], { useRegex: true, limit: 1 });\n\t\t\tinstance.reference(parseCallback(instance, $referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\t\treturn parseCallback(instance, $argumentExpr, Types);\n\t\t});\n\t}\n\n\tstringify() { return super.stringify().replace(this.KIND, `${this.KIND} ${this.reference()}`); }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractReferenceMixin } from '../../abstracts/AbstractReferenceMixin.js';\nimport { Identifier } from '../../../expr/Identifier.js';\nimport { ColumnRef } from '../../../expr/refs/ColumnRef.js';\n\nexport class Drop extends AbstractReferenceMixin(AbstractAction) {\n\tstatic get EXPECTED_KINDS() {\n\t\treturn {\n\t\t\tCOLUMN: ['COLUMN'],\n\t\t\tCONSTRAINT: ['PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE_KEY', 'CHECK'],\n\t\t\tINDEX: ['INDEX'],\n\t\t};\n\t}\n\n    static get REF_TYPES() {\n        return {\n            COLUMN: [ColumnRef],\n            CONSTRAINT: [Identifier],\n\t\t\tINDEX: [Identifier],\n        };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst KINDS = Object.keys(this.EXPECTED_KINDS);\n\t\tconst $KINDS = context?.params?.dialect === 'mysql'\n\t\t\t? [...new Set(KINDS.reduce((kinds, k) => kinds.concat(k, this.EXPECTED_KINDS[k]), []))]\n\t\t\t: KINDS;\n\t\tconst [ wholeMatch, kindExp = 'COLUMN', ifExists, referenceExpr, restrictCascadeForce ] = expr.match(new RegExp(`^DROP(?:\\\\s+(${$KINDS.map(s => s.replace(/_/gi, '\\\\s+')).join('|')})(\\\\s+IF\\\\s+EXISTS)?)?(?:\\\\s+([\\\\s\\\\S]+?)(?:\\\\s+(RESTRICT|CASCADE|FORCE))?)?$`, 'i')) || [];\n\t\tif (!wholeMatch) return;\n\t\tconst $KIND = kindExp.replace(/\\s+/g, '_').toUpperCase();\n\t\tconst KIND = KINDS.includes($KIND) ? $KIND : KINDS.find(k => this.EXPECTED_KINDS[k].includes($KIND));\n\t\tif (!KIND) return;\n\t\tconst instance = new this(context, KIND, $KIND);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tif (restrictCascadeForce) instance.withFlag(restrictCascadeForce);\n\t\tif (referenceExpr) instance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[KIND]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = ['DROP', this.params.dialect === 'mysql' ? this.$KIND.replace(/_/g, ' ') : this.KIND];\n\t\tif (this.hasFlag('IF_EXISTS')) sql.push('IF EXISTS');\n\t\tif (this.reference()) sql.push(this.reference());\n\t\tif (this.hasFlag('RESTRICT')) sql.push('RESTRICT');\n\t\telse if (this.hasFlag('CASCADE')) sql.push('CASCADE');\n\t\telse if (this.hasFlag('FORCE')) sql.push('FORCE');\n\t\treturn sql.join(' ');\n\t}\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { DatabaseRef } from '../../../expr/refs/DatabaseRef.js';\n\nexport class Set extends AbstractArgumentMixin(AbstractAction) {\n    static get EXPECTED_TYPES() {\n        return { SCHEMA: [DatabaseRef] };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n        const [, kindExpr, argumentExpr] = (new RegExp(`^SET\\\\s+(${Object.keys(this.EXPECTED_TYPES).map(k => k.replace(/_/g, '\\\\s+')).join('|')})\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr) || [];\n        if (!kindExpr) return;\n        const instance = new this(context, kindExpr.replace(/s+/g, '_').toUpperCase());\n        return instance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n    }\n\n    stringify() { return `SET ${this.KIND.replace(/_/g, ' ')} ${this.argument()}`; }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { AbstractReferenceMixin } from '../../abstracts/AbstractReferenceMixin.js';\nimport { ColumnCDL } from '../../column/ColumnCDL.js';\nimport { ConstraintCDL } from '../../constraints/ConstraintCDL.js';\nimport { IndexCDL } from '../../index/IndexCDL.js';\nimport { ColumnRef } from '../../../expr/refs/ColumnRef.js';\nimport { Identifier } from '../../../expr/Identifier.js';\nimport { Lexer } from '../../../Lexer.js';\n\nexport class Alter extends AbstractReferenceMixin(AbstractArgumentMixin(AbstractAction)) {\n\tstatic get EXPECTED_TYPES() {\n        return {\n            COLUMN: [ColumnCDL],\n            CONSTRAINT: [ConstraintCDL],\n\t\t\tINDEX: [IndexCDL],\n        };\n    }\n\n    static get REF_TYPES() {\n        return {\n            COLUMN: [ColumnRef],\n            CONSTRAINT: [Identifier],\n\t\t\tINDEX: [Identifier],\n        };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [, kindExpr = 'COLUMN', restExpr ] = expr.match(new RegExp(`^ALTER\\\\s+(?:(${Object.keys(this.EXPECTED_TYPES).join('|')})\\\\s+)?([\\\\s\\\\S]+)$`, 'i')) || [];\n\t\tconst [ referenceExpr, argumentExpr ] = Lexer.split(restExpr, [' '], { limit: 1 }).map((s) => s.trim());\n\t\tif (!argumentExpr) return;\n\t\tconst instance = new this(context, kindExpr.toUpperCase());\n\t\tinstance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\tinstance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\treturn [...this.argument()].map(action => {\n\t\t\treturn `ALTER ${this.KIND} ${this.reference()} ${action}`;\n\t\t}).join('\\n');\n\t}\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { AbstractReferenceMixin } from '../../abstracts/AbstractReferenceMixin.js';\nimport { GlobalTableRef } from '../../../expr/refs/GlobalTableRef.js';\nimport { ColumnRef } from '../../../expr/refs/ColumnRef.js';\nimport { Identifier } from '../../../expr/Identifier.js';\n\nexport class Rename extends AbstractReferenceMixin(AbstractArgumentMixin(AbstractAction)) {\n    static get REF_TYPES() {\n        return {\n            COLUMN: [ColumnRef],\n            CONSTRAINT: [Identifier],\n\t\t\tINDEX: [Identifier]\n        };\n    }\n\n\tstatic get EXPECTED_TYPES() { return this.REF_TYPES; }\n\n\tstatic get OWN_REF_TYPE() { return GlobalTableRef; }\n\n\tget EXPECTED_TYPES() { return !this.KIND ? this.constructor.OWN_REF_TYPE : this.constructor.EXPECTED_TYPES[this.KIND]; }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [, kindExpr = 'COLUMN', referenceExpr, argumentExpr ] = expr.match(new RegExp(`^RENAME\\\\s+(?:(${Object.keys(this.REF_TYPES).join('|')})\\\\s+)?(?:([\\\\s\\\\S]+?)\\\\s+)?(?:TO|AS)\\\\s+([\\\\s\\\\S]+)$`, 'i')) || [];\n\t\tif (!argumentExpr) return;\n\t\tconst instance = new this(context, referenceExpr && kindExpr.toUpperCase());\n\t\tif (referenceExpr) {\n\t\t\tinstance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\t\tinstance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n\t\t} else instance.argument(parseCallback(instance, argumentExpr, [this.OWN_REF_TYPE]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\treturn ['RENAME', this.KIND, this.reference(), 'TO', this.argument()].filter(s => s).join(' ');\n\t}\n}", "import { AbstractCDL } from '../abstracts/AbstractCDL.js';\nimport { Add } from './actions/Add.js';\nimport { Modify } from './actions/Modify.js';\nimport { Change } from './actions/Change.js';\nimport { Drop } from './actions/Drop.js';\nimport { Set } from './actions/Set.js';\nimport { Alter } from './actions/Alter.js';\nimport { Rename } from './actions/Rename.js';\n\nexport class TableCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [Add, Modify, Change, Drop, Set, Alter, Rename];\n    }\n}", "import { AbstractAlterAction } from '../../abstracts/AbstractAlterAction.js';\nimport { AbstractDDLStatement } from '../../../AbstractDDLStatement.js';\nimport { GlobalTableRef } from '../../../expr/refs/GlobalTableRef.js';\nimport { TableCDL } from '../../table/TableCDL.js';\n\nexport class AlterTable extends AbstractDDLStatement(AbstractAlterAction) {\n    static get EXPECTED_TYPES() {\n        return {\n\t\t\tTABLE: [TableCDL],\n\t\t\tVIEW: [TableCDL],\n        };\n    }\n\n    static get REF_TYPES() {\n        return {\n \t\t\tTABLE: [GlobalTableRef],\n\t\t\tVIEW: [GlobalTableRef],\n        };\n    }\n    \n    stringify() {\n\t\tconst [moveAction, ownRename, renames, actions] = this.argument().actions().reduce(([a, b, c, d], action) => {\n\t\t\tif (action.CLAUSE === 'SET' && action.KIND === 'SCHEMA') return [action, b, c, d];\n\t\t\tif (action.CLAUSE === 'RENAME' && !action.KIND) return [a, action, c, d];\n\t\t\tif (action.CLAUSE === 'RENAME') return [a, b, c.concat(action), d];\n\t\t\treturn [a, b, c, d.concat(action)];\n\t\t}, [null, null, [], []]);\n\t\tconst sql = [], stmt_ = `ALTER ${this.KIND}${ this.hasFlag('IF_EXISTS') ? ` IF EXISTS` : ''}`;\n\t\tif (actions.length) sql.push(`${stmt_} ${this.reference()}\\n\\t${actions.join(',\\n\\t')}`);\n\t\tfor (const rename of renames.concat(ownRename || [])) sql.push(`${stmt_} ${this.reference()} ${rename}`);\n\t\tif (moveAction) sql.push(`${stmt_} ${ownRename?.argument() || this.reference()} ${moveAction}`);\n\t\treturn sql.join(';\\n');\n\t}\n}", "import { AbstractAction } from './AbstractAction.js';\nimport { AbstractArgumentMixin } from './AbstractArgumentMixin.js';\n\nexport class AbstractCreateAction extends AbstractArgumentMixin(AbstractAction) {\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [, kindExpr, ifNotExists, argumentExpr] = expr.match(new RegExp(`^${this.CLAUSE}\\\\s+(${Object.keys(this.EXPECTED_TYPES).join('|')})\\\\s+(IF\\\\s+NOT\\\\s+EXISTS\\\\s+)?([\\\\s\\\\S]+)$`, 'i')) || [];\n\t\tif (!kindExpr) return;\n\t\tconst instance = new this(context, kindExpr.toUpperCase());\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\tconst argument = parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]);\n\t\treturn instance.argument(argument);\n\t}\n\n\tstringify() {\n\t\tconst sql = ['CREATE', this.KIND];\n\t\tif (this.hasFlag('IF_NOT_EXISTS')) sql.push('IF NOT EXISTS');\n\t\tsql.push(this.argument());\n\t\treturn sql.join(' ');\n\t}\n}", "import { AbstractCreateAction } from '../../abstracts/AbstractCreateAction.js';\nimport { AbstractDDLStatement } from '../../../AbstractDDLStatement.js';\nimport { TableSchema } from '../../table/TableSchema.js';\n\nexport class CreateTable extends AbstractDDLStatement(AbstractCreateAction) {\n\tstatic get EXPECTED_TYPES() {\n\t\treturn {\n\t\t\tTABLE: [TableSchema],\n\t\t\tVIEW: [TableSchema],\n\t\t};\n\t}\n}", "import { AbstractAction } from './AbstractAction.js';\nimport { AbstractReferenceMixin } from './AbstractReferenceMixin.js';\n\nexport class AbstractDropAction extends AbstractReferenceMixin(AbstractAction) {\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst KINDS = Object.keys(this.EXPECTED_KINDS);\n\t\tconst [, kindExp, ifExists, referenceExpr, restrictCascadeForce ] = expr.match(new RegExp(`^DROP\\\\s+(?:(${KINDS.map(s => s.replace(/_/gi, '\\\\s+')).join('|')})\\\\s+(IF\\\\s+EXISTS\\\\s+)?)?([\\\\s\\\\S]+?)(?:\\\\s+(RESTRICT|CASCADE|FORCE))?$`, 'i')) || [];\n\t\tif (!kindExp) return;\n\t\tconst instance = new this(context, kindExp.replace(/\\s+/g, '_').toUpperCase());\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tif (restrictCascadeForce) instance.withFlag(restrictCascadeForce);\n\t\tif (referenceExpr) instance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = ['DROP', this.KIND];\n\t\tif (this.hasFlag('IF_EXISTS')) sql.push('IF EXISTS');\n\t\tif (this.reference()) sql.push(this.reference());\n\t\tif (this.hasFlag('RESTRICT')) sql.push('RESTRICT');\n\t\telse if (this.hasFlag('CASCADE')) sql.push('CASCADE');\n\t\telse if (this.hasFlag('FORCE')) sql.push('FORCE');\n\t\treturn sql.join(' ');\n\t}\n}", "import { AbstractDropAction } from '../../abstracts/AbstractDropAction.js';\nimport { AbstractDDLStatement } from '../../../AbstractDDLStatement.js';\nimport { GlobalTableRef } from '../../../expr/refs/GlobalTableRef.js';\n\nexport class DropTable extends AbstractDDLStatement(AbstractDropAction) {\n    static get EXPECTED_KINDS() {\n\t\treturn {\n\t\t\tTABLE: true,\n\t\t\tVIEW: true,\n\t\t};\n\t}\n\n    static get REF_TYPES() {\n        return {\n\t\t\tTABLE: [GlobalTableRef],\n\t\t\tVIEW: [GlobalTableRef],\n        };\n    }\n}", "import { AbstractAction } from './AbstractAction.js';\nimport { AbstractReferenceMixin } from './AbstractReferenceMixin.js';\nimport { AbstractArgumentMixin } from './AbstractArgumentMixin.js';\n\nexport class AbstractRenameAction extends AbstractReferenceMixin(AbstractArgumentMixin(AbstractAction)) {\n\n\tstatic get EXPECTED_TYPES() { return this.REF_TYPES; }\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [, kindExpr, referenceExpr, argumentExpr ] = expr.match(new RegExp(`^RENAME\\\\s+(?:(${Object.keys(this.REF_TYPES).join('|')})\\\\s+)?(?:([\\\\s\\\\S]+?)\\\\s+)?(?:TO|AS)\\\\s+([\\\\s\\\\S]+)$`, 'i')) || [];\n\t\tif (!argumentExpr) return;\n\t\tconst instance = new this(context, referenceExpr && kindExpr.toUpperCase());\n\t\tif (referenceExpr) {\n\t\t\tinstance.reference(parseCallback(instance, referenceExpr, this.REF_TYPES[instance.KIND]));\n\t\t\tinstance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n\t\t} else instance.argument(parseCallback(instance, argumentExpr, [this.OWN_REF_TYPE]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\treturn ['RENAME', this.KIND, this.reference(), 'TO', this.argument()].filter(s => s).join(' ');\n\t}\n}", "import { AbstractRenameAction } from '../../abstracts/AbstractRenameAction.js';\nimport { GlobalDatabaseRef } from '../../../expr/refs/GlobalDatabaseRef.js';\nimport { GlobalTableRef } from '../../../expr/refs/GlobalTableRef.js';\n\nexport class Rename extends AbstractRenameAction {\n    static get REF_TYPES() {\n        return {\n \t\t\tTABLE: [GlobalTableRef],\n\t\t\tVIEW: [GlobalTableRef],\n        };\n    }\n\n\tstatic get OWN_REF_TYPE() {\n        return GlobalDatabaseRef;\n    }\n\n\tget EXPECTED_TYPES() { return !this.KIND ? this.constructor.OWN_REF_TYPE : this.constructor.EXPECTED_TYPES[this.KIND]; }\n}", "import { AbstractAction } from '../../abstracts/AbstractAction.js';\nimport { AbstractArgumentMixin } from '../../abstracts/AbstractArgumentMixin.js';\nimport { Identifier } from '../../../expr/Identifier.js';\n\nexport class Set extends AbstractArgumentMixin(AbstractAction) {\n    static get EXPECTED_TYPES() {\n        return { TABLESPACE: [Identifier] };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n        const [, kindExpr, argumentExpr] = (new RegExp(`^SET\\\\s+(${Object.keys(this.EXPECTED_TYPES).map(k => k.replace(/_/g, '\\\\s+')).join('|')})\\\\s+([\\\\s\\\\S]+)$`, 'i')).exec(expr) || [];\n        if (!kindExpr) return;\n        const instance = new this(context, kindExpr.replace(/s+/g, '_').toUpperCase());\n        return instance.argument(parseCallback(instance, argumentExpr, this.EXPECTED_TYPES[instance.KIND]));\n    }\n\n    stringify() { return `SET ${this.KIND.replace(/_/g, ' ')} ${this.argument()}`; }\n}", "import { AbstractCDL } from '../abstracts/AbstractCDL.js';\nimport { AlterTable } from './actions/AlterTable.js';\nimport { CreateTable } from './actions/CreateTable.js';\nimport { DropTable } from './actions/DropTable.js';\nimport { Rename } from './actions/Rename.js';\nimport { Set } from './actions/Set.js';\n\nexport class DatabaseCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [AlterTable, CreateTable, DropTable, Rename, Set];\n    }\n}", "import { AbstractAlterAction } from './abstracts/AbstractAlterAction.js';\nimport { AbstractDDLStatement } from '../AbstractDDLStatement.js';\nimport { GlobalDatabaseRef } from '../expr/refs/GlobalDatabaseRef.js';\nimport { DatabaseCDL } from './database/DatabaseCDL.js';\n\nexport class AlterDatabase extends AbstractDDLStatement(AbstractAlterAction) {\n    static get EXPECTED_TYPES() {\n        return {\n\t\t\tDATABASE: [DatabaseCDL],\n\t\t\tSCHEMA: [DatabaseCDL],\n        };\n    }\n\n    static get REF_TYPES() {\n        return {\n\t\t\tDATABASE: [GlobalDatabaseRef],\n\t\t\tSCHEMA: [GlobalDatabaseRef],\n        };\n    }\n\n    stringify() {\n\t\tconst [ownRename, renames, sets, actions] = this.argument().actions().reduce(([a, b, c, d], action) => {\n\t\t\tif (action.CLAUSE === 'RENAME' && !action.KIND) return [action, b, c, d];\n\t\t\tif (action.CLAUSE === 'RENAME') return [a, b.concat(action), c, d];\n\t\t\tif (action.CLAUSE === 'SET') return [a, b, c.concat(action), d];\n\t\t\treturn [a, b, c, d.concat(action)];\n\t\t}, [null, [], [], []]);\n\t\tconst sql = [];\n        sql.push(...actions, ...renames); // These are independent statements on their own\n\t\tfor (const set of sets) sql.push(`ALTER ${this.KIND} ${this.reference()} ${set}`);\n\t\tif (ownRename) sql.push(`ALTER ${this.KIND} ${this.reference()} ${ownRename}`);\n\t\treturn sql.join(';\\n');\n\t}\n}", "import { AbstractCreateAction } from './abstracts/AbstractCreateAction.js';\nimport { AbstractDDLStatement } from '../AbstractDDLStatement.js';\nimport { DatabaseSchema } from './database/DatabaseSchema.js';\nimport { CreateTable } from './database/actions/CreateTable.js';\n\nexport class CreateDatabase extends AbstractDDLStatement(AbstractCreateAction) {\n\tstatic get EXPECTED_TYPES() {\n\t\treturn {\n\t\t\tDATABASE: [DatabaseSchema],\n\t\t\tSCHEMA: [DatabaseSchema],\n\t\t};\n\t}\n\n\tstringify() {\n\t\tconst sql = [super.stringify()];\n\t\tsql.push(...this.argument().tables().map(tblSchema => {\n\t\t\tconst createTbl = CreateTable.fromJSON(this, { argument: tblSchema });\n\t\t\tif (this.hasFlag('IF_NOT_EXISTS')) createTbl.withFlag('IF_NOT_EXISTS');\n\t\t\treturn createTbl;\n\t\t}));\n\t\treturn sql.join(';\\n');\n\t}\n}", "import { AbstractDropAction } from './abstracts/AbstractDropAction.js';\nimport { AbstractDDLStatement } from '../AbstractDDLStatement.js';\nimport { GlobalDatabaseRef } from '../expr/refs/GlobalDatabaseRef.js';\n\nexport class DropDatabase extends AbstractDDLStatement(AbstractDropAction) {\t\n    static get EXPECTED_KINDS() {\n\t\treturn {\n\t\t\tDATABASE: true,\n\t\t\tSCHEMA: true,\n\t\t};\n\t}\n\n    static get REF_TYPES() {\n        return {\n            DATABASE: [GlobalDatabaseRef],\n            SCHEMA: [GlobalDatabaseRef],\n        };\n    }\n}", "import { AbstractRenameAction } from './abstracts/AbstractRenameAction.js';\nimport { AbstractDDLStatement } from '../AbstractDDLStatement.js';\nimport { GlobalDatabaseRef } from '../expr/refs/GlobalDatabaseRef.js';\n\nexport class RenameDatabase extends AbstractDDLStatement(AbstractRenameAction) {\n    static get REF_TYPES() {\n        return {\n            DATABASE: [GlobalDatabaseRef],\n            SCHEMA: [GlobalDatabaseRef],\n        };\n    }\n}", "import { AbstractCDL } from './abstracts/AbstractCDL.js';\nimport { AlterDatabase } from './AlterDatabase.js';\nimport { CreateDatabase } from './CreateDatabase.js';\nimport { DropDatabase } from './DropDatabase.js';\nimport { RenameDatabase } from './RenameDatabase.js';\n\nexport class RootCDL extends AbstractCDL {\n    static get EXPECTED_TYPES() {\n        return [AlterDatabase, CreateDatabase, DropDatabase, RenameDatabase];\n    }\n}", "import { _unwrap } from '@webqit/util/str/index.js';\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport { AbstractColumnsMixin } from '../abstracts/AbstractColumnsMixin.js';\nimport { AbstractLevel2Constraint } from './abstracts/AbstractLevel2Constraint.js';\nimport { GlobalTableRef } from '../../expr/refs/GlobalTableRef.js';\nimport { RootCDL } from '../RootCDL.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class ForeignKeyConstraint extends AbstractColumnsMixin(AbstractLevel2Constraint) {\n    \n\t#targetTable;\n\t#$targetTable;\n\t#targetColumns = [];\n    #$targetColumns = [];\n\t#matchRule;\n\t#$matchRule;\n\t#updateRule;\n\t#$updateRule;\n\t#deleteRule;\n\t#$deleteRule;\n\n\ttargetTable(table) {\n        if (!arguments.length) return this.#targetTable;\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$targetTable = this.$castInputs([table], GlobalTableRef, this.#$targetTable, 'target_table');\n\t\t} else this.#targetTable = this.$castInputs([table], GlobalTableRef, this.#targetTable, 'target_table');\n\t\treturn this;\n    }\n\n    $targetTable() { return this.#$targetTable || this.targetTable(); }\n\n\ttargetColumns(columns) {\n        if (!arguments.length) return this.#targetColumns;\n        if (!Array.isArray(columns) || !columns.length) throw new Error(`Columns list must be a non-empty array`);\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$targetColumns = columns;\n\t\t} else this.#targetColumns = columns;\n\t\treturn this;\n    }\n\n    $targetColumns() { return this.#$targetColumns.length ? this.#$targetColumns : this.targetColumns(); }\n\n\tmatchRule(rule) {\n        if (!arguments.length) return this.#matchRule;\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$matchRule = rule;\n\t\t} else this.#matchRule = rule;\n\t\treturn this;\n    }\n\n    $matchRule() { return this.#$matchRule || this.matchRule(); }\n\n\tupdateRule(rule) {\n        if (!arguments.length) return this.#updateRule;\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$updateRule = rule;\n\t\t} else this.#updateRule = rule;\n\t\treturn this;\n    }\n\n    $updateRule() { return this.#$updateRule || this.updateRule(); }\n\n\tdeleteRule(rule) {\n        if (!arguments.length) return this.#deleteRule;\n        if (this.$diffTagHydrate()) {\n\t\t\tthis.#$deleteRule = rule;\n\t\t} else this.#deleteRule = rule;\n\t\treturn this;\n    }\n\n    $deleteRule() { return this.#$deleteRule || this.deleteRule(); }\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\treturn super.dirtyCheck(deeply).concat(\n\t\t\tthis.dirtyCheckProperties([\n                'targetTable',\n                'targetColumns',\n                'matchRule',\n                'updateRule',\n                'deleteRule'\n            ])\n\t\t);\n\t}\n\n    generateDiff(nodeB, options) {\n\t\treturn this.diffMergeJsons({\n            ...super.generateDiff(nodeB, options),\n\t\t\ttargetTable: this.$targetTable()?.jsonfy(options),\n\t\t\ttargetColumns: this.$targetColumns().slice(),\n\t\t\tmatchRule: this.$matchRule(),\n\t\t\tupdateRule: this.$updateRule(),\n\t\t\tdeleteRule: this.$deleteRule(),\n\t\t}, {\n\t\t\ttargetTable: nodeB.$targetTable()?.jsonfy(options),\n\t\t\ttargetColumns: nodeB.$targetColumns().slice(),\n\t\t\tmatchRule: nodeB.$matchRule(),\n\t\t\tupdateRule: nodeB.$updateRule(),\n\t\t\tdeleteRule: nodeB.$deleteRule(),\n\t\t}, options);\n    }\n\n    /* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n        if (!Array.isArray(json?.targetColumns)) return;\n        return super.fromJSON(context, json, (instance) => {\n            instance.targetTable(json.targetTable);\n            instance.$diffTagHydrate(json.$targetTable, ($targetTable) => instance.targetTable($targetTable));\n\t\t\tinstance.targetColumns(json.targetColumns);\n            instance.$diffTagHydrate(json.$targetColumns, ($targetColumns) => instance.targetColumns($targetColumns));\n\t\t\tif (json.matchRule) instance.matchRule(json.matchRule);\n            instance.$diffTagHydrate(json.$matchRule, ($matchRule) => instance.matchRule($matchRule));\n\t\t\tif (json.updateRule) instance.updateRule(json.updateRule);\n            instance.$diffTagHydrate(json.$updateRule, ($updateRule) => instance.updateRule($updateRule));\n\t\t\tif (json.deleteRule) instance.deleteRule(json.deleteRule);\n            instance.$diffTagHydrate(json.$deleteRule, ($deleteRule) => instance.deleteRule($deleteRule));\n            callback?.(instance);\n        });\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\tlet json = super.jsonfy(options, this.diffMergeJsons({\n            targetTable: this.#targetTable?.jsonfy(options),\n            targetColumns: this.#targetColumns.slice(),\n            ...(this.#matchRule ? { matchRule: this.#matchRule } : {}),\n            ...(this.#updateRule ? { updateRule: this.#updateRule } : {}),\n            ...(this.#deleteRule ? { deleteRule: this.#deleteRule } : {}),\n\t\t\t...jsonIn\n        }, {\n            targetTable: this.#$targetTable?.jsonfy(options),\n            targetColumns: this.#$targetColumns.slice(),\n            matchRule: this.#$matchRule,\n            updateRule: this.#$updateRule,\n            deleteRule: this.#$deleteRule,\n\t\t}, options));\n        if (!(options.rootCDL instanceof RootCDL)) return json;\n        if (!json) return; // AbstractColumnsMixin's return value can be undefined when options.tableCDL contains a matching dropped column\n        // Handle gloabl changes\n        const temp = { columnMutes: [], dropped: false };\n        const handleDrop = (cd) => {\n            if (cd && !cd.hasFlag('CASCADE')) throw new Error(`Cannot drop ${cd.KIND} ${cd.reference()} because other objects depend on it.`);\n            temp.dropped = true;\n            if (options.diff) {\n                json = { ...json, status: 'obsolete' };\n            }\n        };\n        const updateTargetPrefix = (argument) => {\n            const $argument = argument.jsonfy(options);\n            json = this.diffMergeJsons(json, { targetTable: { ...json.targetTable, prefix: $argument } }, options);\n            if (options.diff !== false) {\n                if (!json.CDLIgnoreList) json.CDLIgnoreList = [];\n                json.CDLIgnoreList.push('targetTable');\n            }\n        };\n        const updateTargetName = (argument) => {\n            const $argument = argument.jsonfy(options);\n            json = this.diffMergeJsons(json, { targetTable: { ...json.targetTable, ...$argument } }, options);\n            if (options.diff !== false) {\n                if (!json.CDLIgnoreList) json.CDLIgnoreList = [];\n                json.CDLIgnoreList.push('targetTable');\n            }\n        };\n        const updateTargetColumns = () => {\n            const targetColumns = this.resolveColumnReferences(json.targetColumns, temp.columnMutes, true);\n            if (targetColumns.length !== json.targetColumns.length) {\n                // A column was dropped\n                handleDrop();\n            } else if (_intersect(targetColumns, json.targetColumns).length !== json.targetColumns.length) {\n                // A column was renamed\n                json = this.diffMergeJsons(json, { targetColumns }, options);\n                if (options.diff !== false) {\n                    if (!json.CDLIgnoreList) json.CDLIgnoreList = [];\n                    json.CDLIgnoreList.push('targetColumns');\n                }\n            }\n        }\n        const matchPrefix = (reference) => reference?.identifiesAs(this.$targetTable().prefix(true));\n        const matchName = (reference) => reference?.identifiesAs(this.$targetTable().name());\n        const scanTableCDL = (tableCDL) => {\n            for (const cd of tableCDL) {\n                if (cd.CLAUSE === 'RENAME') {\n                    if (!cd.KIND) updateTargetName(cd.argument());              // RENAME TBL\n                    else if (cd.KIND === 'COLUMN') temp.columnMutes.push(cd);   // RENAME COL\n                } else if (cd.CLAUSE === 'SET') {\n                    if (cd.KIND === 'SCHEMA') updateTargetPrefix(cd.argument());// RELOCATE TBL\n                } else if (cd.CLAUSE === 'DROP') {\n                    if (cd.KIND === 'COLUMN') temp.columnMutes.push(cd);        // DROP COL\n                }\n            }\n        };\n        const scanDatabaseCDL = (databaseCDL) => {\n            for (const cd of databaseCDL) {\n                if (cd.CLAUSE === 'RENAME') {\n                    if (!cd.KIND) updateTargetPrefix(cd.argument());            // RENAME DB\n                    else if (matchName(cd.reference())) updateTargetName(cd.argument());    // RENAME TBL\n                } else if (!matchName(cd.reference?.())) continue;\n                if (cd.CLAUSE === 'ALTER') scanTableCDL(cd.argument());         // ALTER TBL\n                else if (cd.CLAUSE === 'DROP') handleDrop(cd);                  // DROP TBL\n            }\n        };\n        const scanRootCDL = (rootCDL) => {\n            for (const cd of rootCDL) {\n                if (!matchPrefix(cd.reference?.())) continue;\n                if (cd.CLAUSE === 'RENAME') updateTargetPrefix(cd.argument());  // RENAME DB\n                else if (cd.CLAUSE === 'ALTER') scanDatabaseCDL(cd.argument()); // ALTER DB\n                else if (cd.CLAUSE === 'DROP') handleDrop(cd);                  // DROP DB\n            }\n        };\n        scanRootCDL(options.rootCDL);\n        updateTargetColumns();\n        if (temp.dropped && !options.diff) return;// Physically drop\n        return json;\n\t}\n\n    static parse(context, expr, parseCallback) {\n        let { name, expr: $expr = '' } = this.parseName(context, expr, true);\n\t\tlet instance;\n\t\tif (this.checkIsColumn(context)) {\n\t\t\tif (!($expr = $expr.match(/^REFERENCES\\s+([\\s\\S]+)$/i)?.[1])) return;\n\t\t\tinstance = new this(context);\n\t\t} else {\n\t\t\tif (!/^FOREIGN\\s+KEY/i.test($expr)) return;\n\t\t\tinstance = new this(context);\n\t\t\tconst [ , columnsExpr, ...rest ] = Lexer.split($expr, []);\n\t\t\tinstance.columns(this.parseColumns(context, columnsExpr));\n\t\t\t$expr = rest.join('').trim().match(/^REFERENCES\\s+([\\s\\S]+)$/i)?.[1];\n\t\t}\n        const [ table_maybeQualified, cols, opts = '' ] = Lexer.split($expr, []);\n        const targetTable = parseCallback(instance, table_maybeQualified.trim(), [GlobalTableRef]);\n        const targetColumns = Lexer.split(_unwrap(cols, '(', ')'), [',']).map(col => this.parseIdent(context, col.trim())[0]);\n        const matchReferentialRule = (str, type) => {\n            if (type === 'MATCH') return str.match(/MATCH\\s+(\\w+)/i)?.[1];\n            const referentialActionRe = /(NO\\s+ACTION|RESTRICT|CASCADE|(SET\\s+NULL|SET\\s+DEFAULT)(?:\\s+\\(([^\\)]+)\\))?)/;\n            const [ , keyword1, keyword2, keyword2Columns ] = str.match(new RegExp(`ON\\\\s+${ type }\\\\s+${ referentialActionRe.source }`, 'i')) || [];\n            return keyword2 ? (!keyword2Columns ? keyword2 : { rule: keyword2, targetColumns: keyword2Columns.split(',').map(s => s.trim()) }) : keyword1;\n        };\n        return instance\n\t\t\t.name(name)\n            .targetTable(targetTable)\n            .targetColumns(targetColumns)\n            .matchRule(matchReferentialRule(opts, 'MATCH'))\n            .updateRule(matchReferentialRule(opts, 'UPDATE'))\n            .deleteRule(matchReferentialRule(opts, 'DELETE'));\n    }\n\n    stringify() {\n\t\tlet sql = !this.isColumnLevel\n\t\t\t? `${ this.stringifyName() }FOREIGN KEY${ this.stringifyColumns() } `\n\t\t\t: this.stringifyName();\n\t\tsql += `REFERENCES ${ this.$targetTable() } (${ this.$targetColumns().map(c => this.stringifyIdent(c)).join(', ') })`;\n        const serializeReferentialRule = rule => typeof rule === 'object' && rule ? `${ rule.rule } (${ rule.targetColumns.join(', ') })` : rule;\n        if (this.$matchRule()) { sql += ` MATCH ${ this.$matchRule() }`; }\n        if (this.$updateRule()) { sql += ` ON UPDATE ${ serializeReferentialRule(this.$updateRule()) }`; }\n        if (this.$deleteRule()) { sql += ` ON DELETE ${ serializeReferentialRule(this.$deleteRule()) }`; }\n        return sql;\n    }\n}", "import { _isObject } from '@webqit/util/js/index.js';\nimport { _unwrap, _wrapped } from '@webqit/util/str/index.js';\nimport { _difference } from '@webqit/util/arr/index.js';\nimport { AbstractPrefixableNameableNode } from '../abstracts/AbstractPrefixableNameableNode.js';\nimport { GlobalTableRef } from '../../expr/refs/GlobalTableRef.js';\nimport { AbstractLevel2Constraint } from '../constraints/abstracts/AbstractLevel2Constraint.js';\nimport { PrimaryKeyConstraint } from '../constraints/PrimaryKeyConstraint.js';\nimport { ForeignKeyConstraint } from '../constraints/ForeignKeyConstraint.js';\nimport { UniqueKeyConstraint } from '../constraints/UniqueKeyConstraint.js';\nimport { CheckConstraint } from '../constraints/CheckConstraint.js';\nimport { GlobalDatabaseRef } from '../..//expr/refs/GlobalDatabaseRef.js';\nimport { ColumnSchema } from '../column/ColumnSchema.js';\nimport { IndexSchema } from '../index/IndexSchema.js';\nimport { TableCDL } from './TableCDL.js';\nimport { Lexer } from '../../Lexer.js';\n\nexport class TableSchema extends AbstractPrefixableNameableNode {\n\tstatic get CONSTRAINT_TYPES() { return [PrimaryKeyConstraint, ForeignKeyConstraint, UniqueKeyConstraint, CheckConstraint]; }\n\tstatic get PREFIX_TYPE() { return [GlobalDatabaseRef]; }\n\n\t#columns = [];\n\t#constraints = [];\n\t#indexes = [];\n\t#nodes = new Set;\n\n\t[Symbol.iterator]() { return this.#columns[Symbol.iterator](); }\n\n\tget length() { return this.#columns.length; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (['TABLE_SCHEMA'].includes(requestName)) return this;\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\t$bubble(eventType, eventSource) {\n\t\tif (['CONNECTED', 'DISCONNECTED'].includes(eventType) && [ColumnSchema, AbstractLevel2Constraint, IndexSchema].some(x => eventSource instanceof x && (\n\t\t\teventSource.contextNode === this || (eventSource.contextNode instanceof ColumnSchema && eventSource.contextNode.contextNode === this)\n\t\t))) {\n\t\t\tif (eventType === 'DISCONNECTED') this.#nodes.delete(eventSource);\n\t\t\telse this.#nodes.add(eventSource);\n\t\t}\n\t\treturn super.$bubble(eventType, eventSource);\n\t}\n\n\t/* -- SUBTREE I/O */\n\n\tcolumn(arg1, ...args) {\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst existing = this.#columns.find((col) => col.identifiesAs(arg1));\n\t\t\tif (!args.length) return existing;\n\t\t\tif (args[0] === false) {\n\t\t\t\tthis.#columns = this.#columns.filter((c) => c !== existing);\n\t\t\t\texisting?.bubble('DISCONNECTED');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\targ1 = { name: arg1, ...(typeof args[0] === 'object' ? args[0] : { type: args[0] }) };\n\t\t}\n\t\tthis.#columns = this.$castInputs([arg1], ColumnSchema, this.#columns, 'columns', null, (instance) => {\n\t\t\treturn this.#columns.find((col) => col.identifiesAs(instance.name()));\n\t\t});\n\t\treturn this;\n\t}\n\n\tconstraint(arg1, ...args) {\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst existing = [...this.#nodes]/*deeply*/.find((cons) => cons.identifiesAs(arg1));\n\t\t\tif (!args.length) return existing;\n\t\t\tif (args[0] === false) {\n\t\t\t\tif (this.#constraints.includes(existing)) {\n\t\t\t\t\tthis.#constraints = this.#constraints.filter((c) => c !== existing);\n\t\t\t\t\texisting?.bubble('DISCONNECTED');\n\t\t\t\t} else if (existing) {\n\t\t\t\t\tthis.column(existing.columns()[0]).constraint(existing.TYPE, false);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\targ1 = { name: arg1, ...(typeof args[0] === 'object' ? args[0] : { type: args[0], columns: args[1] }) };\n\t\t}\n\t\tthis.#constraints = this.$castInputs([arg1], this.constructor.CONSTRAINT_TYPES, this.#constraints, 'constraints', null, (instance) => {\n\t\t\tconst existing = this.#constraints.find((cons) => cons.identifiesAs(instance.name()));\n\t\t\tif (!existing && instance.columns().length === 1) this.column(instance.columns()[0])?.constraint(instance.TYPE, false);\n\t\t\treturn existing;\n\t\t});\n\t\treturn this;\n\t}\n\n\tindex(arg1, ...args) {\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst existing = this.#indexes.find((idx) => idx.identifiesAs(arg1));\n\t\t\tif (!args.length) return existing;\n\t\t\tif (args[0] === false) {\n\t\t\t\tthis.#indexes = this.#indexes.filter((i) => i !== existing);\n\t\t\t\texisting?.bubble('DISCONNECTED');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\targ1 = { name: arg1, ...(typeof args[0] === 'object' ? args[0] : { type: args[0], columns: args[1] }) };\n\t\t}\n\t\tthis.#indexes = this.$castInputs([arg1], IndexSchema, this.#indexes, 'indexes', null, (instance) => {\n\t\t\treturn this.#indexes.find((idx) => idx.identifiesAs(instance.name()));\n\t\t});\n\t\treturn this;\n\t}\n\n\t/* -- TRAVERSALS */\n\n\tcolumns(asInstances = true) {\n\t\tconst columns = this.#columns;\n\t\treturn !asInstances ? columns.map(c => c.name()) : columns;\n\t}\n\n\tconstraints(asInstances = true, deeply = true) {\n\t\tconst constraints = !deeply ? this.#constraints : [...this.#nodes].filter(node => node instanceof AbstractLevel2Constraint);\n\t\treturn !asInstances ? constraints.map(c => c.columns()) : constraints;\n\t}\n\n\tindexes(asInstances = true) {\n\t\tconst indexes = this.#indexes;\n\t\treturn !asInstances ? indexes.map(i => i.columns()) : indexes;\n\t}\n\n\tprimaryKey(asInstances = true, deeply = true) {\n\t\tconst pk = (!deeply ? this.#constraints : [...this.#nodes]).find(node => node.TYPE === 'PRIMARY_KEY');\n\t\treturn !asInstances ? pk.columns() : pk;\n\t}\n\n\tforeignKeys(asInstances = true, deeply = true) {\n\t\tconst fks = (!deeply ? this.#constraints : [...this.#nodes]).filter(node => node.TYPE === 'FOREIGN_KEY');\n\t\treturn !asInstances ? fks.map(fk => fk.columns()) : fks;\n\t}\n\n\tuniqueKeys(asInstances = true, deeply = true) {\n\t\tconst uks = (!deeply ? this.#constraints : [...this.#nodes]).filter(node => node.TYPE === 'UNIQUE_KEY');\n\t\treturn !asInstances ? uks.map(uk => uk.columns()) : uks;\n\t}\n\n\tchecks(asInstances = true, deeply = true) {\n\t\tconst cks = (!deeply ? this.#constraints : [...this.#nodes]).filter(node => node.TYPE === 'CHECK');\n\t\treturn !asInstances ? cks.map(ck => ck.expr()) : cks;\n\t}\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\tconst dirtyCheck = super.dirtyCheck(deeply);\n\t\tif (!deeply) return dirtyCheck;\n\t\treturn dirtyCheck.concat(['columns', 'constraints', 'indexes'].filter((key) => {\n\t\t\treturn this[key]().some(node => node.dirtyCheck(deeply).length);\n\t\t}));\n\t}\n\n\trenderCDL(tableCDL, options = {}) {\n\t\tconst { rootCDL, ...$options } = options;\n\t\tconst $$transforms = new Map;\n\t\tconst $$additions = new Map;\n\t\t// ------------------------------------\n\t\t// -- NODE FINDER\n\t\tconst findNode = (kind, name, assertExists = true, autoRehydrate = true) => {\n\t\t\tconst $$kind = [].concat(kind);\n\t\t\tconst Type = $$kind.includes('COLUMN') ? ColumnSchema : ($$kind.includes('INDEX') ? IndexSchema : AbstractLevel2Constraint);\n\t\t\tconst node = [...this.#nodes].find(node => node instanceof Type && (\n\t\t\t\tnode.identifiesAs(name) || (!name && this.params.dialect === 'mysql' && $$kind.includes('PRIMARY_KEY'))\n\t\t\t));\n\t\t\tif ((!node || ($$transforms.has(node) && !$$transforms.get(node)/*dropped*/)) && assertExists) {\n\t\t\t\tthrow new Error(`${$$kind[0]}${name ? ` \"${name}\"` : ''} does not exist.`);\n\t\t\t}\n\t\t\tif (autoRehydrate && $$transforms.has(node)) return [node, node.constructor.fromJSON(node.contextNode.clone(), $$transforms.get(node))];\n\t\t\treturn [node];\n\t\t};\n\t\t// -- ADD|MODIFY|CHANGE ACTION\n\t\tconst handlePutCD = (cd) => {\n\t\t\tlet placement = `${cd.KIND}:LAST`;\n\t\t\tif (cd.after()) {\n\t\t\t\t[placement] = findNode(cd.KIND, cd.after().name(), true, false);\n\t\t\t} else if (cd.first()) placement = `${cd.KIND}:FIRST`;\n\t\t\tif (!$$additions.has(placement)) $$additions.set(placement, []);\n\t\t\t// Modify and Change...\n\t\t\tif (['MODIFY', 'CHANGE'].includes(cd.CLAUSE)) {\n\t\t\t\tconst [refNode, $refNode] = findNode(cd.KIND, cd.CLAUSE === 'CHANGE' ? cd.reference().name() : cd.argument().name());\n\t\t\t\tconst $argument = ($refNode || refNode).generateDiff(cd.argument(), $options);\n\t\t\t\t$$additions.get(placement).unshift($argument);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Addition...\n\t\t\tconst [existing] = findNode(cd.KIND, cd.argument().name(), false, false);\n\t\t\tif (existing) {\n\t\t\t\tif ($$transforms.has(existing) && (!$$transforms.get(existing) || $$transforms.get(existing).status === 'obsolete')) {\n\t\t\t\t\t// This was a drop/re-add event. typically applicable to constraints\n\t\t\t\t\t$$transforms.set(existing, cd.argument().jsonfy($options));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (cd.hasFlag('IF_NOT_EXISTS')) return;\n\t\t\t\tthrow new Error(`${cd.KIND} ${cd.argument()?.name() || cd.$KIND} already exists`);\n\t\t\t}\n\t\t\tlet $argument = cd.argument().jsonfy($options);\n\t\t\tif ($options.diff !== false) $argument = { ...$argument, status: 'new' };\n\t\t\t// Move into a column?\n\t\t\tif (cd.KIND === 'CONSTRAINT' && cd.argument().$columns().length === 1) {\n\t\t\t\tconst [refNode, $refNode] = findNode('COLUMN', cd.argument().$columns()[0], false) || [];\n\t\t\t\tif (refNode) {\n\t\t\t\t\tconst $$refNode = $refNode || ColumnSchema.fromJSON(this.clone(), refNode.jsonfy($options));\n\t\t\t\t\tconst $$argument = $$refNode.constraint($argument).jsonfy($options);\n\t\t\t\t\t$$transforms.set(refNode, $$argument);\n\t\t\t\t} else $$additions.get(placement).unshift($argument);\n\t\t\t} else $$additions.get(placement).unshift($argument);\n\t\t};\n\t\t// -- DROP ACTION\n\t\tconst handleDropCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findNode([cd.KIND, cd.$KIND], cd.reference().name(), !cd.hasFlag('IF_EXISTS'), $options.diff !== false);\n\t\t\tif (refNode) $$transforms.set(refNode, $options.diff === false ? undefined : { ...($refNode || refNode).jsonfy($options), status: 'obsolete' });\n\t\t};\n\t\t// -- SET ACTION\n\t\tconst handleSetCD = (cd) => { };\n\t\t// -- RENAME\n\t\tconst handleRenameCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findNode([cd.KIND, cd.$KIND], cd.reference().name());\n\t\t\tconst $argument = this.diffMergeJsons(($refNode || refNode).jsonfy($options), cd.argument().jsonfy($options), $options);\n\t\t\t$$transforms.set(refNode, $argument);\n\t\t};\n\t\t// -- ALTER ACTION\n\t\tconst handleAlterCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findNode(cd.KIND, cd.reference().name());\n\t\t\tconst $json = ($refNode || refNode).renderCDL(cd.argument(), $options);\n\t\t\t$$transforms.set(refNode, $json);\n\t\t};\n\t\t// -- NODE RENDERING\n\t\tconst renderNode = (node) => {\n\t\t\tconst rejsonfyColumn = (col) => {\n\t\t\t\t// Ignore physically dropped\n\t\t\t\tif (!$$transforms.get(col)) return;\n\t\t\t\tconst $col = col.constructor.fromJSON(col.contextNode.clone(), $$transforms.get(col));\n\t\t\t\tfor (const cons of col.constraints()) {\n\t\t\t\t\tif (!$$transforms.has(cons)) continue;\n\t\t\t\t\tif ($$transforms.get(cons)) $col.constraint($$transforms.get(cons));\n\t\t\t\t\telse $col.constraint(cons.TYPE, false); // Physically dropped\n\t\t\t\t}\n\t\t\t\treturn $col.jsonfy({ tableCDL, ...options });\n\t\t\t};\n\t\t\tconst rejsonfyNode = (cons) => {\n\t\t\t\t// Ignore physically dropped or no need to rehydrate if not options.rootCDL\n\t\t\t\tif (!options.rootCDL || !$$transforms.get(cons)) return $$transforms.get(cons);\n\t\t\t\treturn cons.constructor.fromJSON(cons.contextNode.clone(), $$transforms.get(cons)).jsonfy({ tableCDL, ...options })\n\t\t\t};\n\t\t\tlet $json;\n\t\t\tif ($$transforms.has(node)) {\n\t\t\t\t$json = node instanceof ColumnSchema ? rejsonfyColumn(node) : rejsonfyNode(node);\n\t\t\t} else if (node instanceof ColumnSchema) {\n\t\t\t\t$json = node.jsonfy($options, {}, (cons) => {\n\t\t\t\t\treturn $$transforms.has(cons) ? rejsonfyNode(cons) : cons.jsonfy({ tableCDL, ...options })\n\t\t\t\t});\n\t\t\t} else $json = node.jsonfy({ tableCDL, ...options });\n\t\t\treturn $json;\n\t\t};\n\t\t// -- SUBTREE RENDERING\n\t\tconst renderSubtree = (nodes, kind) => {\n\t\t\tconst $jsons = nodes.reduce((jsons, node) => {\n\t\t\t\treturn jsons.concat(renderNode(node) || [], $$additions.get(node) || []);\n\t\t\t}, $$additions.get(`${kind}:FIRST`) || []);\n\t\t\treturn $jsons.concat(($$additions.get(`${kind}:LAST`) || []).reverse());\n\t\t};\n\t\t// ------------------------------------\n\t\t// -- MAIN CDL RUNNER\n\t\tlet outputJson = super.jsonfy($options);\n\t\tconst ensurePrefix = (outputJson) => {\n\t\t\tif (!outputJson.prefix) outputJson = { ...outputJson, prefix: this.prefix(true).jsonfy($options) };\n\t\t\treturn outputJson;\n\t\t};\n\t\tfor (const cd of tableCDL) {\n\t\t\tif (['ADD', 'MODIFY', 'CHANGE'].includes(cd.CLAUSE)) {\n\t\t\t\thandlePutCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'DROP') {\n\t\t\t\thandleDropCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'SET') {\n\t\t\t\tif (cd.KIND === 'SCHEMA') {\n\t\t\t\t\tconst $argument = cd.argument().jsonfy($options);\n\t\t\t\t\toutputJson = this.diffMergeJsons(ensurePrefix(outputJson), { prefix: $argument }, $options);\n\t\t\t\t} else handleSetCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'RENAME') {\n\t\t\t\tif (!cd.KIND) {\n\t\t\t\t\tconst $argument = cd.argument().jsonfy($options);\n\t\t\t\t\toutputJson = this.diffMergeJsons(ensurePrefix(outputJson), $argument, $options);\n\t\t\t\t} else handleRenameCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'ALTER') {\n\t\t\t\thandleAlterCD(cd);\n\t\t\t} else throw new Error(`Unsupported operation: ${cd.CLAUSE} ${cd.KIND}`);\n\t\t}\n\t\tconst columnTransforms = renderSubtree(this.#columns, 'COLUMN');\n\t\tconst constraintTransforms = renderSubtree(this.#constraints, 'CONSTRAINT');\n\t\tconst indexTransforms = renderSubtree(this.#indexes, 'INDEX');\n\t\treturn { ...outputJson, columns: columnTransforms, constraints: constraintTransforms, indexes: indexTransforms };\n\t}\n\n\tgenerateCDL(options = {}) {\n\t\tconst tableCDL = TableCDL.fromJSON(this, { actions: [] });\n\t\tconst tblDirtyCheck = this.dirtyCheck();\n\t\tif (tblDirtyCheck.includes('name')) {\n\t\t\ttableCDL.add('RENAME', null, (cd) => cd.argument(this.$name()));\n\t\t}\n\t\tif (tblDirtyCheck.includes('prefix')) {\n\t\t\ttableCDL.add('SET', 'SCHEMA', (cd) => cd.argument(this.$prefix().jsonfy()));\n\t\t}\n\t\tfor (const node of this.#nodes) {\n\t\t\tconst kind = node instanceof AbstractLevel2Constraint\n\t\t\t\t? 'CONSTRAINT' : (node instanceof IndexSchema ? 'INDEX' : 'COLUMN');\n\t\t\tconst $kind = kind !== 'COLUMN' && node.TYPE;\n\t\t\tlet nodeDirtyCheck = _difference(node.dirtyCheck(), node.CDLIgnoreList());\n\t\t\tif (node.status() === 'new') {\n\t\t\t\ttableCDL.add('ADD', kind, $kind, (cd) => {\n\t\t\t\t\tcd.argument(node.jsonfy({ withColumns: kind !== 'COLUMN', diff: false }));\n\t\t\t\t\tif (kind === 'COLUMN' && options.existsChecks) cd.withFlag('IF_NOT_EXISTS');\n\t\t\t\t});\n\t\t\t} else if (node.status() === 'obsolete') {\n\t\t\t\ttableCDL.add('DROP', kind, $kind, (cd) => {\n\t\t\t\t\tcd.reference(node.name());\n\t\t\t\t\tif (options.cascadeRule) cd.withFlag(options.cascadeRule);\n\t\t\t\t\tif (options.existsChecks) cd.withFlag('IF_EXISTS');\n\t\t\t\t});\n\t\t\t} else/* existing */ {\n\t\t\t\tconst nodeCDL = node.generateCDL();\n\t\t\t\tif (kind === 'COLUMN' && this.params.dialect === 'mysql' && !(nodeCDL.length === 1 && nodeCDL.actions()[0].KIND === 'DEFAULT')) {\n\t\t\t\t\ttableCDL.add('MODIFY', 'COLUMN', (cd) => cd.argument(node.jsonfy(options, {}, (cons) => cons.constraintLevel === 1 ? cons : false)));\n\t\t\t\t} else if (nodeCDL.length) {\n\t\t\t\t\ttableCDL.add('ALTER', kind, $kind, (cd) => { cd.reference(node.name()); cd.argument(nodeCDL); });\n\t\t\t\t} else if (kind !== 'COLUMN' && (nodeDirtyCheck.length > 1 || nodeDirtyCheck.length === 1 && nodeDirtyCheck[0] !== 'name')) {\n\t\t\t\t\ttableCDL.add('DROP', kind, $kind, (cd) => cd.reference(node.name()));\n\t\t\t\t\ttableCDL.add('ADD', kind, $kind, (cd) => cd.argument(node.jsonfy({ withColumns: true })));\n\t\t\t\t\tnodeDirtyCheck = nodeDirtyCheck.filter(s => s !== 'name');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This should come last as nodeDirtyCheck might be need to be mutated\n\t\t\tif (nodeDirtyCheck.includes('name')) {\n\t\t\t\ttableCDL.add('RENAME', kind, $kind, (cd) => { cd.reference(node.name()); cd.argument(node.$name()); });\n\t\t\t}\n\t\t}\n\t\treturn tableCDL;\n\t}\n\n\tgenerateDiff(nodeB, options) {\n\t\tconst outputJson = super.generateDiff(nodeB, options);\n\t\t// Normalise constraints and process subtree...\n\t\tconst modifiedColumns = new Map;\n\t\tconst [constraintsA, constraintsB] = [new Map, new Map];\n\t\tfor (const [instance, constraints, instance2] of [[this, constraintsA, nodeB], [nodeB, constraintsB, this]]) {\n\t\t\tfor (const cons of instance.constraints(true, false)) {\n\t\t\t\tlet refColumn;\n\t\t\t\tif (!instance2.constraint(cons.name()) && cons.columns().length === 1 && (refColumn = instance.column(cons.columns()[0]))) {\n\t\t\t\t\tconst $refColumn = modifiedColumns.get(refColumn) || refColumn.clone();\n\t\t\t\t\t$refColumn.constraint(cons.jsonfy(options));\n\t\t\t\t\tmodifiedColumns.set(refColumn, $refColumn);\n\t\t\t\t} else constraints.set(cons.name().toLowerCase(), cons);\n\t\t\t}\n\t\t}\n\t\tconst columnsDiff = this.diffMergeTrees(this.#columns, nodeB.columns(), (a, b) => (modifiedColumns.get(a) || a).generateDiff((modifiedColumns.get(b) || b), options), options);\n\t\tconst constraintsDiff = this.diffMergeTrees(constraintsA, constraintsB, (a, b) => a.generateDiff(b, options), options);\n\t\tconst indexesDiff = this.diffMergeTrees(this.#indexes, nodeB.indexes(), (a, b) => a.generateDiff(b, options), options);\n\t\treturn { ...outputJson, columns: columnsDiff, constraints: constraintsDiff, indexes: indexesDiff };\n\t}\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!Array.isArray(json?.columns) || ['constraints', 'indexes'].some(key => key in json && !Array.isArray(json[key]))) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tfor (const col of json.columns) instance.column(col);\n\t\t\tfor (const cons of (json.constraints || [])) instance.constraint(cons);\n\t\t\tfor (const idx of (json.indexes || [])) instance.index(idx);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tcolumns: this.#columns.map(col => col.jsonfy(options)),\n\t\t\tconstraints: this.#constraints.map(cons => cons.jsonfy(options)).filter(c => c),\n\t\t\tindexes: this.#indexes.map(idx => idx.jsonfy(options)).filter(c => c),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [namePart, bodyPart, ...rest] = Lexer.split(expr, [], { limit: 2 });\n\t\tif (!namePart || !_wrapped(bodyPart || '', '(', ')')) return;\n\t\tconst instance = new this(context);\n\t\tconst [name, prefix] = this.parseIdent(instance, namePart.trim()).reverse();\n\t\tinstance.name(name);\n\t\tif (prefix) instance.prefix(prefix);\n\t\tconst defs = Lexer.split(_unwrap(bodyPart, '(', ')'), [',']).map(def => {\n\t\t\treturn parseCallback(instance, def.trim(), [...this.CONSTRAINT_TYPES, IndexSchema, ColumnSchema]); // Note that ColumnSchema must come last\n\t\t});\n\t\tfor (const def of defs) {\n\t\t\tif (def instanceof ColumnSchema) instance.column(def);\n\t\t\telse if (def instanceof IndexSchema) instance.index(def);\n\t\t\telse instance.constraint(def);\n\t\t}\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst defs = [this.#columns.map(col => col.stringify()).join(',\\n\\t')];\n\t\tconst constraints = this.#constraints.slice(0);\n\t\tconst indexes = this.#indexes.slice(0);\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tconstraints.push(...this.#columns.reduce((constraints, col) => {\n\t\t\t\tconst constraint = col.foreignKey();\n\t\t\t\tif (constraint) return constraints.concat(ForeignKeyConstraint.fromJSON(this.clone(), { ...constraint.jsonfy(), columns: [col.name()] }));\n\t\t\t\treturn constraints;\n\t\t\t}, []));\n\t\t}\n\t\tif (constraints.length) { defs.push(constraints.map(cnst => cnst.stringify()).join(',\\n\\t')); }\n\t\tif (indexes.length) { defs.push(indexes.map(ndx => ndx.stringify()).join(',\\n\\t')); }\n\t\treturn `${GlobalTableRef.fromJSON(this, [this.$prefix(true), this.$name()])} (\\n\\t${defs.join(',\\n\\t')}\\n)`;\n\t}\n}", "import { AbstractNameableNode } from '../abstracts/AbstractNameableNode.js';\nimport { TableSchema } from '../table/TableSchema.js';\nimport { DatabaseCDL } from './DatabaseCDL.js';\n\nexport class DatabaseSchema extends AbstractNameableNode {\n\n\t#version;\n\t#tables = [];\n\n\t[Symbol.iterator]() { return this.#tables[Symbol.iterator](); }\n\n\tget length() { return this.#tables.length; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (['DATABASE_SCHEMA'].includes(requestName)) return this;\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\t/* -- SUBTREE I/O */\n\n\tversion() { return this.#version; }\n\n\ttable(arg1, ...args) {\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst existing = this.#tables.find((tbl) => tbl.identifiesAs(arg1));\n\t\t\tif (!args.length) return existing;\n\t\t\tif (args[0] === false) {\n\t\t\t\tthis.#tables = this.#tables.filter((t) => t !== existing);\n\t\t\t\texisting?.bubble('DISCONNECTED');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\targ1 = { name: arg1, ...(typeof args[0] === 'object' ? args[0] : { columns: args[0] }) };\n\t\t}\n\t\tthis.#tables = this.$castInputs([arg1], TableSchema, this.#tables, 'tables', null, (existing) => {\n\t\t\treturn this.#tables.find((tbl) => tbl.identifiesAs(existing.name()));\n\t\t});\n\t\treturn this;\n\t}\n\n\t/* -- TRAVERSALS */\n\n\ttables(asInstances = true) {\n\t\tif (asInstances) return this.#tables;\n\t\treturn this.#tables.reduce((tbls, tbl) => tbls.concat(tbl.name()), []);\n\t}\n\n\tcolumns(asInstances = true) {\n\t\treturn this.#tables.reduce((cols, tbl) => {\n\t\t\treturn cols.concat(!asInstances ? tbl.columns(false).map(name => [tbl.name(), name]) : tbl.columns());\n\t\t}, []);\n\t}\n\n\tprimaryKeys(asInstances = true, deeply = true) {\n\t\treturn this.#tables.reduce((cols, tbl) => {\n\t\t\treturn cols.concat(!asInstances ? [[tbl.name(), tbl.primaryKeys(false, deeply)/*cols*/]] : tbl.primaryKey(true, deeply));\n\t\t}, []);\n\t}\n\n\tforeignKeys(asInstances = true, deeply = true) {\n\t\treturn this.#tables.reduce((cols, tbl) => {\n\t\t\treturn cols.concat(!asInstances ? tbl.foreignKeys(false, deeply).map(cols => [tbl.name(), cols]) : tbl.foreignKeys(true, deeply));\n\t\t}, []);\n\t}\n\n\tuniqueKeys(asInstances = true, deeply = true) {\n\t\treturn this.#tables.reduce((cols, tbl) => {\n\t\t\treturn cols.concat(!asInstances ? tbl.uniqueKeys(false, deeply).map(cols => [tbl.name(), cols]) : tbl.uniqueKeys(true, deeply));\n\t\t}, []);\n\t}\n\n\tchecks(asInstances = true, deeply = true) {\n\t\treturn this.#tables.reduce((cols, tbl) => {\n\t\t\treturn cols.concat(!asInstances ? tbl.checks(false, deeply).map(expr => [tbl.name(), expr]) : tbl.checks(true, deeply));\n\t\t}, []);\n\t}\n\n\t/* -- TRANSFORMS */\n\n\tdirtyCheck(deeply = false) {\n\t\tconst dirtyCheck = super.dirtyCheck(deeply);\n\t\tif (!deeply) return dirtyCheck;\n\t\treturn dirtyCheck.concat(['tables'].filter((key) => {\n\t\t\treturn this[key]().some(node => node.dirtyCheck(deeply).length);\n\t\t}));\n\t}\n\n\trenderCDL(databaseCDL, options) {\n\t\tconst { rootCDL, ...$options } = options;\n\t\tconst $$hasSeenRootCDL = new Set;\n\t\tconst $$transforms = new Map;\n\t\tconst $$additions = [];\n\t\t// ------------------------------------\n\t\t// -- NODE FINDER\n\t\tconst findTable = (name, assertExists = true, autoRehydrate = true) => {\n\t\t\tconst node = this.table(name);\n\t\t\tif ((!node || ($$transforms.has(node) && !$$transforms.get(node)/*dropped*/)) && assertExists) {\n\t\t\t\tthrow new Error(`Table \"${this.name()}\".\"${name}\" does not exist.`);\n\t\t\t}\n\t\t\tif (autoRehydrate && $$transforms.has(node)) return [node, node.constructor.fromJSON(node.contextNode.clone(), $$transforms.get(node))];\n\t\t\treturn [node];\n\t\t};\n\t\tconst getOptionsFor = (node) => {\n\t\t\tconst $$options = { ...$options, rootCDL: !$$hasSeenRootCDL.has(node) && rootCDL };\n\t\t\tif (!$$hasSeenRootCDL.has(node)) $$hasSeenRootCDL.add(node);\n\t\t\treturn $$options;\n\t\t};\n\t\t// -- ADD|MODIFY|CHANGE ACTION\n\t\tconst handleCreateCD = (cd) => {\n\t\t\tif (findTable(cd.argument().name(), false, false)[0]) {\n\t\t\t\tif (cd.hasFlag('IF_NOT_EXISTS')) return;\n\t\t\t\tthrow new Error(`Table \"${cd.argument()?.name()}\" already exists`);\n\t\t\t}\n\t\t\tlet $argument = cd.argument().jsonfy($options);\n\t\t\tif ($options.diff) $argument = { ...$argument, status: 'new' };\n\t\t\t$$additions.push($argument);\n\t\t};\n\t\t// -- DROP ACTION\n\t\tconst handleDropCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findTable(cd.reference().name(), !cd.hasFlag('IF_EXISTS'), !!$options.diff);\n\t\t\tif (refNode) $$transforms.set(refNode, !$options.diff ? undefined : { ...($refNode || refNode).jsonfy($options), status: 'obsolete' });\n\t\t};\n\t\t// -- SET ACTION\n\t\tconst handleSetCD = (cd) => { };\n\t\t// -- RENAME\n\t\tconst handleRenameCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findTable(cd.reference().name());\n\t\t\tconst $argument = this.diffMergeJsons(($refNode || refNode).jsonfy(getOptionsFor(refNode)), cd.argument().jsonfy($options), $options);\n\t\t\t$$transforms.set(refNode, $argument);\n\t\t};\n\t\t// -- ALTER ACTION\n\t\tconst handleAlterCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findTable(cd.reference().name());\n\t\t\tconst $json = ($refNode || refNode).renderCDL(cd.argument(), getOptionsFor(refNode));\n\t\t\t$$transforms.set(refNode, $json);\n\t\t};\n\t\t// -- NODE RENDERING\n\t\tconst renderNode = (node) => {\n\t\t\tlet $json;\n\t\t\tconst $$options = getOptionsFor(node);\n\t\t\tif ($$transforms.has(node)) {\n\t\t\t\t// Ignore physically dropped\n\t\t\t\tif (!$$transforms.get(node)) return;\n\t\t\t\tif ($$options.rootCDL) {\n\t\t\t\t\t$json = node.constructor.fromJSON(this.clone(), $$transforms.get(node)).jsonfy($$options);\n\t\t\t\t} else $json = $$transforms.get(node);\n\t\t\t} else $json = node.jsonfy($$options);\n\t\t\treturn $json;\n\t\t};\n\t\t// -- SUBTREE RENDERING\n\t\tconst renderSubtree = (nodes) => {\n\t\t\treturn nodes.reduce((jsons, node) => {\n\t\t\t\treturn jsons.concat(renderNode(node) || []);\n\t\t\t}, []).concat($$additions);\n\t\t};\n\t\t// ------------------------------------\n\t\t// -- MAIN CDL RUNNER\n\t\tlet outputJson = super.jsonfy($options);\n\t\tfor (const cd of databaseCDL) {\n\t\t\tif (cd.CLAUSE === 'CREATE') {\n\t\t\t\thandleCreateCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'DROP') {\n\t\t\t\thandleDropCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'SET') {\n\t\t\t\thandleSetCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'RENAME') {\n\t\t\t\tif (!cd.KIND) {\n\t\t\t\t\tconst $argument = cd.argument().jsonfy($options);\n\t\t\t\t\toutputJson = this.diffMergeJsons(outputJson, $argument, $options);\n\t\t\t\t} else handleRenameCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'ALTER') {\n\t\t\t\thandleAlterCD(cd);\n\t\t\t} else throw new Error(`Unsupported operation: ${cd.CLAUSE} ${cd.KIND}`);\n\t\t}\n\t\treturn { ...outputJson, tables: renderSubtree(this.#tables) };\n\t}\n\n\tgenerateCDL(options = {}, kind = 'TABLE'/*or: VIEW*/) {\n\t\tconst databaseCDL = DatabaseCDL.fromJSON(this, { actions: [] });\n\t\tconst tblDirtyCheck = this.dirtyCheck();\n\t\tif (tblDirtyCheck.includes('name')) {\n\t\t\tdatabaseCDL.add('RENAME', null, (cd) => cd.argument(this.$name()));\n\t\t}\n\t\tfor (const tbl of this.#tables) {\n\t\t\tif (tbl.status() === 'new') {\n\t\t\t\tdatabaseCDL.add('CREATE', kind, (cd) => {\n\t\t\t\t\tcd.argument({ prefix: this.name(), ...tbl.jsonfy({ ...options, diff: false }) });\n\t\t\t\t\tif (options.existsChecks) cd.withFlag('IF_NOT_EXISTS');\n\t\t\t\t});\n\t\t\t} else if (tbl.status() === 'obsolete') {\n\t\t\t\tdatabaseCDL.add('DROP', kind, (cd) => {\n\t\t\t\t\tcd.reference([this.name(), tbl.name()]);\n\t\t\t\t\tif (options.cascadeRule) cd.withFlag(options.cascadeRule);\n\t\t\t\t\tif (options.existsChecks) cd.withFlag('IF_EXISTS');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst tblCDL = tbl.generateCDL(options);\n\t\t\t\tif (tblCDL.length) databaseCDL.add('ALTER', kind, (cd) => {\n\t\t\t\t\tcd.reference([this.name(), tbl.name()]);\n\t\t\t\t\tcd.argument(tblCDL);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn databaseCDL;\n\t}\n\n\tgenerateDiff(nodeB, options) {\n\t\tconst outputJson = super.generateDiff(nodeB, options);\n\t\tconst tablesDiff = this.diffMergeTrees(this.#tables, nodeB.tables(), (a, b) => a.generateDiff(b, options), options);\n\t\treturn { ...outputJson, tables: tablesDiff };\n\t}\n\n\t/* -- UTILS */\n\n\tfindPrefix(name) { return this.tables().find(tbl => tbl.column(name))?.name(); }\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (('tables' in (json || {}) && !Array.isArray(json.tables))) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tfor (const tbl of json.tables || []) instance.table(tbl);\n\t\t\tif (typeof json.version === 'number') instance.#version = json.version;\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...(typeof this.#version === 'number' ? { version: this.#version } : {}),\n\t\t\ttables: this.#tables.map(table => table.jsonfy(options)),\n\t\t\t...jsonIn,\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [name] = this.parseIdent(context, expr);\n\t\tif (!name) return;\n\t\treturn (new this(context)).name(name);\n\t}\n\n\tstringify() { return this.stringifyIdent(this.$name()); }\n}", "import { _isObject } from '@webqit/util/js/index.js';\nimport { AbstractNode } from '../../AbstractNode.js';\n\nexport class AbstractOperator2Expr extends AbstractNode {\n    static get OPERATORS() { return []; }\n    static get LHS_TYPES() { return []; }\n    static get RHS_TYPES() { return []; }\n\n    #operator;\n    #lhs;\n    #rhs;\n\n\toperator(value) {\n\t\tif (!arguments.length) return this.#operator;\n\t\tif (!testOperator(this.constructor.OPERATORS, value)) throw new Error(`Invalid operator: ${ value }`);\n\t\treturn (this.#operator = value, this);\n\t}\n\n\toperands(lhs, rhs) {\n\t\tif (!arguments.length) return [this.#lhs, this.#rhs];\n\t\tconst operator = this.constructor.OPERATORS[0];\n\t\treturn this.lhs(lhs).rhs(rhs).operator(_isObject(operator) ? operator.operator : operator);\n\t}\n\n\tlhs(value) {\n\t\tif (!arguments.length) return this.#lhs;\n\t\tthis.#lhs = this.$castInputs([value], this.constructor.LHS_TYPES, this.#lhs, 'lhs_expr');\n\t\treturn this;\n\t}\n\n\trhs(value) {\n\t\tif (!arguments.length) return this.#rhs;\n\t\tthis.#rhs = this.$castInputs([value], this.constructor.RHS_TYPES, this.#rhs, 'rhs_expr');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.operator || !testOperator(this.OPERATORS, json.operator) || !json.lhs || ('rhs' in json && !json.rhs)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.operator(json.operator).lhs(json.lhs);\n\t\t\tif (json.rhs) instance.rhs(json.rhs);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\toperator: this.#operator,\n\t\t\tlhs: this.#lhs?.jsonfy(options),\n\t\t\t...(this.#rhs ? { rhs: this.#rhs.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\t\n\tstringify() { return [this.#lhs, this.#operator].concat(this.#rhs || []).join(' '); }\n}\n\nconst testOperator = (list, op) => list.some(re => !_isObject(re) ? op === re : (op === re.operator || (new RegExp(re.test)).test(` ${ op } `/*intentional space around*/)));\n", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractOperator2Expr } from '../abstracts/AbstractOperator2Expr.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class Assertion extends AbstractOperator2Expr {\r\n\r\n\tstatic get LHS_TYPES() { return Exprs; }\r\n\tstatic get RHS_TYPES() { return Exprs; }\r\n\tstatic get OPERATORS() {\r\n\t\treturn [\r\n\t\t\t{ test: '<(?!~)' }, // Operator: \"<\"; Not: \"<~\"\r\n\t\t\t{ test: '(?<![~\\\\->#])>', backtest: '^(?!.*[~\\\\->#]$)'/*For Lexer*/ }, // Operator: \">\"; Not: \"~>\", \"->\", \"->>\", \"#>\", \"#>>\"\r\n\t\t\t{ test: '(?<!<)(?:\\\\!)?~(?:\\\\*)?(?!>)', backtest: '^(?!.*<$)'/*For Lexer*/ }, // Operator: \"~\", \"~*\", \"!~\", \"!~*\"; Not: \"~>\", \"<~\"\r\n\t\t\t{ test: '(' + '(?:(?:\\\\s+)?(=|<=|>=|!=|<>)(?:\\\\s+)?)' + '|' + \r\n\t\t\t\t'(?:\\\\s+IS\\\\s+(?:NOT\\\\s+)?(TRUE|FALSE|NULL|UNKNOWN|DISTINCT\\\\s+FROM\\\\s+))' + '|' + '(?:\\\\s+(?:' + 'ANY|ALL' + '|' + '(?:NOT\\\\s+)?(?:IN|LIKE|EXISTS|SIMILAR\\\\s+TO|BETWEEN(?:\\\\s+SYMMETRIC)?)' + \r\n\t\t\t')\\\\s+)' + ')' },\r\n\t\t];\r\n\t}\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\t'equals|eq': (context, lhs, rhs) => this.fromJSON(context, { operator: '=', lhs, rhs }),\r\n\t\t\t'notEqual|notEq': (context, lhs, rhs) => this.fromJSON(context, { operator: '<>', lhs, rhs }),\r\n\t\t\t'lesserThan|lt': (context, lhs, rhs) => this.fromJSON(context, { operator: '<', lhs, rhs }),\r\n\t\t\t'lessThanOrEqual|ltOrEq': (context, lhs, rhs) => this.fromJSON(context, { operator: '<=', lhs, rhs }),\r\n\t\t\t'greaterThan|gt': (context, lhs, rhs) => this.fromJSON(context, { operator: '>', lhs, rhs }),\r\n\t\t\t'greaterThanOrEqual|gtOrEq': (context, lhs, rhs) => this.fromJSON(context, { operator: '>=', lhs, rhs }),\r\n\t\t\tany: (context, lhs, ...rhs) => this.fromJSON(context, { operator: 'ANY', lhs, rhs: { row: rhs } }),\r\n\t\t\tall: (context, lhs, ...rhs) => this.fromJSON(context, { operator: 'ALL', lhs, rhs: { row: rhs } }),\r\n\t\t\tin: (context, lhs, ...rhs) => this.fromJSON(context, { operator: 'IN', lhs, rhs: { row: rhs } }),\r\n\t\t\tnotIn: (context, lhs, ...rhs) => this.fromJSON(context, { operator: 'NOT IN', lhs, rhs: { row: rhs } }),\r\n\t\t\texists: (context, lhs, rhs) => this.fromJSON(context, { operator: 'EXISTS', lhs, rhs }),\r\n\t\t\tnotExists: (context, lhs, rhs) => this.fromJSON(context, { operator: 'NOT EXISTS', lhs, rhs }),\r\n\t\t\tlike: (context, lhs, rhs) => this.fromJSON(context, { operator: 'LIKE', lhs, rhs }),\r\n\t\t\tnotLike: (context, lhs, rhs) => this.fromJSON(context, { operator: 'NOT LIKE', lhs, rhs }),\r\n\t\t\tsimilarTo: (context, lhs, rhs) => this.fromJSON(context, { operator: 'SIMILAR TO', lhs, rhs }),\r\n\t\t\tnotSimilarTo: (context, lhs, rhs) => this.fromJSON(context, { operator: 'NOT SIMILAR TO', lhs, rhs }),\r\n\t\t\tmatches: (context, lhs, rhs) => this.fromJSON(context, { operator: '~', lhs, rhs }),\r\n\t\t\tmatchesi: (context, lhs, rhs) => this.fromJSON(context, { operator: '~*', lhs, rhs }),\r\n\t\t\tnotMatches: (context, lhs, rhs) => this.fromJSON(context, { operator: '!~', lhs, rhs }),\r\n\t\t\tnotMatchesi: (context, lhs, rhs) => this.fromJSON(context, { operator: '!~*', lhs, rhs }),\r\n\t\t\tbetween: (context, lhs, rhs) => this.fromJSON(context, { operator: 'BETWEEN', lhs, rhs }),\r\n\t\t\tnotBetween: (context, lhs, rhs) => this.fromJSON(context, { operator: 'NOT BETWEEN', lhs, rhs }),\r\n\t\t\tbetweenSymmetric: (context, lhs, rhs) => this.fromJSON(context, { operator: 'BETWEEN SYMMETRIC', lhs, rhs }),\r\n\t\t\tnotBetweenSymmetric: (context, lhs, rhs) => this.fromJSON(context, { operator: 'NOT BETWEEN SYMMETRIC', lhs, rhs }),\r\n\t\t\tisNull: (context, lhs) => this.fromJSON(context, { operator: 'IS NULL', lhs }),\r\n\t\t\tisNotNull: (context, lhs) => this.fromJSON(context, { operator: 'IS NOT NULL', lhs }),\r\n\t\t\tisTrue: (context, lhs) => this.fromJSON(context, { operator: 'IS TRUE', lhs }),\r\n\t\t\tisNotTrue: (context, lhs) => this.fromJSON(context, { operator: 'IS NOT TRUE', lhs }),\r\n\t\t\tisFalse: (context, lhs) => this.fromJSON(context, { operator: 'IS FALSE', lhs }),\r\n\t\t\tisNotFalse: (context, lhs) => this.fromJSON(context, { operator: 'IS NOT FALSE', lhs }),\r\n\t\t\tisUnknow: (context, lhs) => this.fromJSON(context, { operator: 'IS UNKNOWN', lhs }),\r\n\t\t\tisNotUnknow: (context, lhs) => this.fromJSON(context, { operator: 'IS NOT UNKNOWN', lhs }),\r\n\t\t\tisDistinctFrom: (context, lhs, rhs) => this.fromJSON(context, { operator: 'IS DISTINCT FROM', lhs, rhs }),\r\n\t\t\tisNotDistinctFrom: (context, lhs, rhs) => this.fromJSON(context, { operator: 'IS NOT DISTINCT FROM', lhs, rhs }),\r\n\t\t};\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst { tokens: [lhs, rhs = ''], matches: [operator] } = Lexer.lex(expr, this.OPERATORS, { useRegex: 'i' });\r\n\t\tif (!operator) return;\r\n\t\tconst instance = (new this(context)).operator(operator.trim().replace(/\\s+/, ' ').toUpperCase());\r\n\t\tinstance.lhs(parseCallback(instance, lhs.trim()));\r\n\t\tif (rhs.trim()) instance.rhs(parseCallback(instance, rhs.trim()));\r\n\t\treturn instance;\r\n\t}\r\n}", "import { AbstractNode } from '../../AbstractNode.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class OrderCriteria extends AbstractNode {\n\n\t#expr;\n\t#direction;\n\n\texpr(expr) {\n\t\tif (!arguments.length) return this.#expr;\n\t\tthis.#expr = this.$castInputs([expr], Exprs, this.#expr, 'order_by_expr');\n\t\treturn this;\n\t}\n\n\tdirection(value) {\n\t\tif (!arguments.length) return this.#direction;\n\t\tif (!['ASC','DESC'].includes(value = value.toUpperCase())) throw new Error(`Invalid sort direction: ${ value }`);\n\t\treturn (this.#direction = value, this);\n\t}\n\n\tdesc() { return this.direction('DESC'); }\n\n\tasc() { return this.direction('ASC'); }\n\n\tidentifiesAs(value) { return this.#expr?.identifiesAs(value) || super.identifiesAs(value); }\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (Object.keys(json || {}).filter((k) => !['nodeName', 'expr', 'direction'].includes(k)).length) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.expr) instance.expr(json.expr);\n\t\t\tif (json.direction) instance.direction(json.direction);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\texpr: this.#expr?.jsonfy(options),\n\t\t\t...(this.#direction ? { direction: this.#direction } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ , $expr, flag ] = expr.match(new RegExp(`^([\\\\s\\\\S]+?)(?:\\\\s+(ASC|DESC))?$`, 'i')) || [];\n\t\tconst instance = new this(context);\n\t\tinstance.expr(parseCallback(instance, $expr, Exprs));\n\t\tif (flag) instance.direction(flag.toUpperCase());\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return [this.#expr.stringify(), this.#direction].filter(s => s).join(' '); }\n\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { OrderCriteria } from './OrderCriteria.js';\n\nexport class OrderByClause extends AbstractNodeList {\n\tstatic get EXPECTED_TYPES() { return [OrderCriteria]; }\n\tstatic get REGEX() { return 'ORDER\\\\s+BY'; }\n\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ clauseMatch, columnsSpec, withRollup ] = expr.match(new RegExp(`^${ this.REGEX }([\\\\s\\\\S]*)(\\\\s+WITH\\\\s+ROLLUP)?$`, 'i')) || [];\n\t\tif (!clauseMatch) return;\n\t\tconst instance = super.parse(context, columnsSpec, parseCallback);\n\t\tif (!instance) return;\n\t\tif (withRollup) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n\n\tstringify() { return !this.entries().length ? '' : ['ORDER BY', super.stringify()].concat(this.hasFlag('WITH_ROLLUP') ? 'WITH ROLLUP' : []).join(' '); }\n}", "import { AbstractNode } from '../../AbstractNode.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class LimitClause extends AbstractNode {\n    static get CLAUSE() { return 'LIMIT'; }\n\n    #expr;\n\n    expr(expr) {\n        if (!arguments.length) return this.#expr;\n        this.#expr = this.$castInputs([expr], Exprs, this.#expr, 'limit_expr');\n        return this;\n    }\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (Object.keys(json || {}).filter((k) => !['nodeName', 'expr'].includes(k)).length) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.expr) instance.expr(json.expr);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\texpr: this.#expr?.jsonfy(options),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n        const [ clauseMatch, $expr ] = expr.match(new RegExp(`^${ this.CLAUSE }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!clauseMatch) return;\n\t\tconst instance = new this(context);\n\t\tinstance.expr(parseCallback(instance, $expr.trim(), Exprs));\n\t\treturn instance;\n\t}\n\t\n\tstringify() { return `${ this.constructor.CLAUSE } ${ this.#expr }`; }\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractNodeList } from './AbstractNodeList.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class AbstractOperator1Expr extends AbstractNodeList {\r\n\tstatic get EXPECTED_TYPES() { return Exprs; }\r\n\tstatic get OPERATORS() { return []; }\r\n\r\n\t#operator;\r\n\r\n\toperator(value) {\r\n\t\tif (!arguments.length) return this.#operator;\r\n\t\tif (!this.constructor.OPERATORS.includes(value)) throw new Error(`Unknown operator: ${ value }.`);\r\n\t\treturn (this.#operator = value, this);\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!this.OPERATORS.includes(json?.operator)) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.operator(json.operator)\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n    jsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\toperator: this.#operator,\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (this.CLAUSE) {\r\n            const [ clauseMatch, spec ] = expr.match(new RegExp(`^${ this.CLAUSE }([\\\\s\\\\S]*)$`, 'i')) || [];\r\n            if (!clauseMatch) return;\r\n            expr = spec;\r\n        }\r\n\t\tfor (const operator of this.OPERATORS) {\r\n\t\t\tconst tokens = Lexer.split(expr, [ /^\\w+$/.test(operator) ? `\\\\s+${ operator }\\\\s+` : operator.split('').map(_operator => `\\\\${ _operator }`).join('') ], { useRegex: 'i' }).filter((s) => s.trim());\r\n\t\t\tif (tokens.length < (this.minEntries || 2)) continue;\r\n\t\t\tconst instance = (new this(context)).operator(operator);\r\n\t\t\treturn instance.add(...tokens.map(token => parseCallback(instance, token.trim())));\r\n\t\t}\r\n\t}\r\n\r\n\tstringify() {\r\n\t\t// operator is e.g.: AND|OR, +|-|ect\r\n\t\tlet str = this.entries().join(` ${ this.#operator } `);\r\n\t\tif (this.constructor.CLAUSE) {\r\n\t\t\t// E.g. WHERE|ON|HAVING Clause\r\n            if (!this.entries().length) return '';\r\n            str = `${this.constructor.CLAUSE} ${str}`;\r\n        } else if (this.contextNode instanceof this.constructor) {\r\n\t\t\t// e.g. Logical and Mathematical classes\r\n\t\t\tstr = `(${ str })`;\r\n\t\t};\r\n\t\treturn str;\r\n\t}\r\n}\r\n", "import { AbstractOperator1Expr } from '../abstracts/AbstractOperator1Expr.js';\r\n\r\nexport class Condition extends AbstractOperator1Expr {\r\n    static get OPERATORS() { return ['AND', 'OR']; }\r\n\tstatic get CLAUSE() {}\r\n\r\n    every(...args) { return this.operator('AND').add(...args); }\r\n\r\n    some(...args) { return this.operator('OR').add(...args); }\r\n\t \r\n\tstatic get expose() {\r\n\t\treturn {\r\n            every: (context, ...entries) => entries.length > 1/*Specifically to disambiguate with aggr.every()*/ && this.fromJSON(context, { operator: 'AND', entries }),\r\n\t\t    some: (context, ...entries) => this.fromJSON(context, { operator: 'OR', entries }),\r\n        };\r\n    }\r\n\r\n}\r\n", "import { Condition } from '../../expr/logic/Condition.js';\n\nexport class WhereClause extends Condition {\n    static get CLAUSE() { return 'WHERE'; }\n    static get minEntries() { return 1; }\n}", "import { SubQuery } from '../SubQuery.js';\nimport { AbstractAliasableExpr } from '../../expr/abstracts/AbstractAliasableExpr.js';\nimport { GlobalTableRef } from '../../expr/refs/GlobalTableRef.js';\n\nexport class Table extends AbstractAliasableExpr {\n\tstatic get EXPECTED_TYPES() { return [GlobalTableRef,SubQuery]; }\n}", "import { Condition } from '../../expr/logic/Condition.js';\n\nexport class OnClause extends Condition {\n    static get CLAUSE() { return 'ON'; }\n    static get minEntries() { return 1; }\n}", "import { Lexer } from '../../Lexer.js';\nimport { Table } from './Table.js';\nimport { Identifier } from '../../expr/Identifier.js';\nimport { OnClause } from './OnClause.js';\n\nexport class JoinClause extends Table {\n\tstatic get REGEX() { return '(INNER\\\\s+|CROSS\\\\s+|(?:LEFT|RIGHT|FULL)(?:\\\\s+OUTER)?\\\\s+)?JOIN(?!\\\\w)'; }\n\t \n\t#type;\n\t#usingClause;\n\t#onClause;\n\n\ttype(value) {\n\t\tif (!arguments.length) return this.#type;\n\t\treturn (this.#type = value, this);\n\t}\n\n\texpr(...args) {\n\t\treturn args.length > 1 ? super.expr(args) : super.expr(...args);\n\t}\n\n\ton(...args) {\n\t\tif (!arguments.length) return this.#onClause;\n\t\tthis.#onClause = this.$castInputs(args, OnClause, this.#onClause, 'on_clause', 'every');\n\t\treturn this;\n\t}\n\n\tusing(correlation) {\n\t\tif (!arguments.length) return this.#usingClause;\n\t\tthis.#usingClause = this.$castInputs([correlation], Identifier, this.#usingClause, 'using_clause');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.type || Object.keys(json).filter((k) => !['nodeName', 'type', 'expr', 'alias', 'usingClause', 'onClause', 'claused'].includes(k)).length) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.type(json.type);\n\t\t\tif (json.usingClause) instance.using(json.usingClause);\n\t\t\tif (json.onClause) instance.on(json.onClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\ttype: this.#type,\n\t\t\t...(this.#usingClause ? { usingClause: this.#usingClause.jsonfy(options) } : {}),\n\t\t\t...(this.#onClause ? { onClause: this.#onClause.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ joinMatch, type, joinSpec ] = expr.match(new RegExp(`^${ this.REGEX }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!joinMatch) return;\n\t\tconst [ $table, $correlation ] = Lexer.split(joinSpec, ['\\\\s+(?:ON|USING)\\\\s+'], { useRegex:'i', preserveDelims: true }).map(s => s.trim());\n\t\tconst instance = super.parse(context, $table, parseCallback);\n\t\tinstance.type(type.trim().toUpperCase() + '_JOIN');\n\t\tif (/^USING/i.test($correlation)) {\n\t\t\tinstance.using(parseCallback(instance, $correlation.replace(/^USING\\s+/i, ''), [Identifier]));\n\t\t} else if (/^ON/i.test($correlation)) {\n\t\t\tinstance.on(parseCallback(instance, $correlation, [OnClause]));\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\treturn [\n\t\t\tthis.#type?.replace(/_/, ' ').toUpperCase() || 'JOIN',\n\t\t\tsuper.stringify(),\n\t\t\t...[ this.#usingClause ? `USING ${ this.#usingClause }` : `${ this.#onClause }` ], \n\t\t].filter(s => s).join(' ');\n\t}\n}\n", "import { AbstractOperator2Expr } from '../abstracts/AbstractOperator2Expr.js';\nimport { AbstractSugar } from '../../AbstractSugar.js';\nimport { GlobalTableRef } from '../refs/GlobalTableRef.js';\nimport { ColumnRef } from '../refs/ColumnRef.js';\nimport { PathJunction } from './PathJunction.js';\nimport { PathLeft } from './PathLeft.js';\n\nexport class AbstractPath extends AbstractSugar(AbstractOperator2Expr) {\n\n\tget isPath() { return true; }\n\n\tplot(fullyQualified = false) {\n\t\tconst targetSchema = this.schema();\n\t\tlet keyLhs_ident, keyRhs_ident;\n\t\tif (this.lhs() instanceof PathJunction) {\n\t\t\tconst lhsEndpoint = this.lhs().endpoint();\n\t\t\tconst lhsFk = lhsEndpoint.schema().foreignKey();\n\t\t\tif (!lhsFk) throw new Error(`[${this}]: Column ${lhsEndpoint.clone({ fullyQualified: true })} is not a foreign key.`);\n\t\t\tconst lhsEndpointTable = lhsFk.targetTable();\n\t\t\tconst querySchema = this.capture('DATABASE_SCHEMA'); // Intentially using capture here to use cached version and which excludes schemas for newerly path-generated joins\n\t\t\tfor (const $col of querySchema/*query*/.columns()) {\n\t\t\t\tif (!$col.primaryKey()) continue;\n\t\t\t\tif ($col.prefix(true).identifiesAs(lhsEndpointTable)) {\n\t\t\t\t\tconst $keyLhs_ident = ColumnRef.fromJSON(this, [$col.contextNode.name(), $col.name()]);\n\t\t\t\t\tif (keyLhs_ident) throw new Error(`[${this}]: Target primary key for foreign key ${lhsEndpoint.clone({ fullyQualified: true })} is ambiguous. (Is it ${keyLhs_ident} or ${$keyLhs_ident}?)`);\n\t\t\t\t\tkeyLhs_ident = $keyLhs_ident;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!keyLhs_ident) throw new Error(`Path ${this} could not be resolved against base query.`);\n\t\t\tconst keyRhs = this.lhs().lhs();\n\t\t\tkeyRhs_ident = keyRhs instanceof PathLeft\n\t\t\t\t? keyRhs.clone({ reverse: true })\n\t\t\t\t: keyRhs.clone({ fullyQualified });\n\t\t} else {\n\t\t\tkeyLhs_ident = this.lhs().clone({ fullyQualified });\n\t\t\tkeyRhs_ident = ColumnRef.fromJSON(this, [targetSchema.name(), targetSchema.primaryKey().columns()[0]]);\n\t\t}\n\t\tconst targetTableIdent = GlobalTableRef.fromJSON(this, [targetSchema.prefix(true).name(), targetSchema.name()]);\n\t\treturn [ keyLhs_ident, targetTableIdent, keyRhs_ident ];\n\t}\n\n    jsonfy(options = {}, jsonIn = {}) {\n        if (!options.deSugar || !this.statementNode) return super.jsonfy(options, jsonIn);\n\t\treturn this.statementNode.resolvePath(this, options);\n    }\n}", "import { Lexer } from '../../Lexer.js';\nimport { AbstractPath } from './AbstractPath.js';\nimport { ColumnRef } from '../refs/ColumnRef.js';\nimport { PathRight } from './PathRight.js';\n\nexport class PathLeft extends AbstractPath {\n\tstatic get OPERATORS() { return ['<~']; }\n\tstatic get LHS_TYPES() { return [PathLeft,ColumnRef]; }\n    static get RHS_TYPES() { return [ColumnRef]; }\n\tstatic get DESUGARS_TO() { return [PathRight]; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'TABLE_SCHEMA') {\n\t\t\tif (requestSource === this.lhs()) return this.schema();\n\t\t\tif (requestSource === this.rhs() && this.contextNode instanceof PathLeft) {\n\t\t\t\t// Which means if immediate context isn't PathLeft, request bubbles\n\t\t\t\treturn this.contextNode.schema();\n\t\t\t}\n\t\t}\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\t\n\tstatic get expose() {\n\t\treturn {\n\t\t\tpath: (context, lhs, operator, rhs) => this.fromJSON(context, { lhs, operator, rhs }),\n\t\t\tlpath: (context, lhs, rhs) => this.fromJSON(context, { lhs, operator: '<~', rhs }),\n\t\t};\n\t}\n\n\tschema() {\n\t\tconst fk = this.rhs().schema().foreignKey();\n\t\tif (!fk) throw new Error(`[${ this }]: Column ${ this.rhs().clone({ fullyQualified: true }) } is not a foreign key.`);\n\t\treturn fk.targetTable()/*the table in there*/.schema();\n\t}\n\n\tendpoint() { return this.lhs() instanceof PathLeft ? this.lhs().endpoint() : this.lhs(); }\n\n    jsonfy(options = {}, jsonIn = {}) {\n        if (!options.reverse) return super.jsonfy(options, jsonIn);\n        return {\n            nodeName: PathRight.NODE_NAME,\n            lhs: this.rhs()?.jsonfy(options),\n            rhs: this.lhs()?.jsonfy(options),\n            operator: '~>',\n        };\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst tokens = Lexer.split(expr, this.OPERATORS, { useRegex: true });\n\t\tif (tokens.length < 2) return;\n\t\tconst operator = this.OPERATORS[0];\n\t\tconst instance = (new this(context)).operator(operator);\n\t\tinstance.rhs(parseCallback(instance, tokens.pop()/*NOTE: last*/.trim(), this.RHS_TYPES));\n\t\treturn instance.lhs(parseCallback(instance, tokens.join(operator).trim(), this.LHS_TYPES));\n\t}\n}\n", "import { PathLeft } from './PathLeft.js';\nimport { GlobalTableRef } from '../refs/GlobalTableRef.js';\n\nexport class PathJunction extends PathLeft {\n    static get RHS_TYPES() { return [GlobalTableRef]; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'TABLE_SCHEMA') return this.rhs().schema();\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\tschema() { return this.rhs().schema(); }\n}\n", "import { AbstractAliasableExpr } from '../abstracts/AbstractAliasableExpr.js';\nimport { Exprs } from '../grammar.js';\n\nexport class Property extends AbstractAliasableExpr {\n    static get EXPECTED_TYPES() { return Exprs; }\n    static get requireAliasForNoneIdents() { return true; }\n}", "import { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport { AbstractNode } from '../../AbstractNode.js';\r\nimport { Lexer } from '../../Lexer.js';\r\n\r\nexport class Str extends AbstractNode {\r\n\t\r\n\t#value = '';\r\n\t#quote = \"'\";\r\n\t\r\n\tvalue(value) {\r\n\t\tif (!arguments.length) return this.#value;\r\n\t\tif (typeof value !== 'string') throw new Error(`Invalid argument as string: ${ value }`);\r\n\t\treturn (this.#value = value, this);\r\n\t}\r\n\t\r\n\tquote(value = this.#quote) {\r\n\t\tif (!arguments.length) return this.#quote;\r\n\t\tif (!['\"', \"'\"].includes(value)) throw new Error(`Invalid argument as quote: ${ value }`);\r\n\t\treturn (this.#quote = value, this);\r\n\t}\r\n\r\n\tidentifiesAs(value) {\r\n\t\tif (typeof value === 'string') return this.$eq(this.#value, value, 'ci');\r\n\t\treturn super.identifiesAs(value);\r\n\t}\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\t'string|str': (context, value, quote) => this.fromJSON(context, { value, quote }),\r\n\t\t\tvalue: (context, value) => typeof value === 'string' && this.fromJSON(context, { value })\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (typeof json === 'string' && !json.trim()) json = { value: json }; // Empty string or whitespaces\r\n\t\tif (typeof json?.value !== 'string' || Object.keys(json).filter((k) => !['nodeName', 'value', 'quote'].includes(k)).length || (json.quote && !['\"', \"'\"].includes(json.quote))) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.value(json.value).quote(json.quote);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tquote: this.#quote,\r\n\t\t\tvalue: this.#value,\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n    }\r\n\t \r\n\tstatic parse(context, expr) {\r\n\t\tconst [text, quote] = this.parseString(context, expr, true) || [];\r\n\t\tif (quote) return (new this(context)).value(text).quote(quote);\r\n\t}\r\n\t\r\n\tstringify() { return this.stringifyString(this.#value, true); }\r\n}\r\n", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractNode } from '../../AbstractNode.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class Fn extends AbstractNode {\r\n\r\n\t#name;\r\n\t#args = [];\r\n\r\n\tname(value) {\r\n\t\tif (!arguments.length) return this.#name;\r\n\t\tif (typeof value !== 'string') throw new TypeError(`Invalid argument as function name.`);\r\n\t\treturn (this.#name = value, this);\r\n\t}\r\n\t\r\n\targs(...args) {\r\n\t\tif (!arguments.length) return this.#args;\r\n\t\tthis.#args = this.$castInputs(args, Exprs, this.#args, 'function_args');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tidentifiesAs(value) { return value === this.#name || super.identifiesAs(value); }\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\tnow: (context, ...args) => this.fromJSON(context, { name: 'NOW', args }),\r\n\t\t\tconcat: (context, ...args) => this.fromJSON(context, { name: 'CONCAT', args }),\r\n\t\t\tcount: (context, ...args) => this.fromJSON(context, { name: 'COUNT', args }),\r\n\t\t\tfn: (context, name, ...args) => this.fromJSON(context, { name, args }),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.args)) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.name(json.name);\r\n\t\t\tfor (const arg of json.args) instance.args(arg);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tname: this.#name,\r\n\t\t\targs: this.#args.map(o => o.jsonfy(options)),\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [ , name, args = '' ] = /^(\\w+)(?:\\s+)?\\(([\\s\\S]+)?\\)$/i.exec(expr) || [];\r\n\t\tif (!name || Lexer.match(expr.replace(name, '').trim(), [' ']).length) return;\r\n\t\tconst instance = (new this(context)).name(name);\r\n\t\tconst $args = Lexer.split(args, [',']).map(arg => parseCallback(instance, arg.trim()));\r\n\t\tfor (const arg of $args) instance.args(arg);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.#name.toUpperCase() }(${ this.#args.join(', ') })`; }\r\n}", "import { AbstractSugar } from '../../AbstractSugar.js';\nimport { AbstractNodeList } from '../abstracts/AbstractNodeList.js';\nimport { Property } from './Property.js';\nimport { Str } from '../types/Str.js';\nimport { Fn } from '../functions/Fn.js';\n\nexport class JsonObjectSpec extends AbstractSugar(AbstractNodeList) {  \n    static get EXPECTED_TYPES() { return [Property]; }\n    static get TAGS() { return ['{', '}']; }\n\tstatic get DESUGARS_TO() { return [Fn]; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\tfields: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n\n    jsonfy(options = {}, jsonIn = {}, reducer = null) {\n        if (!options.deSugar) return super.jsonfy(options, jsonIn, reducer);\n        return {\n            nodeName: Fn.NODE_NAME,\n            name: this.params.dialect === 'mysql' ? 'JSON_OBJECT' : 'JSON_BUILD_OBJECT',\n            args: this.entries().reduce((args, property) => {\n                const key = { nodeName: Str.NODE_NAME, value: property.alias(true) };\n                const value = property.expr().jsonfy(options);\n                return args.concat(key, value);\n            }, []),\n        };\n    }\n}", "import { Exprs } from '../grammar.js';\nimport { AbstractSugar } from '../../AbstractSugar.js';\nimport { AbstractNodeList } from '../abstracts/AbstractNodeList.js';\nimport { Fn } from '../functions/Fn.js';\n\nexport class JsonArraySpec extends AbstractSugar(AbstractNodeList) {   \n    static get EXPECTED_TYPES() { return Exprs; }\n    static get TAGS() { return ['[', ']']; }\n\tstatic get DESUGARS_TO() { return [Fn]; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\titems: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n\n    jsonfy(options = {}, jsonIn = {}, reducer = null) {\n        if (!options.deSugar) return super.jsonfy(options, jsonIn, reducer);\n        return {\n            nodeName: Fn.NODE_NAME,\n            name: this.params.dialect === 'mysql' ? 'JSON_ARRAY' : 'JSON_BUILD_ARRAY',\n            args: this.entries().map(e => e.jsonfy(options)),\n            originalSugar: this.stringify(),\n        };\n    }\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { ColumnRef } from '../../expr/refs/ColumnRef.js';\nimport { PathRight } from '../../expr/path/PathRight.js';\n\nexport class ColumnsSpec extends AbstractNodeList {\n    static get EXPECTED_TYPES() { return [PathRight, ColumnRef]; }\n    static get TAGS() { return ['(', ')']; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\tcolumns: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class RowSpec extends AbstractNodeList {\n    static get EXPECTED_TYPES() { return Exprs; }\n    static get MIN_ENTRIES() { return 2; }\n    static get TAGS() { return ['(', ')']; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\trow: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class PartitionByClause extends AbstractNodeList {\n\tstatic get EXPECTED_TYPES() { return Exprs; }\n\tstatic get REGEX() { return 'PARTITION\\\\s+BY'; }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ clauseMatch, columnsSpec ] = expr.match(new RegExp(`^${ this.REGEX }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!clauseMatch) return;\n\t\treturn super.parse(context, columnsSpec, parseCallback);\n\t}\n\n\tstringify() { return !this.entries().length ? '' : ['PARTITION BY', super.stringify()].join(' '); }\n}", "import { Lexer } from '../../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport { AbstractNode } from '../../AbstractNode.js';\nimport { OrderByClause } from './OrderByClause.js';\nimport { PartitionByClause } from './PartitionByClause.js';\n\nexport class Window extends AbstractNode {\n\t\n\t#name;\n\t#windowRef;\n\t#partitionByClause;\n\t#orderByClause;\n\n\tname(value) {\n\t\tif (!arguments.length) return this.#name;\n\t\treturn (this.#name = value, this);\n\t}\n\n\texisting(value) {\n\t\tif (!arguments.length) return this.#windowRef;\n\t\treturn (this.#windowRef = value, this);\n\t}\n\n\textends(value) { return this.existing(...arguments); }\n\n\tpartitionBy(...args) {\n\t\tif (!arguments.length) return this.#partitionByClause;\n\t\tif (this.#windowRef) throw new Error(`The PARTITION BY clause is not allowed when inheriting from a base window.`);\n\t\tthis.#partitionByClause = this.$castInputs(args, PartitionByClause, this.#partitionByClause, 'partition_by_clause', 'add');\n\t\treturn this;\n\t}\n\n\torderBy(...args) {\n\t\tif (!arguments.length) return this.#orderByClause;\n\t\tthis.#orderByClause = this.$castInputs(args, OrderByClause, this.#orderByClause, 'order_by_clause', 'add');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (typeof json === 'string') json = { windowRef: json };\n\t\telse if (!(typeof json === 'object' && json) || !['name', 'windowRef', 'partitionByClause', 'orderByClause'].some(k => k in json)) return;\n\t\tif (Object.keys(json || {}).filter((k) => !['nodeName', 'name', 'windowRef', 'partitionByClause', 'orderByClause'].includes(k)).length) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.name) instance.name(json.name);\n\t\t\tif (json.windowRef) instance.extends(json.windowRef);\n\t\t\tif (json.partitionByClause) instance.partitionBy(json.partitionByClause);\n\t\t\tif (json.orderByClause) instance.orderBy(json.orderByClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...(this.#name || !this.#windowRef ? { name: this.#name } : {}),\n\t\t\t...(this.#windowRef || !this.#name ? { windowRef: this.#windowRef } : {}),\n\t\t\t...(this.#partitionByClause ? { partitionByClause: this.#partitionByClause.jsonfy(options) } : {}),\n\t\t\t...(this.#orderByClause ? { orderByClause: this.#orderByClause.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst parseEnclosure = async (enclosure) => {\n\t\t\tconst { tokens: [ definedRef, ...clauses ], matches: clauseTypes } = Lexer.lex(_unwrap(enclosure.trim(), '(', ')'), ['PARTITION\\\\s+BY', 'ORDER\\\\s+BY'], { useRegex:'i', preserveDelims: true });\n\t\t\tif (definedRef.trim()) instance.extends(definedRef.trim());\n\t\t\tfor (const clauseType of clauseTypes) {\n\t\t\t\t// PARTITION BY\n\t\t\t\tif (/PARTITION\\s+BY/i.test(clauseType)) {\n\t\t\t\t\tinstance.partitionBy(parseCallback(instance, clauses.shift().trim(), [PartitionByClause]));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ORDER BY\n\t\t\t\tinstance.orderBy(parseCallback(instance, clauses.shift().trim(), [OrderByClause]));\n\t\t\t}\n\t\t};\n\t\tconst hasEnclosure = expr.endsWith(')');\n\t\tconst isNamedWindow = hasEnclosure && !expr.startsWith('(');\n\t\tif (isNamedWindow) {\n\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\n\t\t\t// NOTICE below the space around \"AS\", important in view of \"city ASC\"\n\t\t\tconst [ name, enclosure ] = Lexer.split(expr, [' AS '], { useRegex: 'i' });\n\t\t\tinstance.name(name.trim());\n\t\t\tparseEnclosure(enclosure);\n\t\t} else if (hasEnclosure) {\n\t\t\tparseEnclosure(expr);\n\t\t} else {\n\t\t\t// FUNC OVER w\n\t\t\tinstance.existing(expr);\n\t\t}\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = [];\n\t\tif (!this.#name && this.#windowRef && !this.#partitionByClause && !this.#orderByClause) {\n\t\t\t// It's an \"over w\" clause\n\t\t\tsql.push(this.#windowRef);\n\t\t} else {\n\t\t\t// Might be an \"over (definedRef? ...)\" clause or a named window \"w AS ()\"\n\t\t\t// But certainly an enclosure\n\t\t\tif (this.#name) sql.push(`${ this.#name } AS `);\n\t\t\tsql.push(`(${ [\n\t\t\t\tthis.#windowRef,\n\t\t\t\tthis.#partitionByClause,\n\t\t\t\tthis.#orderByClause\n\t\t\t].filter(x => x).join(' ') })`);\n\t\t}\n\t\treturn sql.join('');\n\t}\n}", "import { Lexer } from '../../Lexer.js';\nimport { _toCamel } from '@webqit/util/str/index.js';\nimport { OrderByClause } from '../../dql/clauses/OrderByClause.js';\nimport { Window } from '../../dql/clauses/Window.js';\nimport { Fn } from './Fn.js';\n\nexport class Aggr extends Fn {\n\n\t#overClause;\n\t#orderByClause;\n\n\tover(value) {\n\t\tif (!arguments.length) return this.#overClause;\n\t\t// For expressions like SUM OVER ()\n\t\tif (!value) value = { name: '' }; // At least an empty string to help pass the Window.fromJSON() validation\n\t\tthis.#overClause = this.$castInputs([value], Window, this.#overClause, 'over_clause');\n\t\treturn this;\n\t}\n\t\n\torderBy(...args) {\n\t\tif (!arguments.length) return this.#orderByClause;\n\t\tthis.#orderByClause = this.$castInputs(args, OrderByClause, this.#orderByClause, 'order_by_clause', 'add');\n\t\treturn this;\n\t}\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\tfn: (context, name, ...args) => this.names.flat().includes(name?.toUpperCase()) && this.fromJSON(context, { name, args }),\n\t\t\t...Object.fromEntries(this.names.flat().map(FN => {\n\t\t\t\treturn [ _toCamel(FN.toLowerCase().replace(/_/g, ' ')), (context, ...args) => this.fromJSON(context, { name: FN, args }) ]\n\t\t\t})),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!this.names.flat().includes(json?.name?.toUpperCase?.())) return;\n\t\tif (Object.keys(json || {}).filter((k) => !['nodeName', 'name', 'args', 'orderByClause', 'overClause', 'flags', 'prettyName'].includes(k)).length) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.orderByClause) instance.orderBy(json.orderByClause);\n\t\t\tif (json.overClause) instance.over(json.overClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...(this.#orderByClause ? { orderByClause: this.#orderByClause.jsonfy(options) } : {}),\n\t\t\t...(this.#overClause ? { overClause: this.#overClause.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\t// Break off any OVER clause, then assert that it's a function\n\t\tconst [ func, overClause ] = Lexer.split(expr, ['OVER\\\\s*'], { useRegex: 'i' }).map(s => s.trim());\n\t\t// Match any ALL|DISTINCT flags; also assert that it's an aggr function\n\t\tconst [ , name, aggrFlag, args = '' ] = /^(\\w+)\\((?:\\s+)?(?:(ALL|DISTINCT|FILTER)\\s+)?([\\s\\S]+?)?\\)$/i.exec(func) || [];\n\t\tif (!this.names.flat().includes(name?.toUpperCase())) return;\n\t\t// Break off any ORDER BY clause, then render\n\t\tconst [ , $args, orderByClause ] = /^([\\s\\S]+)(?:\\s+(ORDER\\s+BY\\s+.+))$/i.exec(args) || [ , args ];\n\t\tconst instance = super.parse(context, `${ name }(${ $args })`, parseCallback);\n\t\tif (aggrFlag) instance.withFlag(aggrFlag.toUpperCase());\n\t\tif (orderByClause) instance.orderBy(parseCallback(instance, orderByClause, [OrderByClause]));\n\t\telse if (overClause) instance.over(parseCallback(instance, overClause.trim(), [Window]));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = `${ this.name().toUpperCase() }(${ [...this.getFlag(), this.args().join(', '), this.#orderByClause].filter(s => s).join(' ') })`;\n\t\treturn sql + (this.#overClause ? ` OVER ${ this.#overClause }` : '');\n\t}\n\n\tstatic names = [\n\t\t[\n\t\t\t'AVG', \n\t\t\t'BIT_AND', \n\t\t\t'BIT_OR', \n\t\t\t'BIT_XOR', \n\t\t\t'COUNT', \n\t\t\t'JSON_AGG',\n\t\t\t'JSON_ARRAYAGG', \n\t\t\t'JSON_OBJECTAGG', \n\t\t\t'MAX', \n\t\t\t'MIN',\n\t\t\t'STDDEV_POP',\n\t\t\t'STDDEV',\n\t\t\t'STD',\n\t\t\t'STDDEV_SAMP',\n\t\t\t'SUM',\n\t\t\t'VAR_POP',\n\t\t\t'VARIANCE',\n\t\t\t'VAR_SAMP',\n\t\t\t// May not apply to OVER()\n\t\t\t'GROUP_CONCAT',\n\t\t\t'GROUP_CONCAT_WS',\n\t\t],\n\t\t[\n\t\t\t'CUME_DIST', \n\t\t\t'DENSE_RANK', \n\t\t\t'FIRST_VALUE', \n\t\t\t'LAG', \n\t\t\t'LAST_VALUE', \n\t\t\t'LEAD', \n\t\t\t'NTH_VALUE', \n\t\t\t'NTLE',\n\t\t\t'PERCENT_RANK',\n\t\t\t'RANK',\n\t\t\t'ROW_NUMBER',\n\t\t],\n\t\t[\n\t\t\t'ANY_VALUE', \n\t\t\t'COLUMN', \n\t\t\t'COLUMNS', \n\t\t\t'GROUPING', \n\t\t]\n\t];\n}", "import { Exprs } from '../grammar.js';\nimport { AbstractSugar } from '../../AbstractSugar.js';\nimport { ColumnsSpec } from '../../dml/clauses/ColumnsSpec.js';\nimport { RowSpec } from '../../dml/clauses/RowSpec.js';\nimport { AbstractNode } from '../../AbstractNode.js';\nimport { Aggr } from '../functions/Aggr.js';\n\nexport class JsonAgg extends AbstractSugar(AbstractNode) {\n\tstatic get DESUGARS_TO() { return [Aggr]; }\n    static get EXPECTED_TYPES() { return Exprs.map(e => e === RowSpec ? ColumnsSpec : e);  }\n\n    #expr;\n\n    expr(value) {\n        if (!arguments.length) return this.#expr;\n        this.#expr = this.$castInputs([value], this.constructor.EXPECTED_TYPES, this.#expr, 'json_aggr_expr');\n        return this;\n    }\n\n    static fromJSON(context, json, callback = null) {\n\t\tif (!json?.expr) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n            instance.expr(json.expr);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n        if (options.deSugar) {\n            const agg = {\n                nodeName: Aggr.NODE_NAME,\n                name: this.params.dialect === 'mysql' ? 'JSON_ARRAYAGG' : 'JSON_AGG',\n                args: [ this.#expr?.jsonfy(options) ],\n                prettyName: this.stringify(),\n            };\n            return agg;\n        }\n\t\treturn super.jsonfy(options, {\n\t\t\texpr: this.#expr?.jsonfy(options),\n\t\t\t...jsonIn,\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n        if ((expr = expr.split(/(?=\\[\\s*\\]$)/)).length !== 2) return;\n\t\tconst instance = new this(context);\n        return instance.expr(parseCallback(instance, expr.shift().trim(), this.EXPECTED_TYPES));\n\t}\n\n\tstringify() { return `${ this.#expr }[]`; }\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractNode } from '../../AbstractNode.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class TypeCast extends AbstractNode {\r\n\t\r\n\t#value;\r\n\t#type;\r\n\t#compact = false;\r\n\t\r\n\tvalue(value) {\r\n\t\tif (!arguments.length) return this.#value;\r\n\t\tthis.#value = this.$castInputs([value], Exprs, this.#value, 'type_cast');\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\ttype(value) {\r\n\t\tif (!arguments.length) return this.#type;\r\n\t\treturn (this.#type = value, this);\r\n\t}\r\n\t\r\n\tcompact(value = this.#compact) {\r\n\t\tif (!arguments.length) return this.#compact;\r\n\t\treturn (this.#compact = value, this);\r\n\t}\r\n\r\n\tstatic get expose() {\r\n\t\treturn { cast: (context, value, type, compact) => this.fromJSON(context, { value, type, compact }), };\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!json?.value || !json.type || Object.keys(json).filter((k) => !['nodeName', 'type', 'value', 'compact'].includes(k)).length) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.value(json.value).type(json.type).compact(json.compact);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tvalue: this.#value?.jsonfy(options),\r\n\t\t\ttype: this.#type,\r\n\t\t\tcompact: this.#compact,\r\n\t\t\t...jsonIn\r\n\t\t});\r\n    }\r\n\t \r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tlet value, type, compact = false;\r\n\t\tif (/^CAST(?:\\s+)?\\([\\s\\S]+\\)$/i.test(expr)) {\r\n\t\t\tconst [ , parens ] = Lexer.split(expr, []);\r\n\t\t\t[value, type] = Lexer.split(parens.slice(1, -1), [`AS`], { useRegex: 'i' });\r\n\t\t} else {\r\n\t\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\t\t[value, type] = Lexer.split(expr, [`::`]);\r\n\t\t\tif (!type) return;\r\n\t\t\tcompact = true;\r\n\t\t}\r\n\t\tconst instance = (new this(context)).type(type.trim()).compact(compact);\r\n\t\treturn instance.value(parseCallback(instance, value.trim()));\r\n\t}\r\n\t\r\n\tstringify() {\r\n\t\tif (this.#compact && this.params.dialect !== 'mysql') return `${ this.#value }::${ this.#type }`;\r\n\t\treturn `CAST(${ this.#value } AS ${ this.#type })`;\r\n\t}\r\n}\r\n", "import { _wrapped } from '@webqit/util/str/index.js';\r\nimport { _isObject } from '@webqit/util/js/index.js';\r\nimport { Lexer } from '../../Lexer.js';\r\nimport { Str } from './Str.js';\r\n\r\nexport class Json extends Str {\r\n\r\n\tstatic get expose() {\r\n\t\treturn { json: (context, value) => this.fromJSON(context, { value: Array.isArray(value) || _isObject(value) ? JSON.stringify(value) : value }) };\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!_isObject(json) || Object.keys(json).filter((k) => !['nodeName', 'value'].includes(k)).length) return;\r\n\t\ttry { typeof json?.value === 'string' && JSON.parse(json.value); } catch(e) { return; }\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tconst braces = [['{','}'], ['[',']']], $ = {};\r\n\t\tconst [text, quote] = this.parseString(context, expr, true) || [];\r\n\t\tif (!quote) return;\r\n\t\tif (!($.braces = braces.find(b => _wrapped(expr, b[0], b[1]))) || Lexer.match(expr, [' ']).length) return;\r\n\t\ttry { JSON.parse(text); } catch(e) { return; }\r\n\t\treturn (new this(context, quote)).value(text);\r\n\t}\r\n}", "import { AbstractNode } from \"../../AbstractNode.js\";\r\n\r\nexport class Num extends AbstractNode {\r\n\t\r\n\t#value;\r\n\r\n\tvalue(value) {\r\n\t\tif (!arguments.length) return this.#value;\r\n\t\tif (typeof value !== 'number') throw new Error(`Cannot use ${ typeof value } as number.`);\r\n\t\treturn (this.#value = value, this);\r\n\t}\r\n\r\n\tidentifiesAs(value) { return value === this.#value || super.identifiesAs(value); }\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\t'num|int|float': (context, value) => this.fromJSON(context, { value: parseFloat(value) }),\r\n\t\t\tvalue: (context, value) => /^\\d+$/.test(value) && this.fromJSON(context, { value: parseFloat(value) })\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (typeof json === 'number') {\r\n\t\t\tjson = { value: json };\r\n\t\t} else if (typeof json?.value !== 'number' || Object.keys(json).filter((k) => !['nodeName', 'value'].includes(k)).length) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.value(json.value);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tvalue: this.#value,\r\n\t\t\t...jsonIn\r\n\t\t});\r\n    }\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tif (!/^\\d+$/.test(expr)) return;\r\n\t\treturn (new this(context)).value(parseFloat(expr));\r\n\t}\r\n\t\r\n\tstringify() { return `${ this.#value }`; }\r\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractOperator2Expr } from '../abstracts/AbstractOperator2Expr.js';\r\nimport { ColumnRef } from '../refs/ColumnRef.js';\r\nimport { TypeCast } from '../types/TypeCast.js';\r\nimport { Json } from '../types/Json.js';\r\nimport { Str } from '../types/Str.js';\r\nimport { Num } from '../types/Num.js';\r\n\r\nexport class JsonPath extends AbstractOperator2Expr {\r\n\tstatic get OPERATORS() { return ['->>', `->`, '#>>', '#>']; }\r\n\tstatic get LHS_TYPES() { return [Json,ColumnRef]; }\r\n    static get RHS_TYPES() { return [TypeCast,Json,Num,Str]; }\r\n\t \r\n\tstatic get expose() {\r\n\t\treturn { path: (context, lhs, operator, rhs) => this.fromJSON(context, { lhs, operator, rhs }), };\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tconst { tokens: [lhs, rhs], matches: [operator] } = Lexer.lex(expr, this.OPERATORS, { limit: 1 });\r\n\t\tif (!lhs || !operator || !rhs) return;\r\n\t\tconst instance = (new this(context)).operator(operator);\r\n\t\tinstance.lhs(parseCallback(instance, lhs.trim(), this.LHS_TYPES));\r\n\t\tinstance.rhs(parseCallback(instance, rhs.trim(), this.RHS_TYPES));\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "import { Lexer } from '../../Lexer.js';\nimport { PathJunction } from './PathJunction.js';\nimport { AbstractPath } from './AbstractPath.js';\nimport { JsonObjectSpec } from '../json/JsonObjectSpec.js';\nimport { JsonArraySpec } from '../json/JsonArraySpec.js';\nimport { ColumnsSpec } from '../../dml/clauses/ColumnsSpec.js';\nimport { ColumnRef } from '../refs/ColumnRef.js';\nimport { JsonAgg } from '../json/JsonAgg.js';\nimport { JsonPath } from '../json/JsonPath.js';\n\nexport class PathRight extends AbstractPath {\n\tstatic get OPERATORS() { return [ '~>', { test: ':(?=\\\\s*[{([])', operator: ':' } ]; }\n\tstatic get LHS_TYPES() { return [PathJunction,ColumnRef]; }\n    static get RHS_TYPES() { return [this,JsonPath,JsonAgg,JsonObjectSpec,JsonArraySpec,ColumnsSpec,ColumnRef]; }\n\tstatic get DESUGARS_TO() { return this.LHS_TYPES; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'TABLE_SCHEMA') {\n\t\t\tif (requestSource === this.rhs()) return this.schema();\n\t\t\tif (requestSource === this.lhs() && this.contextNode instanceof PathRight) {\n\t\t\t\t// Which means if immediate context isn't PathRight, request bubbles\n\t\t\t\treturn this.contextNode.schema();\n\t\t\t}\n\t\t}\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\t\n\tstatic get expose() {\n\t\treturn {\n\t\t\tpath: (context, lhs, operator, rhs) => this.fromJSON(context, { lhs, operator, rhs }),\n\t\t\trpath: (context, lhs, rhs) => this.fromJSON(context, { lhs, operator: '~>', rhs }),\n\t\t};\n\t}\n\n\tschema() {\n\t\tif (this.lhs() instanceof PathJunction) return this.lhs().schema();\n\t\tconst fk = this.lhs().schema().foreignKey();\n\t\tif (!fk) throw new Error(`[${ this }]: Column ${ this.lhs().clone({ fullyQualified: true }) } is not a foreign key.`);\n\t\treturn fk.targetTable()/*the table in there*/.schema();\n\t}\n\n\tendpoint() { return this.rhs() instanceof PathRight ? this.rhs().endpoint() : this.rhs(); }\n\n\tprettyName() { return this.clone({ asProperty: true }).stringify(); }\n\n    jsonfy(options = {}, jsonIn = {}) {\n\t\tif (options.asProperty && [JsonObjectSpec,JsonArraySpec,JsonAgg,ColumnsSpec].some(c => this.rhs() instanceof c)) {\n\t\t\treturn this.lhs().jsonfy({ ...options, asProperty: false }, jsonIn);\n\t\t}\n        return super.jsonfy(options);\n    }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [lhs, rhs], matches: [operator] } = Lexer.lex(expr, this.OPERATORS, { limit: 1, useRegex: true });\n\t\tif (!lhs || !operator || !rhs) return;\n\t\tconst instance = (new this(context)).operator(operator);\n\t\tinstance.lhs(parseCallback(instance, lhs.trim(), this.LHS_TYPES));\n\t\tinstance.rhs(parseCallback(instance, rhs.trim(), this.RHS_TYPES));\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tif ([JsonAgg,JsonObjectSpec,JsonArraySpec,ColumnsSpec].some((c) => this.rhs() instanceof c)) {\n\t\t\treturn `${ this.lhs() }: ${ this.rhs() }`;\n\t\t}\n\t\treturn super.stringify();\n\t}\n}", "import { DatabaseSchema } from '../ddl/database/DatabaseSchema.js';\nimport { Assertion } from '../expr/logic/Assertion.js';\nimport { OrderByClause } from './clauses/OrderByClause.js';\nimport { LimitClause } from './clauses/LimitClause.js';\nimport { WhereClause } from './clauses/WhereClause.js';\nimport { JoinClause } from './clauses/JoinClause.js';\nimport { PathRight } from '../expr/path/PathRight.js';\nimport { ColumnRef } from '../expr/refs/ColumnRef.js';\nimport { JsonAgg } from '../expr/json/JsonAgg.js';\nimport { Table } from './clauses/Table.js';\n\nexport const AbstractQueryStatement = Class => class extends Class {\n\n\t#joinClauses = [];\n\t#whereClause;\n\t#orderByClause;\n\t#limitClause;\n\n\tjoins(...args) {\n\t\tif (!arguments.length) return this.#joinClauses;\n\t\tthis.#joinClauses = this.$castInputs(args, JoinClause, this.#joinClauses, 'join_clause');\n\t\treturn this;\n\t}\n\n\tjoin(table) { return this.joins(table); }\n\n\tinnerJoin(table) {\n\t\tthis.join(table);\n\t\treturn (this.#joinClauses[this.#joinClauses.length - 1].type('INNER_JOIN'), this);\n\t}\n\n\tcrossJoin(table) {\n\t\tthis.join(table);\n\t\treturn (this.#joinClauses[this.#joinClauses.length - 1].type('CROSS_JOIN'), this);\n\t}\n\n\tleftJoin(table) {\n\t\tthis.join(table);\n\t\treturn (this.#joinClauses[this.#joinClauses.length - 1].type('LEFT_JOIN'), this);\n\t}\n\n\trightJoin(table) {\n\t\tthis.join(table);\n\t\treturn (this.#joinClauses[this.#joinClauses.length - 1].type('RIGHT_JOIN'), this);\n\t}\n\n\tfullJoin(table) {\n\t\tthis.join(table);\n\t\treturn (this.#joinClauses[this.#joinClauses.length - 1].type('FULL_JOIN'), this);\n\t}\n\n\twhere(...args) {\n\t\tif (!arguments.length) return this.#whereClause;\n\t\tthis.#whereClause = this.$castInputs(args, WhereClause, this.#whereClause, 'where_clause', 'every');\n\t\treturn this;\n\t}\n\n\torderBy(...args) {\n\t\tif (!arguments.length) return this.#orderByClause;\n\t\tthis.#orderByClause = this.$castInputs(args, OrderByClause, this.#orderByClause, 'order_by_clause', 'add');\n\t\treturn this.#orderByClause;\n\t}\n\n\tlimit(value) {\n\t\tif (!arguments.length) return this.#limitClause;\n\t\tthis.#limitClause = this.$castInputs([value], LimitClause, this.#limitClause, 'limit_clause', 'value');\n\t\treturn this;\n\t}\n\n\tschema({ derivationLevel = false } = {}) {\n\t\tconst dbSchema = DatabaseSchema.fromJSON(this, { name: '', tables: [] });\n\t\tconst selectAll_list = [];\n\t\tif (derivationLevel) {\n\t\t\tconst selectListOnly_directive = derivationLevel === 'SELECT_LIST_ONLY';\n\t\t\tfor (const field of this.fields?.() || []) {\n\t\t\t\tif (field.expr().name?.() === '*') {\n\t\t\t\t\tif (selectListOnly_directive) selectAll_list.push(field.expr().prefix()?.name());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst fieldSchema = field.schema();\n\t\t\t\tif (!fieldSchema) continue;\n\t\t\t\tconst $tblName = fieldSchema.contextNode.name();\n\t\t\t\tif (!dbSchema.table($tblName)) {\n\t\t\t\t\tconst tblSchema_json = fieldSchema.contextNode.jsonfy(); // Use jsonfy() to retain prefix and name diffs\n\t\t\t\t\tdbSchema.table({ ...tblSchema_json, columns: [] });\n\t\t\t\t}\n\t\t\t\tdbSchema.table($tblName).column(fieldSchema.jsonfy());\n\t\t\t}\n\t\t\tif (selectListOnly_directive && !selectAll_list.length) return dbSchema;\n\t\t}\n\t\tfor (const tblSchema of [...this.tables(), ...this.joins()].map(tbl => tbl.schema())) {\n\t\t\tconst $tblName = tblSchema.name();\n\t\t\tif (selectAll_list.length && !selectAll_list.includes($tblName) && !selectAll_list.includes(undefined)) continue;\n\t\t\tconst tblSchema_json = tblSchema.jsonfy(); // Use jsonfy() to retain prefix and name diffs\n\t\t\tif (dbSchema.table($tblName)/*from fields derivation step above*/) {\n\t\t\t\tfor (const colSchema_json of tblSchema_json.columns) {\n\t\t\t\t\tdbSchema.table($tblName).column(colSchema_json);\n\t\t\t\t}\n\t\t\t} else dbSchema.table(tblSchema_json);\n\t\t}\n\t\treturn dbSchema;\n\t}\n\n\t#schemaCaptureCache = new Map;\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'TABLE_SCHEMA') return;\n\t\tif (requestName === 'DATABASE_SCHEMA') {\n\t\t\tconst derivationLevel = this.orderBy()?.contains(requestSource) ? 1 : 0;\n\t\t\tif (!this.#schemaCaptureCache.has(derivationLevel)) {\n\t\t\t\tthis.#schemaCaptureCache.set(derivationLevel, this.schema({ derivationLevel }));\n\t\t\t}\n\t\t\treturn this.#schemaCaptureCache.get(derivationLevel);\n\t\t}\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\t#generatedJoins = new Map;\n\tresolvePath(path, options) {\n\t\tif (!(path instanceof PathRight)) throw new Error(`Can't desugar path: ${path}. Must be instance of PathRight.`);\n\t\tconst [keyLhs_ident, targetTableIdent, keyRhs_ident] = path.plot(true/*fullyQualified*/);\n\t\t// Relationship details, to begin\n\t\tconst relationID = `$relation::${[keyLhs_ident, targetTableIdent, keyRhs_ident].join(':')}${path.rhs() instanceof JsonAgg ? '/g' : ''}`;\n\t\t// The JOIN, next\n\t\tif (!this.#generatedJoins.has(relationID)) {\n\t\t\tconst keyRhsMask = `$key::${(0 | Math.random() * 9e6).toString(36)}`;\n\t\t\tconst clause = new JoinClause(this);\n\t\t\tclause.type('LEFT_JOIN').expr(\n\t\t\t\tq => q.select(q => q.expr(keyRhs_ident.jsonfy()).as(keyRhsMask)).from([targetTableIdent.prefix(), targetTableIdent.name()])\n\t\t\t).as(relationID).on(on => on.equals([relationID, keyRhsMask], keyLhs_ident.jsonfy()));\n\t\t\tif (path.rhs() instanceof JsonAgg) { clause.expr().expr().groupBy(keyRhsMask); }\n\t\t\tthis.#generatedJoins.set(relationID, clause);\n\t\t}\n\t\tconst pathID = `$path::${(0 | Math.random() * 9e6).toString(36)}`;\n\t\tconst detailQ = q => q.expr(path.rhs().jsonfy()).as(pathID);\n\t\tthis.#generatedJoins.get(relationID).expr()/*SubQuery*/.expr()/*Select*/.fields().add(detailQ);\n\t\treturn {\n\t\t\tnodeName: ColumnRef.NODE_NAME,\n\t\t\tname: pathID,\n\t\t\tprefix: relationID,\n\t\t\tprettyName: path.prettyName(),\n\t\t};\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.joinClauses?.length) instance.joins(...json.joinClauses);\n\t\t\tif (json.whereClause) instance.where(json.whereClause);\n\t\t\tif (json.orderByClause) instance.orderBy(json.orderByClause);\n\t\t\tif (json.limitClause) instance.limit(json.limitClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options, jsonInCallback) {\n\t\treturn super.jsonfy(options, () => ({\n\t\t\t...(this.#joinClauses.length ? { joinClauses: this.#joinClauses.map(j => j.jsonfy(options)) } : {}),\n\t\t\t...(this.#whereClause ? { whereClause: this.#whereClause.jsonfy(options) } : {}),\n\t\t\t...(this.#orderByClause ? { orderByClause: this.#orderByClause.jsonfy(options) } : {}),\n\t\t\t...(this.#limitClause ? { limitClause: this.#limitClause.jsonfy(options) } : {}),\n\t\t\t...jsonInCallback(),\n\t\t}));\n\t}\n\n\tfinalizeJSON(json, options) {\n\t\tif (!this.#generatedJoins.size) {\n\t\t\treturn super.finalizeJSON(json, options);\n\t\t}\n\t\t// Derived joins need special rewrite on postgre updates and deletes\n\t\tconst rand = (0 | Math.random() * 9e6).toString(36);\n\t\tif (this.params.dialect === 'postgres' && this.NODE_NAME === 'UPDATE_STATEMENT') {\n\t\t\tconst pgGeneratedFromEntries = new Map;\n\t\t\tconst rederiveGeneratedJoinRefForPgUpdate = (columnRef) => {\n\t\t\t\treturn json.tables.reduce((prev, tbl) => {\n\t\t\t\t\tif (prev) return prev;\n\t\t\t\t\tconst tblRefOriginal = tbl.expr;\n\t\t\t\t\tconst tblAliasOriginal = tbl.alias || tbl.expr.name;\n\t\t\t\t\tconst colRefOriginal = columnRef.name;\n\t\t\t\t\tif (columnRef.prefix.name !== tblAliasOriginal) return;\n\t\t\t\t\tconst tblAliasRewrite = `${tblAliasOriginal}:${rand}`;\n\t\t\t\t\tconst colRefRewrite = `${colRefOriginal}:${rand}`;\n\t\t\t\t\tif (!pgGeneratedFromEntries.has(tblAliasOriginal)) {\n\t\t\t\t\t\tpgGeneratedFromEntries.set(tblAliasOriginal, {\n\t\t\t\t\t\t\ttblAliasOriginal,\n\t\t\t\t\t\t\ttblAliasRewrite,\n\t\t\t\t\t\t\tcolRefOriginal,\n\t\t\t\t\t\t\tcolRefRewrite,\n\t\t\t\t\t\t\ttable: { expr: tblRefOriginal },\n\t\t\t\t\t\t\talias: tblAliasRewrite,\n\t\t\t\t\t\t\tfields: []\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tpgGeneratedFromEntries.get(tblAliasOriginal).fields.push({\n\t\t\t\t\t\texpr: { name: colRefOriginal }, alias: colRefRewrite\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: colRefRewrite,\n\t\t\t\t\t\tprefix: { name: tblAliasRewrite }\n\t\t\t\t\t};\n\t\t\t\t}, null) || columnRef;\n\t\t\t};\n\t\t\tif (!json.joinClauses) json.joinClauses = [];\n\t\t\tfor (const [, join] of this.#generatedJoins) {\n\t\t\t\tconst joinJson = join.jsonfy(options);\n\t\t\t\tjoinJson.onClause.entries = joinJson.onClause.entries.map((c) => ({\n\t\t\t\t\t...c, rhs: rederiveGeneratedJoinRefForPgUpdate(c.rhs)\n\t\t\t\t}));\n\t\t\t\tjson.joinClauses.push(joinJson);\n\t\t\t}\n\t\t\tif (pgGeneratedFromEntries.size) {\n\t\t\t\tif (!json.postgresFromList) json.postgresFromList = [];\n\t\t\t\tif (!json.whereClause) json.whereClause = { nodeName: 'WHERE_CLAUSE', entries: [] };\n\t\t\t\tfor (const [, derivation] of pgGeneratedFromEntries) {\n\t\t\t\t\tjson.postgresFromList.push(\n\t\t\t\t\t\tTable.fromJSON(this, {\n\t\t\t\t\t\t\texpr: (q) => q.select(...derivation.fields).from(derivation.table),\n\t\t\t\t\t\t\talias: derivation.alias\n\t\t\t\t\t\t}).jsonfy(options),\n\t\t\t\t\t);\n\t\t\t\t\tjson.whereClause.entries.unshift(\n\t\t\t\t\t\tAssertion.fromJSON(this, {\n\t\t\t\t\t\t\toperator: '=',\n\t\t\t\t\t\t\tlhs: [derivation.tblAliasOriginal, derivation.colRefOriginal],\n\t\t\t\t\t\t\trhs: [derivation.tblAliasRewrite, derivation.colRefRewrite]\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.params.dialect === 'postgres' && this.NODE_NAME === 'DELETE_STATEMENT') {\n\t\t\tconst tblRefOriginal = json.table.expr;\n\t\t\tconst tblAliasOriginal = json.table.alias || json.table.expr.name;\n\t\t\tconst tblAliasRewrite = `${tblAliasOriginal}:${rand}`;\n\t\t\tconst whereClauseOriginal = json.whereClause;\n\t\t\tconst pk = this.from().schema().primaryKey().columns()[0];\n\t\t\tjson.table = {\n\t\t\t\texpr: tblRefOriginal,\n\t\t\t\talias: tblAliasRewrite\n\t\t\t};\n\t\t\tjson.whereClause = Assertion.fromJSON(this, {\n\t\t\t\toperator: 'IN',\n\t\t\t\tlhs: {\n\t\t\t\t\tname: pk,\n\t\t\t\t\tprefix: { name: tblAliasRewrite }\n\t\t\t\t},\n\t\t\t\trhs: (q) => {\n\t\t\t\t\tq.select({ name: pk, })\n\t\t\t\t\t.from({ expr: tblRefOriginal, alias: tblAliasOriginal })\n\t\t\t\t\t.where(whereClauseOriginal)\n\t\t\t\t\t.joins(...[...this.#generatedJoins].map(([, j]) => j.jsonfy(options)));\n\t\t\t\t}\n\t\t\t}).jsonfy(options);\n\t\t} else {\n\t\t\tif (!json.joinClauses) json.joinClauses = [];\n\t\t\tfor (const [, join] of this.#generatedJoins) {\n\t\t\t\tjson.joinClauses.push(join.jsonfy(options));\n\t\t\t}\n\t\t}\n\t\tthis.#generatedJoins.clear();\n\t\treturn super.finalizeJSON(json, options);\n\t}\n}", "import { DatabaseSchema } from './database/DatabaseSchema.js';\nimport { AbstractDiffableNode } from './abstracts/AbstractDiffableNode.js';\nimport { RootCDL } from './RootCDL.js';\n\nexport class RootSchema extends AbstractDiffableNode {\n\n\t#databases = [];\n\n\t[Symbol.iterator]() { return this.#databases[Symbol.iterator](); }\n\n\tget length() { return this.#databases.length; }\n\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'ROOT_SCHEMA') return this;\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\t/* -- SUBTREE I/O */\n\n\tdatabase(arg1, ...args) {\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst existing = this.#databases.find((db) => db.identifiesAs(arg1));\n\t\t\tif (!args.length) return existing;\n\t\t\tif (args[0] === false) {\n\t\t\t\tthis.#databases = this.#databases.filter((d) => d !== existing);\n\t\t\t\texisting?.bubble('DISCONNECTED');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\targ1 = { name: arg1, ...(typeof args[0] === 'object' ? args[0] : { tables: args[0] }) };\n\t\t}\n\t\tthis.#databases = this.$castInputs([arg1], DatabaseSchema, this.#databases, 'databases', null, (existing) => {\n\t\t\treturn this.#databases.find((db) => db.identifiesAs(existing.name()));\n\t\t});\n\t\treturn this;\n\t}\n\n\t/* -- TRAVERSALS */\n\n\tdatabases(asInstances = true) {\n\t\tif (asInstances) return this.#databases;\n\t\treturn this.#databases.map(db => db.name());\n\t}\n\n\ttables(asInstances = true) {\n\t\treturn this.#databases.reduce((tbls, db) => {\n\t\t\treturn tbls.concat(!asInstances ? db.tables(false).map(tbl => [db.name(), ...tbl]) : db.tables());\n\t\t}, []);\n\t}\n\n\tcolumns(asInstances = true) {\n\t\treturn this.#databases.reduce((cols, db) => {\n\t\t\treturn cols.concat(!asInstances ? db.columns(false).map(col => [db.name(), ...col]) : db.columns());\n\t\t}, []);\n\t}\n\n\tprimaryKeys(asInstances = true, deeply = true) {\n\t\treturn this.#databases.reduce((fks, db) => {\n\t\t\treturn fks.concat(!asInstances ? db.primaryKeys(false, deeply).map(pk => [db.name(), ...pk]) : db.primaryKeys(true, deeply));\n\t\t}, []);\n\t}\n\n\tforeignKeys(asInstances = true, deeply = true) {\n\t\treturn this.#databases.reduce((fks, db) => {\n\t\t\treturn fks.concat(!asInstances ? db.foreignKeys(false, deeply).map(fk => [db.name(), ...fk]) : db.foreignKeys(true, deeply));\n\t\t}, []);\n\t}\n\n\tuniqueKeys(asInstances = true, deeply = true) {\n\t\treturn this.#databases.reduce((fks, db) => {\n\t\t\treturn fks.concat(!asInstances ? db.uniqueKeys(false, deeply).map(uk => [db.name(), ...uk]) : db.uniqueKeys(true, deeply));\n\t\t}, []);\n\t}\n\n\tchecks(asInstances = true, deeply = true) {\n\t\treturn this.#databases.reduce((fks, db) => {\n\t\t\treturn fks.concat(!asInstances ? db.checks(false, deeply).map(ck => [db.name(), ...ck]) : db.checks(true, deeply));\n\t\t}, []);\n\t}\n\n\t/* -- TRANSFORMS */\n\n\trenderCDL(rootCDL, options) {\n\t\tconst $options = options;\n\t\tconst $$hasSeenRootCDL = new Set;\n\t\tconst $$transforms = new Map;\n\t\tconst $$additions = [];\n\t\t// ------------------------------------\n\t\t// -- NODE FINDER\n\t\tconst findDatabase = (name, assertExists = true, autoRehydrate = true) => {\n\t\t\tconst node = this.database(name);\n\t\t\tif ((!node || ($$transforms.has(node) && !$$transforms.get(node)/*dropped*/)) && assertExists) {\n\t\t\t\tthrow new Error(`Database \"${name}\" does not exist.`);\n\t\t\t}\n\t\t\tif (autoRehydrate && $$transforms.has(node)) return [node, node.constructor.fromJSON(node.contextNode.clone(), $$transforms.get(node))];\n\t\t\treturn [node];\n\t\t};\n\t\tconst getOptionsFor = (node) => {\n\t\t\tconst $$options = { ...$options, rootCDL: !$$hasSeenRootCDL.has(node) && rootCDL };\n\t\t\tif (!$$hasSeenRootCDL.has(node)) $$hasSeenRootCDL.add(node);\n\t\t\treturn $$options;\n\t\t};\n\t\t// -- ADD|MODIFY|CHANGE ACTION\n\t\tconst handleCreateCD = (cd) => {\n\t\t\tif (findDatabase(cd.argument().name(), false, false)[0]) {\n\t\t\t\tif (cd.hasFlag('IF_NOT_EXISTS')) return;\n\t\t\t\tthrow new Error(`Database \"${cd.argument()?.name()}\" already exists`);\n\t\t\t}\n\t\t\tlet $argument = cd.argument().jsonfy($options);\n\t\t\tif ($options.diff !== false) $argument = { ...$argument, status: 'new' };\n\t\t\t$$additions.push($argument);\n\t\t};\n\t\t// -- DROP ACTION\n\t\tconst handleDropCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findDatabase(cd.reference().name(), !cd.hasFlag('IF_EXISTS'), $options.diff !== false);\n\t\t\tif (refNode) $$transforms.set(refNode, $options.diff === false ? undefined : { ...($refNode || refNode).jsonfy($options), status: 'obsolete' });\n\t\t};\n\t\t// -- RENAME\n\t\tconst handleRenameCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findDatabase(cd.reference().name());\n\t\t\tconst $argument = this.diffMergeJsons(($refNode || refNode).jsonfy(getOptionsFor(refNode)), cd.argument().jsonfy($options), $options);\n\t\t\t$$transforms.set(refNode, $argument);\n\t\t};\n\t\t// -- ALTER ACTION\n\t\tconst handleAlterCD = (cd) => {\n\t\t\tconst [refNode, $refNode] = findDatabase(cd.reference().name());\n\t\t\tconst $json = ($refNode || refNode).renderCDL(cd.argument(), getOptionsFor(refNode));\n\t\t\t$$transforms.set(refNode, $json);\n\t\t};\n\t\t// -- NODE RENDERING\n\t\tconst renderNode = (db) => {\n\t\t\tlet $json;\n\t\t\tconst $$options = getOptionsFor(db);\n\t\t\tif ($$transforms.has(db)) {\n\t\t\t\t// Ignore physically dropped\n\t\t\t\tif (!$$transforms.get(db)) return;\n\t\t\t\tif (/*$$options.cascade && */$$options.rootCDL) {\n\t\t\t\t\t$json = db.constructor.fromJSON(this, $$transforms.get(db)).jsonfy($$options);\n\t\t\t\t} else $json = $$transforms.get(db);\n\t\t\t} else $json = db.jsonfy($$options);\n\t\t\treturn $json;\n\t\t};\n\t\t// -- SUBTREE RENDERING\n\t\t// ------------------------------------\n\t\t// -- MAIN CDL RUNNER\n\t\tfor (const cd of rootCDL) {\n\t\t\tif (cd.CLAUSE === 'CREATE') {\n\t\t\t\thandleCreateCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'DROP') {\n\t\t\t\thandleDropCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'RENAME') {\n\t\t\t\thandleRenameCD(cd);\n\t\t\t} else if (cd.CLAUSE === 'ALTER') {\n\t\t\t\thandleAlterCD(cd);\n\t\t\t} else throw new Error(`Unsupported operation: ${cd.CLAUSE} ${cd.KIND}`);\n\t\t}\n\t\treturn this.renderNormalized(this.#databases, renderNode).concat($$additions);\n\t}\n\n\trenderNormalized(dbs, renderCallback, forceNormalize = false) {\n\t\tconst $matches = (dbName, prefix) => this.$eq(dbName, prefix?.name || prefix, 'ci');\n\t\tconst [$$jsons, $$relocatingTables] = dbs.reduce(([$jsons, $relocatingTables], db) => {\n\t\t\tlet $json = renderCallback(db);\n\t\t\t// Physically move tables?\n\t\t\tif ($json) {\n\t\t\t\tlet _;\n\t\t\t\t// Exclude tables pointing to other DB\n\t\t\t\t$json = {\n\t\t\t\t\t...$json,\n\t\t\t\t\ttables: $json.tables.reduce((tbls, tbl) => {\n\t\t\t\t\t\tif (tbl.prefix) {\n\t\t\t\t\t\t\tif ($matches(db.name(), tbl.prefix)) {\n\t\t\t\t\t\t\t\tif (!tbl.$prefix) ({ prefix: _, ...tbl } = tbl);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst targetDB = $jsons.find(dbJson => $matches(dbJson.name, tbl.prefix));\n\t\t\t\t\t\t\t\tif (targetDB) {\n\t\t\t\t\t\t\t\t\tif (!tbl.$prefix) ({ prefix: _, ...tbl } = tbl);\n\t\t\t\t\t\t\t\t\ttargetDB.tables.push(tbl);\n\t\t\t\t\t\t\t\t} else $relocatingTables.push({ db, tbl });\n\t\t\t\t\t\t\t\treturn tbls;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn tbls.concat(tbl);\n\t\t\t\t\t}, []),\n\t\t\t\t};\n\t\t\t\t// Include tables moving from other DBs\n\t\t\t\t$relocatingTables = $relocatingTables.reduce(($tbls, entry) => {\n\t\t\t\t\tlet $tbl = entry.tbl;\n\t\t\t\t\tif ($matches(db.name(), $tbl.prefix)) {\n\t\t\t\t\t\tif (!$tbl.$prefix) ({ prefix: _, ...$tbl } = $tbl);\n\t\t\t\t\t\t$json.tables.push($tbl);\n\t\t\t\t\t\treturn $tbls;\n\t\t\t\t\t}\n\t\t\t\t\treturn $tbls.concat(entry);\n\t\t\t\t}, []);\n\t\t\t}\n\t\t\treturn [$jsons.concat($json || []), $relocatingTables];\n\t\t}, [[], []]);\n\t\tif ($$relocatingTables.length) {\n\t\t\tif (forceNormalize) {\n\t\t\t\tfor (const { tbl } of $$relocatingTables) {\n\t\t\t\t\tlet $tbl = tbl, _;\n\t\t\t\t\tif (!$tbl.$prefix) ({ prefix: _, ...$tbl } = $tbl);\n\t\t\t\t\tconst targetDB = $$jsons.find(dbJson => $matches(dbJson.name, tbl.prefix));\n\t\t\t\t\tif (targetDB) {\n\t\t\t\t\t\ttargetDB.tables.push($tbl);\n\t\t\t\t\t} else $$jsons.push({\n\t\t\t\t\t\tname: tbl.prefix.name || tbl.prefix,\n\t\t\t\t\t\ttables: [$tbl],\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else throw new Error(`The following tables could not be moved to the implied target database: ${$$relocatingTables.map((entry) => `\"${entry.db.name()}\".\"${entry.tbl.name}\" -> \"${entry.tbl.prefix.name || entry.tbl.prefix}\".\"${entry.tbl.name}\"`).join('\", \"')}`);\n\t\t}\n\t\treturn $$jsons;\n\t}\n\n\tgenerateCDL(options = {}, kind = 'SCHEMA'/*or: DATABASE*/) {\n\t\tconst rootCDL = RootCDL.fromJSON(this, { actions: [] });\n\t\tfor (const db of this.#databases) {\n\t\t\tif (db.status() === 'new') {\n\t\t\t\trootCDL.add('CREATE', kind, (cd) => {\n\t\t\t\t\tcd.argument(db.jsonfy({ ...options, diff: false }));\n\t\t\t\t\tif (options.existsChecks) cd.withFlag('IF_NOT_EXISTS');\n\t\t\t\t});\n\t\t\t} else if (db.status() === 'obsolete') {\n\t\t\t\trootCDL.add('DROP', kind, (cd) => {\n\t\t\t\t\tcd.reference(db.name());\n\t\t\t\t\tif (options.cascadeRule) cd.withFlag(options.cascadeRule);\n\t\t\t\t\tif (options.existsChecks) cd.withFlag('IF_EXISTS');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst dbCDL = db.generateCDL(options);\n\t\t\t\tif (dbCDL.length) rootCDL.add('ALTER', kind, (cd) => {\n\t\t\t\t\tcd.reference(db.name());\n\t\t\t\t\tcd.argument(dbCDL);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn rootCDL;\n\t}\n\n\tgenerateDiff(nodeB, options) {\n\t\treturn this.diffMergeTrees(\n\t\t\tthis.#databases,\n\t\t\tnodeB.databases(),\n\t\t\t(a, b) => a.generateDiff(b, options),\n\t\t\toptions\n\t\t);\n\t}\n\n\t/* -- UTILS */\n\n\tdefaultDB() { return this.databases(false)[0]; }\n\n\tfindPrefix(name, defaultToFirst = false) {\n\t\tconst path = this.tables(false).find(tbl => tbl[1].toLowerCase() === name.toLowerCase())?.[0];\n\t\tif (!path && defaultToFirst) return this.defaultDB();\n\t\treturn path;\n\t}\n\n\t/* -- I/O */\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!Array.isArray(json)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tfor (const db of json) instance.database(db);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn this.renderNormalized(this.#databases, (db) => db.jsonfy(options), options.forceNormalize);\n\t}\n}", "import { AbstractNode } from '../AbstractNode.js';\n\t\t\nexport class Binding extends AbstractNode {\n\n\t#offset = 0;\n\t#value;\n\n\toffset(value) {\n\t\tif (!arguments.length) return this.#offset;\n\t\tif (typeof value !== 'number') throw new Error(`Offset must be a number`);\n\t\treturn (this.#offset = value, this);\n\t}\n\n\tvalue(value) {\n\t\tif (!arguments.length) return this.#value;\n\t\treturn (this.#value = value, this);\n\t}\n\n\tstatic get expose() {\n\t\treturn { binding: (context, value) => (new this(context)).value(value), };\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.nodeName && typeof json?.offset !== 'number') return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.offset) instance.offset(json.offset);\n\t\t\tif (json.value !== undefined) instance.value(json.value);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\toffset: this.#offset,\n\t\t\t...(this.#value !== undefined ? { value: this.#value } : {}),\n\t\t\t...jsonIn\n\t\t});\n\t}\n\n\tstatic parse(context, expr) {\n\t\tconst notation = (context?.params?.inputDialect || context?.params?.dialect) === 'mysql' ? '?' : '$';\n\t\tconst [ match, offset ] = (new RegExp(`^\\\\${ notation }(\\\\d)$`)).exec(expr) || [];\n\t\tif (!match) return;\n\t\treturn (new this(context)).offset(parseInt(offset));\n\t}\n\t\n\tstringify() { return this.params.dialect === 'mysql' ? '?' : `$${ this.#offset }`; }\n}\n", "import { Lexer } from \"./Lexer.js\";\r\nimport { AbstractStatementNode } from \"./AbstractStatementNode.js\";\r\nimport { RootSchema } from \"../lang/ddl/RootSchema.js\";\r\nimport { Binding } from \"./expr/Binding.js\";\r\n\r\nexport const AbstractNonDDLStatement = Class => class extends AbstractStatementNode(Class) {\r\n\r\n\t#uuid;\r\n\t#queryBindings = new Set;\r\n\r\n\tget uuid() {\r\n\t\tif (!this.#uuid) this.#uuid = `scope_${(0 | Math.random() * 9e6).toString(36)}`;\r\n\t\treturn this.#uuid;\r\n\t}\r\n\r\n\tget queryBindings() { return [...this.#queryBindings].sort((a, b) => b.offset() === 0 || b.offset() > a.offset() ? -1 : 1); }\r\n\r\n\tget hasPaths() { return [...this.querySugars].some(s => s.isPath); }\r\n\r\n\t$bubble(eventType, eventSource) {\r\n\t\tif (['CONNECTED', 'DISCONNECTED'].includes(eventType) && [Binding].some(x => eventSource instanceof x)) {\r\n\t\t\tif (eventType === 'DISCONNECTED') this.#queryBindings.delete(eventSource);\r\n\t\t\telse this.#queryBindings.add(eventSource);\r\n\t\t\t// return; Don't bubble beyond this point. think dimensional queries\r\n\t\t}\r\n\t\treturn super.$bubble(eventType, eventSource);\r\n\t}\r\n\r\n\t$capture(requestName, requestSource) {\r\n\t\tconst result = super.$capture(requestName, requestSource);\r\n\t\tif (requestName === 'ROOT_SCHEMA' && !result) {\r\n\t\t\treturn RootSchema.fromJSON(this, []);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\trenderBindings(values) {\r\n\t\tif (!Array.isArray(values)) throw new Error(`Values must be an array`);\r\n\t\tconst queryBindings = [...this.#queryBindings];\r\n\t\tfor (let i = 0; i < values.length; i++) {\r\n\t\t\tconst bindings = queryBindings.filter(b => b.offset() === i+1);\r\n\t\t\tif (!bindings.length) throw new Error(`No bindings exists at offset #${i}`);\r\n\t\t\tbindings.forEach(b => b.value(values[i]));\r\n\t\t}\r\n\t}\r\n\r\n\tnormalizeBindings(dedupe = false) {\r\n\t\tconst queryBindings = [...this.#queryBindings];\r\n\t\tif (!dedupe) {\r\n\t\t\tqueryBindings.forEach((b, i) => b.offset(i+1));\r\n\t\t\treturn queryBindings;\r\n\t\t}\r\n\t\tlet redundants = new Map, $offset = 1;\r\n\t\tfor (const b of queryBindings) {\r\n\t\t\tif (b.offset() === 0 || !redundants.has(b.offset())) {\r\n\t\t\t\tconst newOffset = $offset++;\r\n\t\t\t\tredundants.set(b.offset(), newOffset);\r\n\t\t\t\tb.offset(newOffset);\r\n\t\t\t} else b.offset(redundants.get(b.offset())).withDetail('redundant', true);\r\n\t\t}\r\n\t\treturn queryBindings.filter(b => !b.getDetail('redundant'));\r\n\t}\r\n\t\r\n\tstatic mySubstitutePlaceholders(context, expr) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) !== 'mysql' || expr.indexOf('?') === -1) return expr;\r\n\t\treturn Lexer.split(expr, ['?'], { blocks: [] }).reduce((expr, chunk, i) => !expr ? chunk : expr + '?' + i + chunk, null);\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tif (json.uuid) instance.#uuid = json.uuid;\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options, jsonInCallback) {\r\n\t\tconst json = super.jsonfy(options, jsonInCallback);\r\n\t\treturn this.finalizeJSON(json, options);\r\n\t}\r\n\r\n\tfinalizeJSON(json, options) {\r\n\t\treturn {\r\n\t\t\t...(this.#uuid ? { uuid: this.#uuid } : {}),\r\n\t\t\t...json\r\n\t\t};\r\n\t}\r\n}\r\n", "import { LimitClause } from './LimitClause.js';\n\nexport class OffsetClause extends LimitClause {\n    static get CLAUSE() { return 'OFFSET'; }\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class GroupByClause extends AbstractNodeList {\n\tstatic get EXPECTED_TYPES() { return Exprs; }\n\tstatic get REGEX() { return 'GROUP\\\\s+BY'; }\n\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ clauseMatch, columnsSpec, withRollup ] = expr.match(new RegExp(`^${ this.REGEX }([\\\\s\\\\S]*)(\\\\s+WITH\\\\s+ROLLUP)?$`, 'i')) || [];\n\t\tif (!clauseMatch) return;\n\t\tconst instance = super.parse(context, columnsSpec, parseCallback);\n\t\tif (!instance) return;\n\t\tif (withRollup) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n\n\tstringify() { return !this.entries().length ? '' : ['GROUP BY', super.stringify()].concat(this.hasFlag('WITH_ROLLUP') ? 'WITH ROLLUP' : []).join(' '); }\n}", "import { Condition } from '../../expr/logic/Condition.js';\n\nexport class HavingClause extends Condition {\n    static get CLAUSE() { return 'HAVING'; }\n    static get minEntries() { return 1; }\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Window } from './Window.js';\n\nexport class WindowClause extends AbstractNodeList {\n\tstatic get EXPECTED_TYPES() { return [Window]; }\n\tstatic get CLAUSE() { return 'WINDOW'; }\n}", "import { Lexer } from '../Lexer.js';\nimport { AbstractNode } from \"../AbstractNode.js\";\nimport { AbstractQueryStatement } from './AbstractQueryStatement.js';\nimport { AbstractNonDDLStatement } from '../AbstractNonDDLStatement.js';\nimport { OffsetClause } from './clauses/OffsetClause.js';\nimport { LimitClause } from './clauses/LimitClause.js';\nimport { WhereClause } from './clauses/WhereClause.js';\nimport { JoinClause } from './clauses/JoinClause.js';\nimport { OrderByClause } from './clauses/OrderByClause.js';\nimport { GroupByClause } from './clauses/GroupByClause.js';\nimport { HavingClause } from './clauses/HavingClause.js'\nimport { WindowClause } from './clauses/WindowClause.js';\nimport { FieldsSpec } from './clauses/FieldsSpec.js';\nimport { Table } from './clauses/Table.js';\n\nexport class SelectStatement extends AbstractQueryStatement(\n\tAbstractNonDDLStatement(AbstractNode)\n) {\n\tstatic get CLAUSE() { return 'SELECT'; }\n\n\t#fieldsSpec;\n\t#fromList = [];\n\t#groupByClause;\n\t#havingClause;\n\t#windowClause;\n\t#offsetClause;\n\t#unionClause;\n\n    get statementType() { return 'DQL'; }\n\n\tfields(...args) {\n\t\tif (!arguments.length) return this.#fieldsSpec;\n\t\tthis.#fieldsSpec = this.$castInputs(args, FieldsSpec, this.#fieldsSpec, 'fields_list', 'add');\n\t\treturn this;\n\t}\n\n\tfrom(...args) {\n\t\tif (!arguments.length) return this.#fromList;\n\t\tthis.#fromList = this.$castInputs(args, Table, this.#fromList, 'from_clause');\n\t\treturn this;\n\t}\n\n\ttables() { return this.#fromList; }\n\n\tgroupBy(...args) {\n\t\tif (!arguments.length) return this.#groupByClause;\n\t\tthis.#groupByClause = this.$castInputs(args, GroupByClause, this.#groupByClause, 'group_by_clause', 'add');\n\t\treturn this;\n\t}\n\n\thaving(...args) {\n\t\tif (!arguments.length) return this.#havingClause;\n\t\tthis.#havingClause = this.$castInputs(args, HavingClause, this.#havingClause, 'having_clause', 'add');\n\t\treturn this;\n\t}\n\n\twindow(...args) {\n\t\tif (!arguments.length) return this.#windowClause;\n\t\tthis.#windowClause = this.$castInputs(args, WindowClause, this.#windowClause, 'window_clause', 'add');\n\t\treturn this;\n\t}\n\t\n\toffset(value) {\n\t\tif (!arguments.length) return this.#offsetClause;\n\t\tthis.#offsetClause = this.$castInputs([value], OffsetClause, this.#offsetClause, 'offset_clause', 'value');\n\t\treturn this;\n\t}\n\n\tunion(...args) {\n\t\tif (!arguments.length) return this.#unionClause;\n\t\tthis.#unionClause = this.$castInputs(args, this.constructor, this.#unionClause, 'union_clause', 'fields');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.fieldsSpec) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.fields(...[].concat(json.fieldsSpec));\n\t\t\tif (json.fromList?.length) for (const tbl of json.fromList) instance.from(tbl);\n\t\t\tif (json.groupByClause) instance.groupBy(json.groupByClause);\n\t\t\tif (json.havingClause) instance.having(json.havingClause);\n\t\t\tif (json.windowClause) instance.window(json.windowClause);\n\t\t\tif (json.offsetClause) instance.offset(json.offsetClause);\n\t\t\tif (json.unionClause) instance.union(json.unionClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, () => ({\n\t\t\tfieldsSpec: this.#fieldsSpec?.jsonfy(options),\n\t\t\t...(this.#fromList.length ? { fromList: this.#fromList.map((t) => t.jsonfy(options)) } : {}),\n\t\t\t...(this.#groupByClause ? { groupByClause: this.#groupByClause.jsonfy(options) } : {}),\n\t\t\t...(this.#havingClause ? { havingClause: this.#havingClause.jsonfy(options) } : {}),\n\t\t\t...(this.#windowClause ? { windowClause: this.#windowClause.jsonfy(options) } : {}),\n\t\t\t...(this.#offsetClause ? { offsetClause: this.#offsetClause.jsonfy(options) } : {}),\n\t\t\t...(this.#unionClause ? { unionClause: this.#unionClause.jsonfy(options) } : {}),\n\t\t\t...jsonIn\n\t\t}));\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, allOrDistinct, body ] = /^SELECT\\s+(ALL|DISTINCT)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\t// Tokenize\n\t\tconst clauses = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, join:JoinClause, where:WhereClause, groupBy:GroupByClause, having:HavingClause, window:WindowClause, orderBy:OrderByClause, limit:LimitClause, offset:OffsetClause, union:'UNION' };\n\t\tconst [ fieldsSpec, ...tokens ] = Lexer.split($body, Object.values(clauses).map(x => x.REGEX || x.CLAUSE && `${x.CLAUSE}(?!\\\\w)` || x), { useRegex: 'i', preserveDelims: true });\n\t\t// Parse\n\t\tinstance.fields(parseCallback(instance, fieldsSpec.trim(), [FieldsSpec]));\n\t\tmain: for (const token of tokens) {\n\t\t\tif (/^FROM/i.test(token)) {\n\t\t\t\tconst tbls = Lexer.split(token.replace(/FROM/i, ''), [',']).map(t => parseCallback(instance, t.trim(), [Table]));\n\t\t\t\tfor (const tbl of tbls) instance.from(tbl);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/^UNION/i.test(token)) {\n\t\t\t\tinstance.union(parseCallback(instance, token.replace(/UNION/i, '').trim(), [this]));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/^LIMIT.*,(?:\\s+)?\\d$/i.test(token)) {\n\t\t\t\tconst [ offset, limit ] = token.match(/(\\d+)(?:\\s+)?,(?:\\s+)?(\\d+)$/);\n\t\t\t\ttokens.push(`LIMIT ${ limit }`, `OFFSET ${ offset }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const verb in clauses) {\n\t\t\t\tconst node = clauses[verb].parse?.(instance, token.trim(), parseCallback);\n\t\t\t\tif (node) {instance[verb](node); continue main; }\n\t\t\t}\n\t\t}\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = ['SELECT'];\n\t\tif (this.getFlag().length) sql.push(this.getFlag().map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.#fieldsSpec);\n\t\tif (this.#fromList.length) sql.push('FROM', this.#fromList.join(', '));\n\t\tsql.push(...this.joins(), this.where(), this.#groupByClause, this.#havingClause, this.#windowClause, this.orderBy(), this.limit(), this.#offsetClause);\n\t\tif (this.#unionClause) sql.push(this.#unionClause);\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n}", "import { Lexer } from '../Lexer.js';\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport { AbstractNode } from '../AbstractNode.js';\r\nimport { Exprs } from './grammar.js';\r\n\r\nexport class Parens extends AbstractNode {\r\n\tstatic get EXPECTED_TYPES() { return Exprs; }\r\n\t\r\n\t#expr;\r\n\r\n\texpr(...args) {\r\n\t\tif (!arguments.length) return this.#expr;\r\n\t\tthis.#expr = this.$castInputs(args, this.constructor.EXPECTED_TYPES, this.#expr, 'parens_expr');\r\n\t\treturn this;\r\n\t}\r\n\r\n\texprUnwrapped() { return this.#expr instanceof Parens ? this.#expr.exprUnwrapped() : this.#expr; }\r\n\r\n\tstatic get expose() {\r\n\t\treturn { parens: (context, expr) => this.fromJSON(context, { expr: expr }), };\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!json?.expr) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.expr(json.expr);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\texpr: this.#expr?.jsonfy(options),\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')') || Lexer.match(expr, [' ']).length && Lexer.split(expr, []).length === 2/* recognizing the first empty slot */) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst $expr = parseCallback(instance, _unwrap(expr, '(', ')'), this.constructor.EXPECTED_TYPES);\r\n\t\treturn instance.expr($expr);\r\n\t}\r\n\t\r\n\tstringify() { return '(' + this.#expr.stringify() + ')'; }\r\n}", "import { SelectStatement } from './SelectStatement.js';\nimport { TableSchema } from '../ddl/table/TableSchema.js';\nimport { Parens } from '../expr/Parens.js';\n\nexport class SubQuery extends Parens {\n\tstatic get EXPECTED_TYPES() { return [SelectStatement]; }\n\n\tselect(...fieldsSpec) { return this.expr({ fieldsSpec }).expr(); }\n\n\tstatic get expose() { return }\n\n\tschema() {\n\t\tconst tblSchema = TableSchema.fromJSON(this, { name: '', columns: [] });\n\t\tconst columnSchemas = this.expr().schema({ derivationLevel: 'SELECT_LIST_ONLY' })/*DatabaseSchema*/.columns() || [];\n\t\tfor (const colSchema of columnSchemas) tblSchema.column({ ...colSchema.jsonfy() });\n\t\treturn tblSchema;\n\t}\n\t\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.expr || !json?.expr?.fieldsSpec) return;\n\t\treturn super.fromJSON(context, json, callback);\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tif (!/\\(\\s*SELECT\\s+/i.test(expr)) return;\n\t\treturn super.parse(context, expr, parseCallback);\n\t}\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractNode } from '../../AbstractNode.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class WhenClause extends AbstractNode {\r\n\t\r\n\t#when;\r\n\t#then;\r\n\r\n\twhen(value) {\r\n\t\tif (!arguments.length) return this.#when;\r\n\t\tthis.#when = this.$castInputs([value], Exprs, this.#when, 'when_clause');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthen(value) {\r\n\t\tif (!arguments.length) return this.#then;\r\n\t\tthis.#then = this.$castInputs([value], Exprs, this.#then, 'then_clause');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\twhen: (context, when) => this.fromJSON(context, { when }),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!json?.when) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.when(json.when).then(json.then);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\twhen: this.#when?.jsonfy(options),\r\n\t\t\tthen: this.#then?.jsonfy(options),\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [ clauseMatch, $expr ] = expr.match(new RegExp(`^WHEN([\\\\s\\\\S]*)$`, 'i')) || [];\r\n\t\tif (!clauseMatch) return;\r\n\t\tconst tokens = Lexer.split($expr, [`\\\\s+THEN\\\\s+`], { useRegex: 'i' });\r\n\t\tif (tokens.length !== 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst [when, then] = tokens.map($expr => parseCallback(instance, $expr.trim()));\r\n\t\treturn instance.when(when).then(then);\r\n\t}\r\n\t\r\n\tstringify() { return `WHEN ${ this.#when } THEN ${ this.#then }`; }\r\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractNode } from '../../AbstractNode.js';\r\nimport { WhenClause } from './WhenClause.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class CaseConstruct extends AbstractNode {\r\n\t\r\n\t#switchExpr;\r\n\t#cases = [];\r\n\t#defaultExpr;\r\n\r\n\tswitchExpr(switchExpr) {\r\n\t\tif (!arguments.length) return this.#switchExpr;\r\n\t\tthis.#switchExpr = this.$castInputs([switchExpr], Exprs, this.#switchExpr, 'switchExpr');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcases(...args) {\r\n\t\tif (!arguments.length) return this.#cases.slice();\r\n\t\tthis.#cases = this.$castInputs(args, WhenClause, this.#cases, 'cases');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdefault(defaultExpr) {\r\n\t\tif (!arguments.length) return this.#defaultExpr;\r\n\t\tif (!this.#cases.length) throw new Error(`A \"default\" expression cannot come before \"case\" clauses.`);\r\n\t\tthis.#defaultExpr = this.$castInputs([defaultExpr], Exprs, this.#defaultExpr, 'defaultExpr');\r\n\t\treturn this;\r\n\t}\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\tswitch: (context, switchExpr) => this.fromJSON(context, { switchExpr, cases: [] }),\r\n\t\t\tcases: (context, ...cases) => this.fromJSON(context, { cases }),\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (!Array.isArray(json?.cases) || Object.keys(json).filter((k) => !['nodeName', 'switchExpr', 'cases', 'defaultExpr'].includes(k)).length) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tif (json.switchExpr) instance.switchExpr(json.switchExpr);\r\n\t\t\tinstance.cases(...json.cases);\r\n\t\t\tif (json.defaultExpr) instance.default(json.defaultExpr);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tswitchExpr: this.#switchExpr?.jsonfy(options),\r\n\t\t\tcases: this.#cases.map(c => c.jsonfy(options)),\r\n\t\t\tdefaultExpr: this.#defaultExpr?.jsonfy(options),\r\n\t\t\t...jsonIn,\r\n\t\t});\r\n\t}\r\n\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [caseMatch,caseConstruct] = expr.match(/^CASE\\s+([\\s\\S]*)\\s+END(\\s+CASE)?$/i) || [];\r\n\t\tif (!caseMatch) return;\r\n\t\tconst { tokens: [ switchExpr, ...assertions ], matches: clauses } = Lexer.lex(caseConstruct, ['WHEN','ELSE'], { useRegex: 'i', preserveDelims: true });\r\n\t\tconst instance = new this(context);\r\n\t\t// Has given value?\r\n\t\tif (switchExpr.trim()) instance.switchExpr(parseCallback(instance, switchExpr.trim()));\r\n\t\t// On to the cases\r\n\t\tfor (const clause of clauses) {\r\n\t\t\tconst assertStmt = assertions.shift();\r\n\t\t\tif (/ELSE/i.test(clause)) {\r\n\t\t\t\tinstance.default(parseCallback(instance, assertStmt.replace(/ELSE/i, '').trim()));\r\n\t\t\t} else if (/WHEN/i.test(clause)) {\r\n\t\t\t\tinstance.cases(parseCallback(instance, assertStmt.trim(), [WhenClause]));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Can't have multiple \"${ clause }\" clauses in a CASE construct.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tstringify() {\r\n\t\tconst sql = [];\r\n\t\tif (this.#switchExpr) sql.push(this.#switchExpr);\r\n\t\tsql.push(...this.#cases);\r\n\t\tif (this.#defaultExpr) sql.push('ELSE', this.#defaultExpr);\r\n\t\treturn `CASE ${ sql.join(' ') } END${ this.params.dialect === 'mysql' ? ' CASE' : '' }`;\r\n\t}\r\n}", "import { AbstractNodeList } from '../abstracts/AbstractNodeList.js';\nimport { Exprs } from '../grammar.js';\n\nexport class Array extends AbstractNodeList {\n    static get EXPECTED_TYPES() { return Exprs; }\n    static get CLAUSE() { return 'ARRAY'; }\n    static get TAGS() { return ['[', ']']; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\tarray: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n}", "import { AbstractOperator1Expr } from '../abstracts/AbstractOperator1Expr.js';\r\n\r\nexport class StrJoin extends AbstractOperator1Expr {\r\n\tstatic get OPERATORS() { return ['||']; }\r\n\r\n\tstatic get expose() {\r\n\t\treturn { join: (context, ...entries) => this.fromJSON(context, { operator: '||', entries }), };\r\n\t}\r\n}\r\n", "import { AbstractOperator1Expr } from '../abstracts/AbstractOperator1Expr.js';\r\n\r\nexport class Math extends AbstractOperator1Expr {\r\n    static get OPERATORS() { return ['+', '-', '*', '/']; }\r\n\t \r\n\tstatic get expose() {\r\n\t\treturn {\r\n            sum: (context, ...entries) => entries.length > 1/*Particularly to disambiguate with aggr.sum()*/ && this.fromJSON(context, { operator: '+', entries }),\r\n\t\t    sub: (context, ...entries) => this.fromJSON(context, { operator: '-', entries }),\r\n\t\t    'times|tms': (context, ...entries) => this.fromJSON(context, { operator: '*', entries }),\r\n\t\t    div: (context, ...entries) => this.fromJSON(context, { operator: '/', entries }),\r\n        };\r\n    }\r\n}", "import { AbstractNode } from '../../AbstractNode.js';\r\n\r\nexport class Bool extends AbstractNode {\r\n\r\n\t#value;\r\n\t\r\n\tvalue(value) {\r\n\t\tif (!arguments.length) return this.#value;\r\n\t\treturn (this.#value = value, this);\r\n\t}\r\n\r\n\tidentifiesAs(value) { return value === this.#value || super.identifiesAs(value); }\r\n\r\n\tstatic get expose() {\r\n\t\treturn {\r\n\t\t\ttrue: context => this.fromJSON(context, { value: true }),\r\n\t\t\tfalse: context => this.fromJSON(context, { value: false }),\r\n\t\t\tvalue: (context, value) => /^(TRUE|FALSE)$/i.test(value) && this.fromJSON(context, { value: /^TRUE$/i.test(value) })\r\n\t\t};\r\n\t}\r\n\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\tif (![true,false].includes(json?.value) || Object.keys(json).filter((k) => !['nodeName', 'value'].includes(k)).length) return;\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tinstance.value(json.value);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options = {}, jsonIn = {}) {\r\n\t\treturn super.jsonfy(options, {\r\n\t\t\tvalue: this.#value,\r\n\t\t\t...jsonIn\r\n\t\t});\r\n    }\r\n\t\r\n\tstatic parse(context, expr) {\r\n\t\tif (/^TRUE$/i.test(expr)) return (new this(context)).value(true);\r\n\t\tif (/^FALSE$/i.test(expr)) return (new this(context)).value(false);\r\n\t}\r\n\r\n\tstringify() { return `${ this.#value }`; }\r\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { RowSpec } from './RowSpec.js';\n\nexport class ValuesClause extends AbstractNodeList {\n    static get EXPECTED_TYPES() { return [RowSpec]; }\n    static get ARGS_DELEGATION() { return 'add'; }\n    static get CLAUSE() { return 'VALUES'; }\n\n\tstatic get expose() {\n\t\treturn {\n\t\t\tvalues: (context, ...entries) => this.fromJSON(context, { entries }),\n\t\t};\n\t}\n}", "import { ValuesClause } from './ValuesClause.js';\nimport { RowSpec } from './RowSpec.js';\n\nexport class RowSpecClause extends RowSpec {\n    static get MIN_ENTRIES() { return 0; }\n    static get CLAUSE() { return 'ROW'; }\n\n    stringify() {\n        const str = super.stringify();\n        return this.contextNode instanceof ValuesClause\n          ? `(${str})`\n          : str;\n    }\n}", "import { ValuesClause } from './ValuesClause.js';\n\nexport class ValuesSubClause extends ValuesClause {\n    static get TAGS() { return ['(', ')']; }\n}", "import { _isObject } from '@webqit/util/js/index.js';\nimport { Binding } from './Binding.js';\n\t\t\nexport class ForeignBinding extends Binding {\n\n\t#resolutionPath = [];\n\n\tget resolutionPath() { return this.#resolutionPath.slice(); }\n\n\tget isForeign() { return true; }\n\n\tstatic get expose() { return {}; }\n\n\tresolve(sourceQuery, resultData) {\n\t\tif (!['INSERT_STATEMENT', 'UPSERT_STATEMENT', 'UPDATE_STATEMENT'].includes(sourceQuery?.NODE_NAME)) throw new Error(`Source query must be an INSERT, UPSERT, or UPDATE statement`);\n\t\tif (this.#resolutionPath[0] !== sourceQuery.uuid) return;\n\t\tif (!Array.isArray(resultData)) throw new Error(`Input source must be an array`);\n\t\tif (!_isObject(resultData[this.#resolutionPath[1]])) throw new Error(`Input source does not have an object at: #${this.resolutionPath[1]}`);\n\t\tconst value = resultData[this.#resolutionPath[1]][this.#resolutionPath[2]];\n\t\tif (!value) throw new Error(`Input source does not have a value at: [${this.resolutionPath}]`);\n\t\treturn this.value(value);\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!Array.isArray(json?.resolutionPath) || json.resolutionPath.length !== 3) return;\n\t\treturn super.fromJSON(context, { offset: 0/*just default*/, ...json }, (instance) => {\n\t\t\tinstance.#resolutionPath = json.resolutionPath.slice();\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, {\n\t\t\tresolutionPath: this.#resolutionPath.slice(),\n\t\t\t...jsonIn,\n\t\t});\n\t}\n\t\n\tstringify() {\n\t\tif (this.value()) return super.stringify();\n\t\treturn this.params.dialect === 'mysql' ? `$${ this.#resolutionPath.join('.') }` : `$${ this.#resolutionPath.join('.') }`;\n\t}\n}\n", "import { SubQuery } from '../dql/SubQuery.js';\r\nimport { PathRight } from './path/PathRight.js';\r\nimport { CaseConstruct } from './logic/CaseConstruct.js';\r\nimport { Assertion } from './logic/Assertion.js';\r\nimport { Condition } from './logic/Condition.js';\r\nimport { JsonPath } from './json/JsonPath.js';\r\nimport { JsonAgg } from './json/JsonAgg.js';\r\nimport { JsonObjectSpec } from './json/JsonObjectSpec.js';\r\nimport { JsonArraySpec } from './json/JsonArraySpec.js';\r\nimport { Array } from './types/Array.js';\r\nimport { StrJoin } from './types/StrJoin.js';\r\nimport { Math } from './operators/Math.js';\r\nimport { Aggr } from './functions/Aggr.js';\r\nimport { Fn } from './functions/Fn.js';\r\nimport { Bool } from './types/Bool.js';\r\nimport { Json } from './types/Json.js';\r\nimport { Str } from './types/Str.js';\r\nimport { Num } from './types/Num.js';\r\nimport { TypeCast } from './types/TypeCast.js';\r\nimport { ColumnRef } from './refs/ColumnRef.js';\r\nimport { Literal } from './Literal.js';\r\nimport { Binding } from './Binding.js';\r\nimport { Parens } from './Parens.js';\r\nimport { RowSpec } from '../dml/clauses/RowSpec.js';\r\nimport { RowSpecClause } from '../dml/clauses/RowSpecClause.js';\r\nimport { ValuesSubClause } from '../dml/clauses/ValuesSubClause.js';\r\nimport { ForeignBinding } from './ForeignBinding.js';\r\n\r\nexport const Exprs = [\r\n\tSubQuery,\r\n\t// Expr\r\n\tCaseConstruct,\r\n\t// Operators\r\n\tStrJoin,\r\n\tCondition, // Must come before Assertion; think id = 1 or id = 2\r\n\tAssertion, // Must come before PathRight; think a ~> b IS NOT NULL\r\n\tPathRight,\r\n\tJsonPath,\r\n\tMath, // Must come after Assertion\r\n\t// Non-operators\r\n\tRowSpec, // Must come before Parens\r\n\tArray,\r\n\tParens,\r\n\tRowSpecClause,\r\n\tValuesSubClause,\r\n\tJsonAgg,\r\n\tTypeCast, // After anything with operators, but before function types; think CAST(c as text) vs CAST()\r\n\tAggr,\r\n\tFn,\r\n\tBool,\r\n\tJson,\r\n\tNum,\r\n\tStr,\r\n\t// Non-primitives\r\n\tJsonArraySpec,\r\n\tJsonObjectSpec,\r\n\t// Other\r\n\tBinding,\r\n\tForeignBinding,\r\n\t// When not all above\r\n\tColumnRef,\r\n\t// Lastly\r\n\tLiteral,\r\n];\r\n", "import { AbstractAliasableExpr } from '../../expr/abstracts/AbstractAliasableExpr.js';\nimport { Exprs } from '../../expr/grammar.js';\n\nexport class Field extends AbstractAliasableExpr {\n    static get EXPECTED_TYPES() { return Exprs; }\n}", "import { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Field } from './Field.js';\n\nexport class FieldsSpec extends AbstractNodeList {\n    static get EXPECTED_TYPES() { return [Field]; }\n}", "import { FieldsSpec } from '../../dql/clauses/FieldsSpec.js';\n\nexport class ReturningClause extends FieldsSpec {\n    static get CLAUSE() { return 'RETURNING'; }\n}", "import { ReturningClause } from './clauses/ReturningClause.js';\r\nimport { AbstractNonDDLStatement } from '../AbstractNonDDLStatement.js';\r\nimport { AbstractNode } from \"../AbstractNode.js\";\r\n\r\nexport class AbstractDMLStatement extends AbstractNonDDLStatement(AbstractNode) {\r\n    \r\n    #returningClause;\r\n\r\n\tget statementType() { return 'DML'; }\r\n\r\n\treturning(...args) {\r\n\t\tif (!arguments.length) return this.#returningClause;\r\n\t\tthis.#returningClause = this.$castInputs(args, ReturningClause, this.#returningClause, 'returning_clause', 'add');\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tstatic fromJSON(context, json, callback = null) {\r\n\t\treturn super.fromJSON(context, json, (instance) => {\r\n\t\t\tif (json.returningClause) instance.returning(json.returningClause);\r\n\t\t\tcallback?.(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tjsonfy(options, jsonInCallback) {\r\n\t\treturn super.jsonfy(options, () => ({\r\n\t\t\t...(this.#returningClause ? { returningClause: this.#returningClause.jsonfy(options) } : {}),\r\n\t\t\t...jsonInCallback(),\r\n\t\t}));\r\n\t}\r\n}\r\n", "import { Lexer } from '../Lexer.js';\nimport { AbstractDMLStatement } from \"./AbstractDMLStatement.js\";\nimport { AbstractQueryStatement } from '../dql/AbstractQueryStatement.js';\nimport { ReturningClause } from './clauses/ReturningClause.js';\nimport { LimitClause } from '../dql/clauses/LimitClause.js';\nimport { WhereClause } from '../dql/clauses/WhereClause.js';\nimport { JoinClause } from '../dql/clauses/JoinClause.js';\nimport { OrderByClause } from '../dql/clauses/OrderByClause.js';\nimport { Table } from '../dql/clauses/Table.js';\nimport { Identifier } from '../expr/Identifier.js';\n\nexport class DeleteStatement extends AbstractQueryStatement(AbstractDMLStatement) {\n\tstatic get CLAUSE() { return 'DELETE'; }\n\t \n\t#mysqlDeleteList = [];\n\t#table;\n\t#postgresUsingList = [];\n\n\tdelete(...tables) {\n\t\tif (!arguments.length) return this.#mysqlDeleteList;\n\t\tthis.#mysqlDeleteList = this.$castInputs(tables, Identifier, this.#mysqlDeleteList, 'delete_list');\n\t\treturn this;\n\t}\n\n\tfrom(table) {\n\t\tif (!arguments.length) return this.#table;\n\t\tthis.#table = this.$castInputs([table], Table, this.#table, 'from_clause', 'expr');\n\t\treturn this;\n\t}\n\n\tusing(...tables) {\n\t\tif (!arguments.length) return this.#postgresUsingList;\n\t\tthis.#postgresUsingList = this.$castInputs(tables, Table, this.#postgresUsingList, 'using_clause', 'expr');\n\t\treturn this;\n\t}\n\n\ttables() {\n\t\tconst tables = this.#table && [this.#table] || [];\n\t\tif (this.#table && this.#postgresUsingList.length) {\n\t\t\t// DELETE FROM table1 AS t1 USING table1 -> same\n\t\t\t// DELETE FROM table1 USING table1 AS t1 -> same\n\t\t\t// DELETE FROM table1 AS t1 USING table1 AS t11 -> not same\n\t\t\ttables.push(...this.#postgresUsingList.filter(t => !t.expr().identifiesAs(this.#table.expr().name()) || (t.alias() && this.#table.alias() && !this.$eq(t.alias(), this.#table.alias(), 'ci'))))\n\t\t}\n\t\treturn tables;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.table) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.mysqlDeleteList?.length) instance.delete(...json.mysqlDeleteList);\n\t\t\tinstance.from(json.table);\n\t\t\tif (json.postgresUsingList?.length) instance.using(...json.postgresUsingList);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, () => ({\n\t\t\t...(this.#mysqlDeleteList.length ? { mysqlDeleteList: this.#mysqlDeleteList.map(t => t.jsonfy(options)) } : {}),\n\t\t\ttable: this.#table?.jsonfy(options),\n\t\t\t...(this.#postgresUsingList.length ? { postgresUsingList: this.#postgresUsingList.map(t => t.jsonfy(options)) } : {}),\n\t\t\t...jsonIn\n\t\t}));\n\t}\n\t\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, mysqlIgnore, body ] = /^DELETE(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\t// Tokenize\n\t\tconst dialect = context?.params?.dialect || 'postgres';\n\t\tconst clauses = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, ...(dialect === 'postgres' ? { using: { backtest: '^(?!.*\\\\s+JOIN\\\\s+)', test: 'USING' } } : {}), ...(dialect === 'mysql' ? { join:JoinClause } : {}), where:WhereClause, ...(dialect === 'mysql' ? { orderBy:OrderByClause } : {}), limit:LimitClause, returning:ReturningClause };\n\t\tconst [ mysqlDeleteList = '', ...tokens ] = Lexer.split($body, Object.values(clauses).map(x => x.REGEX || x.CLAUSE && `${x.CLAUSE}(?!\\\\w)` || x), { useRegex: 'i', preserveDelims: true });\n\t\t// Parse\n\t\tif (mysqlDeleteList.trim()) instance.delete(...Lexer.split(mysqlDeleteList, [',']).map(t => parseCallback(instance, t.trim(), [Identifier])));\n\t\tmain: for (const token of tokens) {\n\t\t\tif (/^FROM/i.test(token)) {\n\t\t\t\tinstance.from(parseCallback(instance, token.replace(/FROM/i, '').trim(), [Table]));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (/^USING/i.test(token)) {\n\t\t\t\tinstance.using(...Lexer.split(token.replace(/USING/i, ''), [',']).map(t => parseCallback(instance, t.trim(), [Table])));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const verb in clauses) {\n\t\t\t\tconst node = clauses[verb].parse?.(instance, token.trim(), parseCallback);\n\t\t\t\tif (node) {instance[verb](node); continue main; }\n\t\t\t}\n\t\t}\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\treturn instance;\n\t}\n\t\n\tstringify() {\n\t\tconst sql = ['DELETE'];\n\t\tsql.push(...this.getFlag().map(s => s.replace(/_/g, ' ')));\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tsql.push(this.#mysqlDeleteList.join(', '));\n\t\t\tsql.push(`FROM ${ this.#table }`);\n\t\t\tsql.push(...this.joins(), this.where(), this.orderBy(), this.limit(), /*special support*/this.returning());\n\t\t} else {\n\t\t\tsql.push(`FROM ${ this.#table }`);\n\t\t\tif (this.#postgresUsingList.length) sql.push(`USING ${ this.#postgresUsingList.join(', ') }`);\n\t\t\tsql.push(this.where(), this.limit(), this.returning());\n\t\t}\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n}", "import { Lexer } from '../../Lexer.js';\r\nimport { AbstractOperator2Expr } from '../abstracts/AbstractOperator2Expr.js';\r\nimport { ColumnsSpec } from '../../dml/clauses/ColumnsSpec.js';\r\nimport { RowSpec } from '../../dml/clauses/RowSpec.js';\r\nimport { PathRight } from '../path/PathRight.js';\r\nimport { ColumnRef } from '../refs/ColumnRef.js';\r\nimport { Exprs } from '../grammar.js';\r\n\r\nexport class Assignment extends AbstractOperator2Expr {\r\n    static get OPERATORS() { return ['=']; }\r\n    static get LHS_TYPES() { return [ColumnsSpec, PathRight, ColumnRef]; }\r\n    static get RHS_TYPES() { return [RowSpec, ...Exprs]; }\r\n\t\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [lhs, rhs] = Lexer.split(expr, this.OPERATORS);\r\n        if (!rhs) return;\r\n\t\tconst instance = (new this(context)).operator('=');\r\n\t\tinstance.lhs(parseCallback(instance, lhs.trim(), this.LHS_TYPES));\r\n\t\tinstance.rhs(parseCallback(instance, rhs.trim(),  this.RHS_TYPES));\r\n\t\treturn instance;\r\n\t}\r\n}", "import { PathRight } from '../../expr/path/PathRight.js';\nimport { AbstractNodeList } from '../../expr/abstracts/AbstractNodeList.js';\nimport { Assignment } from '../../expr/operators/Assignment.js';\nimport { ColumnsSpec } from './ColumnsSpec.js';\nimport { RowSpec } from './RowSpec.js';\n\nexport class SetClause extends AbstractNodeList {\n\tstatic get EXPECTED_TYPES() { return [Assignment]; }\n\tstatic get CLAUSE() { return 'SET'; }\n\n\tcolumns() {\n\t\treturn this.entries().reduce((cols, assignment) => {\n\t\t\tif (assignment.lhs() instanceof ColumnsSpec) return cols.concat(assignment.lhs().entries());\n\t\t\treturn cols.concat(assignment.lhs());\n\t\t}, []);\n\t}\n\n\tvalues() {\n\t\treturn this.entries().reduce((vals, assignment) => {\n\t\t\tif (assignment.rhs() instanceof RowSpec) return vals.concat(assignment.rhs().entries());\n\t\t\treturn vals.concat(assignment.rhs());\n\t\t}, []);\n\t}\n\n\tadd(...args) {\n\t\treturn super.add(...args.map((arg) => Array.isArray(arg) ? { operands: arg } : arg));\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}, reducer = null) {\n\t\tif (!options.deSugar || !this.statementNode) return super.jsonfy(options, jsonIn, reducer);\n\t\treturn super.jsonfy(options, jsonIn, /*reducer*/assignment => {\n\t\t\t// Handle bare assignment exoressions\n\t\t\tif (assignment.lhs() instanceof PathRight) {\n\t\t\t\tconst [dimension, resolvedFk] = this.statementNode.createDimension(assignment.lhs(), options);\n\t\t\t\tconst fKBinding = dimension.offload(0, assignment.rhs());\n\t\t\t\tif (!resolvedFk) return;\n\t\t\t\treturn {\n\t\t\t\t\tnodeName: Assignment.NODE_NAME,\n\t\t\t\t\tlhs: resolvedFk,\n\t\t\t\t\trhs: fKBinding,\n\t\t\t\t\toperator: '='\n\t\t\t\t};\n\t\t\t}\n\t\t\t// Handle compound assignment exoressions\n\t\t\tif (assignment.lhs() instanceof ColumnsSpec) {\n\t\t\t\tconst $options = { ...options, explicitRowOffset: 0 };\n\t\t\t\tconst [reducedColumsSpec, [reducedRowSpec]] = this.statementNode.filterPayload(assignment.lhs(), [assignment.rhs()], $options);\n\t\t\t\tif (reducedColumsSpec.entries.length) return;\n\t\t\t\treturn {\n\t\t\t\t\tnodeName: Assignment.NODE_NAME,\n\t\t\t\t\tlhs: reducedColumsSpec,\n\t\t\t\t\trhs: reducedRowSpec,\n\t\t\t\t\toperator: '='\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n}", "import { PathRight } from '../expr/path/PathRight.js';\nimport { PathJunction } from '../expr/path/PathJunction.js';\nimport { ColumnsSpec } from './clauses/ColumnsSpec.js';\nimport { ColumnRef } from '../expr/refs/ColumnRef.js';\nimport { SetClause } from './clauses/SetClause.js';\nimport { ValuesSubClause } from './clauses/ValuesSubClause.js';\nimport { ReturningClause } from './clauses/ReturningClause.js';\nimport { ForeignBinding } from '../expr/ForeignBinding.js';\nimport { RowSpec } from './clauses/RowSpec.js';\nimport { Parens } from '../expr/Parens.js';\n\nexport const AbstractPayloadStatement = Class => class extends Class {\n\n\t#dependencies = [];\n\t#dependents = [];\n\t#setClause;\n\n\tget dependencies() { return this.#dependencies; }\n\tget dependents() { return this.#dependents; }\n\tget localBindings() { return this.queryBindings.filter(b => !b.isForeign); }\n\tget foreignBindings() { return this.queryBindings.filter(b => b.isForeign); }\n\n\tget isPayloadStatement() { return true; }\n\n\tset(...args) {\n\t\tif (!arguments.length) return this.#setClause;\n\t\tthis.#setClause = this.$castInputs(args, SetClause, this.#setClause, 'set', 'add');\n\t\treturn this;\n\t}\n\n\trenderForeignBindings(sourceQuery, resultData) {\n\t\tconst foreignBindings = this.foreignBindings;\n\t\treturn foreignBindings.filter(binding => binding.resolve(sourceQuery, resultData));\n\t}\n\n\tcreateExecutionPlan(recursionCallback) {\n\t\tconst preHook = async () => {\n\t\t\tif (!this.#dependencies.length) return;\n\t\t\tfor (const dependencyQuery of this.#dependencies) {\n\t\t\t\tconst dependencyData = await recursionCallback(dependencyQuery);\n\t\t\t\tthis.renderForeignBindings(dependencyQuery, dependencyData);\n\t\t\t}\n\t\t};\n\t\tconst postHook = async (resultData) => {\n\t\t\tif (!this.#dependents.length) return resultData;\n\t\t\tif (this.NODE_NAME === 'UPDATE_STATEMENT') {\n\t\t\t\tfor (const resultRow of resultData) {\n\t\t\t\t\tthis.#dependents[0].renderForeignBindings(this, [resultRow]);\n\t\t\t\t\tconst dependentData = await recursionCallback(this.#dependents[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const dependentQuery of this.#dependents) {\n\t\t\t\t\tdependentQuery.renderForeignBindings(this, resultData);\n\t\t\t\t\tconst dependentData = await recursionCallback(dependentQuery);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultData;\n\t\t};\n\t\treturn [preHook, postHook];\n\t}\n\n\tfilterPayload(columnsSpec, rowSetEntries, options = {}) {\n\t\tconst dimensions = new Map;\n\t\tconst reducedColumsSpec = columnsSpec.jsonfy(options, {}, /*reducer*/(columnNode, columnOffset) => {\n\t\t\tif (columnNode instanceof PathRight) {\n\t\t\t\tconst [dimension, resolvedFk] = this.createDimension(columnNode, options);\n\t\t\t\tdimensions.set(columnOffset, dimension);\n\t\t\t\tif (resolvedFk) return resolvedFk;\n\t\t\t} else return columnNode.jsonfy(options);\n\t\t});\n\t\tconst reducedRowSpecs = rowSetEntries.map((valuesSpec, rowOffset) => valuesSpec.jsonfy(options, {}, /*reducer*/(valueNode, columnOffset) => {\n\t\t\tif (dimensions.has(columnOffset)) {\n\t\t\t\treturn dimensions.get(columnOffset).offload(options.explicitRowOffset ?? rowOffset, valueNode);\n\t\t\t}\n\t\t\treturn valueNode.jsonfy(options);\n\t\t}));\n\t\tdimensions.clear();\n\t\treturn [reducedColumsSpec, reducedRowSpecs];\n\t}\n\n\t#generatedDependencies = new Set;\n\t#generatedDependents = new Set;\n\t#generatedReturning = ReturningClause.fromJSON(this, { entries: [] });\n\tcreateDimension(dimensionSpec, options = {}) {\n\t\tif (![ColumnsSpec, ColumnRef, PathRight].some(c => dimensionSpec.rhs() instanceof c)) {\n\t\t\tthrow new Error(`Invalid columns spec: ${dimensionSpec}`);\n\t\t}\n\t\tconst $options = { ...options, deSugar: false };\n\t\tconst [keyLhs_bareIdent, targetTableIdent, keyRhs_bareIdent] = dimensionSpec.plot();\n\t\t// Do either an INSERT OR AN UPSERT\n\t\tconst query = new ([].concat(this.constructor.DIMENSIONS_TO)[0])(this.baseClient);\n\t\tquery.into(targetTableIdent.jsonfy());\n\t\t// Figure the expected payload structure\n\t\tlet columnsSpec = dimensionSpec.rhs();\n\t\tquery.columns(columnsSpec.jsonfy($options));\n\t\t// Payload structure must match column spec\n\t\tconst resolvePayload = (payload, inMultiRowStructure = false) => {\n\t\t\tif (payload instanceof Parens) payload = payload.exprUnwrapped();\n\t\t\tif (!inMultiRowStructure && (payload instanceof ValuesSubClause)) throw new Error(`Single-row payload structure expected for column structure: ${dimensionSpec.rhs()}. Recieved ${payload.NODE_NAME}.`);\n\t\t\tif (inMultiRowStructure && !(payload instanceof ValuesSubClause)) {\n\t\t\t\tpayload = [payload];\n\t\t\t}\n\t\t\treturn payload;\n\t\t};\n\t\tconst validateRowLength = (row, adjustmentForAddedKeyColumn = 0) => {\n\t\t\tconst rowLength = (row instanceof RowSpec ? row.length : 1) + adjustmentForAddedKeyColumn;\n\t\t\tif (rowLength > query.columns().length) throw new Error(`INSERT has more expressions than target columns`);\n\t\t\tif (rowLength < query.columns().length) throw new Error(`INSERT has more target columns than expressions`);\n\t\t\treturn row;\n\t\t};\n\t\t// Here, we do total offload, returning nothing\n\t\tif (dimensionSpec.lhs() instanceof PathJunction) {\n\t\t\tquery.columns().add(keyRhs_bareIdent.name());\n\t\t\tconst queryPK = keyLhs_bareIdent.name();\n\t\t\tif (!this.returning()?.has(queryPK) && !this.#generatedReturning.has(queryPK)) {\n\t\t\t\tthis.#generatedReturning.add(queryPK);\n\t\t\t}\n\t\t\tconst offload = (rowOffset, payload) => {\n\t\t\t\tpayload = resolvePayload(payload, true);\n\t\t\t\tconst fKBinding = ForeignBinding.fromJSON(query, {\n\t\t\t\t\tresolutionPath: [this.uuid, rowOffset, queryPK]\n\t\t\t\t});\n\t\t\t\tfor (const row of payload) {\n\t\t\t\t\tconst $row = validateRowLength(row, 1).jsonfy(options);\n\t\t\t\t\t$row.entries.push(fKBinding.jsonfy());\n\t\t\t\t\tquery.values($row);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst dimension = { query, offload, };\n\t\t\tthis.#generatedDependents.add(dimension);\n\t\t\treturn [dimension];\n\t\t}\n\t\tquery.returning('*');\n\t\t// Here, we do normal offload, returning real column name\n\t\tconst offload = (rowOffset, payload) => {\n\t\t\tconst $row = resolvePayload(payload, false);\n\t\t\tquery.values(validateRowLength($row).jsonfy(options));\n\t\t\treturn ForeignBinding.fromJSON(this, {\n\t\t\t\tresolutionPath: [query.uuid, rowOffset, /*PK of dimension*/keyRhs_bareIdent.name()] \n\t\t\t}).jsonfy();\n\t\t};\n\t\tconst dimension = { query, offload };\n\t\tthis.#generatedDependencies.add(dimension);\n\t\treturn [dimension, keyLhs_bareIdent.jsonfy()/*FK of base*/];\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.setClause) instance.set(json.setClause);\n\t\t\tif (json.dependencies?.length) {\n\t\t\t\tinstance.#dependencies = instance.$castInputs(json.dependencies, this.DIMENSIONS_TO, [], 'dependencies' );\n\t\t\t}\n\t\t\tif (json.dependents?.length) {\n\t\t\t\tinstance.#dependents = instance.$castInputs(json.dependents, this.DIMENSIONS_TO, [], 'dependents' );\n\t\t\t}\n\t\t\tif (json.generatedReturning?.length) {\n\t\t\t\tinstance.#generatedReturning = instance.$castInputs([json.generatedReturning], ReturningClause);\n\t\t\t}\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options, jsonInCallback) {\n\t\tlet jsonOut = super.jsonfy(options, () => ({\n\t\t\t...(this.#setClause ? { setClause: this.#setClause?.jsonfy(options) } : {}),\n\t\t\t...jsonInCallback()\n\t\t}));\n\t\tif (this.#generatedReturning.length) {\n\t\t\tif (options.deSugar) {\n\t\t\t\tconst entries = (jsonOut.returningClause?.entries || []).concat(this.#generatedReturning.jsonfy(options).entries);\n\t\t\t\tjsonOut = { ...jsonOut, returningClause: { entries } };\n\t\t\t} else {\n\t\t\t\tjsonOut = { ...jsonOut, generatedReturning: this.#generatedReturning.jsonfy(options) };\n\t\t\t}\n\t\t}\n\t\treturn jsonOut;\n\t}\n\n\tfinalizeJSON(json, options) {\n\t\tif (this.#generatedDependencies.size || this.#generatedDependents.size) {\n\t\t\tjson.dependencies = [...this.#generatedDependencies].map(d => d.query.jsonfy({ ...options, deSugar: false }));\n\t\t\tjson.dependents = [...this.#generatedDependents].map(d => d.query.jsonfy({ ...options, deSugar: false }));\n\t\t\tthis.#generatedDependencies.clear();\n\t\t\tthis.#generatedDependents.clear();\n\t\t}\n\t\treturn super.finalizeJSON(json, options);\n\t}\n}", "import { Lexer } from '../../Lexer.js';\nimport { WhereClause } from '../../dql/clauses/WhereClause.js';\nimport { ColumnsSpec } from './ColumnsSpec.js';\nimport { SetClause } from './SetClause.js';\n\nexport class OnConflictClause extends SetClause {\n\tstatic get CLAUSE() {}\n\n    #whereClause;\n\t#columnsSpec;\n\n\tcolumnsSpec(...args) {\n\t\tif (!arguments.length) return this.#columnsSpec;\n\t\tthis.#columnsSpec = this.$castInputs(args, ColumnsSpec, this.#columnsSpec, 'columns_spec', 'add');\n\t\treturn this;\n\t}\n\n\twhere(...args) {\n\t\tif (!arguments.length) return this.#whereClause;\n\t\tthis.#whereClause = this.$castInputs(args, WhereClause, this.#whereClause, 'where_clause', 'every');\n\t\treturn this;\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tif (json.columnsSpec) instance.columnsSpec(json.columnsSpec);\n\t\t\tif (json.whereClause) instance.where(json.whereClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}, reducer = null) {\n\t\treturn super.jsonfy(options, {\n\t\t\t...(this.#columnsSpec ? { columnsSpec: this.#columnsSpec.jsonfy(options) } : {}),\n\t\t\t...(this.#whereClause ? { whereClause: this.#whereClause.jsonfy(options) } : {}),\n\t\t\t...jsonIn,\n\t\t}, reducer);\n\t}\n\n\tstatic get REGEX() { return 'ON\\\\s+(?:DUPLICATE\\\\s+KEY|CONFLICT(?:\\\\s+([\\\\s\\\\S]+))?)\\\\s+(UPDATE|DO\\\\s+NOTHING|DO\\\\s+UPDATE\\\\s+SET\\\\s+)'; }\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ onConflictMatch, columnsSpec, action, updateSpec ] = expr.match(new RegExp(`^${ this.REGEX }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!onConflictMatch) return;\n        if (/DO\\s+NOTHING/i.test(action)) return new this(context);\n        const [assignmentList, whereSpec] = Lexer.split(updateSpec, ['WHERE'], { useRegex: 'i', preserveDelims: true });\n        const instance = super.parse(context, assignmentList, parseCallback);\n        if (columnsSpec) instance.columnsSpec(parseCallback(instance, columnsSpec, [ColumnsSpec]));\n        if (whereSpec) instance.where(parseCallback(instance, whereSpec.trim(), [WhereClause]));\n        return instance;\n    }\n\n\tstringify() {\n\t\tconst sql = [];\n       if (this.params.dialect === 'mysql') sql.push('ON DUPLICATE KEY UPDATE');\n        else { sql.push(`ON CONFLICT ${ this.#columnsSpec ? `${ this.#columnsSpec } ` : '' }${ this.entries().length ? 'DO UPDATE SET' : 'DO NOTHING' }`); }\n        sql.push(super.stringify());\n\t\tif (this.#whereClause) sql.push(this.#whereClause);\n\t\treturn sql.join(' ');\n\t}\n}", "import { Lexer } from '../Lexer.js';\nimport { AbstractPayloadStatement } from './AbstractPayloadStatement.js';\nimport { AbstractDMLStatement } from './AbstractDMLStatement.js';\nimport { ValuesClause } from './clauses/ValuesClause.js';\nimport { ColumnsSpec } from './clauses/ColumnsSpec.js';\nimport { SetClause } from './clauses/SetClause.js';\nimport { SelectStatement } from '../dql/SelectStatement.js';\nimport { OnConflictClause } from './clauses/OnConflictClause.js';\nimport { ReturningClause } from './clauses/ReturningClause.js';\nimport { DatabaseSchema } from '../ddl/database/DatabaseSchema.js';\nimport { GlobalTableRef } from '../expr/refs/GlobalTableRef.js';\n\nexport class InsertStatement extends AbstractPayloadStatement(AbstractDMLStatement) {\n\tstatic get CLAUSE() { return 'INSERT'; }\n\tstatic get DIMENSIONS_TO() { return [InsertStatement]; }\n\n\t#table;\n\t#columnsSpec;\n\t#valuesClause;\n\t#selectClause;\n\t#onConflictClause;\n\n\tinto(table) {\n\t\tif (!arguments.length) return this.#table;\n\t\tthis.#table = this.$castInputs([table], GlobalTableRef, this.#table, 'table_spec', 'expr');\n\t\treturn this;\n\t}\n\n\tcolumns(...args) {\n\t\tif (!arguments.length) return this.#columnsSpec;\n\t\tthis.#columnsSpec = this.$castInputs(args, ColumnsSpec, this.#columnsSpec, 'columns_spec', 'add');\n\t\treturn this;\n\t}\n\n\tvalues(...args) {\n\t\tif (!arguments.length) return this.#valuesClause;\n\t\tthis.#valuesClause = this.$castInputs(args, ValuesClause, this.#valuesClause, 'values_clause', 'add');\n\t\treturn this;\n\t}\n\n\tselect(...query) {\n\t\tif (!arguments.length) return this.#selectClause;\n\t\tthis.#selectClause = this.$castInputs(query, SelectStatement, this.#selectClause, 'select_clause', 'fields');\n\t\treturn this;\n\t}\n\n\tonConflict(...args) {\n\t\tif (!arguments.length) return this.#onConflictClause;\n\t\tthis.#onConflictClause = this.$castInputs(args, OnConflictClause, this.#onConflictClause, 'on_conflict_clause', 'assignment');\n\t\treturn this;\n\t}\n\n\tschema() {\n\t\tconst dbSchema = DatabaseSchema.fromJSON(this, { name: '', tables: [] });\n\t\tdbSchema.table(this.#table.schema().jsonfy({ fullyQualified: true }));\n\t\treturn dbSchema;\n\t}\n\n\t#schemaCaptureCache;\n\t$capture(requestName, requestSource) {\n\t\tif (requestName === 'TABLE_SCHEMA') return;\n\t\tif (requestName === 'DATABASE_SCHEMA') {\n\t\t\tif (!this.#schemaCaptureCache) this.#schemaCaptureCache = this.schema();\n\t\t\treturn this.#schemaCaptureCache;\n\t\t}\n\t\treturn super.$capture(requestName, requestSource);\n\t}\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!json?.table) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.into(json.table);\n\t\t\tif (json.columnsSpec) instance.columns(json.columnsSpec);\n\t\t\tif (json.valuesClause) instance.values(json.valuesClause);\n\t\t\tif (json.selectClause) instance.select(json.selectClause);\n\t\t\tif (json.onConflictClause) instance.onConflict(json.onConflictClause);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, () => {\n\t\t\tlet columnsSpec, valuesClause, selectClause;\n\t\t\t// Handle desugaring of columns and values\n\t\t\tif (options.deSugar && this.#columnsSpec && this.#valuesClause) {\n\t\t\t\tconst [ reducedColumsSpec, reducedRowSpecs ] = this.filterPayload(this.#columnsSpec, this.#valuesClause.entries(), options);\n\t\t\t\tcolumnsSpec = reducedColumsSpec;\n\t\t\t\tvaluesClause = {\n\t\t\t\t\tnodeName: ValuesClause.NODE_NAME,\n\t\t\t\t\tentries: reducedRowSpecs,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcolumnsSpec = this.#columnsSpec?.jsonfy(options);\n\t\t\t\tvaluesClause = this.#valuesClause?.jsonfy(options);\n\t\t\t\tselectClause = this.#selectClause?.jsonfy(options);\n\t\t\t}\n\t\t\t// This self-desugars, being an instance of SetClause\n\t\t\tconst onConflictClause = this.#onConflictClause?.jsonfy(options);\n\t\t\treturn {\n\t\t\t\ttable: this.#table?.jsonfy(options),\n\t\t\t\t...(columnsSpec ? { columnsSpec } : {}),\n\t\t\t\t...(valuesClause ? { valuesClause } : {}),\n\t\t\t\t...(selectClause ? { selectClause } : {}),\n\t\t\t\t...(onConflictClause ? { onConflictClause } : {}),\n\t\t\t\t...jsonIn,\n\t\t\t};\n\t\t});\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [match, mysqlIgnore, body] = (new RegExp(`^${this.CLAUSE}(?:\\\\s+(IGNORE))?(?:\\\\s+INTO)?([\\\\s\\\\S]+)$`, 'i')).exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\t// Tokenize\n\t\tconst dialect = context?.params?.dialect || 'postgres';\n\t\tconst clauses = { values: ValuesClause, ...(dialect === 'mysql' ? { set: SetClause } : {}), select: SelectStatement, onConflict: OnConflictClause, returning: ReturningClause };\n\t\tconst [tableAndColumnsSpec, ...tokens] = Lexer.split($body, Object.values(clauses).map(x => x.REGEX || x.CLAUSE && `${x.CLAUSE}(?!\\\\w)` || x), { useRegex: 'i', preserveDelims: true });\n\t\tconst [tableSpec, columnsSpec = ''] = Lexer.split(tableAndColumnsSpec, []);\n\t\t// Parse\n\t\tinstance.into(parseCallback(instance, tableSpec.trim(), [GlobalTableRef]));\n\t\tif (columnsSpec.trim()) instance.columns(parseCallback(instance, columnsSpec.trim(), [ColumnsSpec]));\n\t\tmain: for (const token of tokens) {\n\t\t\tfor (const verb in clauses) {\n\t\t\t\tconst node = clauses[verb].parse?.(instance, token.trim(), parseCallback);\n\t\t\t\tif (node) { instance[verb](node); continue main; }\n\t\t\t}\n\t\t}\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = [this.constructor.CLAUSE];\n\t\tsql.push(...this.getFlag().map(s => s.replace(/_/g, ' ')));\n\t\tsql.push('INTO', this.#table);\n\t\tif (this.params.dialect === 'mysql' && this.set()) {\n\t\t\tsql.push(this.set());\n\t\t} else {\n\t\t\tsql.push(this.#columnsSpec);\n\t\t\tif (this.#valuesClause) sql.push(this.#valuesClause);\n\t\t\telse sql.push(this.#selectClause);\n\t\t}\n\t\tsql.push(this.#onConflictClause);\n\t\tsql.push(this.returning());\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n}", "import { DatabaseSchema } from '../lang/ddl/database/DatabaseSchema.js';\nimport { RootSchema } from '../lang/ddl/RootSchema.js';\n\nexport class Savepoint {\n\n    constructor(client, json) {\n        Object.defineProperty(this, '$', {\n            value: {\n                client,\n                json,\n            }\n        });\n    }\n\n    get client() { return this.$.client; }\n\n    id() { return this.$.json.id; }\n\n    masterSavepoint() { return this.$.json.master_savepoint; }\n\n    name(postRestore = false) {\n        if (postRestore) return this.versionState() === 'rollback' && this.$.json.$name || this.$.json.name;\n        return this.versionState() === 'commit' && this.$.json.$name || this.$.json.name;\n    }\n\n    schema() {\n        const { name, $name, tables = [], status } = this.$.json;\n        return DatabaseSchema.fromJSON(this.client, { name, ...($name ? { $name } : {}), tables, status });\n    }\n\n    cascades() {\n        this.$._cascades = this.$._cascades || (this.$.json.cascades || []).map(cascade => new Savepoint(this.client, cascade));\n        return this.$._cascades;\n    }\n\n    databaseTag() { return this.$.json.database_tag; }\n\n    versionTag() { return this.$.json.version_tag; }\n\n    versionTags() { return this.$.json.version_tags || [this.$.json.version_tag]; }\n\n    versionUp() { return this.versionTags().reduce((prev, v) => prev || (v > this.versionTag() ? v : 0), 0); }\n\n    versionDown() { return [...this.versionTags()].reverse().reduce((prev, v) => prev || (v < this.versionTag() ? v : 0), 0); }\n\n    versionMax() { return Math.max(...this.versionTags()); }\n\n    versionState() { return this.$.json.version_state; }\n\n    commitDate() { return this.$.json.commit_date; }\n\n    commitDesc() { return this.$.json.commit_desc; }\n\n    commitClientID() { return this.$.json.commit_client_id; }\n\n    commitClientPID() { return this.$.json.commit_client_pid; }\n\n    rollbackDate() { return this.$.json.rollback_date; }\n\n    rollbackDesc() { return this.$.json.rollback_desc; }\n\n    rollbackClientID() { return this.$.json.rollback_client_id; }\n\n    rollbackClientPID() { return this.$.json.rollback_client_pid; }\n\n    restoreEffect() {\n        const $outcome = this.$.json.status === 'new' ? ['DROP', 'RECREATE'] : (this.$.json.status === 'obsolete' ? ['RECREATE', 'DROP'] : ['ALTER']);\n        return this.versionState() === 'rollback' ? $outcome.reverse()[0] : $outcome[0];\n    }\n\n    reverseSQL() {\n        if (this.versionState() === 'rollback') return this.querify(true);\n        return [this.querify(true), ...this.cascades().map(c => c.reverseSQL())].join('\\n');\n    }\n\n    static fromJSON(context, json) {\n        return new this(context, json);\n    }\n\n    jsonfy() {\n        return this.$.json;\n    }\n\n    querify(reversed = false) {\n        let rootSchema = RootSchema.fromJSON(this.client, [this.schema()]);\n        let $reversed = this.versionState() === 'rollback';\n        if (reversed) $reversed = !$reversed;\n        if ($reversed) {\n            rootSchema = rootSchema.reverseDiff({ forceNormalize: true, honourCDLIgnoreList: this.versionState() === 'rollback' });\n        }\n        return rootSchema.generateCDL({ cascadeRule: 'CASCADE' }).actions()[0];\n    }\n\n    async isNextRestorePoint() {\n        const currentSavepoint = (await this.client.database(this.name()).savepoint({ lookAhead: this.versionState() === 'rollback', withCascades: false })) || {};\n        return currentSavepoint.id?.() === this.$.json.id;\n    }\n\n    async rollback(rollbackParams = {}) {\n        if (this.versionState() === 'rollback') throw new Error(`Already in rollback state.`);\n        return await this.restore(rollbackParams);\n    }\n\n    async recommit(commitParams = {}) {\n        if (this.versionState() === 'commit') throw new Error(`Already in commit state.`);\n        return await this.restore(commitParams);\n    }\n\n    async restore(restoreParams = {}) {\n        if (this.masterSavepoint()) {\n            if (this.versionState() === 'commit') {\n                const query = this.querify(true);\n                if (query) await this.client.withMode('restore', () => this.client.query(query));\n            }\n        } else {\n            if (!(await this.isNextRestorePoint())) throw new Error(`Invalid restore order.`);\n            await this.client.withMode('restore', () => this.client.query(this.querify(true)));\n        }\n        const linkedDB = await this.client.linkedDB();\n        // Update record\n        const versionState = this.versionState() === 'rollback' ? 'commit' : 'rollback';\n        const updatedRecord = await linkedDB.table('savepoints').update({\n            data: {\n                ['version_state']: versionState,\n                [`${versionState}_date`]: q => q.now(),\n                [`${versionState}_desc`]: restoreParams.desc || this[`${versionState}Desc`](),\n                [`${versionState}_client_id`]: this.client.params.clientID || this[`${versionState}ClientID`](),\n                [`${versionState}_client_pid`]: (q) => q.fn(this.client.params.dialect === 'mysql' ? 'connection_id' : 'pg_backend_pid'),\n            },\n            where: (q) => q.eq('id', (q) => q.value(this.$.json.id)), returning: ['*']\n        });\n        for (const cascade of this.cascades()) {\n            await cascade.restore(restoreParams);\n        }\n        this.$.json = updatedRecord[0];\n        return true;\n    }\n}", "import { AbstractDDLStatement } from '../../../AbstractDDLStatement.js';\nimport { Rename } from './Rename.js';\n\nexport class RenameTable extends AbstractDDLStatement(Rename) {}", "import { _intersect } from '@webqit/util/arr/index.js';\nimport { OnConflictClause } from './clauses/OnConflictClause.js';\nimport { InsertStatement } from './InsertStatement.js';\nimport { AbstractSugar } from '../AbstractSugar.js';\n\nexport class UpsertStatement extends AbstractSugar(InsertStatement) {\n\tstatic get CLAUSE() { return 'UPSERT'; }\n\tstatic get DIMENSIONS_TO() { return [UpsertStatement]; }\n\tstatic get DESUGARS_TO() { return [InsertStatement]; }\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\tif (!options.deSugar) return super.jsonfy(options, jsonIn);\n\t\tconst { nodeName: _, flags, ...superJson } = super.jsonfy(options, jsonIn);\n\t\t// So let's auto-construct the on-conflict clause for the operation\n\t\tif (this.onConflict()) throw new Error(`A redundanct \"ON CONFLICT\" clause in query.`);\n\t\tconst columns = (this.set() ? this.set().columns() : this.columns().entries()).map(c => c.name());\n\t\tconst refFn = this.params.dialect === 'mysql' ? col => q => q.fn('VALUES', col) : col => ['EXCLUDED', col];\n\t\tconst onConflictClause = OnConflictClause.fromJSON(this, { entries: [] });\n\t\tfor (const col of columns) onConflictClause.add([col, refFn(col)]);\n\t\t// Postgres requires conflict conditions to be specified\n\t\tif (this.params.dialect !== 'mysql') {\n\t\t\tconst tblSchema = this.into().schema();\n\t\t\tconst uniqueKeys = [].concat(tblSchema.primaryKey() || []).concat(tblSchema.uniqueKeys()).map(uk => uk.columns());\n\t\t\tif (!uniqueKeys.length) throw new Error(`Table ${ this.into().clone({ fullyQualified: true }) } has no unique keys defined to process an UPSERT operation. You may want to perform a direct INSERT operation.`);\n\t\t\tconst conflictTarget = uniqueKeys.find(keyComp => _intersect(keyComp, columns).length) || uniqueKeys[0];\n\t\t\tonConflictClause.columnsSpec(...conflictTarget);\n\t\t}\n        return {\n            nodeName: InsertStatement.NODE_NAME,\n\t\t\t...superJson,\n\t\t\tonConflictClause: onConflictClause.jsonfy(options),\n\t\t\t...(flags ? { flags } : {})\n        };\n\t}\n}", "import { Lexer } from '../Lexer.js';\nimport { UpsertStatement } from './UpsertStatement.js';\nimport { AbstractDMLStatement } from \"./AbstractDMLStatement.js\";\nimport { AbstractPayloadStatement } from './AbstractPayloadStatement.js';\nimport { AbstractQueryStatement } from '../dql/AbstractQueryStatement.js';\nimport { ReturningClause } from './clauses/ReturningClause.js';\nimport { SetClause } from './clauses/SetClause.js';\nimport { JoinClause } from '../dql/clauses/JoinClause.js';\nimport { WhereClause } from '../dql/clauses/WhereClause.js';\nimport { LimitClause } from '../dql/clauses/LimitClause.js';\nimport { Table } from '../dql/clauses/Table.js';\n\nexport class UpdateStatement extends AbstractPayloadStatement(\n\tAbstractQueryStatement(AbstractDMLStatement)\n) {\n\tstatic get CLAUSE() { return 'UPDATE'; }\n\tstatic get DIMENSIONS_TO() { return [UpsertStatement]; }\n\n\t#tables = [];\n\t#postgresFromList = [];\n\n\ttable(...tables) {\n\t\tif (!arguments.length) return this.#tables;\n\t\tthis.#tables = this.$castInputs(tables, Table, this.#tables, 'table_spec', 'expr');\n\t\treturn this;\n\t}\n\n\tfrom(...tables) {\n\t\tif (!arguments.length) return this.#postgresFromList;\n\t\tthis.#postgresFromList = this.$castInputs(tables, Table, this.#postgresFromList, 'from_clause', 'expr');\n\t\treturn this;\n\t}\n\n\ttables() { return this.#tables.concat(this.#postgresFromList); }\n\n\tstatic fromJSON(context, json, callback = null) {\n\t\tif (!Array.isArray(json?.tables)) return;\n\t\treturn super.fromJSON(context, json, (instance) => {\n\t\t\tinstance.table(...json.tables);\n\t\t\tif (json.postgresFromList?.length) instance.from(...json.postgresFromList);\n\t\t\tcallback?.(instance);\n\t\t});\n\t}\n\n\tjsonfy(options = {}, jsonIn = {}) {\n\t\treturn super.jsonfy(options, () => ({\n\t\t\ttables: this.#tables.map((t) => t.jsonfy(options)),\n\t\t\t...(this.#postgresFromList.length ? { postgresFromList: this.#postgresFromList.map((t) => t.jsonfy(options)) } : {}),\n\t\t\t...jsonIn\n\t\t}));\n\t}\n\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [match, mysqlIgnore, body] = /^UPDATE(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\t// Tokenize\n\t\tconst dialect = context?.params?.dialect || 'postgres';\n\t\tconst clauses = { ...(dialect === 'postgres' ? { set: SetClause, from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' } } : {}), join:JoinClause, ...(dialect === 'mysql' ? { set: SetClause } : {}), where: WhereClause, ...(dialect === 'mysql' ? { limit: LimitClause } : {}), returning: ReturningClause };\n\t\tconst [tableSpec, ...tokens] = Lexer.split($body, Object.values(clauses).map(x => x.REGEX || x.CLAUSE && `${x.CLAUSE}(?!\\\\w)` || x), { useRegex: 'i', preserveDelims: true });\n\t\t// Parse\n\t\tinstance.table(...Lexer.split(tableSpec, [',']).map(t => parseCallback(instance, t.trim(), [Table])));\n\t\tmain: for (const token of tokens) {\n\t\t\tif (/^FROM/i.test(token)) {\n\t\t\t\tinstance.from(...Lexer.split(token.replace(/FROM/i, ''), [',']).map(t => parseCallback(instance, t.trim(), [Table])));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const verb in clauses) {\n\t\t\t\tconst node = clauses[verb].parse?.(instance, token.trim(), parseCallback);\n\t\t\t\tif (node) { instance[verb](node); continue main; }\n\t\t\t}\n\t\t}\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\treturn instance;\n\t}\n\n\tstringify() {\n\t\tconst sql = ['UPDATE'];\n\t\tsql.push(...this.getFlag().map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.#tables.join(', '));\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tsql.push(...this.joins(), this.set(), this.where(), this.limit(), /*special support*/this.returning());\n\t\t} else {\n\t\t\tsql.push(this.set());\n\t\t\tif (this.#postgresFromList.length) sql.push(`FROM ${this.#postgresFromList.join(', ')}`);\n\t\t\tsql.push(...this.joins(), this.where(), this.returning());\n\t\t}\n\t\treturn sql.filter(s => s).join(' ');\n\t}\n}", "// Statements\nimport { AlterDatabase } from './ddl/AlterDatabase.js';\nimport { CreateDatabase } from './ddl/CreateDatabase.js';\nimport { DropDatabase } from './ddl/DropDatabase.js';\nimport { RenameDatabase } from './ddl/RenameDatabase.js';\nimport { AlterTable } from './ddl/database/actions/AlterTable.js';\nimport { CreateTable } from './ddl/database/actions/CreateTable.js';\nimport { DropTable } from './ddl/database/actions/DropTable.js';\nimport { RenameTable } from './ddl/database/actions/RenameTable.js';\nimport { SelectStatement } from './dql/SelectStatement.js';\nimport { InsertStatement } from './dml/InsertStatement.js';\nimport { UpsertStatement } from './dml/UpsertStatement.js';\nimport { UpdateStatement } from './dml/UpdateStatement.js';\nimport { DeleteStatement } from './dml/DeleteStatement.js';\n\n// Expressions\nimport { Exprs } from './expr/grammar.js';\n\n/**\n * @var object\n */\nexport default [\n\t// Statements\n\tAlterDatabase,\n\tCreateDatabase,\n\tDropDatabase,\n\tRenameDatabase,\n\tAlterTable,\n\tCreateTable,\n\tDropTable,\n\tRenameTable,\n\tSelectStatement,\n\tInsertStatement,\n\tUpsertStatement,\n\tUpdateStatement,\n\tDeleteStatement,\n\t// Expressions\n\t...Exprs,\n]", "import grammar from './grammar.js';\r\n\t\t\r\nexport class Parser {\r\n\r\n\t/**\r\n\t * @property Object\r\n\t */\r\n\tstatic grammar = grammar;\r\n\r\n\tstatic parse(context, expr, grammar, params = {}) {\r\n\t\tif (!expr?.length) return;\r\n\t\tif (!context.NODE_NAME) expr = expr.trim();\r\n\t\tconst $grammar = grammar?.length ? grammar : this.grammar;\r\n\t\tfor (const Node of $grammar) {\r\n\t\t\tconst node = this.parseOne(context, expr, Node, params);\r\n\t\t\tif (!node) continue;\r\n\t\t\tif (params.inspect) console.log('.................', expr, '.................>', node.constructor.name);\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (params.assert === false) return;\r\n\t\tthrow new SyntaxError(expr);\r\n\t}\r\n\t \r\n\tstatic parseOne(context, expr, Node, params = {}) {\r\n\t\treturn Node.parse(context, expr, ($context, $expr, $grammar, $params = {}) => {\r\n\t\t\treturn this.parse($context, $expr, $grammar, { ...params, ...$params });\r\n\t\t});\r\n\t}\r\n}", "import { _from as _arrFrom, _difference, _intersect } from '@webqit/util/arr/index.js';\nimport { AlterTable } from '../lang/ddl/database/actions/AlterTable.js';\nimport { _isObject } from '@webqit/util/js/index.js';\nimport { Str } from '../lang/expr/types/Str.js';\nimport { Identifier } from '../lang/expr/Identifier.js';\nimport { AbstractNode } from '../lang/AbstractNode.js';\nimport { AlterDatabase } from '../lang/ddl/AlterDatabase.js';\nimport { CreateDatabase } from '../lang/ddl/CreateDatabase.js';\nimport { DropDatabase } from '../lang/ddl/DropDatabase.js';\nimport { RenameDatabase } from '../lang/ddl/RenameDatabase.js';\nimport { RootSchema } from '../lang/ddl/RootSchema.js';\nimport { RootCDL } from '../lang/ddl/RootCDL.js';\nimport { Savepoint } from './Savepoint.js';\nimport { Parser } from '../lang/Parser.js';\n\nexport class AbstractClient {\n\n    constructor(params = {}) {\n        Object.defineProperty(this, '$', {\n            value: {\n                params: {\n                    schemaCacheInvalidation: 1,\n                    schemaSelector: ['!information_schema', '!linked_db%', ...(params.dialect === 'postgres' ? ['!pg_%'] : [])],\n                    ...params,\n                }\n            }\n        });\n    }\n\n    get params() { return this.$.params || {}; }\n\n    async withSchema(...args) {\n        const callback = args.pop();\n        if (args[0] === false) return callback(); // IMPORTANT: withSchema() callers can do this for convenience\n        const params = Array.isArray(args[0]) || _isObject(args[0]) ? args.pop() : { depth: 2 };\n        return await this.schema(params, callback);\n    }\n\n    #modeStack = [];\n    async withMode(mode, callback) {\n        this.#modeStack.unshift(mode);\n        const returnValue = await callback();\n        this.#modeStack.shift();\n        return returnValue;\n    }\n\n    async schema($execFetchSchema, params = {}, ...rest) {\n        const exactMatching = typeof rest[0] === 'boolean' ? rest.shift() : true;\n        const callback = typeof rest[0] === 'function' ? rest.shift() : ((result) => result);\n        const cacheable = _isObject(params) && params.depth === 2 && !(params.selector || []).length;\n        const cacheInvalidation = cacheable ? this.params.schemaCacheInvalidation : 2;\n        let isNew, entry = this.#matchSchemaRequest(params, exactMatching);\n        if (!entry) {\n            const schemaPromise = Promise.resolve($execFetchSchema(_isObject(params) ? { ...params, selector: (params.selector || []).length ? params.selector : this.params.schemaSelector } : params)).then((schemaJson) => {\n                if (Array.isArray(params)) {\n                    schemaJson = schemaJson.reduce((dbs, db) => {\n                        const ss = params.find(ss => ss.name === db.name);\n                        const tablesList = [].concat(ss?.tables || []);\n                        if (tablesList.length && tablesList[0] !== '*') db = { ...db, tables: db.tables.filter(tbl => tablesList.includes(tbl.name)) };\n                        return dbs.concat(ss && db || []);\n                    }, []);\n                }\n                return RootSchema.fromJSON(this, schemaJson);\n            });\n            // Get this into the stack without awaiting result\n            entry = { params, schemaPromise };\n            this.#schemaRequestStack.add(entry);\n            schemaPromise.then((resolvedSchema) => {\n                // Resolve\n                entry.resolvedSchema = resolvedSchema;\n                delete entry.schemaPromise;\n                if (cacheInvalidation === 1) {\n                    // In live mode!!!\n                    this.listen('savepoints', (e) => {\n                        const payload = JSON.parse(e.payload);\n                        if (payload.action === 'DELETE') return;\n                        const savepoint = new Savepoint(this, payload.body);\n                        const rootCDL = RootCDL.fromJSON(this, { actions: [savepoint.querify()] });\n                        entry.resolvedSchema = entry.resolvedSchema.alterWith(rootCDL, { diff: false });\n                    });\n                }\n            });\n            isNew = true;\n        }\n        const returnValue = await callback(entry.resolvedSchema || (await entry.schemaPromise));\n        if (isNew && cacheInvalidation === 2) {\n            this.#schemaRequestStack.delete(entry);\n        }\n        return returnValue;\n    }\n\n    async query(...args) {\n        let query, params = {};\n        if (_isObject(args[0]) && !(args[0] instanceof AbstractNode)) {\n            ({ query, ...params } = args[0]);\n        } else {\n            query = args.shift();\n            if (Array.isArray(args[0])) params.values = args.shift();\n            if (_isObject(args[0])) params = { ...params, ...args.shift() };\n        }\n        if (typeof query === 'string') {\n            query = Parser.parse(this, query, null, { inspect: params.inspect });\n        }\n        return await this.execQuery(query, params);\n    }\n\n    async createDatabase(createSpec, params = {}) {\n        if (typeof createSpec === 'string') { createSpec = { name: createSpec, tables: [] }; }\n        const query = CreateDatabase.fromJSON(this, { kind: params.kind, argument: createSpec });\n        if (params.ifNotExists) query.withFlag('IF_NOT_EXISTS');\n        if (params.returning) query.returning(params.returning);\n        const returnValue = await this.execQuery(query, params);\n        if (returnValue === true) return this.database(query.argument().name());\n        return returnValue;\n    }\n\n    async renameDatabase(dbName, dbToName, params = {}) {\n        const query = RenameDatabase.fromJSON(this, { kind: params.kind, reference: dbName, argument: dbToName });\n        if (!query) throw new Error(`renameDatabase() called with invalid arguments.`);\n        if (params.returning) query.returning(params.returning);\n        const returnValue = await this.execQuery(query, params);\n        if (returnValue === true) return this.database(dbToName);\n        return returnValue;\n    }\n\n    async alterDatabase(alterSpec, callback, params = {}) {\n        if (typeof callback !== 'function') throw new Error(`alterDatabase() called with invalid arguments.`);\n        if (typeof alterSpec === 'string') { alterSpec = { name: alterSpec }; }\n        return await this.withSchema(async () => {\n            // -- Compose an altInstance from request\n            const dbSchema = (await this.schema([{ name: alterSpec.name, tables: alterSpec.tables || ['*'] }])).database(alterSpec.name);\n            if (!dbSchema) throw new Error(`Database \"${alterSpec.name}\" does not exist.`);\n            const dbSchemaEditable = dbSchema.clone();\n            await callback(dbSchemaEditable.$nameLock(true));\n            const databaseCDL = dbSchema.diffWith(dbSchemaEditable).generateCDL({ cascadeRule: params.cascadeRule, existsChecks: params.existsChecks });\n            if (!databaseCDL.length) return;\n            const query = AlterDatabase.fromJSON(this, { kind: params.kind, reference: dbSchema.name(), argument: databaseCDL });\n            if (params.returning) query.returning(params.returning);\n            const returnValue = await this.execQuery(query, params);\n            if (returnValue === true) return this.database(this.extractPostExecName(query));\n            return returnValue;\n        });\n    }\n\n    async dropDatabase(dbName, params = {}) {\n        const query = DropDatabase.fromJSON(this, { kind: params.kind, reference: dbName });\n        if (!query) throw new Error(`dropDatabase() called with invalid arguments.`);\n        if (params.ifExists) query.withFlag('IF_EXISTS');\n        if (params.restrict) query.withFlag('RESTRICT');\n        else if (params.cascade) query.withFlag('CASCADE');\n        if (params.returning) query.returning(params.returning);\n        return await this.execQuery(query, params);\n    }\n\n    async hasDatabase(name) {\n        return (await this.databases()).includes(name);\n    }\n\n    async databases() {\n        return (await this.schema()).databases(false);\n    }\n\n    database(name, params = {}) {\n        return new this.constructor.Database(this, ...arguments);\n    }\n\n    async execQuery(query, params = {}) {\n        if (!(query instanceof AbstractNode)) {\n            throw new Error(`execQuery() called with invalid arguments.`);\n        }\n        const willNeedSchema = query.statementType === 'DDL' || query.hasPaths || query.isSugar/*upsert*/;\n        return await this.withSchema(willNeedSchema, async (rootSchema) => {\n            if (query.statementType === 'DDL') {\n                return await this.execDDL(query, rootSchema, params);\n            }\n            const vars = {};\n            // IMPORTANT: The order of the following\n            query.renderBindings?.(params.values || []);\n            if (query.hasSugars) query = query.deSugar();\n            // IMPORTANT: The order of the following\n            if (query.isPayloadStatement) {\n                [vars.preHook, vars.postHook] = query.createExecutionPlan($query => this.execQuery($query, { inspect: params.inspect }));\n                await vars.preHook();\n            }\n            // All non-DDL statements support bindings\n            const queryBindings = query.normalizeBindings?.(true).map((b) => b.value()) || [];\n            const $queryBindings = queryBindings.map(value => Array.isArray(value) || typeof value === 'object' && value ? JSON.stringify(value) : value);\n            // Visualize? Now!\n            if (params.inspect) console.log({ guery: query.stringify(), values: $queryBindings });\n            if (query.statementType === 'DML') {\n                vars.returnValue = await this.execDML(query, $queryBindings, params);\n            } else if (query.statementType === 'DQL') {\n                vars.returnValue = await this.execDQL(query, $queryBindings, params);\n            } else {\n                vars.returnValue = await this.execSQL(query, $queryBindings, params);\n            }\n            if (query.isPayloadStatement) {\n                vars.returnValue = await vars.postHook(vars.returnValue);\n            }\n            return vars.returnValue;\n        });\n    }\n\n    async execDDL($execDDL, query, rootSchema, params) {\n        const vars = {\n            dbAction: query,\n            mainSavepointData: null,\n            cascadeSavepointsData: [],\n            returning: query.returning(),\n            inNativeMode: ['restore', 'replication', 'install', 'uninstall'].includes(this.#modeStack[0])\n        };\n        const linkedDB = await this.linkedDB();\n        if (!vars.inNativeMode && (await linkedDB.config('database_role')) === 'master') {\n            throw new Error(`Operation rejected! Direct DDL operations on a master database not allowed.`);\n        }\n        if (!this.params.clientID && !!parseInt(await linkedDB.config('require_client_ids'))) {\n            throw new Error(`Operation rejected! Your DB requires all client instances to have a \"clientID\".`);\n        }\n        if (!vars.inNativeMode && !params.desc && !!parseInt(await linkedDB.config('require_commit_descs'))) {\n            throw new Error(`Operation rejected! Your DB requires all DDL operations to have a \"desc\".`);\n        }\n        // IMPORTANT: after having desugared out the returning clause\n        if (query.hasSugars) query = query.deSugar();\n        // Normalise to db-level query\n        if (['TABLE', 'VIEW'].includes(query.KIND)) {\n            // Normalise renames\n            if (query.CLAUSE === 'RENAME') {\n                const [fromName, toName] = [query.reference().jsonfy(), query.argument().jsonfy()];\n                query = AlterTable.fromJSON(this, { kind: query.KIND, reference: fromName, argument: { actions: [] } });\n                query.add('RENAME', null, (cd) => cd.argument(toName));\n            } else if (query.CLAUSE === 'CREATE' && !query.argument().prefix()) {\n                query.argument().prefix(rootSchema.defaultDB());\n            }\n            vars.dbAction = AlterDatabase.fromJSON(this, {\n                reference: (query.reference?.() || query.argument()).prefix(true).name(),\n                argument: { actions: [query] }\n            });\n        } else {\n            // Normalise renames\n            if (query.CLAUSE === 'RENAME') {\n                const [fromName, toName] = [query.reference().jsonfy(), query.argument().jsonfy()];\n                query = AlterDatabase.fromJSON(this, { kind: query.KIND, reference: fromName, argument: { actions: [] } });\n                query.add('RENAME', null, (cd) => cd.argument(toName));\n                vars.dbAction = query;\n            }\n        }\n        vars.rootCDL = RootCDL.fromJSON(this, { actions: [vars.dbAction] });\n        // Generate savepoint data\n        if (!vars.inNativeMode && parseInt(await linkedDB.config('auto_savepoints')) !== 0) {\n            const $rootSchema = rootSchema.alterWith(vars.rootCDL, { diff: true });\n            vars.dbReference = (vars.dbAction.reference?.() || vars.dbAction.argument()).name();\n            [vars.mainSavepointData, vars.cascadeSavepointsData] = $rootSchema.databases().reduce(([main, cascades], db) => {\n                if (db.identifiesAs(vars.dbReference)) return [db, cascades];\n                return [main, cascades.concat(db.dirtyCheck(true).length ? db : [])];\n            }, [null, []]);\n        }\n        if (params.inspect) console.log({ guery: query.stringify() });\n        await $execDDL(query, rootSchema, params);\n        vars.returnValue = true;\n        if (vars.mainSavepointData) {\n            vars.savepointInstance = await this.createSavepoint(vars.mainSavepointData, { ...params, masterSavepoint: null });\n            vars.savepointInstance.$._cascades = [];\n            for (const cascadeSavepointData of vars.cascadeSavepointsData) {\n                vars.savepointInstance.$._cascades.push(await this.createSavepoint(cascadeSavepointData, { ...params, masterSavepoint: vars.savepointInstance.id() }));\n            }\n        }\n        // Render resulting schema\n        const entry = this.#matchSchemaRequest({ depth: 2 });\n        entry.resolvedSchema = entry.resolvedSchema.alterWith(vars.rootCDL, { diff: false });\n        // Handle RETURNING clause\n        if (vars.returning === 'SCHEMA') {\n            const resultDbSchema = (query.CLAUSE === 'DROP' ? rootSchema : entry.resolvedSchema).database(this.extractPostExecName(vars.dbAction));\n            if (['TABLE', 'VIEW'].includes(query.KIND)) return resultDbSchema.table(this.extractPostExecName(query));\n            return resultDbSchema;\n        };\n        if (vars.returning === 'SAVEPOINT') return vars.savepointInstance || null;\n        return vars.returnValue;\n    }\n\n    async createSavepoint(dbSchema, details = {}) {\n        const linkedDB = await this.linkedDB();\n        const savepointsTable = linkedDB.table('savepoints');\n        // -- Savepoint JSON\n        const { name, $name, version: _, ...rest } = dbSchema.jsonfy({ nodeNames: false });\n        const savepointJson = {\n            master_savepoint: details.masterSavepoint,\n            name,\n            $name,\n            database_tag: null,\n            ...rest,\n            version_tag: null,\n            version_state: 'commit',\n            commit_date: q => q.now(),\n            commit_desc: details.desc,\n            commit_client_id: this.params.clientID,\n            commit_client_pid: q => q.fn(this.params.dialect === 'mysql' ? 'connection_id' : 'pg_backend_pid'),\n        };\n        // -- Find a match first. We're doing forward first to be able to restart an entire history that has been rolled all the way back\n        const dbName = dbSchema.name()/* IMPORTANT: not $name() */;\n        const currentSavepoint = (await this.database(dbName).savepoint({ lookAhead: true, withCascades: false })) || await this.database(dbName).savepoint({ withCascades: false });\n        if (currentSavepoint) {\n            // -- Apply id and tag from lookup\n            savepointJson.database_tag = currentSavepoint.databaseTag();\n            savepointJson.version_tag = details.masterSavepoint ? 0 : currentSavepoint.versionMax() + 1;\n            // -- Delete all forward records\n            if (!details.masterSavepoint && currentSavepoint.versionState() === 'rollback') {\n                await savepointsTable.delete(q => q.where(\n                    q => q.eq('database_tag', q => q.value(currentSavepoint.databaseTag())),\n                    q => q.eq('version_state', q => q.value('rollback')),\n                ));\n            }\n        } else {\n            // -- Generate tag and version as fresh\n            savepointJson.database_tag = `db.${Date.now()}`;\n            savepointJson.version_tag = details.masterSavepoint ? 0 : 1;\n        }\n        // -- Create record\n        const insertResult = await savepointsTable.insert({ data: savepointJson, returning: '*' });\n        return new Savepoint(this, insertResult);\n    }\n\n    async getSavepoints(params = {}) {\n        const linkedDB = await this.linkedDB();\n        const tableIdent = linkedDB.table('savepoints').ident;\n        const utils = this.createCommonSQLUtils();\n        const fieldsLite = [`COALESCE(${utils.ident('$name')}, name) AS name`, 'database_tag', 'version_tag'];\n        const fieldsStd = ['master_savepoint', 'id', 'database_tag', 'name', utils.ident('$name'), 'status', 'version_tag', 'tables', 'version_state', 'commit_date', 'commit_desc', 'commit_client_id', 'rollback_date', 'rollback_desc', 'rollback_client_id'];\n        const versionTagsField = `(SELECT ${utils.jsonAgg('version_tag')} FROM ${tableIdent}\n            WHERE database_tag = main_savepoint.database_tag\n        ) AS version_tags`;\n        const cascadesFields = `(SELECT ${utils.jsonAgg('cascade')} FROM (\n            SELECT ${utils.jsonBuildObject(fieldsStd.reduce(($fields, f) => $fields.concat(`'${f}'`, f), []))} AS cascade\n            FROM ${tableIdent}\n            WHERE master_savepoint = main_savepoint.id\n        ) AS cascade_tbl_alias_unused_but_for_compat) AS cascades`;\n        const normalizeJson = (savepointJson) => ({ ...savepointJson, version_tags: savepointJson.version_tags.filter(c => c !== 0).sort(), cascades: savepointJson.cascades || [] });\n        if (params.forHistories) {\n            return (await this.query(`\n                SELECT ${[...fieldsStd, versionTagsField, cascadesFields].join(', ')} \n                FROM ${tableIdent} AS main_savepoint \n                WHERE master_savepoint IS NULL\n            `)).map(normalizeJson);\n        }\n        const fields = params.lite\n            ? [...fieldsLite, versionTagsField]\n            : [...fieldsStd, versionTagsField, ...(params.withCascades !== false ? [cascadesFields] : [])];\n        const schemaSelector = [].concat(params.selector || []);\n        const result = await this.query(`\n            SELECT ${fields.join(', ')} FROM (\n                SELECT *,\n                ROW_NUMBER() OVER (PARTITION BY database_tag ORDER BY version_state = ${params.lookAhead ? `'rollback'` : `'commit'`} DESC, version_tag ${params.lookAhead ? 'ASC' : 'DESC'}) AS rank_for_target,\n                FROM ${tableIdent}\n                WHERE master_savepoint IS NULL\n            ) AS main_savepoint WHERE ${!params.forState ? `version_state = ${params.lookAhead ? `'rollback'` : `'commit'`} AND ` : ''}rank_for_target = 1${params.selector ? (params.lookAhead ? ` AND ${utils.matchSelector('name', schemaSelector) || 'TRUE'}` : ` AND ${utils.matchSelector(`COALESCE(${utils.ident('$name')}, name)`, schemaSelector) || 'TRUE'}`) : ''}\n        `);\n        if (params.lite) return result;\n        return result.map((savepointJson) => new Savepoint(this, normalizeJson(savepointJson)));\n    }\n\n    /**\n     * ----------------\n     */\n\n    #pid;\n    async getPID($execGetPID) {\n        if (!this.#pid) this.#pid = await $execGetPID();\n        return this.#pid;\n    }\n\n    #listeners = new Map;\n    listen($execListen, channel, callback, ownEvents = false) {\n        if (!this.#listeners.has(channel)) {\n            this.#listeners.set(channel, new Set);\n            $execListen(channel, async (e) => {\n                const ownPid = await this.getPID();\n                for (const [callback, ownEvents] of this.#listeners.get(channel)) {\n                    if (!ownEvents && e.processId && e.processId === ownPid) continue;\n                    callback(e);\n                }\n            });\n        }\n        this.#listeners.get(channel).add([callback, ownEvents]);\n        return this;\n    }\n\n    /**\n     * -------------------------------\n     */\n\n    #schemaRequestStack = new Set;\n    #matchSchemaRequest(params, exactMatching = false) {\n        return [...this.#schemaRequestStack].find((entry) => {\n            if (_isObject(entry.params) && _isObject(params)) {\n                return Object.keys(params).every(key => {\n                    if (key === 'depth') {\n                        // If ongoing request has higher depth, current does't matter\n                        const [a, b] = [entry.params[key] || 0, params[key] || 0];\n                        return !exactMatching ? a >= b : a === b;\n                    }\n                    return entry.params[key] === params[key];\n                });\n            }\n            if (Array.isArray(entry.params) && Array.isArray(params)) {\n                return params.every(path2 => {\n                    // If ongoing request already has the db name\n                    return entry.params.find(path1 => path2.name === path1.name\n                        // If ongoing request has any of the tables mentioned in new request\n                        && ((tbls2, tbls1) => exactMatching ? _intersect(tbls2, tbls1).length === tbls2.length : !_difference(tbls2, tbls1).length)(_arrFrom(path2.tables), _arrFrom(path1.tables)));\n                });\n            }\n            if (_isObject(entry.params) && entry.params.depth && Array.isArray(params)) {\n                return params.every((req) => {\n                    return entry.resolvedSchema.database(req.name) && (![].concat(req.tables || []).length || entry.params.depth === 2);\n                });\n            }\n        });\n    }\n\n    $capture(requestName, requestSource) {\n        if (requestName === 'ROOT_SCHEMA') {\n            return this.#matchSchemaRequest({ depth: 2 })?.resolvedSchema;\n        }\n    }\n\n    extractPostExecName(query) {\n        if (query.CLAUSE === 'CREATE') return query.argument().name();\n        if (query.CLAUSE === 'ALTER') return query.argument().actions().find((cd) => cd.CLAUSE === 'RENAME' && !cd.KIND)?.argument().name() || query.reference().name();\n        return query.reference().name();\n    }\n\n    createCommonSQLUtils() {\n        const utils = {\n            ident: (name) => Identifier.fromJSON(this, name),\n            str: (value) => Str.fromJSON(this, { value }),\n            jsonBuildObject: (exprs) => this.params.dialect === 'mysql' ? `JSON_OBJECT(${exprs.join(', ')})` : `JSON_BUILD_OBJECT(${exprs.join(', ')})`,\n            jsonAgg: (expr) => this.params.dialect === 'mysql' ? `JSON_ARRAYAGG(${expr})` : `JSON_AGG(${expr})`,\n            anyValue: (col) => this.params.dialect === 'mysql' ? col : `MAX(${col})`,\n            groupConcat: (col, orderBy) => this.params.dialect === 'mysql' ? `GROUP_CONCAT(${col}${orderBy ? ` ORDER BY ${orderBy}` : ``} SEPARATOR ',')` : `STRING_AGG(${col}, ','${orderBy ? ` ORDER BY ${orderBy}` : ``})`,\n            matchSelector: (ident, enums) => {\n                const [names, _names, patterns] = enums.reduce(([names, _names, patterns], e) => {\n                    if (/^%|^!%|%$/.test(e)) return [names, _names, patterns.concat(e)];\n                    if (/^!/.test(e)) return [names, _names.concat(e.slice(1)), patterns];\n                    return [names.concat(e), _names, patterns];\n                }, [[], [], []]);\n                const $names = names.length && !(names.length === 1 && names[0] === '*') ? `${ident} IN (${names.map(utils.str).join(', ')})` : null;\n                const $_names = _names.length ? `${ident} NOT IN (${_names.map(utils.str).join(', ')})` : null;\n                const $patterns = patterns.length ? patterns.map((p) => /^!/.test(p) ? `${ident} NOT LIKE ${utils.str(p.slice(1))}` : `${ident} LIKE ${utils.str(p)}`).join(' AND ') : null;\n                return [$names, $_names, $patterns].filter(s => s).join(' AND ');\n            }\n        };\n        return utils;\n    }\n\n    #linkedDBConfig;\n    async linkedDB() {\n        const migrations = [\n            // --v1: create base structure\n            async (dbName) => {\n                await this.withMode('install', () => this.createDatabase({\n                    name: dbName,\n                    tables: [{\n                        name: 'savepoints',\n                        columns: [\n                            { name: 'id', ...(this.params.dialect === 'mysql' ? { type: 'char(36)', default: { expr: (q) => q.fn('uuid') } } : { type: 'uuid', default: { expr: (q) => q.fn('gen_random_uuid') } }), primaryKey: true },\n                            { name: 'master_savepoint', ...(this.params.dialect === 'mysql' ? { type: 'char(36)' } : { type: 'uuid' }), foreignKey: { targetTable: [dbName, 'savepoints'], targetColumns: ['id'], deleteRule: 'CASCADE' } },\n                            // Actual snapshot\n                            { name: 'name', type: ['varchar', 255], notNull: true },\n                            { name: '$name', type: ['varchar', 255] },\n                            { name: 'tables', type: 'json' },\n                            { name: 'status', type: ['varchar', 8], check: { in: ['status', { value: null }, { value: 'new' }, { value: 'obsolete' }] } },\n                            // Meta data\n                            { name: 'database_tag', type: ['varchar', 30], notNull: true },\n                            { name: 'version_tag', type: 'int', notNull: true },\n                            // Revision data\n                            { name: 'version_state', type: ['varchar', 8], notNull: true, check: { in: ['version_state', { value: 'commit' }, { value: 'rollback' }] } },\n                            { name: 'commit_date', type: ['timestamp', 3], notNull: true },\n                            { name: 'commit_desc', type: ['varchar', 255] },\n                            { name: 'commit_client_id', type: ['varchar', 255] },\n                            { name: 'commit_client_pid', type: ['varchar', 50] },\n                            { name: 'rollback_date', type: ['timestamp', 3] },\n                            { name: 'rollback_desc', type: ['varchar', 255] },\n                            { name: 'rollback_client_id', type: ['varchar', 255] },\n                            { name: 'rollback_client_pid', type: ['varchar', 50] },\n                        ],\n                    }, {\n                        name: 'config',\n                        columns: [\n                            { name: 'id', ...(this.params.dialect === 'mysql' ? { type: 'int', autoIncrement: true } : { type: 'int', identity: true }), primaryKey: true },\n                            { name: 'name', type: ['varchar', 100], notNull: true, uniqueKey: true },\n                            { name: 'value', type: ['varchar', 255] },\n                        ],\n                    }],\n                }));\n                if (this.params.dialect === 'postgres') {\n                    await this.driver.query(`\n                        -- The Function\n                        CREATE OR REPLACE FUNCTION fire_linked_db_event1() RETURNS trigger AS $$\n                        BEGIN\n                            PERFORM pg_notify('savepoints', json_build_object(\n                                'action', TG_OP,\n                                'body', CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE row_to_json(NEW) END\n                            )::text);\n                            RETURN NEW;\n                        END;\n                        $$ LANGUAGE plpgsql;\n                        CREATE OR REPLACE FUNCTION fire_linked_db_event2() RETURNS trigger AS $$\n                        BEGIN\n                            PERFORM pg_notify('config', json_build_object(\n                                'action', TG_OP,\n                                'body', CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE row_to_json(NEW) END\n                            )::text);\n                            RETURN NEW;\n                        END;\n                        $$ LANGUAGE plpgsql;\n                        -- The triggers\n                        DROP TRIGGER IF EXISTS savepoints_event_trigger ON \"${dbName}\".\"savepoints\";\n                        CREATE TRIGGER savepoints_event_trigger\n                            AFTER INSERT OR UPDATE OR DELETE ON \"${dbName}\".\"savepoints\"\n                            FOR EACH ROW EXECUTE FUNCTION fire_linked_db_event1();\n                        DROP TRIGGER IF EXISTS config_event_trigger ON \"${dbName}\".\"config\";\n                        CREATE TRIGGER config_event_trigger\n                            AFTER INSERT OR UPDATE OR DELETE ON \"${dbName}\".\"config\"\n                            FOR EACH ROW EXECUTE FUNCTION fire_linked_db_event2();\n                    `);\n                }\n            },\n        ];\n        // -- Initialise\n        const peakVersion = migrations.length;\n        const baseName = (v) => 'linked_db' + (v && `_v${v}` || '');\n        const instance = this.database(baseName(peakVersion));\n        Object.defineProperty(instance, 'uninstall', {\n            value: async (cascade) => {\n                const returnValue = await this.withMode('uninstall', () => this.dropDatabase(instance.name, { cascade }));\n                this.installed = false;\n                return returnValue;\n            }\n        });\n        Object.defineProperty(instance, 'config', {\n            value: async (...args) => {\n                if (args.length > 1 || _isObject(args[0])) {\n                    const hash = _isObject(args[0])\n                        ? Object.keys(args[0]).map((name) => ({ name, value: args[0][name] }))\n                        : { name: args[0], value: args[1] };\n                    const invalids = _difference(hash.map((c) => c.name), ['auto_savepoints', 'require_client_ids', 'require_commit_descs', 'database_role']);\n                    if (invalids.length) throw new Error(`Invalid configs: ${invalids.join(', ')}`);\n                    if (this.#linkedDBConfig) {\n                        for (const e of [].concat(hash)) {\n                            this.#linkedDBConfig.set(e.name, e.value);\n                        }\n                    }\n                    return this.withSchema({ depth: 2, selector: 'linked_db%' }, async () => {\n                        return await instance.table('config').upsert({ data: hash });\n                    });\n                }\n                if (!this.#linkedDBConfig) {\n                    try {\n                        const entries = await instance.table('config').select();\n                        this.#linkedDBConfig = new Map(entries.map((e) => [e.name, e.value]));\n                        this.listen('config', (e) => {\n                            const payload = JSON.parse(e.payload);\n                            if (payload.action === 'DELETE') {\n                                this.#linkedDBConfig.delete(payload.body.name);\n                            } else {\n                                this.#linkedDBConfig.set(payload.body.name, payload.body.value);\n                            }\n                        });\n                    } catch (e) {\n                        this.#linkedDBConfig = new Map;\n                    }\n                }\n                if (!args.length) return Object.fromEntries(this.#linkedDBConfig);\n                if (Array.isArray(args[0])) return Object.fromEntries(args[0].map((k) => [k, this.#linkedDBConfig.get(k)]));\n                return this.#linkedDBConfig.get(args[0]);\n            }\n        });\n        if (this.installed) return instance;\n        this.installed = true;\n        // -- Install or upgrade\n        const rootSchema = await this.schema({ depth: 1, selector: 'linked_db%' });\n        const foundName = rootSchema.databases(false).find(dbName => dbName.startsWith(baseName()) || dbName === 'obj_information_schema');\n        const foundVersion = foundName && /^.+?([\\d]+)$/.exec(foundName)?.[1] || -1;\n        if (foundName && foundVersion === -1) console.warn(`Your database has a old version of Linked DB that is no longer supported. Any savepoint record in there will be retained but won't be migrated to the new Linked DB version you have now. You may file an issue on github for any assistance.`);\n        if (peakVersion < foundVersion) throw new Error(`Your database has a higher version of Linked DB \"${foundVersion}\" than this query client is designed to support \"${peakVersion}\". Consider upgrading this client to latest version.`);\n        for (let i = 1; i <= migrations.length; i++) {\n            if (i <= foundVersion) continue;\n            const fromName = baseName(i - 1), toName = baseName(i);\n            try {\n                if (i > 1) await this.withMode('install', () => this.alterDatabase(fromName, dbSchema => dbSchema.name(toName)));\n                await migrations[i - 1](toName);\n            } catch (e) {\n                if (!foundName && i === 1) console.log(`Error installing ${toName}.`);\n                else console.log(`Error upgrading your Linked DB version from ${fromName} to ${toName}. Consider filing an issue on github.`);\n                throw e;\n            }\n        }\n        return instance;\n    }\n}", "import { _isArray, _isFunction, _isObject } from '@webqit/util/js/index.js';\nimport { _beforeLast, _afterLast } from '@webqit/util/str/index.js';\nimport { GlobalTableRef } from '../lang/expr/refs/GlobalTableRef.js';\nimport { InsertStatement } from '../lang/dml/InsertStatement.js';\nimport { UpsertStatement } from '../lang/dml/UpsertStatement.js';\nimport { UpdateStatement } from '../lang/dml/UpdateStatement.js';\nimport { DeleteStatement } from '../lang/dml/DeleteStatement.js';\nimport { SelectStatement } from '../lang/dql/SelectStatement.js';\n\nexport class AbstractTable {\n\n\tconstructor(database, tblName, params = {}) {\n\t\tthis.$ = { database, name: tblName, params };\n\t}\n\n\tget database() { return this.$.database; }\n\n\tget name() { return this.$.name; }\n\n\tget ident() { return GlobalTableRef.fromJSON(this, [this.database.name, this.name]); }\n\n\tget params() { return Object.assign({}, this.database.params, this.$.params); }\n\n\tasync schema() { return (await this.database.schema(this.name))?.table(this.name); }\n\n\tasync count(expr, clauses = {}) {\n\t\tconst result = await this.select({ ...clauses, shorthands: false, fields: [{ expr: { count: [expr] }, as: 'c' }] });\n\t\treturn !Array.isArray(result)/*for when clauses.where is an ID*/ ? result.c : result[0].c;\n\t}\n\n\tasync select(...args) {\n\t\tconst clauses = (typeof args[0] !== 'function' && args.shift()) || {};\n\t\tconst buildCallback = (typeof args[0] === 'function' && args.shift()) || null;\n\t\tconst singular = ['string', 'number'].includes(typeof clauses.where);\n\t\treturn this.database.client.withSchema(async () => {\n\t\t\tconst { shorthands: __, ...$clauses } = { fields: '*', from: [[this.database.name, this.name]], ...clauses };\n\t\t\tif (clauses.shorthands) {\n\t\t\t\t$clauses.fields = await this.buildShapePath($clauses.fields, 'fields');\n\t\t\t}\n\t\t\tconst json = await this.resolveWhereClause($clauses);\n\t\t\tconst query = this.createQuery(json, SelectStatement, 'table.select()');\n\t\t\tbuildCallback?.(query);\n\t\t\tconst result = await this.database.client.execQuery(query);\n\t\t\tif (singular) return result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tasync insert(...args) {\n\t\tlet isUpsert, singular = false;\n\t\tif (typeof args[0] === 'boolean') isUpsert = args.shift();\n\t\tconst clauses = (typeof args[0] !== 'function' && {...args.shift()}) || {};\n\t\tconst buildCallback = (typeof args[0] === 'function' && args.shift()) || null;\n\t\treturn this.database.client.withSchema(async () => {\n\t\t\tif (clauses.columns) {\n\t\t\t\tif (clauses.shorthands) {\n\t\t\t\t\tclauses.columns = await this.buildShapePath(clauses.columns, 'columns');\n\t\t\t\t}\n\t\t\t\tclauses.values = clauses.values.map((row) => ({ row: this.buildValueMatrix(row, clauses.columns, 'value-matrix') }));\n\t\t\t} else if (clauses.data) {\n\t\t\t\tsingular = _isObject(clauses.data) && clauses.returning;\n\t\t\t\t[clauses.columns, clauses.values] = await this.resolvePayload([].concat(clauses.data), 'payload');\n\t\t\t}\n\t\t\tconst { data: _, shorthands: __, ...$clauses } = { ...clauses, into: [[this.database.name, this.name]] };\n\t\t\tconst query = this.createQuery($clauses, isUpsert ? UpsertStatement : InsertStatement, `table.${isUpsert ? 'upsert' : 'insert'}()`);\n\t\t\tbuildCallback?.(query);\n\t\t\tconst result = await this.database.client.execQuery(query);\n\t\t\tif (singular) return result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tasync upsert(...args) { return await this.insert(true, ...args); }\n\n\tasync update(...args) {\n\t\tconst clauses = (typeof args[0] !== 'function' && args.shift()) || {};\n\t\tconst buildCallback = (typeof args[0] === 'function' && args.shift()) || null;\n\t\tconst singular = ['string', 'number'].includes(typeof clauses.where) && clauses.returning;\n\t\treturn this.database.client.withSchema(async () => {\n\t\t\tconst payload = [clauses.set || clauses.data];\n\t\t\tconst [columns, [{ row: values }]] = await this.resolvePayload(payload, clauses.set ? 'payload-array' : 'payload');\n\t\t\tconst { data: _, shorthands: __, ...$clauses } = { ...(await this.resolveWhereClause(clauses)), table: [[this.database.name, this.name]], set: columns.map((c, i) => [c, values[i]]) };\n\t\t\tconst query = this.createQuery($clauses, UpdateStatement, `table.update()`);\n\t\t\tbuildCallback?.(query);\n\t\t\tconst result = await this.database.client.execQuery(query);\n\t\t\tif (singular) return result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tasync delete(...args) {\n\t\tif (!args.length) throw new Error(`The \"clauses\" parameter cannot be ommitted.`);\n\t\tconst clauses = (typeof args[0] !== 'function' && {...args.shift()}) || {};\n\t\tconst buildCallback = (typeof args[0] === 'function' && args.shift()) || null;\n\t\tconst singular = ['string', 'number'].includes(typeof clauses.where) && clauses.returning;\n\t\treturn this.database.client.withSchema(async () => {\n\t\t\t// Compose JSON\n\t\t\tconst $clauses = { ...(await this.resolveWhereClause(clauses)), from: [[this.database.name, this.name]] };\n\t\t\tconst query = this.createQuery($clauses, DeleteStatement, `table.delete()`);\n\t\t\tbuildCallback?.(query);\n\t\t\tconst result = await this.database.client.execQuery(query);\n\t\t\tif (singular) return result[0];\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t/**\n\t * -------------------------------\n\t */\n\n\tcreateQuery(json, Class, id) {\n\t\treturn Class.prototype.$castInputs.call(this.database.client, [json], Class, null, id);\n\t}\n\n\tasync resolveWhereClause(clauses) {\n\t\tif (['string', 'number'].includes(typeof clauses.where)) {\n\t\t\tconst tblSchema = await this.schema();\n\t\t\tconst primaryKey = tblSchema.primaryKey()?.columns()[0];\n\t\t\tif (!primaryKey) throw new Error(`Cannot resolve primary key name for implied record.`);\n\t\t\treturn { ...clauses, where: { eq: [primaryKey, clauses.where] } };\n\t\t}\n\t\treturn clauses;\n\t}\n\n\tasync resolvePayload(payload, payloadType) {\n\t\tif (payloadType === 'payload-array') {\n\t\t\tif (!Array.isArray(payload) || !Array.isArray(payload[0])) throw new TypeError(`Invalid payload format.`);\n\t\t} else {\n\t\t\tif (!_isObject(payload[0])) throw new TypeError(`Invalid payload format.`);\n\t\t}\n\t\tconst columns = await this.buildShapePath(payload[0], payloadType);\n\t\tconst valueMatrix = payload.map((data) => ({ row: this.buildValueMatrix(data, columns, payloadType) }));\n\t\treturn [columns, valueMatrix];\n\t}\n\n\tasync buildShapePath(shape, shapeType) {\n\t\tconst tblSchema = await this.schema();\n\t\tif (!tblSchema) throw new Error(`Table ${this.ident} does not exist.`);\n\t\tconst dimensionType = shapeType === 'fields' ? 'fields' : 'columns';\n\t\tconst isPayload = ['payload', 'payload-array'].includes(shapeType);\n\t\tconst tbl2BuildShapePath = async (tbl2, shape, fkName = null) => {\n\t\t\tif (fkName) {\n\t\t\t\tconst fk = (await tbl2.schema())?.column(fkName)?.foreignKey();\n\t\t\t\tif (!fk?.targetTable().identifiesAs(this.ident)) throw new Error(`${tbl2.ident}.${fkName} isn't a reference to ${this.ident}`);\n\t\t\t\treturn await tbl2.buildShapePath(shape, shapeType);\n\t\t\t}\n\t\t\tconst fks = (await tbl2.schema()).foreignKeys().filter((fk) => fk.targetTable().identifiesAs(this.ident));\n\t\t\tif (fks.length !== 1) throw new Error(`${fks.length} correletions found between ${this.ident} and ${tbl2.ident}`);\n\t\t\treturn [fks[0].columns()[0], await tbl2.buildShapePath(shape, shapeType)];\n\t\t};\n\t\tconst resolveKey = async (key, value) => {\n\t\t\tconst colSchema = tblSchema.column(key);\n\t\t\tconst fk = colSchema?.foreignKey();\n\t\t\tif (fk && !isPayload && typeof value === 'string') {\n\t\t\t\treturn { rpath: [key, value] };\n\t\t\t}\n\t\t\tif (fk && (_isObject(value) || Array.isArray(value))) {\n\t\t\t\tconst targetTable = this.database.client.database(fk.targetTable().prefix(true).name()).table(fk.targetTable().name());\n\t\t\t\treturn { rpath: [key, { [dimensionType]: await targetTable.buildShapePath(value, shapeType) }] };\n\t\t\t}\n\t\t\tif (!colSchema) {\n\t\t\t\tif (isPayload) {\n\t\t\t\t\tif (!Array.isArray(value)) throw new Error(`Unknown column: ${key}`);\n\t\t\t\t} else if (Array.isArray(value) && (value.some((e) => typeof e === 'string') || value.length > 1)) {\n\t\t\t\t\tvalue = [value]; // { books: ['key1', 'key2'] } -> { books: [['key1', 'key2']] }, { books: [{ key1: true }, { key2: true }] } -> { books: [[{ key1: true }, { key2: true }]] }\n\t\t\t\t} else if (_isObject(value)) {\n\t\t\t\t\tvalue = [value]; // { books: { key1: true, key2: true } } -> { books: [{ key1: true, key2: true }] }\n\t\t\t\t} else if (typeof value === 'string') {\n\t\t\t\t\tvalue = [[value]]; // { books: 'title' } -> { books: [['title']] }\n\t\t\t\t}\n\t\t\t\tconst tbl2 = this.database.table(key);\n\t\t\t\tconst [fkName, columns] = await tbl2BuildShapePath(tbl2, value[0]);\n\t\t\t\tconst dimension = { [dimensionType]: columns };\n\t\t\t\treturn { rpath: [{ lpath: [fkName, [this.database.name, key]] }, shapeType === 'fields' ? { expr: dimension }/* aggr */ : dimension] };\n\t\t\t}\n\t\t\treturn key;\n\t\t};\n\t\tconst columns = [];\n\t\tif (_isObject(shape)) {\n\t\t\tfor (const key in shape) {\n\t\t\t\tif (!isPayload && shape[key] === false) continue;\n\t\t\t\tcolumns.push(await resolveKey(key, shape[key]));\n\t\t\t}\n\t\t\treturn columns;\n\t\t}\n\t\tfor (const key of shape) {\n\t\t\tif (shapeType === 'payload-array') {\n\t\t\t\tif (_isObject(key[0])) {\n\t\t\t\t\tif (!key[0].lpath) throw new Error(`Invalid key spec: ${JSON.stringify(key[0])}`);\n\t\t\t\t\tconst tableSpec = [].concat(key[0].lpath[1]);\n\t\t\t\t\tconst db2 = tableSpec.length === 2 ? this.database.client.database(tableSpec.shift()) : this.database;\n\t\t\t\t\tconst tbl2 = db2.table(tableSpec.shift());\n\t\t\t\t\tcolumns.push({ rpath: [key[0], { columns: await tbl2BuildShapePath(tbl2, key[1][0], key[0].lpath[0]) }] });\n\t\t\t\t} else {\n\t\t\t\t\tcolumns.push(await resolveKey(key[0], key[1]));\n\t\t\t\t}\n\t\t\t} else if (_isObject(key)) {\n\t\t\t\tcolumns.push(await resolveKey(Object.keys(key)[0], Object.values(key)[0]));\n\t\t\t} else columns.push(key);\n\t\t}\n\t\treturn columns;\n\t}\n\n\tbuildValueMatrix(data, columns, payloadType) {\n\t\tconst getValue = (from, key, i) => {\n\t\t\tif (payloadType === 'payload') return from[key];\n\t\t\tif (payloadType === 'payload-array') return from[i][1];\n\t\t\treturn from[i]; // 'value-matrix'\n\t\t};\n\t\tconst asMap = payloadType === 'payload';\n\t\tif ((asMap && !_isObject(data)) || (!asMap && !Array.isArray(data))) throw new Error(`Irregular payload structure: expected an object of shape ${JSON.stringify(columns)} but got: ${data}`);\n\t\tconst valueMatrix = [], colsLength = columns.length;\n\t\tfor (let i = 0; i < colsLength; i ++) {\n\t\t\tconst column = columns[i];\n\t\t\tif (column.rpath) {\n\t\t\t\tconst key = column.rpath[0];\n\t\t\t\tconst columns = column.rpath[1].columns || [column.rpath[1]];\n\t\t\t\tif (key.lpath) {\n\t\t\t\t\tconst [, [, table]] = key.lpath;\n\t\t\t\t\tconst values = getValue(data, table, i);\n\t\t\t\t\tif (!Array.isArray(values)) throw new Error(`Irregular payload structure: expected an array of ${table} of shape ${JSON.stringify(columns)} but got: ${values}`);\n\t\t\t\t\tvalueMatrix.push({ values: values.map((data) => ({ row: this.buildValueMatrix(data, columns, payloadType) })) });\n\t\t\t\t} else {\n\t\t\t\t\tconst row = getValue(data, key, i);\n\t\t\t\t\tvalueMatrix.push({ row: this.buildValueMatrix(row, columns, payloadType) });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = getValue(data, column, i);\n\t\t\t\tvalueMatrix.push(toValue(value));\n\t\t\t}\n\t\t}\n\t\treturn valueMatrix;\n\t}\n\n\t$capture(requestName, requestSource) {\n\t\treturn this.database.$capture(requestName, requestSource);\n\t}\n}\n\nconst toValue = (v) => {\n\tif (typeof v === 'function') return v;\n\tif (v instanceof Date) return (q) => q.value(v.toISOString().split('.')[0]);\n\tif (Array.isArray(v) || _isObject(v)) return (q) => q.json(v);\n\tif ([null, undefined].includes(v)) return (q) => q.literal(null);\n\treturn (q) => q.value(v);\n};", "\n\nexport class AbstractCursor {\n\t \n\t_pos = 0;\n\t_eof = false;\n\t_onfinish = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(rows) {\n\t\tthis._cache = rows;\n\t}\n\t\t \n\tget eof() { return !this._cache.length || this._pos === this._cache.length - 1; }\n\t \n\tonfinish(callback) { this._onfinish.push(callback); }\n\t \n\tnext() {\n\t\tif (this.eof) {\n\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\tthis._pos = 0;\n\t\t\treturn;\n\t\t}\n        this._pos ++;\n\t}\n\t \n\tasync fetch() {\n\t\tif (this.eof) return;\n\t\treturn this._cache[this._pos];\n\t}\n}", "import { AbstractCursor } from '../AbstractCursor.js';\n\nexport class SQLCursor extends AbstractCursor {\n\t \n\tconstructor(store) {\n\t\tsuper([]);\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis._storeFetch = new Promise(async resolve => {\n\t\t\tthis.cache = await this._store.select();\n\t\t\tresolve();\n\t\t});\n\t}\n\t \n\tasync fetch() {\n\t\tawait this._storeFetch;\n\t\treturn super.fetch();\n\t}\n}\n", "import { AbstractTable } from '../AbstractTable.js';\nimport { SQLCursor } from './SQLCursor.js';\n\nexport class SQLTable extends AbstractTable {\n\n\tgetCursor() { return new SQLCursor(this); }\n}", "import { AlterTable } from '../lang/ddl/database/actions/AlterTable.js';\nimport { CreateTable } from '../lang/ddl/database/actions/CreateTable.js';\nimport { DropTable } from '../lang/ddl/database/actions/DropTable.js';\nimport { RenameTable } from '../lang/ddl/database/actions/RenameTable.js';\nimport { GlobalDatabaseRef } from '../lang/expr/refs/GlobalDatabaseRef.js';\n\nexport class AbstractDatabase {\n\n    constructor(client, dbName, params = {}) {\n        Object.defineProperty(this, '$', { value: { client, name: dbName, params } });\n    }\n\n    get client() { return this.$.client; }\n\n    get name() { return this.$.name; }\n\n    get ident() { return GlobalDatabaseRef.fromJSON(this, this.name); }\n\n    get params() { return Object.assign({}, this.client.params, this.$.params); }\n\n    async savepoint(params = {}) { return (await this.client.getSavepoints({ ...params, forState: true, selector: this.name }))[0]; }\n\n    async version() { return (await this.savepoint())?.versionTag() || 0; }\n\n    async schema(tblSelector = '*') { return (await this.client.schema([{ name: this.name, tables: [].concat(tblSelector) }])).database(this.name); }\n\n    async createTable(createSpec, params = {}) {\n        if (typeof createSpec === 'string') { createSpec = { name: createSpec, columns: [] }; }\n        const query = CreateTable.fromJSON(this, { kind: params.kind, argument: createSpec });\n        query.argument().prefix(this.name);\n        if (params.ifNotExists) query.withFlag('IF_NOT_EXISTS');\n        if (params.returning) query.returning(params.returning);\n        const returnValue = await this.client.execQuery(query, params);\n        if (returnValue === true) return this.table(query.argument().name());\n        return returnValue;\n    }\n\n    async renameTable(tblName, tblToName, params = {}) {\n        const query = RenameTable.fromJSON(this, { kind: params.kind, reference: tblName, argument: tblToName });\n        if (!query) throw new Error(`renameTable() called with invalid arguments.`);\n        query.reference().prefix(this.name);\n        if (params.returning) query.returning(params.returning);\n        const returnValue = await this.client.execQuery(query, params);\n        if (returnValue === true) return this.table(tblToName);\n        return returnValue;\n    }\n\n    async alterTable(tblName, callback, params = {}) {\n        if (typeof callback !== 'function') throw new Error(`alterTable() called with invalid arguments.`);\n        return await this.client.withSchema(async () => {\n            // -- Compose an query from request\n            const tblSchema = await this.table(tblName).schema();\n            if (!tblSchema) throw new Error(`Table \"${tblName}\" does not exist.`);\n            const tblSchemaEditable = tblSchema.clone();\n            await callback(tblSchemaEditable.$nameLock(true));\n            const tableCDL = tblSchema.diffWith(tblSchemaEditable).generateCDL({ cascadeRule: params.cascadeRule, existsChecks: params.existsChecks });\n            if (!tableCDL.length) return;\n            const query = AlterTable.fromJSON(this, { kind: params.kind, reference: tblSchema.name(), argument: tableCDL });\n            query.reference().prefix(this.name);\n            if (params.ifExists) query.withFlag('IF_EXISTS');\n            if (params.returning) query.returning(params.returning);\n            const returnValue = await this.client.execQuery(query, params);\n            if (returnValue === true) return this.table(this.client.extractPostExecName(query));\n            return returnValue;\n        });\n    }\n\n    async dropTable(tblName, params = {}) {\n        const query = DropTable.fromJSON(this, { kind: params.kind, reference: tblName });\n        if (!query) throw new Error(`dropTable() called with invalid arguments.`);\n        query.reference().prefix(this.name);\n        if (params.ifExists) query.withFlag('IF_EXISTS');\n        if (params.restrict) query.withFlag('RESTRICT');\n        else if (params.cascade) query.withFlag('CASCADE');\n        if (params.returning) query.returning(params.returning);\n        return this.client.execQuery(query, params);\n    }\n\n    async hasTable(name) {\n        return (await this.tables()).includes(name);\n    }\n\n    async tables() {\n        return (await this.schema()).tables(false);\n    }\n\n    table(name, params = {}) { return new this.constructor.Table(this, ...arguments); }\n\n    $capture(requestName, requestSource) {\n        return this.client.$capture(requestName, requestSource);\n    }\n}", "import { SQLTable } from './SQLTable.js';\nimport { AbstractDatabase } from '../AbstractDatabase.js';\n\nexport class SQLDatabase extends AbstractDatabase {\n\n    static Table = SQLTable;\n}", "import { Lexer } from '../../lang/Lexer.js';\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport { Identifier } from '../../lang/expr/Identifier.js';\nimport { DeleteStatement } from '../../lang/dml/DeleteStatement.js';\nimport { InsertStatement } from '../../lang/dml/InsertStatement.js';\nimport { AbstractClient } from '../AbstractClient.js';\nimport { SQLDatabase } from './SQLDatabase.js';\nimport { Parser } from '../../lang/Parser.js';\n\nexport class SQLClient extends AbstractClient {\n\n    constructor(driver, params = {}) {\n        if (typeof driver !== 'object') throw new Error(`The options.driver parameter is required and must be an object.`);\n        if (typeof driver.query !== 'function') throw new Error(`The provided driver must expose a .query() function.`);\n        super(params);\n        this.$.driver = driver;\n    }\n\n    get driver() { return this.$.driver; }\n\n    static kind = 'sql';\n\n    static Database = SQLDatabase;\n\n    async schema(params) {\n        return super.schema(async (params) => {\n            const sql = this.#composeSchemaSQL(params);\n            const result = await this.driver.query(sql);\n            return this.#formatSchemasResult((result.rows || result));\n        }, ...arguments);\n    }\n\n    async searchPath(searchPath = []) {\n        if (arguments.length) {\n            searchPath = [].concat(searchPath).map(name => Identifier.fromJSON(this, name));\n            const sql = this.params.dialect === 'mysql' ? `USE ${searchPath[0]}` : `SET SEARCH_PATH TO ${searchPath.join(',')}`;\n            return await this.driver.query(sql);\n        }\n        let sql, key;\n        if (this.params.dialect === 'mysql') {\n            sql = 'SELECT database() AS default_db', key = 'default_db';\n        } else {\n            sql = `SHOW SEARCH_PATH`, key = 'search_path'; // Can't remember what happens here\n            sql = `SELECT current_setting('SEARCH_PATH')`, key = 'current_setting';\n        }\n        const result = await this.driver.query(sql);\n        const value = ((result.rows || result)[0] || {})[key];\n        return Lexer.split(value, [',']).map(s => Identifier.parseIdent(this, s.trim())[0]);\n    }\n\n    async execDQL(query, queryBindings = [], params = {}) {\n        return await this.execSQL(query, queryBindings, params);\n    }\n\n    async execDML(query, queryBindings = []) {\n        const vars = { hasReturnList: !!query.returning() };\n        const mysqlReturningSupport = this.params.dialect === 'mysql' && vars.hasReturnList;\n        if (mysqlReturningSupport) {\n            [query, vars.mysqlPostHook] = await this.#mysqlReturningMagic(query);\n        }\n        vars.returnValue = await this.driver.query(query.toString(), queryBindings);\n        if (vars.mysqlPostHook) {\n            vars.returnValue = await vars.mysqlPostHook(vars.returnValue);\n        }\n        if (vars.hasReturnList) return vars.returnValue.rows || vars.returnValue;\n        return 'rowCount' in vars.returnValue ? vars.returnValue.rowCount : vars.returnValue.affectedRows;\n    }\n\n    async execDDL(query, rootSchema, params = {}) {\n        return await super.execDDL(async (query) => {\n            return await this.driver.query(query.toString()); \n        }, ...arguments);\n    }\n\n    async execSQL(query, queryBindings = []) {\n        const returnValue = await this.driver.query(query.toString(), queryBindings);\n        return returnValue.rows || returnValue;\n    }\n\n    /**\n     * ----------------\n     */\n\n    async getPID() {\n        return super.getPID(async () => {\n            const result = await this.driver.query(`SELECT ${ this.params.dialect === 'mysql' ? 'connection_id()' : 'pg_backend_pid()' } AS pid`);\n            return (result.rows || result)[0]?.pid;\n        });\n    }\n\n    listen(channel, callback, ownEvents = false) {\n        return super.listen((channel, handle) => {\n            this.driver.query(`LISTEN ${channel}`);\n            this.driver.on('notification', async (e) => {\n                if (e.channel === channel) handle(e);\n            });\n        }, ...arguments);\n    }\n\n    /**\n     * ----------------\n     */\n\n    async #mysqlReturningMagic(query) {\n        if (query.tables().length > 1) {\n            throw new Error(`The support for a \"RETURNING\" clause for mysql does'nt yet support muilt-table statements.`);\n        }\n        query = query.clone();\n        const tableRef = query.tables()[0].expr().clone();\n        const returningClause = query.returning();\n        // Disconnect from query\n        query.returning(undefined);\n        // -----------\n        // Delete statements are handled ahead of the query\n        if (query instanceof DeleteStatement) {\n            const result = await this.driver.query(`SELECT ${returningClause} FROM ${tableRef}${query.where() || ''}`);\n            return [query, () => result];\n        }\n        // Insert and update statements are post-handled\n        // -----------\n        const colName = 'obj_column_for_returning_clause_support';\n        const columnIdent = Identifier.fromJSON(this, colName);\n        const tblSchema = tableRef.schema();\n        if (!tblSchema.column(colName)) await this.driver.query(`ALTER TABLE ${tableRef} ADD COLUMN ${columnIdent} char(36) INVISIBLE`);\n        const insertUuid = (0 | Math.random() * 9e6).toString(36);\n        // -----------\n        if (query.set())/*Both Insert & Update*/ {\n            query.set().assignment(colName, q => q.value(insertUuid));\n        } else if (query instanceof InsertStatement) {\n            // Columns must be explicitly named\n            if (!query.columns() && (query.select() || query.values()?.length)) {\n                //query.columns(...columns);\n                throw new Error(`The support for a \"RETURNING\" clause for mysql currently requires explicit column list in INSERT statements.`);\n            }\n            query.columns().add(colName);\n            // Add to values list, or select list if that's what's being used\n            if (query.select()) {\n                query.select().fields().add(q => q.value(insertUuid));\n            } else if (query.values()?.length) {\n                for (const valuesSpec of query.values()) valuesSpec.add(q => q.value(insertUuid));\n            } else query.values(insertUuid);\n        }\n        if (query instanceof InsertStatement && query.onConflict()) {\n            query.onConflict().assignment(colName, q => q.value(insertUuid));\n        }\n        return [query, async () => {\n            // -----------\n            const result = await this.driver.query(`SELECT ${returningClause} FROM ${target} WHERE ${columnIdent} = '${insertUuid}'`);\n            if (this.params.mysqlReturningClause === 'WITH_AUTO_CLEANUP') await this.driver.query(`ALTER TABLE ${target} DROP COLUMN ${columnIdent}`);\n            // -----------\n            return result;\n        }];\n    }\n\n    #composeSchemaSQL(params = {}) {\n        // -- HOW WE MATCH NAMES\n        const utils = this.createCommonSQLUtils();\n        // -- SELECTOR\n        const $parts = {\n            fields: [],\n            dbWhere: '',\n            tblWhere: '',\n            orderBy: '',\n            depth: 0\n        };\n        if (Array.isArray(params)) {\n            $parts.dbWhere = `\\nWHERE db.schema_name IN ('${params.map(s => s.name).join(`', '`)}')`;\n            const $tblWhere = params.reduce((cases, s) => {\n                const tbls = [].concat(s.tables || []);\n                if (!tbls.length || tbls.includes('*')) return cases;\n                return cases.concat(`WHEN '${s.name}' THEN ${utils.matchSelector('tbl.table_name', tbls)}`);\n            }, []);\n            $parts.tblWhere = $tblWhere.length ? ` AND CASE db.schema_name ${$tblWhere.join(' ')} END` : '';\n            $parts.depth = 2;\n        } else {\n            const schemaSelector = [].concat(params.selector || []);\n            if (schemaSelector.length) {\n                const $dbWhere = utils.matchSelector('db.schema_name', schemaSelector);\n                $parts.dbWhere = $dbWhere ? `\\nWHERE ${$dbWhere}` : '';\n            }\n            $parts.orderBy = `\\nORDER BY array_position(current_schemas(false), db.schema_name)`;\n            $parts.depth = params.depth || 0;\n        }\n        // -- THE COLUMNS PART\n        const buildColumns = () => {\n            // Composition\n            const fields = {\n                table_schema: `cols.table_schema`,\n                table_name: `cols.table_name`,\n                column_name: `cols.column_name`,\n                ordinal_position: `cols.ordinal_position`,\n                column_default: `cols.column_default`,\n                is_nullable: `cols.is_nullable`,\n                data_type: `cols.data_type`,\n                character_maximum_length: `cols.character_maximum_length`,\n                ...(this.params.dialect === 'mysql' ? {\n                    extra: `cols.extra`,\n                } : {\n                    is_identity: `cols.is_identity`,\n                    identity_generation: `cols.identity_generation`,\n                    identity_start: `cols.identity_start`,\n                    identity_increment: `cols.identity_increment`,\n                    identity_maximum: `cols.identity_maximum`,\n                    identity_minimum: `cols.identity_minimum`,\n                    identity_cycle: `cols.identity_cycle`,\n                }),\n                is_generated: `cols.is_generated`,\n                generation_expression: `cols.generation_expression`,\n            };\n            const baseQuery = `\n                SELECT ${Object.entries(fields).map(([k, v]) => `${v} AS ${k}`).join(', ')}\n                FROM information_schema.columns AS cols\n                WHERE cols.table_schema = tbl.table_schema AND cols.table_name = tbl.table_name\n                ORDER BY cols.ordinal_position\n            `;\n            // Return as an aggregation\n            return `SELECT ${utils.jsonAgg(\n                utils.jsonBuildObject(Object.keys(fields).reduce(($fields, f) => $fields.concat(`'${f}'`, `cols.${f}`), []))\n            )} FROM (${baseQuery}) AS cols`;\n        };\n        // -- THE CONSTRAINS PART\n        const buildConstraints = () => {\n            // Composition\n            const fields = {\n                table_schema: utils.anyValue(`cons.constraint_schema`),\n                table_name: utils.anyValue(`cons.table_name`),\n                column_name: utils.groupConcat(`cons_details.column_name`, `cons_details.ordinal_position`),\n                constraint_name: `cons.constraint_name`,\n                constraint_type: utils.anyValue(`cons.constraint_type`),\n                check_clause: utils.anyValue(`check_constraints_details.check_clause`),\n                ...(this.params.dialect === 'mysql' ? {\n                    check_constraint_level: utils.anyValue(`check_constraints_details.level`),\n                    referenced_column_name: utils.groupConcat(`cons_details.referenced_column_name`),\n                    referenced_table_name: utils.anyValue(`cons_details.referenced_table_name`),\n                    referenced_table_schema: utils.anyValue(`cons_details.referenced_table_schema`),\n                } : {\n                    referenced_column_name: utils.groupConcat(`relation_details.column_name`),\n                    referenced_table_name: utils.anyValue(`relation_details.table_name`),\n                    referenced_table_schema: utils.anyValue(`relation_details.table_schema`),\n                }),\n                referenced_constraint_name: utils.groupConcat(`relation.unique_constraint_name`),\n                match_rule: utils.anyValue(`relation.match_option`),\n                update_rule: utils.anyValue(`relation.update_rule`),\n                delete_rule: utils.anyValue(`relation.delete_rule`),\n            };\n            const baseQuery = `\n                SELECT ${Object.entries(fields).map(([k, v]) => `${v} AS ${k}`).join(', ')}\n                FROM information_schema.table_constraints AS cons\n                LEFT JOIN information_schema.key_column_usage AS cons_details\n                    ON cons_details.constraint_name = cons.constraint_name\n                    AND cons_details.table_name = cons.table_name\n                    AND cons_details.constraint_schema = cons.constraint_schema\n                    AND cons_details.constraint_catalog = cons.constraint_catalog\n                LEFT JOIN information_schema.check_constraints AS check_constraints_details\n                    ON check_constraints_details.constraint_name = cons.constraint_name\n                    AND check_constraints_details.constraint_schema = cons.constraint_schema\n                    AND check_constraints_details.constraint_catalog = cons.constraint_catalog\n                LEFT JOIN information_schema.referential_constraints AS relation\n                    ON relation.constraint_name = cons.constraint_name\n                    AND relation.constraint_schema = cons.constraint_schema\n                    AND relation.constraint_catalog = cons.constraint_catalog\n                ${this.params.dialect === 'mysql' ? '' : `\n                LEFT JOIN information_schema.key_column_usage AS relation_details\n                    ON relation_details.constraint_name = relation.unique_constraint_name\n                    AND relation_details.constraint_schema = relation.unique_constraint_schema\n                    AND relation_details.constraint_catalog = relation.unique_constraint_catalog\n                    ` }\n                WHERE cons.table_schema = tbl.table_schema AND cons.table_name = tbl.table_name\n                GROUP BY cons.constraint_name\n            `;\n            // Return as an aggregation\n            return `SELECT ${utils.jsonAgg(\n                utils.jsonBuildObject(Object.keys(fields).reduce(($fields, f) => $fields.concat(`'${f}'`, `cons.${f}`), []))\n            )} FROM (${baseQuery}) AS cons`;\n        };\n        // -- THE TABLE PART\n        const buildTable = (detailed = false) => {\n            // Composition\n            const fields = { table_name: `tbl.table_name`, table_schema: `tbl.table_schema` };\n            const baseQuery = `\n                SELECT ${Object.entries(fields).map(([k, v]) => `${v} AS ${k}`).join(', ')}\n                FROM information_schema.tables AS tbl\n                WHERE tbl.table_schema = db.schema_name AND tbl.table_type = 'BASE TABLE'${$parts.tblWhere}\n            `;\n            // Return as an aggregation\n            const branches = detailed ? [`'columns'`, `(${buildColumns()})`, `'constraints'`, `(${buildConstraints()})`] : [];\n            return `SELECT ${utils.jsonAgg(\n                utils.jsonBuildObject(Object.keys(fields).reduce(($fields, f) => $fields.concat(`'${f}'`, `tbl.${f}`), []).concat(branches))\n            )} FROM (${baseQuery}) AS tbl`;\n        };\n        $parts.fields.push('db.schema_name');\n        if ($parts.depth) $parts.fields.push(`(${buildTable($parts.depth > 1)}) AS tables`);\n        const sql = `SELECT ${$parts.fields.join(', ')}\n        FROM information_schema.schemata AS db\n        ${$parts.dbWhere}${$parts.orderBy};`;\n        return sql;\n    }\n\n    #formatSchemasResult(result) {\n        // PG likes using verbose data types\n        const dataType = val => val === 'character varying' ? 'varchar' : (val === 'integer' ? 'int' : val);\n        const formatRelation = (key, tableScope = false) => ({\n            ...(!tableScope ? { name: key.constraint_name } : {}),\n            targetTable: [key.referenced_table_schema, key.referenced_table_name],\n            targetColumns: [...new Set(key.referenced_column_name.split(','))].map(s => s.trim()),\n            ...(key.match_rule !== 'NONE' ? { matchRule: key.match_rule } : {}),\n            updateRule: key.update_rule,\n            deleteRule: key.delete_rule,\n        });\n        const parseJsonfyExpr = (expr, withColumns = false) => {\n            const columns = new Set;\n            const node = Parser.parse({ params: !withColumns ? this.params : { ...this.params, nodeCallback: (node) => node.NODE_NAME === 'COLUMN_REF' ? columns.add(node.name().toLowerCase()) : null }}, expr, null, { inspect: false });\n            const json = node.NODE_NAME === 'PARENS' ? node.exprUnwrapped().jsonfy({ nodeNames: false }) : node.jsonfy({ nodeNames: false });\n            return withColumns ? { columns: [...columns], json } : json;\n        };\n        return result.map(db => {\n            const databaseSchema = {\n                name: db.schema_name,\n                tables: (db.tables || []).map(tbl => {\n                    // -----\n                    const normalizeCheckConstraint = key => {\n                        if (!key.check_clause) key.check_clause = ''; // Some wired stuff at Supabase\n                        return {...key, ...parseJsonfyExpr(key.check_clause, true)};\n                    };\n                    let [primaryKey, uniqueKeys, foreignKeys, checks] = (tbl.constraints || []).reduce(([primarys, uniques, foreigns, checks], key) => {\n                        if (key.constraint_type === 'PRIMARY KEY') return [primarys.concat(key), uniques, foreigns, checks];\n                        if (key.constraint_type === 'UNIQUE') return [primarys, uniques.concat(key), foreigns, checks];\n                        if (key.constraint_type === 'FOREIGN KEY') return [primarys, uniques, foreigns.concat(key), checks];\n                        if (key.constraint_type === 'CHECK' && !(this.params.dialect === 'postgres' && /^[\\d_]+not_null/.test(key.constraint_name))) return [primarys, uniques, foreigns, checks.concat(normalizeCheckConstraint(key))];\n                        return [primarys, uniques, foreigns, checks];\n                    }, [[], [], [], []]);\n                    /**\n                     * TODO: Investigate the cause of a structure like this:\n                    if (tbl.table_name === 'transactions') {\n                        console.log(foreignKeys);\n                    }\n                    {\n                        table_schema: 'public',\n                        table_name: 'transactions',\n                        column_name: 'spec,spec',\n                        constraint_name: 'auto_name_21cko',\n                        constraint_type: 'FOREIGN KEY',\n                        check_clause: null,\n                        referenced_column_name: 'id,id',\n                        referenced_table_name: 'transaction_specs',\n                        referenced_table_schema: 'public',\n                        referenced_constraint_name: 'auto_name_2co2s,auto_name_2co2s',\n                        match_rule: 'NONE',\n                        update_rule: 'CASCADE',\n                        delete_rule: 'RESTRICT'\n                    }\n                     */\n                    // -----\n\n                    const temp = {}, tableSchema = {\n                        name: tbl.table_name,\n                        columns: (tbl.columns || []).reduce((cols, col) => {\n                            const extras = col.extra/*mysql*/?.split(',').map(s => s.trim()) || [];\n                            return cols.concat({\n                                name: col.column_name,\n                                type: col.character_maximum_length ? [dataType(col.data_type), col.character_maximum_length] : dataType(col.data_type),\n                                ...(primaryKey.length === 1 && primaryKey[0].column_name === col.column_name && (temp.pKeys = primaryKey.pop()) ? {\n                                    primaryKey: { name: temp.pKeys.constraint_name }\n                                } : {}),\n                                ...((temp.uKeys = uniqueKeys.filter(key => key.column_name === col.column_name)).length === 1 && (uniqueKeys = uniqueKeys.filter(key => key !== temp.uKeys[0])) ? {\n                                    uniqueKey: { name: temp.uKeys[0].constraint_name }\n                                } : {}),\n                                ...((temp.fKeys = foreignKeys.filter(key => key.column_name.split(',').map((s) => s.trim()).pop() === col.column_name)).length && (foreignKeys = foreignKeys.filter(key => key !== temp.fKeys[0])) ? {\n                                    foreignKey: formatRelation(temp.fKeys[0])\n                                } : {}),\n                                ...((temp.cKeys = checks.filter(key => key.check_constraint_level !== 'Table' && key.columns.length === 1 && key.columns[0] === col.column_name)).length === 1 && (checks = checks.filter(key => key !== temp.cKeys[0])) ? {\n                                    check: { name: temp.cKeys[0].constraint_name, expr: temp.cKeys[0].json }\n                                } : {}),\n                                ...(col.is_identity/*postgres*/ === 'YES' ? {\n                                    identity: { always: col.identity_generation === 'ALWAYS' }\n                                } : {}),\n                                ...(col.is_generated !== 'NEVER' ? {\n                                    expression: { always: col.is_generated === 'ALWAYS', expr: parseJsonfyExpr(col.generation_expression) }\n                                } : {}),\n                                ...(extras.includes('auto_increment')/*mysql*/ ? {\n                                    autoIncrement: true\n                                } : {}),\n                                ...(col.is_nullable === 'NO' ? {\n                                    notNull: true\n                                } : {}),\n                                ...(col.column_default && col.column_default !== 'NULL' ? {\n                                    default: { expr: parseJsonfyExpr(col.column_default) }\n                                } : {}),\n                                ...(extras.includes('INVISIBLE') ? {\n                                    flags: ['INVISIBLE']\n                                } : {}),\n                            });\n                        }, []),\n                        constraints: [],\n                        indexes: [],\n                    };\n                    tableSchema.constraints.push(...[...primaryKey, ...uniqueKeys, ...foreignKeys].map(key => ({\n                        name: key.constraint_name,\n                        type: key.constraint_type === 'UNIQUE' ? 'UNIQUE_KEY' : key.constraint_type.replace(' ', '_'),\n                        columns: [...new Set(key.column_name.split(',').map((col) => col.trim()))],\n                        ...(key.constraint_type === 'FOREIGN KEY' ? formatRelation(key, true) : {}),\n                    })));\n                    tableSchema.constraints.push(...checks.map(key => ({\n                        name: key.constraint_name,\n                        type: key.constraint_type,\n                        columns: key.columns,\n                        expr: key.json,\n                    })));\n                    return tableSchema;\n                }),\n            };\n            return databaseSchema;\n        });\n    }\n}"],
  "mappings": "MAQe,SAARA,GAAiBC,EAAK,CAC5B,OAAOA,aAAe,QAAW,OAAOA,GAAQ,UAAYA,IAAQ,IACrE,CCFe,SAARC,GAAiBC,EAAK,CAC5B,OAAO,UAAU,SAAWA,IAAQ,QAAa,OAAOA,EAAQ,IACjE,CCDe,SAARC,GAAiBC,EAAK,CAC5B,OAAO,OAAOA,GAAQ,UACvB,CCEe,SAARC,EAAiBC,EAAK,CAC5B,OAAOC,GAAgBD,CAAG,GAAMA,GAAO,CAAC,EAAE,SAAS,KAAKA,CAAG,IAAM,mBAClE,CCPe,SAARE,EAAiBC,EAAK,CAC5B,OAAO,MAAM,QAAQA,CAAG,CACzB,CCKe,SAARC,GAAiBC,EAAK,CAC5B,MAAO,CAACC,GAAUD,CAAG,GAAK,CAACE,GAAaF,EAAI,MAAM,CACnD,CCTe,SAARG,GAAiBC,EAAK,CAC5B,OAAOA,IAAQ,MAAQA,IAAQ,EAChC,CCIe,SAARC,GAAiBC,EAAK,CAC5B,OAAO,MAAM,QAAQA,CAAG,GAAM,OAAOA,GAAQ,UAAYA,GAAQC,GAAgBD,CAAG,CACrF,CCCe,SAARE,GAAiBC,EAAK,CAC5B,OAAOC,GAAQD,CAAG,GAAKE,GAAaF,CAAG,GAAKA,IAAQ,IAASA,IAAQ,GAChEG,GAAcH,CAAG,GAAK,CAAC,OAAO,KAAKA,CAAG,EAAE,MAC9C,CCZe,SAARI,EAAiBC,EAAK,CAC5B,MAAO,CAAC,MAAM,QAAQA,CAAG,GAAK,OAAOA,GAAQ,UAAYA,CAC1D,CCOe,SAARC,GAAiBC,EAAKC,EAAa,GAAM,CAC/C,OAAIC,EAASF,CAAG,EACRA,EAEJ,CAACC,GAAcE,EAAUH,CAAG,EACxB,CAACA,CAAG,EAERA,IAAQ,IAASA,IAAQ,GAAKI,GAASJ,CAAG,EACtC,CAAC,EAELK,GAAaL,CAAG,EACZ,MAAM,UAAU,MAAM,KAAKA,CAAG,EAElCG,EAAUH,CAAG,EACT,OAAO,OAAOA,CAAG,EAElB,CAACA,CAAG,CACZ,CC1Be,SAARM,GAAiBC,EAAK,CAC5B,OAAOA,aAAe,QAAW,OAAOA,GAAQ,QACjD,CCGe,SAARC,GAAiBC,EAAK,CAC5B,OAAOC,GAAUD,CAAG,GAAMA,IAAQ,IAAQA,IAAQ,IAASA,IAAQ,MAAQA,IAAQ,IAAM,CAAC,MAAMA,EAAM,CAAC,CACxG,CCEA,IAAME,GAAW,SAASC,EAAKC,EAAQ,EAAGC,EAAc,GAAM,CAO7D,MANI,CAACC,GAAWF,CAAK,GAAKA,GAAS,IAG/B,CAACG,EAASJ,CAAG,GAAKK,EAAUL,CAAG,GAAKE,IACvCF,EAAM,OAAO,OAAOA,CAAG,GAEpB,CAACI,EAASJ,CAAG,GACTA,EAEDA,EAAI,OAAO,CAACM,EAAKC,IAAQH,EAASG,CAAG,GAAMF,EAAUE,CAAG,GAAKL,EACjEI,EAAI,OAAOP,GAAUK,EAASG,CAAG,EAAyBA,EAArB,OAAO,OAAOA,CAAG,EAASN,EAAQ,EAAGC,CAAW,CAAC,EACtFI,EAAI,OAAOC,CAAG,EAAG,CAAC,CAAC,CACvB,EAKOC,GAAQT,GC1BA,SAARU,GAAiBC,EAAKC,EAAS,EAAG,CACxC,IAAIC,EAAQ,EACZF,EAAI,QAAQG,GAAO,CAClBD,GACD,CAAC,EACD,IAAIE,EAASJ,EAAI,MAAMA,EAAI,OAASE,EAAOD,CAAM,EACjD,OAAO,UAAU,OAAS,EAAIG,EAASA,EAAO,CAAC,CAChD,CCFe,SAARC,GAAiBC,EAAKC,EAAS,EAAG,CACxC,OAAO,UAAU,OAAS,EACvBC,GAAOF,EAAI,MAAM,EAAE,QAAQ,EAAGC,CAAM,EAAE,QAAQ,EAC9CC,GAAOF,EAAI,MAAM,EAAE,QAAQ,CAAC,CAChC,CCTe,SAARG,GAAiBC,KAAQC,EAAO,CACtC,OAAAA,EAAM,QAAQC,GAAO,CAChBF,EAAI,QAAQE,CAAG,EAAI,GACtBF,EAAI,KAAKE,CAAG,CAEd,CAAC,EACMF,CACR,CCFe,SAARG,GAAiBC,EAAKC,EAAO,CACnCA,EAAQA,GAAS,OAAO,UACxBA,EAAQA,GAAS,CAACC,EAASD,CAAK,EAAI,CAACA,CAAK,EAAIA,EAI9C,QAFIE,EAAkB,CAAC,EACnBH,EAAMA,EACHA,IAAQ,CAACC,GAASA,EAAM,QAAQD,CAAG,EAAI,IAAMA,EAAI,OAAS,WAChEG,EAAgB,KAAKH,CAAG,EACxBA,EAAMA,EAAM,OAAO,eAAeA,CAAG,EAAI,KAE1C,OAAOG,CACR,CCVe,SAARC,GAAiBC,EAAKC,EAAO,CACnC,IAAIC,EAAU,CAAC,EACf,OAAAC,GAAmBH,EAAKC,CAAK,EAAE,QAAQD,GAAO,CAC7CI,GAAYF,EAAS,GAAG,OAAO,oBAAoBF,CAAG,CAAC,CACxD,CAAC,EACME,CACR,CCFe,SAARG,GAA+BC,EAAMC,EAAUC,EAAY,GAAOC,EAAY,GAAOC,EAAc,GAAO,CAChH,IAAIC,EAAQ,EACRC,EAAON,EAAK,MAAM,EAKtB,IAJIO,GAAWD,CAAI,GAAKA,IAAS,IAAQA,IAAS,MACjDD,EAAQC,EACRA,EAAON,EAAK,MAAM,GAEf,CAACA,EAAK,OACT,MAAM,IAAI,MAAM,8CAA8C,EAE/D,OAAAA,EAAK,QAAQ,CAACQ,EAAMC,IAAM,CACrB,CAACC,GAAcF,CAAI,GAAK,CAACG,EAAYH,CAAI,IAG5CN,EAAYU,GAAqBJ,CAAI,EAAI,OAAO,KAAKA,CAAI,GAAG,QAAQK,GAAO,CAC3E,GAAKZ,EAASY,EAAKP,EAAME,EAAMC,CAAC,EAGhC,KAAIK,EAAYR,EAAKO,CAAG,EACpBE,EAAYP,EAAKK,CAAG,EACxB,IAAMG,EAASF,CAAS,GAAKE,EAASD,CAAS,GAAOE,EAAUH,CAAS,GAAKG,EAAUF,CAAS,KAC7FV,IAAU,IAAQA,EAAQ,GAE7BC,EAAKO,CAAG,EAAIG,EAASF,CAAS,GAAKE,EAASD,CAAS,EAAI,CAAC,EAAI,CAAC,EAC/DhB,GAAc,CAACQ,GAAWF,CAAK,EAAIA,EAAQ,EAAIA,EAAOC,EAAKO,CAAG,EAAGC,EAAWC,CAAS,EAAGd,EAAUC,EAAWC,EAAWC,CAAW,UAE/HY,EAASV,CAAI,GAAKU,EAASR,CAAI,EAC9BL,EACHG,EAAKO,CAAG,EAAIE,EAEZT,EAAK,KAAKS,CAAS,MAIpB,IAAI,CACCX,EACH,OAAO,eAAeE,EAAMO,EAAK,OAAO,yBAAyBL,EAAMK,CAAG,CAAC,EAE3EP,EAAKO,CAAG,EAAIL,EAAKK,CAAG,CAEtB,MAAW,CAAC,EAGf,CAAC,CACF,CAAC,EACMP,CACR,CCnDe,SAARY,MAAoBC,EAAM,CAChC,OAAOC,GAAeD,EAAM,CAACE,EAAGC,EAAMC,IAC9B,GACL,GAAoB,GAAoB,EAAoB,CAChE,CCJe,SAARC,GAAiBC,EAAK,CAC5B,OAAOC,EAAUD,CAAG,GAAK,OAAO,eAAeA,CAAG,IAAM,OAAO,SAChE,CCRe,SAARE,GAAiBC,EAAK,CAC5B,OAAOA,IAAQ,IAAQA,IAAQ,EAChC,CCMe,SAARC,GAAiBC,EAAKC,EAAU,CACtC,IAAIC,EAAc,OAClB,OAAIC,GAAcH,CAAG,GACpB,OAAO,KAAKA,CAAG,EAAE,QAAQ,CAACI,EAAGC,IAAM,CAC9BH,IAAgB,KACnBA,EAAcD,EAASK,GAAWF,CAAC,EAAI,WAAWA,CAAC,EAAIA,EAAGJ,EAAII,CAAC,EAAGC,CAAC,EAErE,CAAC,EAEKH,CACR,CCHe,SAARK,GAAiBC,EAAMC,EAAMC,EAAY,GAAMC,EAAgB,GAAMC,EAAW,GAAOC,EAAqB,GAAO,CACzH,GAAIC,EAASN,CAAI,GAAKM,EAASL,CAAI,EAAG,CACrC,IAAIM,EAAS,CAAC,EACVC,EAAQ,GACZ,OAAAR,EAAK,QAAQS,GAAM,CAClB,GAAKD,EAGL,KAAIE,EAAW,GACfC,GAAMV,EAAM,CAACW,EAAGC,IAAO,EAClB,CAACH,GAAaP,GAAiBW,GAAcL,CAAE,KAClDC,EAAWR,EAAUO,EAAII,CAAE,GACtBP,EAASI,CAAQ,GAAK,CAACA,EAAS,QAAYK,EAAUL,CAAQ,GAAK,CAAC,OAAO,KAAKA,CAAQ,EAAE,UAC9FA,EAAW,IAERI,GAAcJ,CAAQ,GAAKP,IAE9BM,EAAKC,GAGR,CAAC,EACGI,GAAcJ,CAAQ,EACzBH,EAAO,KAAKJ,EAAgBO,EAAWD,CAAE,EAC9BO,GAAWN,CAAQ,EAEnBN,GAAY,CAACM,GAAc,CAACN,GAAYM,EACnDH,EAAO,KAAKE,CAAE,EACJJ,IACVG,EAAQ,IAJRD,EAAO,KAAKG,CAAQ,EAMtB,CAAC,EACMH,CACR,CAEA,GAAIQ,EAAUf,CAAI,GAAKe,EAAUd,CAAI,EAAG,CACvC,IAAIM,EAAS,CAAC,EACVC,EAAQ,GACZ,cAAO,KAAKR,CAAI,EAAE,QAAQY,GAAK,CAC9B,GAAKJ,EAGL,KAAIE,EAAWR,EAAUF,EAAKY,CAAC,EAAGX,EAAKW,CAAC,CAAC,GACpCN,EAASI,CAAQ,GAAK,CAACA,EAAS,QAAYK,EAAUL,CAAQ,GAAK,CAAC,OAAO,KAAKA,CAAQ,EAAE,UAC9FA,EAAW,IAERI,GAAcJ,CAAQ,EACzBH,EAAOK,CAAC,EAAIT,EAAgBO,EAAWV,EAAKY,CAAC,EAClCI,GAAWN,CAAQ,EAEnBN,GAAY,CAACM,GAAc,CAACN,GAAYM,EACnDH,EAAOK,CAAC,EAAIZ,EAAKY,CAAC,EACRP,IACVG,EAAQ,IAJRD,EAAOK,CAAC,EAAIF,EAMd,CAAC,EACMH,CACR,CACD,CCzDA,IAAMU,GAAQ,SAASC,EAAMC,EAAMC,EAAY,GAAMC,EAAQ,EAAG,CAC/D,GAAIC,EAASJ,CAAI,GAAKI,EAASH,CAAI,GAAKD,EAAK,SAAWC,EAAK,OAC5D,MAAO,CAACC,EAET,GAAIG,EAAUL,CAAI,GAAKK,EAAUJ,CAAI,EAAG,CACvC,IAAIK,EAAW,OAAO,KAAKN,CAAI,EAC3BO,EAAW,OAAO,KAAKN,CAAI,EAC/B,GAAI,CAACK,EAAS,QAAU,CAACC,EAAS,OAGjC,OAAOC,GAAeR,CAAI,GAAKQ,GAAeP,CAAI,EAC/CC,EACCF,IAASC,IAAUC,EAExB,GAAI,CAACH,GAAMO,EAAUC,CAAQ,EAC5B,MAAO,CAACL,CAEV,CACA,GAAIC,EAAQ,IAAOC,EAASJ,CAAI,GAAKI,EAASH,CAAI,GAAOI,EAAUL,CAAI,GAAKK,EAAUJ,CAAI,GAAK,CAC9F,IAAIQ,EAASC,GAAiBV,EAAMC,EAAM,CAACU,EAAIC,IACvCb,GAAMY,EAAIC,EAAIV,EAAWC,EAAQ,CAAC,EACvC,GAAwB,GAAmB,EAA0B,EACxE,OAAOC,EAASK,CAAM,EACnBA,EAAO,SAAWT,EAAK,QAAUS,EAAO,SAAWR,EAAK,OACvDI,EAAUI,CAAM,GAAKJ,EAAUL,CAAI,EACnC,OAAO,KAAKS,CAAM,EAAE,SAAW,OAAO,KAAKT,CAAI,EAAE,QAAU,OAAO,KAAKS,CAAM,EAAE,SAAY,OAAO,KAAKR,CAAI,EAAE,OAC7GQ,CACL,CACA,OAAOI,EAAYX,CAAS,EAAIA,EAAUF,EAAMC,CAAI,EACnDa,GAAUd,CAAI,GAAKc,GAAUb,CAAI,GAAK,MAAMD,CAAI,GAAK,MAAMC,CAAI,EAC5DC,EACCF,IAASC,IAAUC,CAEzB,EAKOa,GAAQhB,GC5CA,SAARiB,GAAiBC,EAAKC,EAAS,CAAC,EAAG,CACzC,OAAOC,GAAe,CAAC,CAAC,EAAGF,CAAG,EAAG,CAACG,EAAKC,EAAMC,IAAS,CACrD,GAAI,CAACC,EAAYD,EAAKF,CAAG,CAAC,EACzB,OAAOG,EAAYL,CAAM,EAAIA,EAAOE,CAAG,EACnCI,EAASN,CAAM,GAAKA,EAAO,OAASA,EAAO,QAAQE,CAAG,EAAI,GAAK,EAErE,EAAG,GAAoB,GAAoB,EAAoB,CAChE,CCRe,SAARK,GAAiBC,EAAKC,EAAMC,EAAW,KAAM,CACnD,OAAQC,EAASF,CAAI,EAASD,EAAI,OAAOI,GAAQF,EAC9CD,EAAK,OAAOI,GAAQH,EAASE,EAAMC,CAAI,CAAC,EAAE,OAC1CJ,EAAK,QAAQG,CAAI,IAAM,EAC1B,EAHyB,CAAC,CAI3B,CCCA,IAAqBE,GAArB,MAAqBC,CAAM,CAS1B,OAAO,IAAIC,EAAKC,EAAQC,EAAU,CAAC,EAAG,CACrC,GAAI,CAACC,GAAUH,EAAMA,EAAM,EAAE,EAC5B,MAAM,IAAI,MAAM,6BAA6B,EAE9C,IAAII,EAAaC,IACT,CACN,OAAQA,EAAO,OAAO,MAAM,EAC5B,QAASC,GAAWD,EAAO,OAAO,EAClC,QAASA,EAAO,QAAQ,MAAM,EAC9B,SAAUA,EAAO,SACjB,SAAUA,EAAO,SAAS,MAAM,EAChC,OAAQA,EAAO,OAAO,MAAM,EAC5B,QAASA,EAAO,QAAQ,MAAM,EAC9B,SAAUC,GAAWD,EAAO,QAAQ,CACrC,GAGD,GAAIN,EAAM,OAAOC,CAAG,GAAKE,EAAQ,QAAU,GAC1C,QAAS,EAAI,EAAG,EAAIH,EAAM,OAAOC,CAAG,EAAE,OAAQ,IAAM,CACnD,IAAIO,EAASR,EAAM,OAAOC,CAAG,EAAE,CAAC,EAChC,GAAIQ,GAAMD,EAAO,OAAQN,CAAM,EAC9B,OAAOG,EAAWG,CAAM,CAE1B,CAGD,IAAIE,EAAW,IAAIV,EAAMC,EAAKE,CAAO,EACjCG,EAASI,EAAS,IAAIR,CAAM,EAEhC,OAAIC,EAAQ,QAAU,KACrBH,EAAM,OAAOC,CAAG,EAAID,EAAM,OAAOC,CAAG,GAAK,CAAC,EAC1CD,EAAM,OAAOC,CAAG,EAAE,KAAKK,CAAM,GAEvBD,EAAWC,CAAM,CAEzB,CASA,OAAO,MAAML,EAAKC,EAAQC,EAAS,CAClC,OAAOH,EAAM,IAAIC,EAAKC,EAAQC,CAAO,EAAE,MACxC,CASA,OAAO,MAAMF,EAAKC,EAAQC,EAAS,CAClC,OAAOH,EAAM,IAAIC,EAAKC,EAAQC,CAAO,EAAE,OACxC,CAaA,YAAYF,EAAKE,EAAS,CACzB,GAAI,CAACC,GAAUH,CAAG,EACjB,MAAM,IAAI,MAAM,mDAAmD,EAEpE,KAAK,KAAOA,EACZ,KAAK,SAAWE,GAAW,CAAC,EACvB,KAAK,SAAS,SAClB,KAAK,SAAS,OAASH,EAAM,SAEzB,KAAK,SAAS,SAClB,KAAK,SAAS,OAASA,EAAM,SAEzB,KAAK,SAAS,WAClB,KAAK,SAAS,SAAWA,EAAM,UAEjC,CAaA,IAAIE,EAAQC,EAAS,CAapB,QAZIQ,EAAU,CACb,OAAQC,GAASV,CAAM,EACvB,QAASW,GAAO,GAAM,CAAC,EAAG,KAAK,SAAUV,GAAW,CAAC,CAAC,EACtD,QAAS,CAAC,EACV,SAAU,EACV,SAAU,CAAC,EACX,OAAQ,CAAC,EACT,QAAS,CAAC,EACV,SAAU,CAAC,CACZ,EAEIW,EAAS,EACP,OAAOA,GAAW,UACvBA,EAAS,KAAK,aAAaH,EAASG,CAAM,EAE3C,GAAIH,EAAQ,QAAQ,OACnB,MAAM,IAAI,MAAM,6BAA+B,KAAK,KAAO,0BAA4BI,GAASJ,EAAQ,OAAO,EAAE,KAAK,IAAI,CAAM,EAGjI,OAAOA,CACR,CAWA,aAAaA,EAASK,EAAG,CACxB,GAAI,EAAAA,GAAK,KAAK,KAAK,QAGnB,KAAIC,EAAY,EACZC,EAAc,CAAC,EAAGC,EAAY,CAAC,EAAGC,EAAc,CAAC,EAUrD,GARKT,EAAQ,cACZQ,EAAY,KAAK,YAAYR,EAASK,CAAC,GAGnCL,EAAQ,YACZO,EAAc,KAAK,cAAcP,EAASK,CAAC,GAGxCL,EAAQ,aAAeO,EAAY,OAEtC,GAAI,CAACP,EAAQ,QAAQ,QAAU,CAACS,EAAY,OAAQ,CACnD,IAAIC,EAAQH,EAAY,UAAYA,EAAY,QAAU,KAAK,KAAKF,CAAC,EACrEC,EAAYI,EAAM,OAClB,KAAK,MAAMV,EAASU,EAAO,WAAYH,EAAY,QAAQ,CAC5D,MACC,KAAK,MAAMP,EAAS,KAAK,KAAKK,CAAC,CAAC,UAEvBL,EAAQ,WAAaQ,EAAU,OAEzC,KAAK,MAAMR,EAAS,KAAK,KAAKK,CAAC,CAAC,MAC1B,IAAIL,EAAQ,QAAQ,OAASA,EAAQ,QAAQ,SAAWA,EAAQ,QAAQ,MAC9E,YAAK,MAAMA,EAAS,KAAK,KAAKK,CAAC,CAAC,EACzBA,EAAI,EAGXI,EAAc,KAAK,aAAaT,EAASK,CAAC,EAI1C,IAAII,EAAc,KAAK,aAAaT,EAASK,CAAC,EAE1CM,EAAW,KAAK,WAAWX,EAAQ,QAAQ,WAAa,CAAC,EAAGA,EAASK,CAAC,EAC1E,GAAI,CAACL,EAAQ,QAAQ,QAAUW,IAAa,GAAO,CAClDX,EAAQ,QAAQ,SAAWW,EAC3BX,EAAQ,QAAQ,gBAAkB,KAAK,KAAK,OAAOK,CAAC,EACpD,MACD,CAIA,GAAI,CAACL,EAAQ,OAAO,OAEfA,EAAQ,QAAQ,SAAW,GAAKS,EAAY,UAC/CT,EAAQ,QAAQ,KAAK,IAAI,EACzB,KAAK,MAAMA,EAASS,EAAY,QAAQ,EACxCH,EAAYG,EAAY,SAAS,QACvB,CAACT,EAAQ,QAAQ,QAAUS,EAAY,QACjD,KAAK,MAAMT,EAASS,EAAY,MAAM,EACtCH,EAAYG,EAAY,OAAO,OAC/BT,EAAQ,QAAQ,KAAK,IAAI,GAEzB,KAAK,MAAMA,EAAS,KAAK,KAAKK,CAAC,CAAC,UAM7B,CAACL,EAAQ,QAAQ,QAAU,CAACS,EAAY,OAAQ,CAGnD,KAAK,MAAMT,EAAS,EAAE,EACtB,IAAIY,EAAe,KAAK,WAAWZ,EAAQ,OAAQA,EAASK,CAAC,EAC7D,GAAIO,IAAiB,KACpBZ,EAAQ,QAAQ,KAAKY,CAAY,EACjCZ,EAAQ,SAASK,CAAC,EAAIO,EACtBN,EAAYM,EAAa,QAAU,EAC/B,CAACZ,EAAQ,QAAQ,gBAAgB,CAGpC,IAAIa,EAAYR,GAAKO,EAAa,QAAU,GAC5C,OAAIC,IAAc,KAAK,KAAK,QAG3B,KAAK,MAAMb,EAAS,EAAE,EAEhBa,CACR,CAED,KAAK,MAAMb,EAASY,GAAgB,KAAK,KAAKP,CAAC,CAAC,CACjD,KAAO,CACN,IAAIK,EAAQD,EAAY,UAAYA,EAAY,QAAU,KAAK,KAAKJ,CAAC,EACrEC,EAAYI,EAAM,OAClB,KAAK,MAAMV,EAASU,CAAK,CAC1B,EAGF,OAAOL,EAAIC,EACZ,CAUA,YAAYN,EAASK,EAAG,CACvB,IAAIV,EAAS,CAAC,EACd,OAACK,EAAQ,QAAQ,QAAU,CAAC,GAAG,QAAQc,GAAS,CAC3C,KAAK,KAAK,OAAOT,EAAG,CAAC,IAAMS,IACzBd,EAAQ,UAGFc,IAAUd,EAAQ,YAC5BA,EAAQ,UAAY,GACpBL,EAAO,OAASmB,IAJhBd,EAAQ,UAAYc,EACpBnB,EAAO,SAAWmB,GAMrB,CAAC,EACMnB,CACR,CAUA,cAAcK,EAASK,EAAG,CACzB,IAAIV,EAAS,CAAC,EACd,OAACK,EAAQ,QAAQ,UAAY,CAAC,GAAG,QAAQe,GAAS,CACjD,GAAKf,EAAQ,aAMN,GAAIgB,GAAMD,CAAK,IAAMC,GAAMhB,EAAQ,WAAW,EAAG,CACvD,IAAIiB,EAASD,GAAMD,CAAK,EACpB,KAAK,KAAK,OAAOV,CAAC,EAAE,WAAWY,CAAM,IACxCjB,EAAQ,YAAc,GACtBL,EAAO,OAASsB,EAElB,MAZ0B,CACzB,IAAIC,EAAWC,GAAOJ,CAAK,EACvB,KAAK,KAAK,OAAOV,CAAC,EAAE,WAAWa,CAAQ,IAC1ClB,EAAQ,YAAce,EACtBpB,EAAO,SAAWuB,EAEpB,CAOD,CAAC,EACMvB,CACR,CAUA,aAAaK,EAASK,EAAG,CACxB,IAAIV,EAAS,CAAC,EACd,OAACK,EAAQ,QAAQ,QAAU,CAAC,GAAG,QAAQe,GAAS,CAC/C,IAAIG,EAAWC,GAAOJ,CAAK,EAAGK,EAM9B,GALIF,aAAoB,OACvB,CAACE,CAAe,EAAIF,EAAS,KAAK,KAAK,KAAK,OAAOb,CAAC,CAAC,GAAK,CAAC,EACjD,KAAK,KAAK,OAAOA,CAAC,EAAE,WAAWa,CAAQ,IACjDE,EAAkBF,GAEfE,EACHpB,EAAQ,QAAUA,EAAQ,QAAQ,OAAO,CAACe,CAAK,CAAC,EAChDpB,EAAO,SAAWyB,UACRpB,EAAQ,QAAQ,QAAUgB,GAAMD,CAAK,IAAMC,GAAMA,GAAMhB,EAAQ,OAAO,CAAC,EAAG,CACpF,IAAIiB,EAASD,GAAMD,CAAK,EAAGM,EACvBJ,aAAkB,OACrB,CAACI,CAAa,EAAIJ,EAAO,KAAK,KAAK,KAAK,OAAOZ,CAAC,CAAC,GAAK,CAAC,EAC7C,KAAK,KAAK,OAAOA,CAAC,EAAE,WAAWY,CAAM,IAC/CI,EAAgBJ,GAEbI,IACHrB,EAAQ,QAAUA,EAAQ,QAAQ,MAAM,EAAG,EAAE,EAC7CL,EAAO,OAAS0B,EAElB,CACD,CAAC,EACDrB,EAAQ,SAAW,KAAK,IAAIA,EAAQ,SAAUA,EAAQ,QAAQ,MAAM,EAC7DL,CACR,CAWA,WAAW2B,EAAUtB,EAASK,EAAG,CAChC,QAASkB,EAAI,EAAGA,EAAID,EAAS,OAAQC,IAAM,CAC1C,IAAMC,EAAU,CACf,SAAUxB,EAAQ,QAAQ,SAC1B,GAAIA,EAAQ,QAAQ,GACpB,GAAIyB,EAAUH,EAASC,CAAC,CAAC,EAAID,EAASC,CAAC,EAAI,CAAE,KAAMD,EAASC,CAAC,CAAE,CAChE,EACA,GAAIG,EAAYF,EAAQ,IAAI,EAAG,CAC9B,IAAIG,EAAMH,EAAQ,KAAK,KAAK,KAAK,OAAO,EAAGnB,CAAC,EAAG,KAAK,KAAK,OAAOA,CAAC,EAAGL,EAAQ,OAAO,MAAM,CAAC,EAC1F,GAAI2B,IAAQ,GAAO,OAAOA,EAC1B,QACD,CACA,GAAIH,EAAQ,SAAU,CACrB,IAAMI,EAAaJ,EAAQ,WAAa,GAAOA,EAAQ,SAAW,GAClE,IAAIK,EAAI,KAAK,KAAK,OAAOxB,CAAC,EAAE,MAAM,IAAI,OAAO,IAAMmB,EAAQ,KAAMI,CAAU,CAAC,EAC5E,GAAIC,IAAM,CAACL,EAAQ,UAAY,KAAK,KAAK,OAAO,EAAGnB,CAAC,EAAE,MAAM,IAAI,OAAOmB,EAAQ,SAAUI,CAAU,CAAC,GACnG,OAAOC,EAAE,CAAC,EAEX,QACD,CACA,IAAMC,EAAQ,CAACC,EAAMC,IAASR,EAAQ,GAAKO,EAAK,YAAY,IAAMC,EAAK,YAAY,EAAID,IAASC,EAChG,GAAIF,EAAM,KAAK,KAAK,OAAOzB,EAAGmB,EAAQ,KAAK,MAAM,EAAGA,EAAQ,IAAI,IAC3D,CAACA,EAAQ,UAAYM,EAAM,KAAK,KAAK,OAAOzB,EAAImB,EAAQ,SAAS,OAAQnB,CAAC,EAAGmB,EAAQ,QAAQ,GAChG,OAAOA,EAAQ,IAGlB,CACA,MAAO,EACR,CAYA,MAAMxB,EAASU,EAAOuB,EAAS,SAAUC,EAAc,GAAO,CAC7D,IAAIC,EAAcnC,EAAQ,QAAQ,OAKlC,GAJIoC,GAAapC,EAAQ,OAAOmC,CAAW,CAAC,IAC3CnC,EAAQ,OAAOmC,CAAW,EAAI,IAG3BF,IAAW,WAAY,CACrBjC,EAAQ,OAAOmC,CAAW,EAAE,WAChCnC,EAAQ,OAAOmC,CAAW,EAAI,IAAI,OAAOnC,EAAQ,OAAOmC,CAAW,CAAC,EACpEnC,EAAQ,OAAOmC,CAAW,EAAE,SAAW,CAAC,GAEzC,IAAIE,EAAerC,EAAQ,OAAOmC,CAAW,EAAE,SAAS,QAAU,CAACnC,EAAQ,OAAOmC,CAAW,EAAE,SAAS,QAAUD,EAAc,EAAI,GACpIlC,EAAQ,OAAOmC,CAAW,EAAE,SAASE,CAAY,GAAKrC,EAAQ,OAAOmC,CAAW,EAAE,SAASE,CAAY,GAAK,IAAM3B,CACnH,KAAO,CACN,IAAI4B,EAAWtC,EAAQ,OAAOmC,CAAW,EAAE,SAC3CnC,EAAQ,OAAOmC,CAAW,EAAInC,EAAQ,OAAOmC,CAAW,EAAIzB,CAE7D,CACD,CAUA,MAAMpB,EAAKC,EAAQC,EAAS,CAC3B,OAAO,KAAK,IAAID,EAAQC,CAAO,EAAE,MAClC,CAUA,MAAMF,EAAKC,EAAQC,EAAS,CAC3B,OAAO,KAAK,IAAID,EAAQC,CAAO,EAAE,OAClC,CAUA,SAASD,EAAQC,EAAS,CACzB,OAAO,KAAK,IAAID,EAAQW,GAAO,CAAC,SAAU,EAAI,EAAGV,GAAW,CAAC,CAAC,CAAC,CAChE,CAUA,SAASD,EAAQC,EAAS,CACzB,OAAO,KAAK,SAASD,EAAQC,CAAO,EAAE,MACvC,CAUA,SAASD,EAAQC,EAAS,CACzB,OAAO,KAAK,SAASD,EAAQC,CAAO,EAAE,OACvC,CACD,EAKAJ,GAAM,QAAU,CAAC,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,EAAG,CAAC,IAAK,GAAG,CAAE,EAKpDA,GAAM,QAAU,CAAC,IAAK,IAAK,GAAI,EAK/BA,GAAM,UAAY,CAAC,CAAC,KAAM,IAAI,EAAG,CAAC,KAAM;AAAA,CAAI,CAAE,EAK9CA,GAAM,OAAS,OAAO,OAAO,IAAI,EC5e1B,IAAMmD,EAAN,cAAoBA,EAAO,CAC9B,OAAO,QAAU,CAAC,GAAGA,GAAO,QAAS,CAAC,IAAI,OAAO,SAAU,GAAG,EAAG,IAAI,OAAO,QAAS,GAAG,CAAC,CAAC,CAC9F,ECMe,SAARC,GAAiBC,EAASC,EAAQC,EAAY,GAAO,CAC3D,GAAID,GAAU,GACb,OAAOD,EAER,IAAIG,EAAMD,EAAYF,EAAQ,YAAYC,CAAM,EAAID,EAAQ,QAAQC,CAAM,EAC1E,OAAIE,IAAQ,GACJ,GAEDH,EAAQ,OAAOG,EAAMF,EAAO,MAAM,CAC1C,CCTe,SAARG,GAAiBC,EAASC,EAAQC,EAAa,GAAO,CAC5D,GAAID,GAAU,GACb,OAAOD,EAER,IAAIG,EAAMD,EAAaF,EAAQ,YAAYC,CAAM,EAAID,EAAQ,QAAQC,CAAM,EAC3E,OAAIE,IAAQ,GACJH,EAEDA,EAAQ,OAAO,EAAGG,CAAG,CAC7B,CCHe,SAARC,GAAiBC,EAAKC,EAAMC,EAAW,KAAM,CACnD,OAAQC,EAASF,CAAI,EAASD,EAAI,OAAOI,GAAQF,EAC9CD,EAAK,OAAOI,GAAQH,EAASE,EAAMC,CAAI,CAAC,EAAE,OAC1CJ,EAAK,QAAQG,CAAI,IAAM,EAC1B,EAHyB,CAAC,CAI3B,CCPe,SAARE,GAAiBC,EAASC,EAAQ,CACxC,OAAOC,GAAQF,EAASC,EAAQ,EAAI,CACrC,CCPe,SAARE,GAAiBC,EAAKC,EAAW,CACvC,OAAOD,IAAQ,OAAY,GAAKA,EAAI,MAAM,WAAW,EAAE,KAAKC,GAAwB,GAAG,CACxF,CCFe,SAARC,GAAiBC,EAAKC,EAAQ,CACpC,OAAI,OAAOD,GAAQ,SACXA,EAEDA,EAAI,QAAQ,SAAW,SAASE,EAAK,CAAE,OAAOA,EAAI,OAAO,CAAC,EAAE,YAAY,GAAM,OAAOD,IAAW,QAAaA,EAAUC,EAAI,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAI,OAAO,CAAC,EAAI,CAAC,CAC9K,CCAe,SAARC,GAAiBC,EAAKC,EAAW,CAEvC,OAAAD,EAAME,GAASF,EAAI,QAAQ,KAAM,GAAG,CAAC,EAAE,QAAQ,KAAM,EAAE,EAChDC,EAAYD,EAAMA,EAAI,CAAC,EAAE,YAAY,EAAIA,EAAI,OAAO,CAAC,CAC7D,CCFe,SAARG,EAAiBC,EAASC,EAAYC,EAAY,CACxD,OAAOC,GAAYC,GAAOJ,EAASC,CAAU,EAAGC,CAAU,CAC3D,CCRe,SAARG,GAAiBC,EAASC,EAAYC,EAAY,CACxD,OAAOF,EAAQ,WAAWC,CAAU,GAAKD,EAAQ,SAASE,CAAU,CACrE,CCRO,IAAMC,EAAN,MAAMC,CAAa,CAEzBC,GACAC,GAAS,CAAC,EACVC,GAEA,YAAYC,EAAa,CACxB,KAAKH,GAAeG,EACpB,KAAKD,GAAqB,IAAI,GAC/B,CAEA,WAAW,WAAY,CAAE,OAAOE,GAAW,KAAK,KAAM,GAAG,EAAE,YAAY,CAAG,CAC1E,IAAI,WAAY,CAAE,OAAO,KAAK,YAAY,SAAW,CAQrD,IAAI,YAAa,CAAE,OAAO,KAAKJ,IAAc,YAAc,KAAKA,EAAc,CAE9E,IAAI,QAAS,CAAE,OAAO,KAAKA,IAAc,QAAU,CAAC,CAAG,CAEvD,IAAI,mBAAoB,CAAE,OAAO,KAAKE,EAAoB,CAE1D,IAAI,UAAW,CAAE,OAAO,KAAKF,IAAc,aAAe,IAAM,CAEhE,IAAI,eAAgB,CAAE,OAAO,KAAKA,IAAc,aAAe,CAE/D,IAAI,aAAc,CAAE,OAAO,KAAKA,EAAc,CAG9C,QAAQK,EAAa,CACpB,GAAI,UAAU,SAAW,EAAG,MAAM,IAAI,MAAM,wCAAwC,EACpF,OAAO,KAAKL,IAAc,SAASK,EAAa,IAAI,CACrD,CAEA,OAAOC,EAAW,CACjB,GAAI,UAAU,SAAW,EAAG,MAAM,IAAI,MAAM,uCAAuC,EACnF,OAAO,KAAKN,IAAc,UAAUM,EAAW,IAAI,CACpD,CAEA,SAASD,EAAaE,EAAe,CACpC,GAAI,UAAU,SAAW,EAAG,MAAM,IAAI,MAAM,0CAA0C,EACtF,OAAO,KAAKP,IAAc,WAAWK,EAAaE,CAAa,CAChE,CAEA,QAAQD,EAAWE,EAAa,CAC/B,GAAI,UAAU,SAAW,EAAG,MAAM,IAAI,MAAM,yCAAyC,EACrF,KAAKR,IAAc,UAAUM,EAAWE,CAAW,EAC/CA,IAAgB,MAAQF,IAAc,iBAAkB,KAAKN,GAAe,KACjF,CAEA,YAAYS,EAAMC,EAAMC,EAAMC,EAAUC,EAAc,KAAMC,EAAiB,KAAM,CAElF,IAAMC,EAAQ,CAAC,EAAE,OAAOL,GAAQ,CAAC,CAAC,EAClC,GAAI,CAACK,EAAM,OAAQ,MAAM,IAAI,MAAM,yCAAyC,EAC5E,GAAIF,GAAeE,EAAM,SAAW,EAAG,MAAM,IAAI,MAAM,oDAAoD,EAC3G,IAAMC,EAAI,CAAE,OAAQL,CAAK,EAEnBM,EAAqBC,GAAO,CACjC,IAAIC,EAAWJ,EAAM,OAAO,CAACK,EAAMV,IAASU,GAASF,aAAeR,GAAQQ,EAAM,IAAI,EACtF,GAAIC,EAAU,OAAOA,EACrB,IAAMhB,EAAc,CAAC,eAAgB,YAAY,EAAE,SAASS,CAAQ,EAAI,KAAK,WAAa,KAC1F,OAAOG,EAAM,OAAO,CAACK,EAAMV,IAASU,GAAQV,EAAK,SAASP,EAAae,CAAG,EAAG,IAAI,CAClF,EACMG,EAA6B,CAAC,CAAE,YAAAC,EAAc,GAAO,UAAAC,EAAY,EAAM,IAAM,CAClF,IAAMC,EAAoB,CAACC,KAAehB,IAASM,EAAM,OAAO,CAACK,EAAMV,IAASU,IAAS,IAAM,CAC9F,GAAIV,EAAK,OAAQ,CAChB,IAAMgB,EAAc,OAAO,KAAKhB,EAAK,MAAM,EAAE,KAAKiB,GAAKA,EAAE,MAAM,GAAG,EAAE,SAASF,CAAU,CAAC,EAClFN,EAAWO,GAAehB,EAAK,OAAOgB,CAAW,EAAE,KAAM,GAAGjB,CAAI,EACtE,OAAOU,GAAY,CAACA,EAAUA,CAAQ,CACvC,CACA,GAAI,OAAOT,EAAK,UAAUe,CAAU,GAAM,WAAY,CACrD,IAAMN,EAAW,IAAIT,EAAK,IAAI,EAC9B,MAAO,CAACS,EAAUA,EAASM,CAAU,EAAE,GAAGhB,CAAI,CAAC,CAChD,CACD,GAAG,EAAG,IAAI,EACV,OAAO,IAAI,MAAM,CAAC,EAAG,CACpB,IAAK,CAACmB,EAAGH,IAAe,IAAIhB,IAAS,CACpC,IAAMoB,EAAaL,EAAkBC,EAAY,GAAGhB,CAAI,EACxD,GAAIoB,EACH,OAAAb,EAAE,OAASc,EAAUd,EAAE,OAAQa,EAAW,CAAC,CAAC,EACrCP,EAAcO,EAAaA,EAAW,CAAC,EACxC,GAAIN,EAAW,MAAM,IAAI,MAAM,IAAI,KAAK,SAAS,KAAKX,CAAQ,UAAUa,CAAU,IAAIhB,CAAI,mCAAmCM,EAAM,IAAIL,GAAQA,EAAK,IAAI,EAAE,KAAK,IAAI,CAAC,GAAG,CAC/K,CACD,CAAC,CACF,EACMoB,EAAY,CAACnB,EAAMQ,IAAa,CAKrC,GAJAA,GAAU,OAAO,WAAW,EACxBA,GAAY,OAAO,KAAK,OAAO,cAAiB,YACnD,KAAK,OAAO,aAAaA,CAAQ,EAE9B,MAAM,QAAQR,CAAI,GAAKQ,EAAU,CACpC,IAAMY,EAAYjB,IAAiBK,CAAQ,EAC3C,OAAIY,GACHA,EAAU,OAAO,cAAc,EACxBpB,EAAK,IAAKqB,GAASA,IAASD,EAAYZ,EAAWa,CAAI,GAExDrB,EAAK,OAAOQ,CAAQ,CAC5B,CACA,OAAIR,GAAQQ,IAAaR,GAAMA,EAAK,OAAO,cAAc,EAClDQ,CACR,EAEA,GAAIV,EAAK,SAAW,GAAKA,EAAK,CAAC,IAAM,OAAW,CAC/C,GAAI,MAAM,QAAQO,EAAE,MAAM,EAAG,MAAM,IAAI,MAAM,IAAI,KAAK,SAAS,KAAKJ,CAAQ,iCAAiC,EAC7G,OAAOkB,EAAUd,EAAE,OAAQ,MAAS,CACrC,CAGA,IAAMiB,EAAe,IAAI,IACzB,GAAIxB,EAAK,OAAS,GAAK,CAAC,MAAM,QAAQO,EAAE,MAAM,EAC7C,KAAOP,EAAK,QAAQwB,EAAa,IAAIxB,EAAK,MAAM,CAAC,EAElD,QAASyB,EAAI,EAAGA,EAAIzB,EAAK,OAAQyB,IAAK,CACrC,IAAMhB,EAAMT,EAAKyB,CAAC,EAElB,GAAI,OAAOhB,GAAQ,WAAY,CAC1BL,EAAaoB,EAAa,IAAIf,CAAG,EAChCA,EAAIG,EAA2B,CAAE,YAAa,GAAO,UAAW,EAAK,CAAC,CAAC,EAC5E,QACD,CAEA,GAAIL,EAAE,SAAWC,EAAmBC,CAAG,EAAG,CACzCF,EAAE,OAASc,EAAUd,EAAE,OAAQA,EAAE,QAAQ,EACzC,QACD,CAEA,IAAMmB,EAAK,CAAC,EACZ,GAAIC,EAAUlB,CAAG,GAAK,CAACA,EAAI,WAAaiB,EAAG,KAAO,OAAO,KAAKjB,CAAG,GAAG,OAAQ,CAC3E,IAAMmB,EAAQhB,EAA2B,CAAE,YAAa,GAAM,UAAW,CAACR,CAAY,CAAC,EACnFyB,EAAiBH,EAAG,KAAK,MAAM,EAAGI,EAClC,CAACpB,EAAUqB,CAAW,EAAIH,EAAMC,CAAc,EAAE,GAAG,CAAC,EAAE,OAAOpB,EAAIoB,CAAc,CAAC,CAAC,GAAK,CAAC,EAC3F,GAAInB,EAAU,CACb,KAAOoB,EAAkBJ,EAAG,KAAK,MAAM,GAAG,CACzC,IAAMM,EAAaD,IAAcD,CAAe,EAChD,GAAI,OAAOE,GAAe,WAAY,MAAM,IAAI,MAAM,IAAI,KAAK,SAAS,KAAK7B,CAAQ,KAAKsB,EAAI,CAAC,IAAIzB,EAAK,MAAM,4BAA4B+B,EAAY,SAAS,IAAIF,CAAc,MAAMC,CAAe,gBAAgB,EACtNC,EAAcC,EAAW,KAAKD,EAAa,GAAG,CAAC,EAAE,OAAOtB,EAAIqB,CAAe,CAAC,CAAC,EAC7ED,EAAiBC,CAClB,CACA,QACD,CACD,CAEA,GAAI1B,EAAa,CAChBoB,EAAa,IAAIf,CAAG,EACpB,QACD,CACA,IAAIwB,EACJ,GAAIN,EAAUlB,CAAG,EAAK,GAAI,CAAEwB,EAAU,KAAK,UAAUxB,CAAG,CAAG,MAAY,CAAEwB,EAAUxB,EAAI,YAAY,IAAM,MACpGwB,EAAUxB,EAAM,GACrB,MAAM,IAAI,MAAM,IAAI,KAAK,SAAS,KAAKN,CAAQ,KAAKsB,EAAI,CAAC,IAAIzB,EAAK,MAAM,gCAAgCM,EAAM,IAAIL,GAAQA,EAAK,IAAI,EAAE,KAAK,IAAI,CAAC,oCAAoCgC,CAAO,EAAE,CAC7L,CAGA,GAAIT,EAAa,KAAM,CACtB,IAAId,EACJ,OAAI,MAAM,QAAQH,EAAE,MAAM,GACzBG,EAAW,IAAIJ,EAAM,CAAC,EAAE,IAAI,EAC5BC,EAAE,OAASc,EAAUd,EAAE,OAAQG,CAAQ,IAEvCH,EAAE,OAASA,EAAE,QAAU,IAAID,EAAM,CAAC,EAAE,IAAI,EACxCI,EAAWH,EAAE,QAEdG,EAASN,CAAW,EAAE,GAAGoB,CAAY,EAC9BjB,EAAE,MACV,CAGA,OAAOA,EAAE,MACV,CAQA,OAAO,cAAcb,EAAawC,EAAiB,GAAO,CAEzD,OADiBA,GAAkBxC,GAAa,QAAQ,cAAiBA,GAAa,QAAQ,WAC3E,SAAW,CAACA,EAAY,OAAO,WAAa,CAAC,IAAK,GAAG,EAAI,CAAC,GAAG,CACjF,CAEA,OAAO,WAAWA,EAAawC,EAAiB,GAAO,CAEtD,OADiBA,GAAkBxC,GAAa,QAAQ,cAAiBA,GAAa,QAAQ,WAC3E,SAAW,CAACA,EAAY,OAAO,WAAa,IAAM,GACtE,CAEA,IAAI,YAAa,CAAE,OAAO,KAAK,YAAY,cAAc,IAAI,CAAG,CAEhE,IAAI,SAAU,CAAE,OAAO,KAAK,YAAY,WAAW,IAAI,CAAG,CAE1D,OAAO,IAAIyC,EAASC,EAAMC,EAAQ,GAAO,CAAE,OAAOA,GAAS,CAAC,eAAe,KAAKD,CAAI,EAAwB,GAAGD,CAAO,IAAIC,GAAQ,IAAI,QAAQ,IAAI,OAAOD,EAAS,GAAG,EAAGA,EAAQ,OAAO,CAAC,CAAC,CAAC,GAAGA,CAAO,GAAKC,CAAM,CAE/M,OAAO,MAAMD,EAASC,EAAME,EAAU,GAAO,CAAE,OAAQ,CAACA,GAAY,IAAI,OAAO,IAAIH,CAAO,KAAKA,CAAO,GAAG,EAAG,KAAKC,CAAI,IAAMA,EAAOA,EAAK,MAAM,EAAG,EAAE,KAAOA,EAAK,QAAQ,IAAI,OAAOD,EAAQ,OAAO,CAAC,EAAG,GAAG,EAAGA,CAAO,CAAG,CAEpN,OAAO,WAAWzC,EAAa0C,EAAME,EAAU,GAAOJ,EAAiB,GAAM,CAC5E,IAAMC,EAAU,KAAK,WAAWzC,EAAawC,CAAc,EACrDK,EAAQC,EAAM,MAAMJ,EAAM,CAAC,GAAG,CAAC,EAC/BK,EAASF,EAAM,IAAIG,GAAM,IAAI,OAAO,qBAAqBP,CAAO,4BAA4B,EAAG,KAAKO,EAAE,KAAK,CAAC,CAAC,EAAE,OAAOA,GAAKA,CAAC,EAClI,OAAOD,EAAO,OAASF,EAAM,OAAS,CAAC,EAAIE,EAAO,IAAIC,GAAKA,IAAI,CAAC,GAAK,KAAK,MAAMP,EAASO,IAAI,CAAC,EAAGJ,CAAO,CAAC,CAC1G,CAEA,eAAeK,EAASN,EAAQ,GAAO,CACtC,IAAMO,EAAMC,GAAS,KAAK,YAAY,IAAI,KAAK,QAASA,EAAOR,CAAK,EACpE,OAAI,MAAM,QAAQM,CAAO,EAAUA,EAAQ,OAAO,GAAK,CAAC,EAAE,IAAIC,CAAG,EAAE,KAAK,GAAG,EACpEA,EAAID,CAAO,CACnB,CAEA,OAAO,YAAYjD,EAAa0C,EAAME,EAAU,GAAOJ,EAAiB,GAAM,CAC7E,IAAMY,EAAa,KAAK,cAAcpD,EAAawC,CAAc,EAAG3B,EAAI,CAAC,EACzE,MAAQA,EAAE,UAAYuC,EAAW,IAAI,KAAOvC,EAAE,aAAe,KAAK,MAAMA,EAAE,UAAW6B,EAAME,CAAO,KAAO,IACxG,MAAO,CAAC/B,EAAE,aAAcA,EAAE,SAAS,EAEpC,MAAO,CAAC,CACT,CAEA,gBAAgBwC,EAAKV,EAAQ,GAAO,CAAE,OAAO,KAAK,YAAY,IAAI,KAAK,WAAW,CAAC,EAAGU,EAAKV,CAAK,CAAG,CAQnG,WAAWW,EAAKC,EAAO,CACtB,YAAKxD,GAAmB,IAAIuD,EAAKC,CAAK,EAC/B,IACR,CAEA,UAAUD,EAAK,CAAE,OAAO,KAAKvD,GAAmB,IAAIuD,CAAG,CAAG,CAE1D,UAAUA,EAAK,CAAE,OAAO,KAAKvD,GAAmB,IAAIuD,CAAG,CAAG,CAE1D,YAAYE,EAAO,CAClB,OAAAA,EAAQ,IAAI,IAAIA,EAAM,OAAOC,GAAKA,CAAC,CAAC,EACpC,KAAK3D,GAAS,KAAKA,GAAO,OAAO,CAAC4D,EAAQC,IAAU,CACnD,IAAMC,EAAID,EAAM,MAAM,GAAG,EACzB,QAAWE,KAAQL,EAAO,CACzB,IAAMM,EAAID,EAAK,MAAM,GAAG,EACpBC,EAAE,CAAC,IAAMF,EAAE,CAAC,IACfD,EAAQ,CAAC,GAAI,IAAI,IAAI,CAAC,GAAGC,EAAG,GAAGE,CAAC,CAAC,CAAE,EAAE,KAAK,GAAG,EAC7CN,EAAM,OAAOK,CAAI,EAEnB,CACA,OAAOH,EAAO,OAAOC,CAAK,CAC3B,EAAG,CAAC,CAAC,EAAE,OAAO,GAAGH,CAAK,EACf,IACR,CAEA,QAAQK,EAAM,CAAE,MAAO,CAAC,CAAC,KAAK,QAAQA,CAAI,CAAG,CAE7C,QAAQA,EAAM,CACb,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAK/D,GACnC,IAAMgE,EAAID,EAAK,YAAY,EAAE,MAAM,GAAG,EACtC,OAAO,KAAK/D,GAAO,KAAK6D,GAAS,CAChC,IAAMC,EAAID,EAAM,MAAM,GAAG,EACzB,OAAOG,EAAE,CAAC,IAAMF,EAAE,CAAC,GAAKE,EAAE,MAAML,GAAKG,EAAE,SAASH,CAAC,CAAC,CACnD,CAAC,CACF,CAEA,IAAIG,EAAGE,EAAGC,EAAY,KAAM,CAC3B,GAAI,MAAM,QAAQH,CAAC,GAAK,MAAM,QAAQE,CAAC,EACtC,OAAOF,EAAE,SAAWE,EAAE,SAAWA,EAAIA,EAAE,MAAM,CAAC,EAAE,KAAK,IAClDF,EAAE,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,CAACI,EAAG,IAAM,KAAK,IAAIA,EAAGF,EAAE,CAAC,EAAGC,CAAS,CAAC,EAIlE,GAFIH,aAAahE,IAAcgE,EAAIA,EAAE,OAAO,GACxCE,aAAalE,IAAckE,EAAIA,EAAE,OAAO,GACxC7B,EAAU2B,CAAC,GAAK3B,EAAU6B,CAAC,EAAG,CACjC,IAAMG,EAAO,CAAC,EACd,OAAQA,EAAK,OAAS,OAAO,KAAKL,CAAC,GAAG,UAAYK,EAAK,OAAS,OAAO,KAAKH,CAAC,GAAG,QAC7EG,EAAK,OAAO,OAAO,CAAChD,EAAMO,IAAMP,GAAQ,KAAK,IAAI2C,EAAEpC,CAAC,EAAGsC,EAAEtC,CAAC,EAAGuC,CAAS,EAAG,EAAI,CACjF,CACA,OAAI,OAAOH,GAAM,UAAY,OAAOE,GAAM,UAAYC,IAAc,KAC5DH,EAAE,YAAY,IAAME,EAAE,YAAY,EAEnCF,IAAME,CACd,CAEA,aAAaP,EAAO,CACnB,GAAI,OAAOA,EAAU,IAAa,MAAO,GACzC,GAAI,OAAOA,GAAO,QAAW,WAAY,OAAO,KAAK,IAAI,KAAK,OAAO,EAAGA,EAAM,OAAO,EAAG,IAAI,CAC7F,CAEA,SAASW,EAAe,CACvB,OAAKA,EACE,OAASA,EAAc,aAAe,KAAK,SAASA,EAAc,WAAW,EADzD,EAE5B,CAEA,OAAO,SAASlE,EAAamE,EAAMC,EAAW,KAAM,CACnD,GAAID,aAAgBvE,EAAc,MAAM,IAAI,MAAM,oCAAoCuE,EAAK,SAAS,EAAE,EACtG,GAAIlC,EAAUkC,CAAI,GAAK,aAAcA,GAAQA,EAAK,WAAa,KAAK,UAAW,OAC/E,IAAMnD,EAAY,IAAI,KAAKhB,CAAW,EAAG,SAAS,GAAImE,GAAM,OAAS,CAAC,CAAE,EACxE,OAAI,OAAOC,GAAa,YAAYA,EAASpD,CAAQ,EAC9CA,CACR,CAEA,OAAOqD,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,MAAO,CACN,GAAID,EAAQ,YAAc,GAAQ,CAAE,SAAU,KAAK,SAAU,EAAI,CAAC,EAClE,GAAI,OAAOC,GAAW,WAAaA,EAAO,EAAIA,EAC9C,GAAI,KAAKxE,GAAO,OAAS,CAAE,MAAO,KAAKA,GAAO,MAAM,CAAC,CAAE,EAAI,CAAC,CAC7D,CACD,CAEA,OAAO,MAAME,EAAa0C,EAAM6B,EAAgB,KAAM,CAAE,CAExD,UAAW,CAAE,OAAO,KAAK,UAAU,CAAG,CAEtC,OAAOC,EAAU,KAAMH,EAAU,CAAC,EAAG,CAAE,OAAO,KAAK,OAAOA,CAAO,CAAG,CAEpE,MAAMA,EAAU,CAAC,EAAG,CACnB,IAAMF,EAAO,KAAK,OAAOE,CAAO,EAEhC,MADgB,CAAC,KAAK,WAAW,EAAE,OAAO,KAAK,YAAY,aAAe,CAAC,CAAC,EAC7D,OAAO,CAACpD,EAAMwD,IAAMxD,GAAQwD,EAAE,SAAS,KAAK5E,GAAcsE,CAAI,EAAG,MAAS,CAC1F,CAEA,QAAQE,EAAU,CAAC,EAAG,CACrB,OAAAA,EAAU,CAAE,GAAGA,EAAS,QAAS,EAAK,EAC/B,KAAK,MAAMA,CAAO,CAC1B,CACD,ECrUO,IAAMK,EAAN,cAAyBC,CAAa,CAE5CC,GAEA,KAAKC,EAAO,CACX,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GACnC,GAAI,OAAOC,GAAU,SAAU,MAAM,IAAI,UAAU,wCAAyCA,CAAM,GAAG,EACrG,OAAQ,KAAKD,GAAQC,EAAO,IAC7B,CAEA,aAAaA,EAAO,CACnB,OAAI,OAAOA,GAAU,SAAiB,KAAK,IAAI,KAAKD,GAAOC,EAAO,IAAI,EAC/D,MAAM,aAAaA,CAAK,CAChC,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,OAAOD,GAAS,SAAUA,EAAO,CAAE,KAAMA,CAAK,UACzC,OAAOA,GAAM,MAAS,SAAU,OACzC,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,IAAI,EACvBC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKN,GACX,GAAGO,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASM,EAAM,CAC3B,GAAI,uBAAuB,KAAKA,CAAI,EAAG,OACvC,GAAM,CAACC,CAAI,EAAI,KAAK,WAAWP,EAASM,CAAI,EAAE,QAAQ,EACtD,GAAKC,EACL,OAAQ,IAAI,KAAKP,CAAO,EAAG,KAAKO,CAAI,CACrC,CAEA,WAAY,CAAE,OAAO,KAAK,eAAe,KAAKT,EAAK,CAAG,CACvD,ECrCO,IAAMU,EAAN,cAA+BC,CAAa,CAC/C,WAAW,gBAAiB,CAAE,MAAO,CAAC,CAAG,CACzC,WAAW,MAAO,CAAE,MAAO,CAAC,CAAG,CAE/BC,GAAW,CAAC,EAEZ,CAAE,OAAO,QAAS,GAAI,CAAE,OAAO,KAAKA,GAAU,OAAO,QAAS,EAAE,CAAG,CAEnE,IAAI,QAAS,CAAE,OAAO,KAAKA,GAAS,MAAQ,CAE5C,SAAU,CAAE,OAAO,KAAKA,GAAS,MAAM,CAAG,CAE1C,OAAOC,EAAM,CACT,YAAKD,GAAW,KAAK,YACjBC,EACA,KAAK,YAAY,eACjB,KAAKD,GACL,MACA,KAAK,YAAY,eACrB,EACO,IACX,CAEA,IAAIE,EAAK,CAAE,MAAO,CAAC,CAAC,KAAK,IAAIA,CAAG,CAAG,CAEnC,IAAIA,EAAK,CACL,OAAI,OAAOA,GAAQ,SAAiB,KAAKF,GAASE,CAAG,EAC9C,KAAKF,GAAS,KAAK,GAAK,EAAE,aAAaE,CAAG,CAAC,CACtD,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC5C,GAAK,MAAM,QAAQD,GAAM,OAAO,EACtC,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CACzC,QAAWC,KAASH,EAAK,QAAWE,EAAS,IAAIC,CAAK,EAC/DF,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEG,OAAOE,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAGC,EAAU,KAAM,CACpD,OAAO,MAAM,OAAOF,EAAS,CACnB,QAAS,KAAKR,GAAS,OAAO,CAACW,EAAMJ,EAAOK,IAAM,CAC9C,GAAIF,EAAS,CACT,IAAMG,EAASH,EAAQH,EAAOK,CAAC,EAC/B,GAAI,CAACC,EAAQ,OAAOF,EACpB,GAAI,CAAC,CAACJ,EAAO,EAAI,EAAE,SAASM,CAAM,EAAG,CACjC,GAAIA,aAAkBd,EAAc,MAAM,IAAI,MAAM,yDAAyD,EAC7G,OAAOY,EAAK,OAAOE,CAAM,CAC7B,CACJ,CACA,OAAOF,EAAK,OAAOJ,EAAM,OAAOC,CAAO,CAAC,CAC5C,EAAG,CAAC,CAAC,EACL,GAAGC,CACb,CAAC,CACC,CAEA,OAAO,MAAMN,EAASW,EAAMC,EAAe,CACvC,GAAI,KAAK,OAAQ,CACb,GAAM,CAAEC,EAAaC,CAAK,EAAIH,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,MAAO,oBAAqB,GAAG,CAAC,GAAK,CAAC,EACpG,GAAI,CAACE,EAAa,OAClBF,EAAOG,EAAK,KAAK,CACrB,CACA,GAAI,KAAK,KAAK,OAAQ,CAClB,GAAI,CAACC,GAASJ,EAAM,GAAG,KAAK,IAAI,GAAKK,EAAM,MAAML,EAAM,CAAC,GAAG,CAAC,EAAE,OAAS,EAAG,OAC1EA,EAAOM,EAAQN,EAAM,GAAG,KAAK,IAAI,CACrC,CACA,IAAMO,EAAWF,EAAM,MAAML,EAAM,CAAC,GAAG,CAAC,EACxC,GAAI,KAAK,aAAeO,EAAS,OAAS,KAAK,YAAa,OAC5D,IAAMf,EAAW,IAAI,KAAKH,CAAO,EAC3BmB,EAAUD,EAAS,IAAId,GAASQ,EAAcT,EAAUC,EAAM,KAAK,EAAG,KAAK,cAAc,CAAC,EAAE,OAAOgB,GAAKA,CAAC,EAC/G,QAAWhB,KAASe,EAAWhB,EAAS,IAAIC,CAAK,EACvD,OAAOD,CACL,CAEA,WAAY,CACR,IAAIkB,EAAM,KAAKxB,GAAS,KAAK,IAAI,EAKjC,GAJI,KAAK,YAAY,KAAK,SAEtBwB,EAAM,KAAK,YAAY,KAAK,KAAKA,CAAG,GAEpC,KAAK,YAAY,OAAQ,CAEzB,GAAI,CAAC,KAAKxB,GAAS,QAAU,CAAC,KAAK,YAAY,KAAK,OAAQ,MAAO,GACnEwB,EAAM;AAAA,EAAK,KAAK,YAAY,MAAM,IAAIA,CAAG,EAC7C,CACA,OAAOA,CACX,CACJ,EC1FO,IAAMC,GAAN,cAAgC,KAAM,CAAC,ECAvC,IAAMC,GAAN,cAA8B,KAAM,CAAC,ECKrC,IAAMC,GAAN,MAAMC,UAAoBC,CAAW,CAC3C,WAAW,aAAc,CAAE,MAAO,CAAC,CAAG,CAEtCC,GACAC,GACAC,GAEA,IAAI,cAAe,CAAE,OAAO,KAAKD,EAAe,CAEhD,KAAKE,EAAO,CACX,OAAI,UAAU,QAAUA,IAAU,KAAK,KAAK,IAAG,KAAKD,GAAU,MACvD,MAAM,KAAK,GAAG,SAAS,CAC/B,CAEA,OAAOC,EAAO,CAKb,OAJIA,IAAU,IAAQ,CAAC,KAAKH,KAC3B,KAAK,OAAO,EAAE,EAAE,OAAO,EACvB,KAAKC,GAAgB,IAElB,CAAC,UAAU,QAAU,OAAOE,GAAU,UAAkB,KAAKH,IACjE,KAAKA,GAAU,KAAK,YAAY,CAACG,CAAK,EAAG,KAAK,YAAY,YAAa,KAAKH,GAAS,aAAa,EAC3F,KACR,CAEA,aAAaG,EAAO,CACnB,OAAIA,aAAiBL,EACb,KAAK,IAAI,KAAK,KAAK,EAAGK,EAAM,KAAK,EAAG,IAAI,IAC3C,CAACA,EAAM,OAAO,GAAK,CAAC,CAAC,KAAK,OAAO,GAAG,aAAaA,EAAM,OAAO,CAAC,GAE7D,MAAM,aAAaA,CAAK,CAChC,CAEA,OAAOC,EAAS,KAAM,CACrB,GAAI,KAAKF,GACR,OAAIE,EAAeA,EAAO,KAAKF,EAAO,GAAK,CAAC,KAAKA,EAAO,GAAK,CAAC,EACvD,KAAKA,GAEb,IAAMG,EAAgBC,GAAW,CAChC,GAAKA,EACL,YAAKJ,GAAUI,EACX,KAAKJ,GAAQ,KAAK,GAAK,CAAC,KAAK,KAAK,GAAG,KAAK,KAAK,KAAKA,GAAQ,KAAK,CAAC,EAC/D,KAAKA,EACb,EACMK,EAAO,KAAK,KAAK,EACjBC,EAAO,KAAK,YAAY,KAAMC,EAAOD,EAAK,YAAY,EACxDE,EAAe,CAAC,EAAGC,EAAa,CAAC,EAGrC,GAAI,EADe,mBAAmB,KAAKH,CAAI,GAAK,CAAC,KAAK,SACvC,EAAEG,EAAa,CAAC,EAAE,OAAO,KAAK,aAAa,QAAQ,GAAIH,CAAK,SAAS,GAAG,MAAM,GAAK,CAAC,CAAC,GAAG,OAAQ,CAElH,GAAI,CAACJ,GAAU,CAACG,EAAM,OACtB,IAAMK,EAAaC,GAAeA,IAAcJ,CAAI,EAAEF,CAAI,EAC1DG,EAAe,YAAY,KAAKF,CAAI,EAAI,CAAC,KAAK,QAAQ,aAAa,CAAC,EAAI,KAAK,OAAO,EAAI,EAAE,OAAOM,GAAaP,EAAOK,EAAWE,CAAS,EAAW,EAAI,EACxJH,EAAaD,EAAa,OAAO,CAACC,EAAYG,IAAcH,EAAW,OAAOJ,EAAQK,EAAWE,CAAS,GAAK,CAAC,EAAYA,EAAU,GAAIL,CAAK,GAAG,EAAE,CAAC,EAAG,CAAC,CAAC,CAC3J,CACA,GAAIL,EAAQ,CAEX,IAAMW,EAAsBJ,EAAW,OAAOP,CAAM,EACpD,OAAIW,EAAoB,SAAW,GAAGV,EAAaU,EAAoB,CAAC,CAAC,EAClEA,CACR,CACA,GAAIJ,EAAW,OAAS,EAEvB,MAAM,IAAIK,GAAkB,IAAK,KAAK,aAAa,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAE,MAAOC,GAASR,CAAI,CAAE,IAAK,KAAK,eAAeF,CAAI,CAAE,yBAA0BG,EAAa,IAAIQ,GAAK,KAAK,eAAe,CAACA,EAAE,KAAK,EAAGX,CAAI,CAAC,CAAC,EAAE,KAAK,MAAM,CAAE,IAAI,EAC1O,GAAI,CAACF,EAAaM,EAAW,CAAC,CAAC,EAErC,MAAM,IAAIQ,GAAgB,IAAK,KAAK,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAE,cAAeV,CAAK,KAAM,KAAK,eAAeF,CAAI,CAAE,EAAE,EAE3H,OAAO,KAAKL,EACb,CAEA,OAAO,SAASkB,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,OAAOD,GAAS,SAAUA,EAAO,CAAE,KAAMA,CAAK,UACzC,MAAM,QAAQA,CAAI,GAAKA,EAAK,KAAK,GAAK,OAAO,GAAM,QAAQ,IAAMA,EAAOA,EAAK,MAAM,GAC3FA,EAAO,CAAE,KAAMA,EAAK,IAAI,EAAG,OAAQA,EAAK,IAAI,CAAE,UACpC,OAAOA,GAAM,MAAS,SAAU,OAC3C,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC9CF,EAAK,QAAQE,EAAS,OAAOF,EAAK,MAAM,EAC5CC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,IAAMC,IAAW,CAAC,KAAKzB,IAAiBuB,EAAQ,SAAWA,EAAQ,iBAAmB,KAAKxB,KAAU,SAASwB,CAAO,EACrH,OAAO,MAAM,OAAOA,EAAS,CAC5B,GAAIE,GAAQ,KAAO,CAAE,OAAQA,CAAO,EAAI,CAAC,EACzC,GAAGD,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASO,EAAMC,EAAe,CAC1C,GAAI,uBAAuB,KAAKD,CAAI,EAAG,OACvC,GAAM,CAACpB,EAAM,GAAGmB,CAAM,EAAI,KAAK,WAAWN,EAASO,CAAI,EAAE,QAAQ,EACjE,GAAI,CAACpB,EAAM,OACX,IAAMgB,EAAY,IAAI,KAAKH,CAAO,EAAG,KAAKb,CAAI,EAC9C,OAAImB,EAAO,QAAQH,EAAS,OAAOG,CAAM,EAClCH,CACR,CAEA,WAAY,CAAE,MAAO,CAAC,EAAE,OAAO,CAAC,KAAKtB,IAAiB,KAAKD,IAAS,UAAU,GAAK,CAAC,EAAG,KAAK,eAAe,KAAK,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAG,CACrI,ECrGO,IAAM6B,GAAN,cAAoCC,CAAa,CACvD,WAAW,gBAAiB,CAAE,MAAO,CAAC,CAAG,CAEzCC,GACAC,GACAC,GAEA,KAAKC,EAAM,CACV,OAAK,UAAU,QACf,KAAKH,GAAQ,KAAK,YAAY,CAACG,CAAI,EAAG,KAAK,YAAY,eAAgB,KAAKH,GAAO,MAAM,EAClF,MAFuB,KAAKA,EAGpC,CAEA,MAAMI,EAAOC,EAAU,GAAM,CAC5B,MAAI,CAAC,UAAU,QAAU,OAAOD,GAAU,UACrC,KAAKH,IAAU,CAACG,EAAc,KAAKH,GACnC,OAAO,KAAKD,GAAM,YAAe,YAAc,KAAKA,GAAM,WAAW,EAAU,KAAKA,GAAM,WAAW,EACrG,OAAO,KAAKA,GAAM,MAAS,YAAc,KAAKA,GAAM,KAAK,IAAM,IAAY,KAAKA,GAAM,KAAK,EAC/F,QAED,KAAKE,GAAWG,EACR,KAAKJ,GAASG,EAAO,KAC9B,CAEA,MAAME,EAAM,CAAE,OAAO,KAAK,MAAM,GAAGA,CAAI,CAAG,CAE1C,aAAaF,EAAO,CAAE,OAAO,KAAKJ,IAAO,aAAaI,CAAK,CAAG,CAE9D,QAAS,CACR,IAAMG,EAAS,KAAK,KAAK,GAAG,SAAS,GAA+B,MAAM,CAAE,eAAgB,EAAK,CAAC,EAClG,OAAOA,GAAU,KAAKN,GAASM,EAAO,KAAK,KAAKN,EAAM,EAAIM,CAC3D,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAKlD,GAJIF,GAAM,MACTE,EAAS,KAAKF,EAAK,IAAI,GACnBA,EAAK,OAASA,EAAK,KAAIE,EAAS,GAAGF,EAAK,OAASA,EAAK,GAAIA,EAAK,OAAO,GAChEA,GAAME,EAAS,KAAKF,CAAI,EAC/B,CAAC,CAACG,EAAW,EAAE,KAAKC,GAAKF,EAAS,KAAK,YAAaE,CAAC,GAAK,CAACF,EAAS,KAAK,EAAE,QAAU,CAACA,EAAS,MAAM,GAAK,KAAK,0BAClH,MAAM,IAAI,MAAM,IAAK,IAAK,oDAAoD,EAE/ED,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOG,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,IAAMC,EAAQ,KAAKf,IAAWa,EAAQ,SAAW,KAAKd,GAAM,aAAa,EACzE,OAAO,MAAM,OAAOc,EAAS,CAC5B,KAAM,KAAKd,IAAO,OAAOc,CAAO,EAChC,GAAIE,EAAQ,CAAE,MAAOA,EAAO,QAAS,KAAKd,EAAS,EAAI,CAAC,EACxD,GAAGa,CACJ,CAAC,CACF,CAEA,OAAO,MAAMP,EAASL,EAAMc,EAAe,CAC1C,IAAMN,EAAW,IAAI,KAAKH,CAAO,EAK7BH,EAAU,GACV,CAACa,EAAQC,CAAO,EAAIC,EAAM,MAAMjB,EAAM,CAAC,QAAQ,EAAG,CAAE,SAAU,GAAI,CAAC,EAAE,IAAKkB,GAAMA,EAAE,KAAK,CAAC,EAC5F,GAAI,CAACF,EAAS,CACb,IAAMG,EAASF,EAAM,MAAMjB,EAAM,CAAC,MAAM,EAAG,CAAE,SAAU,GAAI,CAAC,EACxDmB,EAAO,OAAS,GAAK,iBAAiB,KAAKA,EAAOA,EAAO,OAAS,CAAC,CAAC,IACvEH,EAAUG,EAAO,IAAI,EAAE,KAAK,EAC5BJ,EAASI,EAAO,KAAK,GAAG,GAEzBjB,EAAU,EACX,CAEA,GADAM,EAAS,KAAKM,EAAcN,EAAUO,EAAQ,KAAK,cAAc,CAAC,EAC9DC,EACH,CAACA,CAAO,EAAI,KAAK,WAAWR,EAAUQ,EAAQ,KAAK,CAAC,EACpDR,EAAS,GAAGQ,EAASd,CAAO,UAClB,CAAC,CAACO,EAAW,EAAE,KAAKC,GAAKF,EAAS,KAAK,YAAaE,CAAC,GAAK,CAACF,EAAS,KAAK,EAAE,QAAU,KAAK,0BACpG,MAAM,IAAI,MAAM,IAAK,IAAK,oDAAoD,EAE/E,OAAOA,CACR,CAEA,WAAY,CAAE,MAAO,CAAC,KAAKX,GAAO,KAAKE,GAAW,KAAO,GAAI,KAAKD,GAAS,KAAK,eAAe,KAAKA,EAAM,EAAI,IAAI,EAAE,OAAOoB,GAAKA,CAAC,EAAE,KAAK,GAAG,CAAG,CAC/I,ECnFO,IAAME,GAAN,cAAmCC,CAAa,CAEtDC,GACAC,GAAiB,CAAC,EAElB,QAAS,CAAE,OAAO,KAAKD,EAAS,CAEhC,eAAgB,CAAE,OAAO,KAAKC,GAAe,MAAM,CAAG,CAEtD,UAAUC,EAASC,EAAU,CAAC,EAAG,CAChC,OAAO,KAAK,YAAY,SAAS,KAAM,KAAK,UAAUD,EAASC,CAAO,CAAC,CACxE,CAEA,SAASC,EAAOD,EAAU,CAAC,EAAG,CAC7B,OAAO,KAAK,YAAY,SAAS,KAAM,KAAK,aAAaC,EAAOD,CAAO,CAAC,CACzE,CAEA,WAAWE,EAAS,GAAO,CAC1B,MAAO,CAAC,MAAO,UAAU,EAAE,SAAS,KAAKL,EAAO,EAAI,CAAC,QAAQ,EAAI,CAAC,CACnE,CAEA,aAAaI,EAAOD,EAAS,CAC5B,OAAO,KAAK,eAAe,CAC1B,OAAQ,KAAK,OAAO,CACrB,EAAG,CACF,OAAQC,EAAM,OAAO,CACtB,EAAGD,CAAO,CACR,CAEH,qBAAqBG,EAAO,CAC3B,OAAOA,EAAM,OAAOC,GAAK,CAAC,KAAK,IAAI,KAAKA,CAAC,EAAE,EAAG,KAAK,IAAIA,CAAC,EAAE,EAAE,EAAG,IAAI,CAAC,CACrE,CAEA,eAAeC,EAAOC,EAAON,EAAU,CAAC,EAAG,CAC1C,QAAWO,KAAK,OAAO,KAAKD,CAAK,EAChC,GAAI,EAAC,WAAY,QAAS,eAAe,EAAE,SAASC,CAAC,GACjD,GAAC,KAAK,SAASD,EAAMC,CAAC,CAAC,GAAK,KAAK,IAAIF,EAAME,CAAC,EAAGD,EAAMC,CAAC,EAAG,IAAI,GACjE,GAAIP,EAAQ,OAAS,UAAW,CAC/B,GAAIO,IAAM,UAAaP,EAAQ,qBAAuBK,EAAM,eAAe,SAASE,CAAC,EAAI,SACzFF,EAAQ,CAAE,GAAGA,EAAO,CAACE,CAAC,EAAGD,EAAMC,CAAC,EAAG,CAAC,IAAIA,CAAC,EAAE,EAAGF,EAAME,CAAC,CAAE,CACxD,MACKA,IAAM,SACTF,EAAQ,CAAE,GAAGA,EAAO,OAAQC,EAAMC,CAAC,CAAE,EAErCF,EAAQ,CAAE,GAAGA,EAAO,CAACL,EAAQ,OAAS,GAAQO,EAAI,IAAIA,CAAC,EAAE,EAAGD,EAAMC,CAAC,CAAE,EAIxE,OAAOF,CACR,CAEA,eAAeG,EAAOC,EAAOC,EAAkBV,EAAS,CACnD,MAAM,QAAQQ,CAAK,IACtBA,EAAQ,IAAI,IAAIA,EAAM,IAAIG,GAAQ,CAACA,EAAK,KAAK,EAAE,YAAY,EAAGA,CAAI,CAAC,CAAC,EACpEF,EAAQ,IAAI,IAAIA,EAAM,IAAIE,GAAQ,CAACA,EAAK,KAAK,EAAE,YAAY,EAAGA,CAAI,CAAC,CAAC,GAErE,GAAM,CAACC,EAASC,EAAUC,CAAK,EAAI,CAAC,IAAI,IAAK,IAAI,IAAK,IAAI,GAAG,EAC7D,QAAWC,KAAQ,IAAI,IAAI,CAAC,GAAGP,EAAM,KAAK,EAAG,GAAGC,EAAM,KAAK,CAAC,CAAC,EACxD,CAACA,EAAM,IAAIM,CAAI,GAAKP,EAAM,IAAIO,CAAI,EAAGH,EAAQ,IAAIJ,EAAM,IAAIO,CAAI,CAAC,EAC3DN,EAAM,IAAIM,CAAI,GAAK,CAACP,EAAM,IAAIO,CAAI,EAAGD,EAAM,IAAIL,EAAM,IAAIM,CAAI,CAAC,EAClEF,EAAS,IAAIL,EAAM,IAAIO,CAAI,CAAC,EAElC,MAAO,CAAC,GAAGP,EAAM,QAAQ,CAAC,EAAE,OAAO,CAACQ,EAAO,CAACD,EAAMJ,CAAI,IAAM,CAC3D,GAAIC,EAAQ,IAAID,CAAI,EAAG,OAAOK,EAAM,OAAO,CAAE,GAAGL,EAAK,OAAOX,CAAO,EAAG,OAAQ,UAAW,CAAC,EAC1F,GAAIa,EAAS,IAAIF,CAAI,EAAG,CACvB,IAAMM,EAAUP,EAAiBC,EAAMF,EAAM,IAAIM,CAAI,CAAC,EAEtD,OAAK,OAAO,KAAKE,CAAO,EAAE,OACnBD,EAAM,OAAOC,CAAO,EADcD,CAE1C,CACA,OAAOA,CACR,EAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGF,CAAK,EAAE,IACxBH,IAAS,CAAE,GAAGA,EAAK,OAAOX,CAAO,EAAG,OAAQ,KAAM,EACnD,CAAC,CACF,CAEA,YAAYA,EAAU,CAAC,EAAG,CACzB,OAAO,KAAK,YAAY,SACvB,KAAK,YACL,KAAK,OAAO,CAAE,GAAGA,EAAS,KAAM,SAAU,CAAC,CAC5C,CACD,CAIAkB,GAAmB,GACnB,mBAAmBC,EAAM,CACxB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GACnC,GAAI,KAAK,SAASC,EAAK,CAAC,CAAC,EAAG,CAC3B,IAAMC,EAAgB,KAAKF,GAC3B,KAAKA,GAAmB,GACxBC,EAAK,CAAC,EAAEA,EAAK,CAAC,CAAC,EACf,KAAKD,GAAmBE,CACzB,CACA,OAAO,IACR,CAEA,SAASC,EAAO,CAAE,OAAO,MAAM,QAAQA,CAAK,EAAI,CAAC,CAACA,EAAM,OAAS,OAAOA,EAAU,GAAa,CAI/F,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAClDA,EAAS5B,GAAU0B,EAAK,OACpB,MAAM,QAAQA,EAAK,aAAa,GACnCE,EAAS3B,GAAe,KAAK,GAAGyB,EAAK,aAAa,EAEnDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOzB,EAAU,CAAC,EAAG0B,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAO1B,EAAS,CAC5B,GAAG0B,EACH,GAAI,KAAK7B,IAAWG,EAAQ,OAAS,GAAQ,CAAE,OAAQA,EAAQ,OAAS,WAAa,CAAC,MAAO,UAAU,EAAE,SAAS,KAAKH,EAAO,EAAK,KAAKA,KAAY,MAAQ,WAAa,MAAS,KAAKA,EAAQ,EAAI,CAAC,EACpM,GAAI,KAAKC,GAAe,QAAUE,EAAQ,OAAS,GAAQ,CAAE,cAAe,KAAKF,GAAe,MAAM,CAAE,EAAI,CAAC,CAC9G,CAAC,CACF,CACD,ECvHO,IAAM6B,GAAN,cAAmCC,EAAqB,CAE9DC,GACAC,GAEG,KAAKC,EAAO,CACR,OAAK,UAAU,QACjB,KAAK,gBAAgB,GAAM,KAAK,UAAU,GAAK,KAAKF,GACvD,KAAKC,GAASC,EACR,KAAKF,GAAQE,EACP,MAJuB,KAAKF,EAKvC,CAEH,OAAQ,CAAE,OAAO,KAAKC,IAAU,KAAKD,EAAO,CAE5C,aAAaE,EAAO,CACnB,OAAI,OAAOA,GAAU,SACb,KAAK,IAAI,KAAKF,GAAOE,EAAO,IAAI,EAEjC,MAAM,aAAaA,CAAK,CAChC,CAIA,WAAWC,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,MAAM,CAAC,CACnC,CACD,CAEA,aAAaC,EAAOC,EAAS,CAC5B,OAAO,KAAK,eAAe,CAC1B,GAAG,MAAM,aAAaD,EAAOC,CAAO,EACpC,KAAM,KAAK,MAAM,CAClB,EAAG,CACF,KAAMD,EAAM,MAAM,CACnB,EAAGC,CAAO,CACR,CAIHC,GAAa,GACb,UAAUC,EAAK,CACd,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,IAAc,CAAC,CAAC,KAAK,aAAa,YAAY,EACjF,GAAI,OAAOC,GAAQ,WAAY,CAC9B,IAAMC,EAAgB,KAAKF,GAC3B,KAAKA,GAAa,GAClBC,EAAI,EACJ,KAAKD,GAAaE,CACnB,MAAO,KAAKF,GAAa,CAAC,CAACC,EAC3B,OAAO,IACR,CAIA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,EAAAD,GAAM,MAAQ,OAAOA,EAAK,MAAS,WACnC,EAAAA,GAAM,OAAS,OAAOA,EAAK,OAAU,UACnC,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CACxDA,EAAS,KAAKF,EAAK,IAAI,EACvBE,EAAS,gBAAgBF,EAAK,MAAQG,GAAUD,EAAS,KAAKC,CAAK,CAAC,EACpEF,IAAWC,CAAQ,CACpB,CAAC,CACC,CAEH,OAAOP,EAAU,CAAC,EAAGS,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOT,EAAS,KAAK,eAAe,CAChD,KAAM,KAAKL,GACX,GAAGc,CACJ,EAAG,CACF,KAAM,KAAKb,EACZ,EAAGI,CAAO,CAAC,CACZ,CACD,ECzEO,IAAMU,GAAN,MAAMC,UAAuCC,EAAqB,CAExEC,GACAC,GAEG,OAAOC,EAAO,CAChB,GAAI,CAAC,UAAU,QAAU,OAAOA,GAAU,UAAW,CACpD,IAAIC,EAAS,KAAKH,GAClB,GAAI,CAACG,GAAUD,IAAU,GAAM,CAC9B,IAAME,EAAW,KAAK,YAAY,YAAY,CAAC,EACzCC,EAAW,CAAC,EACd,KAAK,uBAAuBP,GAC/BO,EAAS,KAAK,KAAK,YAAY,OAAO,EAAI,EAAE,OAAO,CAAC,EAEjD,KAAK,uBAAuBN,IAC/BM,EAAS,KAAK,KAAK,YAAY,KAAK,CAAC,EACrCF,EAASC,GAAU,SAAS,KAAMC,CAAQ,GACpCF,EAASC,GAAU,SAAS,KAAM,EAAE,CAC5C,CACA,OAAOD,CACR,CACA,OAAI,KAAK,gBAAgB,EACxB,KAAKF,GAAW,KAAK,YAAY,CAACC,CAAK,EAAG,KAAK,YAAY,YAAa,KAAKD,GAAU,SAAS,EAC1F,KAAKD,GAAU,KAAK,YAAY,CAACE,CAAK,EAAG,KAAK,YAAY,YAAa,KAAKF,GAAS,QAAQ,EACvF,IACX,CAEH,WAAWM,EAAM,CAAE,OAAO,KAAKL,IAAY,KAAK,OAAO,GAAGK,CAAI,CAAG,CAEjE,aAAaJ,EAAO,CACnB,OAAO,MAAM,aAAaA,CAAK,IAC3B,CAACA,GAAO,SAAS,GAAK,CAAC,CAAC,KAAK,OAAO,GAAG,aAAaA,EAAM,OAAO,CAAC,EACvE,CAIA,WAAWK,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,QAAQ,CAAC,CACrC,CACD,CAEG,aAAaC,EAAOC,EAAS,CAC/B,OAAO,KAAK,eAAe,CAC1B,GAAG,MAAM,aAAaD,EAAOC,CAAO,EACpC,OAAQ,KAAK,QAAQ,CAAC,CAACD,EAAM,QAAQ,CAAC,GAAG,OAAO,CACjD,EAAG,CACF,OAAQA,EAAM,QAAQ,GAAG,OAAO,CACjC,EAAGC,CAAO,CACR,CAIA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC5C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CACpDF,EAAK,QAAQE,EAAS,OAAOF,EAAK,MAAM,EAC5CE,EAAS,gBAAgBF,EAAK,QAAUG,GAAYD,EAAS,OAAOC,CAAO,CAAC,EAC5EF,IAAWC,CAAQ,CACpB,CAAC,CACC,CAEH,OAAOJ,EAAU,CAAC,EAAGM,EAAS,CAAC,EAAG,CACjC,IAAMZ,EAAS,KAAKH,IAAWS,EAAQ,gBACnC,KAAKT,IAAW,KAAK,OAAO,EAAI,GAAG,OAAOS,CAAO,EAClD,CAAC,EACJ,OAAO,MAAM,OAAOA,EAAS,KAAK,eAAe,CAChD,GAAIN,EAAO,KAAO,CAAE,OAAQA,CAAO,EAAI,CAAC,EACxC,GAAGY,CACJ,EAAG,CACF,OAAQ,KAAKd,IAAU,OAAOQ,CAAO,CACtC,EAAGA,CAAO,CAAC,CACZ,CACD,ECxEO,IAAMO,GAAN,cAA0BC,EAAY,CAC5C,WAAW,MAAO,CAAE,MAAO,UAAY,CAEvC,OAAOC,EAAO,CAAC,CAChB,ECJO,IAAMC,EAAN,cAAgCC,EAAY,CAClD,WAAW,WAAY,CAAE,OAAOA,GAAY,SAAW,CACvD,IAAI,QAAS,CAAE,MAAO,EAAM,CAC7B,ECFO,IAAMC,GAAN,cAAuBC,EAAY,CACzC,WAAW,aAAc,CAAE,OAAOC,EAAa,CAC/C,WAAW,MAAO,CAAE,MAAO,OAAS,CACrC,ECHO,IAAMC,EAAN,cAA6BC,EAAS,CAC5C,WAAW,WAAY,CAAE,OAAOA,GAAS,SAAW,CACpD,WAAW,aAAc,CAAE,OAAOC,CAAmB,CACrD,IAAI,QAAS,CAAE,MAAO,EAAM,CAC7B,ECJO,IAAMC,EAAN,cAA0BC,CAAa,CAE1CC,GAAW,CAAC,EAEZ,CAAC,OAAO,QAAQ,GAAI,CAAE,OAAO,KAAKA,GAAS,OAAO,QAAQ,EAAE,CAAG,CAE/D,IAAI,QAAS,CAAE,OAAO,KAAKA,GAAS,MAAQ,CAE5C,SAAU,CAAE,OAAO,KAAKA,EAAU,CAElC,OAAOC,EAAM,CACT,GAAI,OAAOA,EAAK,CAAC,GAAM,SAAU,CAC7B,IAAMC,EAASD,EAAK,MAAM,EACpBE,EAAW,OAAOF,EAAKA,EAAK,OAAS,CAAC,GAAM,WAAaA,EAAK,IAAI,EAAI,KACtEG,EAAO,KAAK,YAAY,eAAe,KAAKC,GAAKA,EAAE,SAAWH,CAAM,EAC1E,GAAI,CAACE,EAAM,MAAM,IAAI,MAAM,uBAAuBF,CAAM,EAAE,EAC1D,IAAMI,EAAS,IAAIF,EAAK,KAAM,GAAGH,CAAI,EAErC,GADA,KAAKD,GAAW,KAAK,YAAY,CAACM,CAAM,EAAG,KAAK,YAAY,eAAgB,KAAKN,GAAU,SAAS,EAChGG,EAAUA,EAASG,CAAM,MACxB,QAAOA,CAChB,MAAO,KAAKN,GAAW,KAAK,YAAYC,EAAM,KAAK,YAAY,eAAgB,KAAKD,GAAU,SAAS,EACvG,OAAO,IACX,CAEH,OAAO,SAASO,EAASC,EAAML,EAAW,KAAM,CAC/C,GAAK,MAAM,QAAQK,GAAM,OAAO,EAChC,OAAO,MAAM,SAASD,EAASC,EAAOC,GAAa,CACzCA,EAAS,IAAI,GAAGD,EAAK,OAAO,EAC5BL,IAAWM,CAAQ,CACvB,CAAC,CACR,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,QAAS,KAAKV,GAAS,IAAIM,GAAUA,EAAO,OAAOI,CAAO,CAAC,EAC3D,GAAGC,CACJ,CAAC,CACF,CAEG,OAAO,MAAMJ,EAASK,EAAMC,EAAe,CACvC,IAAMJ,EAAW,IAAI,KAAKF,CAAO,EACjC,OAAOE,EAAS,IAAI,GAAGK,EAAM,MAAMF,EAAM,CAAC,GAAG,CAAC,EAAE,IAAIG,GAAcF,EAAcJ,EAAUM,EAAW,KAAK,EAAG,KAAK,cAAc,CAAC,CAAC,CACtI,CAEA,WAAY,CAAE,OAAO,KAAK,QAAQ,EAAE,KAAK;AAAA,CAAK,CAAG,CACrD,EC9CO,IAAMC,EAAN,cAA6BC,CAAa,CAEhD,WAAW,QAAS,CAAE,OAAO,KAAK,SAAW,CAE7CC,GACAC,GAEA,IAAI,QAAS,CAAE,OAAO,KAAK,YAAY,MAAQ,CAC/C,IAAI,MAAO,CAAE,OAAO,KAAKD,EAAO,CAC7B,IAAI,OAAQ,CAAE,OAAO,KAAKC,IAAU,KAAK,IAAM,CAE/C,YAAYC,EAAaC,EAAO,KAAMC,EAAQ,KAAM,CAChD,MAAMF,CAAW,EACjB,KAAKF,GAAQG,EACb,KAAKF,GAASG,CAClB,CAEH,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CACzC,GAAI,EAAAD,EAAK,QAAUA,EAAK,SAAW,KAAK,QACxC,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC/CA,EAASR,GAAQM,EAAK,KACtBE,EAASP,GAASK,EAAK,MACvBC,IAAWC,CAAQ,CACvB,CAAC,CACR,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC3B,OAAO,MAAM,OAAOD,EAAS,CAClC,OAAQ,KAAK,OACJ,KAAM,KAAKT,GACX,GAAI,KAAKC,GAAS,CAAE,MAAO,KAAKA,EAAO,EAAI,CAAC,EACrD,GAAGS,CACE,CAAC,CACL,CACJ,EClCO,IAAMC,GAAN,cAAmBC,CAAe,CAErCC,GAEA,MAAMC,EAAO,CACT,OAAK,UAAU,QACP,KAAKD,GAASC,EAAO,MADC,KAAKD,EAEvC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAClD,GAAKD,GAAM,MACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,MAAMF,EAAK,KAAK,EACzBC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKN,GACZ,GAAGO,CACJ,CAAC,CACF,CAEG,OAAO,MAAML,EAASM,EAAM,CACxB,GAAM,CAACP,CAAK,EAAIO,EAAK,MAAM,2FAA2F,GAAK,CAAC,EAC5H,GAAIP,EAAO,OAAQ,IAAI,KAAKC,CAAO,EAAG,MAAMD,EAAM,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,CACvF,CAEA,WAAY,CAAE,OAAO,KAAKD,IAAQ,QAAQ,IAAK,GAAG,GAAK,EAAI,CAC/D,EC7BO,IAAMS,GAAN,cAA4BC,CAAY,CAC3C,WAAW,gBAAiB,CACxB,MAAO,CAACC,EAAI,CAChB,CACJ,ECJO,IAAMC,GAAN,cAAiCC,EAAqB,CACzD,WAAW,MAAO,CAAE,OAAO,KAAK,UAAU,QAAQ,uCAAwC,EAAE,CAAG,CAElG,IAAI,MAAO,CAAE,OAAO,KAAK,YAAY,IAAM,CAExC,UAAUC,EAAWC,EAAS,CAE1B,OADW,KAAK,OAAOA,CAAO,CAElC,CAEA,aAAc,CAEV,OADsBC,GAAc,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,CAEtE,CAEA,aAAaC,EAAOF,EAAS,CACzB,MAAO,CACH,KAAM,KAAK,KACX,GAAG,MAAM,aAAaE,EAAOF,CAAO,CACxC,CACJ,CAIA,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC5C,GAAID,GAAM,OAAS,KAAK,KACxB,OAAO,MAAM,SAASD,EAASC,EAAMC,CAAQ,CACjD,CAEH,OAAOL,EAAU,CAAC,EAAGM,EAAS,CAAC,EAAG,CAC3B,OAAO,MAAM,OAAON,EAAS,CACzB,KAAM,KAAK,KAAM,GAAGM,CACxB,CAAC,CACL,CAEA,OAAO,MAAMH,EAASI,EAAM,CACxB,GAAI,CAAE,KAAAC,EAAM,KAAMC,CAAM,EAAI,KAAK,UAAUN,EAASI,EAAM,EAAI,EAC9D,GAAI,GAACE,GAAS,CAAE,IAAI,OAAO,IAAK,KAAK,OAAS,iBAAmB,KAAK,KAAO,KAAK,KAAK,QAAQ,IAAK,MAAM,CAAE,IAAK,GAAG,EAAG,KAAKA,CAAK,GACjI,OAAQ,IAAI,KAAKN,CAAO,EAAG,KAAKK,CAAI,CACxC,CAEA,WAAY,CAAE,OAAO,KAAK,OAAS,iBAAmB,KAAK,KAAO,GAAI,KAAK,cAAc,CAAE,GAAI,KAAK,KAAK,QAAQ,IAAK,GAAG,CAAE,EAAI,CAI/H,OAAO,UAAUL,EAASI,EAAMG,EAAiB,GAAO,CACpD,IAAMC,EAAU,KAAK,WAAWR,EAASO,CAAc,EACjDE,EAAY,mCAAmDD,CAAQ,kCACvE,CAAE,CAAEE,EAAqB,CAAEC,EAAc,GAAIC,EAAO,EAAG,EAAIR,EAAK,MAAM,IAAI,OAAO,IAAKK,CAAU,eAAgB,GAAG,CAAC,GAAK,CAAC,EAChI,MAAO,CAAE,KAAMC,GAAgB,KAAK,MAAMF,EAASG,CAAW,EAAG,KAAMC,EAAK,KAAK,CAAE,CACvF,CAEA,eAAgB,CAAE,OAAO,KAAK,MAAM,EAAI,cAAe,KAAK,eAAe,KAAK,MAAM,CAAC,CAAE,IAAM,EAAI,CACvG,ECtDO,IAAMC,EAAN,cAAuCC,EAAmB,CAE7D,IAAI,iBAAkB,CAAE,MAAO,EAAG,CAClC,IAAI,eAAgB,CAAE,OAAO,KAAK,YAAY,cAAc,KAAK,WAAW,CAAG,CAE/E,OAAO,cAAcC,EAAa,CAAE,OAAOA,GAAa,aAAa,YAAc,eAAiB,CAIpG,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC5C,GAAID,GAAM,OAAS,KAAK,KACxB,MAAI,EAAE,SAAUA,IAASD,GAAS,QAAQ,UAAY,UAElDC,EAAO,CAAE,KAAM,cAAgB,EAAI,KAAK,OAAO,EAAI,KAAM,SAAU,EAAG,CAAE,GAAI,GAAGA,CAAK,GAEjF,MAAM,SAASD,EAASC,EAAMC,CAAQ,CACjD,CAEH,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC3B,IAAIC,EAAQ,MAAM,OAAOF,EAASC,CAAM,EACxC,MAAI,EAAE,SAAUC,IAAU,KAAK,OAAO,UAAY,UAE9CA,EAAQ,CAAE,KAAM,OAAW,GAAGA,CAAM,GAEvCA,CACR,CACD,ECxBO,IAAMC,GAAuBC,GAAS,cAAcA,CAAM,CAE7DC,GAAW,CAAC,EACZC,GAAY,CAAC,EAEb,QAAQC,EAAS,CACb,GAAI,KAAK,cAAe,CACpB,GAAI,UAAU,OAAQ,MAAM,IAAI,MAAM,oEAAoE,EAC1G,MAAO,CAAC,KAAK,YAAY,KAAK,CAAC,CACnC,CACA,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,CAAC,MAAM,QAAQE,CAAO,GAAK,CAACA,EAAQ,OAAQ,MAAM,IAAI,MAAM,wCAAwC,EACxG,OAAI,KAAK,gBAAgB,EACrB,KAAKD,GAAYC,EACd,KAAKF,GAAWE,EAChB,IACX,CAEA,UAAW,CAAE,OAAO,KAAKD,GAAU,OAAS,KAAKA,GAAY,KAAK,QAAQ,CAAG,CAI7E,WAAWE,EAAS,GAAO,CACvB,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC5B,KAAK,qBAAqB,CAAC,SAAS,CAAC,CACzC,CACJ,CAEA,aAAaC,EAAOC,EAAS,CACzB,OAAI,KAAK,cAAsB,MAAM,aAAaD,EAAOC,CAAO,EACzD,KAAK,eAAe,CACvB,GAAG,MAAM,aAAaD,EAAOC,CAAO,EACpC,QAAS,KAAK,SAAS,CAC3B,EAAG,CACC,QAASD,EAAM,SAAS,CAC5B,EAAGC,CAAO,CACd,CAEA,wBAAwBC,EAAMC,EAASC,EAA0B,GAAO,CACpE,OAAOF,EAAK,OAAO,CAACG,EAAIC,IAAM,CAC1B,IAAMC,EAAaJ,EAAQ,OAAOK,GAAK,CAAC,OAAQ,QAAQ,EAAE,SAASA,EAAE,MAAM,GAAKA,EAAE,OAAS,UAAYA,EAAE,UAAU,EAAE,aAAaF,CAAC,CAAC,EAAE,OAAO,CAACG,EAAI,IAAM,EAAE,SAAW,OAAS,CAAC,CAAC,EAAE,OAAOA,CAAE,EAAIA,EAAG,OAAO,CAAC,EAAG,CAAC,CAAC,EAC/M,GAAI,CAACF,EAAW,OAAQ,OAAOF,EAAG,OAAOC,CAAC,EAC1C,GAAIC,EAAW,CAAC,EAAE,SAAW,OAAQ,CACjC,GAAI,CAACA,EAAW,CAAC,EAAE,QAAQ,SAAS,GAAKH,EAAyB,MAAM,IAAI,MAAM,sBAAsBG,EAAW,CAAC,EAAE,UAAU,CAAC,sCAAsC,EACvK,OAAOF,CACX,CACA,GAAIE,EAAW,CAAC,EAAE,SAAW,SAAU,OAAOF,EAAG,OAAOE,EAAW,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAC3F,EAAG,CAAC,CAAC,CACT,CAIA,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC5C,GAAI,GAAC,KAAK,cAAcF,CAAO,GAAK,CAAC,MAAM,QAAQC,EAAK,OAAO,GAC/D,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC3C,CAAC,KAAK,cAAcH,CAAO,GAAK,MAAM,QAAQC,EAAK,OAAO,GAAGE,EAAS,QAAQF,EAAK,OAAO,EACzF,KAAK,cAAcD,CAAO,GAAGG,EAAS,gBAAgBF,EAAK,SAAWG,GAAaD,EAAS,QAAQC,CAAQ,CAAC,EAClHF,IAAWC,CAAQ,CACvB,CAAC,CACL,CAEA,OAAOZ,EAAU,CAAC,EAAGc,EAAS,CAAC,EAAG,CAC9B,GAAI,KAAK,eAAiB,CAACd,EAAQ,YAAa,OAAO,MAAM,OAAOA,EAASc,CAAM,EACnF,IAAIJ,EAAO,MAAM,OAAOV,EAAS,KAAK,eAAe,CACjD,QAAS,KAAK,QAAQ,EAAsC,MAAM,EAClE,GAAGc,CACP,EAAG,CACC,QAAS,KAAKlB,GAAU,MAAM,CAClC,EAAGI,CAAO,CAAC,EACX,GAAI,CAACA,EAAQ,SAAU,OAAOU,EAC9B,IAAMb,EAAU,KAAK,wBAAwBa,EAAK,QAASV,EAAQ,SAAS,QAAQ,CAAC,EACrF,OAAIH,EAAQ,SAAWa,EAAK,QAAQ,OAE3BV,EAAQ,KACN,CAAE,GAAGU,EAAM,OAAQ,UAAW,EADlB,QAGnBK,GAAWlB,EAASa,EAAK,OAAO,EAAE,SAAWA,EAAK,QAAQ,SAE1DA,EAAO,KAAK,eAAeA,EAAM,CAAE,QAAAb,CAAQ,EAAGG,CAAO,EACjDA,EAAQ,OAAS,KACZU,EAAK,gBAAeA,EAAK,cAAgB,CAAC,GAC/CA,EAAK,cAAc,KAAK,SAAS,IAGlCA,EACX,CAIA,OAAO,aAAaD,EAASO,EAAaC,EAAiB,GAAM,CAC7D,OAAOC,EAAM,MAAMC,EAAQH,EAAa,IAAK,GAAG,EAAG,CAAC,GAAG,CAAC,EAAE,IAAII,GACnD,KAAK,WAAWX,EAASW,EAAW,KAAK,EAAG,GAAOH,CAAc,EAAE,CAAC,CAC9E,CACL,CAEA,kBAAmB,CAAE,MAAO,KAAK,KAAK,SAAS,EAAE,IAAIZ,GAAK,KAAK,eAAeA,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,GAAK,CACrG,EChGO,IAAMgB,GAAN,cAAmCC,GAAqBC,CAAwB,CAAE,CAErF,OAAO,MAAMC,EAASC,EAAMC,EAAe,CACvC,GAAM,CAAE,KAAAC,EAAM,KAAMC,CAAM,EAAI,KAAK,UAAUJ,EAASC,EAAM,EAAI,EAChE,GAAI,CAACG,GAAS,CAAC,kBAAkB,KAAKA,CAAK,EAAG,OACpD,IAAMC,EAAY,IAAI,KAAKL,CAAO,EAAG,KAAKG,CAAI,EACxC,GAAI,KAAK,cAAcH,CAAO,EAAG,OAAOK,EACxC,GAAM,CAAE,CAAEC,CAAY,EAAIC,EAAM,MAAMN,EAAM,CAAC,CAAC,EAC9C,OAAOI,EAAS,QAAQ,KAAK,aAAaA,EAAUC,CAAW,CAAC,CACpE,CAEA,WAAY,CACR,MAAO,GAAI,KAAK,cAAc,CAAE,cAAgB,KAAK,cAA0C,GAA1B,KAAK,iBAAiB,CAAM,EACrG,CACJ,EClBO,IAAME,EAAyBC,GAAS,cAAcA,CAAM,CAElEC,GAEA,IAAI,WAAY,CAAE,OAAO,KAAK,YAAY,UAAU,KAAK,IAAI,CAAG,CAEhE,UAAUC,EAAW,CACpB,OAAK,UAAU,QACf,KAAKD,GAAa,KAAK,YAAY,CAACC,CAAS,EAAG,KAAK,UAAW,KAAKD,GAAY,WAAW,EACrF,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,WAAWE,EAAS,UAAUF,EAAK,SAAS,EACrDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,UAAW,KAAKN,IAAY,OAAOM,CAAO,EAC1C,GAAGC,CACJ,CAAC,CACF,CACD,ECzBO,IAAMC,EAAwBC,GAAS,cAAcA,CAAM,CAEjEC,GAEA,IAAI,gBAAiB,CAAE,OAAO,KAAK,YAAY,eAAe,KAAK,IAAI,CAAG,CAE1E,SAASC,EAAU,CAClB,OAAK,UAAU,QACf,KAAKD,GAAY,KAAK,YAAY,CAACC,CAAQ,EAAG,KAAK,eAAgB,KAAKD,GAAW,UAAU,EACtF,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,SACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,SAASF,EAAK,QAAQ,EAC/BC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,SAAU,KAAKN,IAAW,OAAOM,CAAO,EACxC,GAAGC,CACJ,CAAC,CACF,CACD,ECtBO,IAAMC,GAAN,cAAkCC,EAAuBC,EAAsBC,CAAc,CAAC,CAAE,CAEtG,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAC,CAAEC,EAAUC,EAAeC,CAAa,EAAIJ,EAAK,MAAM,IAAI,OAAO,cAAc,OAAO,KAAK,KAAK,cAAc,EAAE,KAAK,GAAG,CAAC,oCAAqC,GAAG,CAAC,GAAK,CAAC,EAChL,GAAI,CAACG,EAAe,OACpB,IAAME,EAAW,IAAI,KAAKN,EAASG,EAAS,YAAY,CAAC,EACzD,OAAAG,EAAS,UAAUJ,EAAcI,EAAUF,EAAe,KAAK,UAAUE,EAAS,IAAI,CAAC,CAAC,EACxFA,EAAS,SAASJ,EAAcI,EAAUD,EAAc,KAAK,eAAeC,EAAS,IAAI,CAAC,CAAC,EACpFA,CACR,CACD,ECdO,IAAMC,GAAwBC,GAAS,cAAcA,CAAM,CAEjEC,GAAe,IAAI,IAEnB,IAAI,eAAgB,CAAE,OAAO,IAAM,CAEnC,IAAI,aAAc,CAAE,OAAO,KAAKA,EAAc,CAE9C,IAAI,WAAY,CAAE,OAAO,KAAK,SAAW,CAAC,CAAC,KAAKA,GAAa,IAAM,CAEnE,QAAQC,EAAWC,EAAa,CAC/B,MAAI,CAAC,YAAa,cAAc,EAAE,SAASD,CAAS,GAAKC,EAAY,UAChED,IAAc,eAAgB,KAAKD,GAAa,OAAOE,CAAW,EACjE,KAAKF,GAAa,IAAIE,CAAW,GAGhC,MAAM,QAAQD,EAAWC,CAAW,CAC5C,CAED,ECnBO,IAAMC,GAAgBC,GAAS,cAAcA,CAAM,CACtD,IAAI,SAAU,CAAE,MAAO,EAAM,CACjC,ECEO,IAAMC,EAAuBC,GAAS,cAAcC,GAAsBC,GAAcF,CAAK,CAAC,CAAE,CACnG,WAAW,QAAS,CAAE,OAAO,KAAK,UAAU,QAAQ,qBAAsB,EAAE,CAAG,CAE/EG,GAEA,IAAI,eAAgB,CAAE,MAAO,KAAO,CAEvC,UAAUC,EAAO,CAChB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GAC7B,GAAI,CAAC,sBAAsB,KAAKC,CAAK,EAAG,MAAM,IAAI,MAAM,2CAA2C,EACzG,YAAKD,GAAmBC,EAAM,YAAY,EACnC,IACR,CAEG,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAE5C,GAAM,CAACC,CAAI,EAAI,KAAK,UAAU,MAAM,gBAAgB,EACpD,OAAO,MAAM,SAASH,EAAS,CAAE,GAAGC,EAAM,KAAMA,EAAK,OAASE,IAAS,WAAa,SAAWA,EAAM,EAAIC,GAAa,CACvHH,EAAK,iBAAiBG,EAAS,UAAUH,EAAK,eAAe,EACjEC,IAAWE,CAAQ,CACpB,CAAC,CACC,CAEH,OAAOC,EAASC,EAAgB,CAC/B,OAAO,MAAM,OAAOD,EAAS,KAAO,CACnC,GAAI,KAAKP,IAAoB,CAACO,EAAQ,QAAU,CAAE,gBAAiB,KAAKP,EAAiB,EAAI,CAAC,EAC9F,GAAGQ,EAAe,CACnB,EAAE,CACH,CAEG,OAAO,MAAMN,EAASO,EAAMC,EAAe,CACvC,IAAIC,EACA,4BAA4B,KAAKF,CAAI,IACrC,CAACA,EAAME,CAAe,EAAIC,EAAM,MAAMH,EAAM,CAAC,WAAW,EAAG,CAAE,SAAU,GAAI,CAAC,EAAE,IAAKI,GAAMA,EAAE,KAAK,CAAC,GAErG,IAAMP,EAAW,MAAM,MAAMJ,EAASO,EAAMC,CAAa,EACzD,OAAIC,GAAiBL,GAAU,UAAUK,CAAe,EACjDL,CACX,CAEH,WAAY,CACL,IAAMQ,EAAM,MAAM,UAAU,EAC5B,OAAI,KAAKd,GAAyB,GAAGc,CAAG,cAAc,KAAKd,EAAgB,GACpEc,CACd,CACD,EC7CO,IAAMC,GAAN,cAAkCC,GAAqBC,CAAwB,CAAE,CAEpF,OAAO,MAAMC,EAASC,EAAMC,EAAe,CACvC,GAAM,CAAE,KAAAC,EAAM,KAAMC,CAAM,EAAI,KAAK,UAAUJ,EAASC,EAAM,EAAI,EAChE,GAAI,CAACG,GAAS,CAAC,oBAAoB,KAAKA,CAAK,EAAG,OACtD,IAAMC,EAAY,IAAI,KAAKL,CAAO,EAAG,KAAKG,CAAI,EACxC,GAAI,KAAK,cAAcH,CAAO,EAAG,OAAOK,EACxC,GAAM,CAAE,CAAEC,CAAY,EAAIC,EAAM,MAAMN,EAAM,CAAC,CAAC,EAC9C,OAAOI,EAAS,QAAQ,KAAK,aAAaA,EAAUC,CAAW,CAAC,CACpE,CAEA,WAAY,CACR,MAAO,GAAI,KAAK,cAAc,CAAE,SAAW,KAAK,cAA0C,GAA1B,KAAK,iBAAiB,CAAM,EAChG,CACJ,ECfO,IAAME,EAAN,cAAwBC,EAAY,CAC1C,WAAW,aAAc,CAAE,OAAOC,EAAU,CAC5C,WAAW,MAAO,CAAE,MAAO,QAAU,CAErCC,GAEA,WAAWC,EAAO,CACjB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GACnC,GAAI,OAAOC,GAAU,SAAU,MAAM,IAAI,UAAU,mCAAoCA,CAAM,GAAG,EAChG,OAAQ,KAAKD,GAAcC,EAAO,IACnC,CAEA,aAAaA,EAAO,CACnB,OAAO,MAAM,aAAaA,CAAK,GAAK,KAAK,IAAI,KAAKD,GAAaC,EAAO,IAAI,CAC3E,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9C,OAAOF,GAAM,YAAe,UAAUE,EAAS,WAAWF,EAAK,UAAU,EAC7EC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,GAAK,KAAKN,GAAc,CAAE,WAAY,KAAKA,EAAY,EAAI,CAAC,EAC5D,GAAGO,CACJ,CAAC,CACF,CACD,EC9BO,IAAMC,GAAN,cAAsBC,CAAa,CAEzCC,GAEA,MAAMC,EAAO,CACZ,OAAK,UAAU,QACP,KAAKD,GAASC,EAAO,MADC,KAAKD,EAEpC,CAEA,aAAaC,EAAO,CAAE,OAAOA,IAAU,KAAKD,IAAU,MAAM,aAAaC,CAAK,CAAG,CAEjF,WAAW,QAAS,CACnB,MAAO,CACN,KAAMC,GAAW,KAAK,SAASA,EAAS,CAAE,MAAO,IAAK,CAAC,EACvD,QAAS,CAACA,EAASD,IAAU,KAAK,SAASC,EAAS,CAAE,MAAAD,CAAM,CAAC,CAC9D,CACD,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,SAAOD,GAAM,OAAU,UAAY,CAAC,CAAC,IAAI,EAAE,SAASA,GAAM,KAAK,GACjE,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAO,EAAE,SAASA,CAAC,CAAC,EAAE,QACvE,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAClDA,EAAS,MAAMH,EAAK,KAAK,EACzBC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKP,GACZ,GAAGQ,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASO,EAAM,CAC3B,IAAMH,EAAW,IAAI,KAAKJ,CAAO,EACjC,MAAI,UAAU,KAAKO,CAAI,EAAUH,EAAS,MAAM,IAAI,EAC7CA,EAAS,MAAMG,CAAI,CAC3B,CAEA,WAAY,CAAE,MAAO,GAAI,KAAKT,EAAO,EAAI,CAC1C,ECtCO,IAAMU,GAAoBC,GAAS,cAAcA,CAAM,CAE1DC,GACAC,GACAC,GAAW,IAAI,IAElB,QAAQC,EAAWC,EAAa,CAC/B,MAAI,CAAC,YAAa,cAAc,EAAE,SAASD,CAAS,GAAKC,aAAuBC,IAC3EF,IAAc,eAAgB,KAAKD,GAAS,OAAOE,EAAY,KAAK,EAAE,YAAY,CAAC,EAClF,KAAKF,GAAS,IAAIE,EAAY,KAAK,EAAE,YAAY,CAAC,GAEjD,MAAM,QAAQD,EAAWC,CAAW,CAC5C,CAEA,KAAKE,EAAO,CACL,GAAI,CAAC,UAAU,QAAU,OAAOA,GAAU,UAAW,CAC1D,IAAIC,EAAO,KAAKP,GAChB,MAAI,CAACO,GAAQD,IAAU,IAAQ,KAAK,OAAS,YAChCC,EAAOC,GAAQ,SAAS,KAAM,CAAE,MAAO,IAAK,CAAC,GAE1CD,CACX,CACN,OAAI,KAAK,gBAAgB,EACf,KAAKN,GAAS,KAAK,YAAY,CAACK,CAAK,EAAGG,EAAO,KAAKR,GAAQ,OAAO,EACtE,KAAKD,GAAQ,KAAK,YAAY,CAACM,CAAK,EAAGG,EAAO,KAAKT,GAAO,MAAM,EAChE,IACL,CAEH,SAASU,EAAM,CAAE,OAAO,KAAKT,IAAU,KAAK,KAAK,GAAGS,CAAI,CAAE,CAEvD,SAAU,CACN,GAAI,UAAU,OAAQ,MAAM,IAAI,MAAM,6DAA6D,EACnG,MAAO,CAAC,GAAG,KAAKR,EAAQ,CAC5B,CAIH,WAAWS,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,MAAM,CAAC,CACnC,CACD,CAEG,aAAaC,EAAOC,EAAS,CAC/B,OAAO,KAAK,eAAe,CACjB,GAAG,MAAM,aAAaD,EAAOC,CAAO,EAC7C,KAAM,KAAK,MAAM,CAAC,CAACD,EAAM,MAAM,CAAC,GAAG,OAAOC,CAAO,CAClD,EAAG,CACF,KAAMD,EAAM,MAAM,GAAG,OAAOC,CAAO,CACpC,EAAGA,CAAO,CACR,CAIH,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CACzC,GAAI,SAAOD,GAAM,KAAS,KAC1B,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC/CA,EAAS,KAAKF,EAAK,IAAI,EACvBE,EAAS,gBAAgBF,EAAK,MAAQG,GAAUD,EAAS,KAAKC,CAAK,CAAC,EACpEF,IAAWC,CAAQ,CACvB,CAAC,CACR,CAEA,OAAOJ,EAAU,CAAC,EAAGM,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAON,EAAS,KAAK,eAAe,CACvC,KAAM,KAAKb,IAAO,OAAOa,CAAO,EACzC,GAAGM,CACE,EAAG,CACC,KAAM,KAAKlB,IAAQ,OAAOY,CAAO,CAC3C,EAAGA,CAAO,CAAC,CACZ,CAEG,OAAO,MAAMC,EAASP,EAAMa,EAAe,CACvC,GAAI,CAAE,KAAAC,EAAM,KAAMH,CAAM,EAAI,KAAK,UAAUJ,EAASP,EAAM,EAAI,EAC9D,GAAI,CAACW,GAAS,EAAEA,EAAQA,EAAM,MAAM,IAAI,OAAO,IAAK,KAAK,KAAK,QAAQ,KAAM,MAAM,CAAE,mBAAoB,GAAG,CAAC,IAAI,CAAC,GAAI,OACrH,IAAMD,EAAW,IAAI,KAAKH,CAAO,EACjC,OAAOG,EACF,KAAKG,EAAcH,EAAUC,CAAK,CAAC,EACnC,KAAKG,CAAI,CAClB,CAEA,WAAY,CAAE,MAAO,GAAI,MAAM,UAAU,CAAE,IAAK,KAAK,MAAM,CAAE,EAAI,CACrE,ECnFO,IAAMC,GAAN,cAA8BC,GAAkBC,CAAwB,CAAE,CAE7E,UAAW,CAAE,OAAO,KAAK,QAAQ,CAAG,CAEpC,WAAY,CAAE,MAAO,GAAI,MAAM,cAAc,CAAE,UAAW,KAAK,MAAM,CAAE,GAAK,CAChF,ECPO,IAAMC,EAAN,cAAuCC,EAAmB,CAC7D,IAAI,iBAAkB,CAAE,MAAO,EAAG,CACtC,ECDO,IAAMC,GAAN,cAAiCC,CAAyB,CAEhEC,GACAC,GAEA,OAAOC,EAAO,CACb,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,UAAW,MAAM,IAAI,MAAM,gDAAgD,EAChG,OAAI,KAAK,gBAAgB,EACxB,KAAKD,GAAWC,EACV,KAAKF,GAAUE,EACf,IACL,CAEH,SAAU,CAAE,OAAO,KAAKD,IAAY,KAAKD,EAAS,CAIlD,WAAWG,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,QAAQ,CAAC,CACrC,CACD,CAEG,aAAaC,EAAOC,EAAS,CAC/B,OAAO,KAAK,eAAe,CACjB,GAAG,MAAM,aAAaD,EAAOC,CAAO,EAC7C,OAAQ,KAAK,QAAQ,CACtB,EAAG,CACF,OAAQD,EAAM,QAAQ,CACvB,EAAGC,CAAO,CACR,CAIH,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAClDA,EAAS,OAAO,CAAC,CAACF,EAAK,MAAM,EAC7BE,EAAS,gBAAgBF,EAAK,QAAUG,GAAYD,EAAS,OAAOC,CAAO,CAAC,EAC5EF,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOJ,EAAU,CAAC,EAAGM,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAON,EAAS,KAAK,eAAe,CACvC,OAAQ,KAAKL,GACtB,GAAGW,CACJ,EAAG,CACF,OAAQ,KAAKV,EACd,EAAGI,CAAO,CAAC,CACZ,CAEG,OAAO,MAAMC,EAASM,EAAM,CACxB,GAAI,CAAE,KAAAC,EAAM,KAAMC,CAAM,EAAI,KAAK,UAAUR,EAASM,EAAM,EAAI,EACpE,GAAI,GAACE,GAAS,EAAEA,EAAQA,EAAM,MAAM,IAAI,OAAO,+DAA0E,GAAG,CAAC,IAAI,CAAC,IAClI,OAAQ,IAAI,KAAKR,CAAO,EAAG,KAAKO,CAAI,EAAE,OAAO,YAAY,KAAKC,CAAK,CAAC,CAClE,CAEA,WAAY,CACd,OAAI,KAAK,OAAO,UAAY,QAAiB,IAAIC,GAAwB,KAAK,OAAO,EAAG,UAAU,EAC3F,aAAc,KAAK,QAAQ,EAAI,SAAW,YAAa,cAC/D,CACD,EC9DO,IAAMC,GAAN,cAAsCC,CAAyB,CACrE,WAAW,MAAO,CAAE,MAAO,gBAAkB,CAE1C,WAAY,CACR,OAAO,KAAK,OAAO,UAAY,QACxB,IAAIC,GAAmB,KAAK,WAAW,EAAG,UAAU,EACrD,gBACV,CACJ,ECRO,IAAMC,GAAN,cAAmCC,GAAkBC,CAAwB,CAAE,CAErFC,GACAC,GAEA,OAAOC,EAAO,CACb,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,UAAW,MAAM,IAAI,MAAM,gDAAgD,EAChG,OAAI,KAAK,gBAAgB,EACxB,KAAKD,GAAWC,EACV,KAAKF,GAAUE,EACf,IACL,CAEH,SAAU,CAAE,OAAO,KAAKD,IAAY,KAAKD,EAAS,CAIlD,WAAWG,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,QAAQ,CAAC,CACrC,CACD,CAEG,aAAaC,EAAOC,EAAS,CAC/B,OAAO,KAAK,eAAe,CACjB,GAAG,MAAM,aAAaD,EAAOC,CAAO,EAC7C,OAAQ,KAAK,QAAQ,CACtB,EAAG,CACF,OAAQD,EAAM,QAAQ,CACvB,EAAGC,CAAO,CACR,CAIH,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAClDA,EAAS,OAAO,CAAC,CAACF,EAAK,MAAM,EAC7BE,EAAS,gBAAgBF,EAAK,QAAUG,GAAYD,EAAS,OAAOC,CAAO,CAAC,EAC5EF,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOJ,EAAU,CAAC,EAAGM,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAON,EAAS,KAAK,eAAe,CACvC,OAAQ,KAAKL,GACtB,GAAGW,CACJ,EAAG,CACF,OAAQ,KAAKV,EACd,EAAGI,CAAO,CAAC,CACZ,CAEG,OAAO,MAAMC,EAASM,EAAMC,EAAe,CACvC,IAAIC,EAAQ,CAAE,KAAAC,EAAM,KAAMC,CAAM,EAAI,KAAK,UAAUV,EAASM,EAAM,EAAI,EAEtE,GADN,CAAE,CAAEI,EAAOF,EAAS,EAAG,EAAIE,EAAM,MAAM,IAAI,OAAO,4EAAuF,GAAG,CAAC,GAAK,CAAC,EACzI,CAACA,EAAO,OAClB,IAAMP,EAAW,IAAI,KAAKH,CAAO,EACjC,OAAOG,EACL,KAAKI,EAAcJ,EAAUO,CAAK,CAAC,EACnC,OAAO,YAAY,KAAKF,CAAM,CAAC,EAC/B,KAAKC,CAAI,CACT,CAEA,WAAY,CAAE,MAAO,wBAAyB,KAAK,MAAM,CAAE,IAAK,KAAK,QAAQ,EAAI,UAAY,EAAG,EAAI,CACxG,EChEO,IAAME,GAAN,cAAgCC,GAAkBC,CAAwB,CAAE,CAAC,ECD7E,IAAMC,GAAN,cAAgCC,CAAyB,CAAC,ECC1D,IAAMC,GAAN,cAA6BC,GAAkBC,CAAwB,CAAE,CAAC,ECD1E,IAAMC,GAAN,cAA6BC,CAAyB,CAAC,ECEvD,IAAMC,GAAN,cAAkBC,EAAsBC,CAAc,CAAE,CAC9D,WAAW,gBAAiB,CAC3B,MAAO,CAAE,WAAY,CAACC,EAAkB,CAAE,CAC3C,CAEA,IAAI,OAAQ,CAAE,OAAO,KAAK,SAAS,GAAG,IAAM,CAE5C,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAE,CAAEC,CAAa,EAAIF,EAAK,MAAM,oBAAoB,GAAK,CAAC,EAChE,GAAIE,EAAc,CACjB,IAAMC,EAAW,IAAI,KAAKJ,EAAS,YAAY,EAC/C,OAAOI,EAAS,SAASF,EAAcE,EAAUD,EAAc,KAAK,eAAe,UAAU,CAAC,CAC/F,CACD,CAEA,WAAY,CAAE,MAAO,OAAO,KAAK,SAAS,CAAE,EAAI,CACjD,EClBO,IAAME,GAAN,cAAmBC,CAAe,CACrC,WAAW,gBAAiB,CAC9B,MAAO,CAAE,WAAY,CAAC,WAAY,aAAc,UAAW,UAAuD,CAAG,CACtH,CAEA,OAAO,MAAMC,EAASC,EAAM,CAC3B,GAAM,CAAE,CAAEC,CAAS,EAAID,EAAK,MAAM,IAAI,OAAO,aAAa,KAAK,eAAe,WAAW,IAAI,GAAK,EAAE,QAAQ,eAAgB,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,KAAM,GAAG,CAAC,GAAK,CAAC,EAC9J,GAAIC,EAAU,OAAQ,IAAI,KAAKF,EAAS,aAAcE,EAAS,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,CACjG,CAEA,WAAY,CAAE,MAAO,QAAQ,KAAK,MAAM,QAAQ,eAAgB,GAAG,CAAE,EAAI,CAC1E,ECXO,IAAMC,GAAN,cAAuBC,CAAa,CAE1CC,GAAS,CAAC,EAEP,YAAYC,EAASC,EAAM,CACvB,MAAMD,CAAO,EACb,KAAKD,GAASE,CAClB,CAEH,MAAO,CAAE,OAAO,KAAKF,EAAQ,CAE7B,OAAO,SAASC,EAASE,EAAM,CAC9B,IAAMD,EAAO,CAAC,EAAE,OAAOC,CAAI,EAC3B,GAAI,OAAOD,EAAK,CAAC,GAAM,SAAU,OACjC,GAAM,CAACE,EAAMC,EAAWC,CAAK,EAAIC,GAAM,KAAK,KAAML,EAAK,CAAC,CAAC,EAEzD,OAAKE,EACQ,IAAI,KAAKH,EAASO,GAAcJ,EAAM,GAAGC,EAAU,MAAM,GAAG,EAAG,GAAGC,EAAO,GAAGJ,EAAK,MAAM,CAAC,CAAC,CAAC,EADrF,IAAI,KAAKD,EAASO,GAAe,GAAG,CAAC,EAAE,OAAOL,CAAI,CAAC,CAAE,CAExE,CAEA,QAAS,CACR,OAAI,KAAKH,GAAO,SAAW,EAAU,KAAKA,GAAO,CAAC,EAC3C,KAAKA,EACb,CAEA,OAAO,MAAMC,EAASQ,EAAM,CAC3B,GAAM,CAACL,EAAMC,EAAWC,CAAK,EAAIC,GAAM,KAAK,KAAME,CAAI,EACtD,GAAKL,EACC,OAAO,IAAI,KAAKH,EAASO,GAAcJ,EAAM,GAAGC,EAAU,MAAM,GAAG,EAAG,GAAGC,CAAK,CAAC,CACnF,CAEH,WAAY,CACX,GAAM,CAACD,EAAWC,CAAK,EAAI,KAAKN,GAAO,MAAM,CAAC,EAAE,OAAO,CAAC,CAACU,EAAGC,CAAC,EAAGC,IAAM,QAAQ,KAAKA,CAAC,EAAI,CAACF,EAAE,OAAOE,CAAC,EAAGD,CAAC,EAAI,CAACD,EAAGC,EAAE,OAAOC,CAAC,CAAC,EAAG,CAAC,CAAC,EAAG,CAAC,CAAC,CAAC,EACrI,MAAO,GAAI,KAAKZ,GAAO,CAAC,CAAE,GAAIK,EAAU,OAAS,IAAKA,EAAU,KAAK,GAAG,CAAE,IAAM,EAAG,GAAIC,EAAM,OAAS,IAAKA,EAAM,KAAK,GAAG,CAAE,GAAK,EAAG,EACpI,CAEA,OAAO,eAAiB,2UACxB,OAAO,kBAAoB,wKAC3B,OAAO,eAAiB,sJACxB,OAAO,kBAAoB,uGAC5B,EAEME,GAAgB,IAAIN,IAASA,EAAK,IAAIW,GAAK,QAAQ,KAAKA,CAAC,EAAI,WAAWA,CAAC,EAAIA,GAAG,KAAK,EAAE,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,EAAE,OAAOA,GAAKA,CAAC,EAC7I,SAASN,GAAME,EAAM,CACpB,IAAIL,EAAMC,EAAWC,EACrB,QAAWQ,IAAO,CAAC,iBAAkB,oBAAqB,iBAAkB,mBAAmB,EAE9F,GADA,CAAE,CAAEV,EAAMC,EAAY,GAAI,GAAGC,CAAM,EAAIG,EAAK,MAAM,IAAI,OAAO,KAAKK,CAAG,EAAE,OAAQ,GAAG,CAAC,GAAK,CAAC,EACrFV,EAAM,MAEX,MAAO,CAACA,EAAMC,EAAWC,CAAK,CAC/B,CC3CO,IAAMS,GAAN,cAAkBC,EAAsBC,CAAc,CAAE,CAC3D,WAAW,gBAAiB,CACxB,MAAO,CACH,KAAM,CAACC,EAAO,EACd,UAAW,CAACC,EAAQ,EACpB,WAAY,CAACC,GAAoBC,GAAsBC,GAAmBC,EAAoF,CAClK,CACJ,CAEH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CACpC,GAAI,CAAC,CAAEC,EAAaC,CAAQ,EAAK,IAAI,OAAO,8BAA+B,GAAG,EAAG,KAAKH,CAAI,GAAK,CAAC,EAChG,GAAI,CAACE,EAAa,OAClB,IAAIE,EAAUC,EAAOC,EACrB,GAAIF,EAAWD,EAAS,MAAM,4BAA4B,EACtDE,EAAQ,YACRC,EAAeF,EAAS,CAAC,UAClB,UAAU,KAAKF,CAAW,EACjCG,EAAQ,YACRC,EAAeH,UACRC,EAAWD,EAAS,MAAM,0BAA0B,EAC3DE,EAAQ,WACRC,EAAe,aAAaF,EAAS,CAAC,CAAC,uBAChCA,EAAWD,EAAS,MAAM,gCAAgC,EACjEE,EAAQ,aACRC,EAAe,uBAAuBF,EAAS,CAAC,CAAC,kBAC1CA,EAAWD,EAAS,MAAM,gCAAgC,EACjEE,EAAQD,EAAS,CAAC,EAAE,QAAQ,OAAQ,GAAG,EAAE,YAAY,EACrDE,EAAeH,MACZ,CACH,GAAM,CAAC,CAACI,EAAKC,CAAK,EAAIL,EAAS,MAAM,mBAAmB,EAExD,OADiB,IAAI,KAAKJ,EAAS,OAAQQ,EAAK,YAAY,CAAC,EAC7C,SAAUE,GAAMA,EAAE,QAAQD,CAAK,CAAC,CACpD,CACA,IAAME,EAAW,IAAI,KAAKX,EAASM,IAAU,YAAcA,EAAQ,aAAcA,CAAK,EAC5F,OAAOK,EAAS,SAAST,EAAcS,EAAUJ,EAAc,KAAK,eAAeI,EAAS,IAAI,CAAC,CAAC,CACnG,CAEG,WAAY,CACR,IAAIC,EAAW,KAAK,MAAM,QAAQ,eAAgB,GAAG,EACjDL,EAAe,KAAK,SAAS,EACjC,OAAI,KAAK,OAAS,YACdA,EAAe,GAAGK,CAAQ,IAAIL,CAAY,GACnC,KAAK,QAAU,aACtBA,EAAe,GAAGK,CAAQ,OAAO,KAAK,SAAS,EAAE,MAAM,CAAC,GACjD,KAAK,QAAU,aACtBL,EAAe,aAAa,KAAK,SAAS,EAAE,QAAQ,EAAI,SAAW,YAAY,IAE5E,OAAOA,CAAY,EAC9B,CACJ,ECrDO,IAAMM,GAAN,cAAwBC,CAAY,CACvC,WAAW,gBAAiB,CACxB,MAAO,CAACC,GAAKC,GAAMC,EAAG,CAC1B,CACJ,ECYO,IAAMC,EAAN,cAA2BC,EAA+B,CAC7D,WAAW,kBAAmB,CAAE,MAAO,CAACC,GAAwBC,GAAmBC,GAAqBC,GAAkBC,GAAkBC,GAAeC,GAAeC,GAAqBC,GAAqBC,GAAoBC,EAAe,CAAG,CAC1P,WAAW,aAAc,CAAE,MAAO,CAACC,CAAc,CAAG,CAEpDC,GACAC,GACAC,GAAe,CAAC,EAEnB,KAAKC,EAAO,CACL,OAAK,UAAU,QACX,KAAK,gBAAgB,EAC9B,KAAKF,GAAS,KAAK,YAAY,CAACE,CAAK,EAAGC,GAAU,KAAKH,GAAQ,OAAO,EAChE,KAAKD,GAAQ,KAAK,YAAY,CAACG,CAAK,EAAGC,GAAU,KAAKJ,GAAO,MAAM,EAC7D,MAJuB,KAAKA,EAKvC,CAEH,OAAQ,CAAE,OAAO,KAAKC,IAAU,KAAKD,EAAO,CAEzC,iBAAiBK,EAAM,CAAE,OAAO,KAAK,WAAW,iBAAkB,GAAGA,CAAI,CAAG,CAE5E,YAAYA,EAAM,CAAE,OAAO,KAAK,WAAW,WAAY,GAAGA,CAAI,CAAG,CAEjE,cAAcA,EAAM,CAAE,OAAO,KAAK,WAAW,aAAc,GAAGA,CAAI,CAAG,CAErE,WAAWA,EAAM,CAAE,OAAO,KAAK,WAAW,UAAW,GAAGA,CAAI,CAAG,CAE/D,WAAWA,EAAM,CAAE,OAAO,KAAK,WAAW,WAAY,GAAGA,CAAI,CAAG,CAEhE,QAAQA,EAAM,CAAE,OAAO,KAAK,WAAW,OAAQ,GAAGA,CAAI,CAAG,CAEzD,YAAYA,EAAM,CAAE,OAAO,KAAK,WAAW,YAAa,GAAGA,CAAI,CAAG,CAElE,cAAcA,EAAM,CAAE,OAAO,KAAK,WAAW,cAAe,GAAGA,CAAI,CAAG,CAEtE,cAAcA,EAAM,CAAE,OAAO,KAAK,WAAW,cAAe,GAAGA,CAAI,CAAG,CAEtE,aAAaA,EAAM,CAAE,OAAO,KAAK,WAAW,aAAc,GAAGA,CAAI,CAAG,CAEpE,SAASA,EAAM,CAAE,OAAO,KAAK,WAAW,QAAS,GAAGA,CAAI,CAAG,CAI3D,WAAWC,KAASD,EAAM,CACtB,GAAI,OAAOC,GAAS,SAAU,CAC1B,IAAMC,EAAW,KAAKL,GAAa,KAAMM,GAASA,EAAK,OAASF,CAAI,EACpE,GAAI,CAACD,EAAK,OAAQ,OAAOE,EACzB,GAAIF,EAAK,CAAC,IAAM,GACZ,YAAKH,GAAe,KAAKA,GAAa,OAAQO,GAAMA,IAAMF,CAAQ,EAClEA,GAAU,OAAO,cAAc,EACxB,KAEXD,EAAO,CAAE,KAAMA,EAAM,GAAI,CAAC,QAAS,UAAW,aAAc,WAAW,EAAE,SAASA,CAAI,GAAK,EAAEI,EAAUL,EAAK,CAAC,CAAC,GAAKA,EAAK,CAAC,EAAE,MAAQ,CAAE,KAAMA,EAAK,CAAC,CAAE,EAAK,OAAOA,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAC,CAAI,CACzM,CACA,YAAKH,GAAe,KAAK,YAAY,CAACI,CAAI,EAAG,KAAK,YAAY,iBAAkB,KAAKJ,GAAc,aAAc,KAAOK,GACtH,KAAKL,GAAa,KAAMM,GAASA,EAAK,OAASD,EAAS,IAAI,CACnE,EACY,IACX,CAIH,YAAYI,EAAc,GAAMC,EAAQ,EAAG,CAC1C,IAAMC,EAAeD,EAA4B,KAAKV,GAAa,OAAOY,GAASA,aAAgBC,IAA+BH,IAAU,EAAE,EAAjH,KAAKV,GAClC,OAAQS,EAA6CE,EAA/BA,EAAY,IAAIJ,GAAKA,EAAE,IAAI,CAClD,CAIA,WAAWO,EAAS,GAAO,CAC1B,IAAMC,EAAa,MAAM,WAAWD,CAAM,EAAE,OAC3C,KAAK,qBAAqB,CAAC,MAAM,CAAC,CACnC,EACA,OAAKA,EACEC,EAAW,OAAO,CAAC,aAAa,EAAE,OAAQC,GACzC,KAAKA,CAAG,EAAE,EAAE,KAAKJ,GAAQA,EAAK,WAAWE,CAAM,EAAE,MAAM,CAC9D,CAAC,EAHkBC,CAIrB,CAEG,UAAUE,EAAWC,EAAS,CAC1B,IAAIC,EAAO,KAAK,OAAOD,CAAO,EAC9B,QAAWE,KAAMH,EAAW,CACxB,IAAII,EAAcC,EAKlB,GAJI,CAAC,MAAO,KAAK,EAAE,SAASF,EAAG,MAAM,IACjCC,EAAeD,EAAG,SAAS,EAAE,OAAOF,CAAO,EAC3CI,EAAkB,CAAE,GAAGD,EAAc,GAAIH,EAAQ,OAAS,GAAQ,CAAE,OAAQ,KAAM,EAAI,CAAC,CAAG,GAE1FE,EAAG,SAAW,OACd,GAAIA,EAAG,QAAU,WAAY,CACzB,GAAID,EAAK,SAAU,MAAM,IAAI,MAAM,qCAAqC,EACxEA,EAAO,CAAE,GAAGA,EAAM,SAAUG,CAAgB,CAChD,UACOF,EAAG,SAAW,MACrB,GAAIA,EAAG,OAAS,YACZD,EAAO,KAAK,eAAeA,EAAM,CAAE,KAAME,CAAa,CAAC,UAChDD,EAAG,QAAU,WAAY,CAChC,GAAI,CAACD,EAAK,SAAU,MAAM,IAAI,MAAM,iCAAiC,EACrEA,EAAO,CAAE,GAAGA,EAAM,SAAU,KAAK,eAAeA,EAAK,SAAU,CAAE,OAAQE,EAAa,MAAO,EAAGH,CAAO,CAAE,CAC7G,MAAWE,EAAG,QAAU,aACpBD,EAAO,CAAE,GAAGA,EAAM,WAAYA,EAAK,WAAa,KAAK,eAAeA,EAAK,WAAY,CAAE,KAAME,EAAa,IAAK,EAAGH,CAAO,EAAII,CAAgB,EACtIF,EAAG,QAAU,YACpBD,EAAO,CAAE,GAAGA,EAAM,QAASA,EAAK,QAAU,KAAK,eAAeA,EAAK,QAAS,CAAE,KAAME,EAAa,IAAK,EAAGH,CAAO,EAAII,CAAgB,WAEjIF,EAAG,SAAW,OAAQ,CAC7B,IAAMG,EAAWC,GAASJ,EAAG,MAAM,YAAY,EAAE,QAAQ,IAAK,GAAG,CAAC,EAClE,GAAI,CAACD,EAAKI,CAAQ,EAAG,MAAM,IAAI,MAAM,GAAGH,EAAG,KAAK,6BAA6B,EAC7ED,EAAOD,EAAQ,OAAS,GAAQC,EAAO,CAAE,GAAGA,EAAM,CAACI,CAAQ,EAAG,KAAK,eAAeJ,EAAKI,CAAQ,EAAG,CAAE,OAAQ,UAAW,CAAC,CAAE,CAC9H,CACJ,CACA,OAAOJ,CACX,CAEA,YAAYD,EAAU,CAAC,EAAG,CACtB,IAAMD,EAAYQ,GAAU,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EACtD,KAAK1B,IAAU,CAAC,KAAK,IAAI,KAAKA,GAAQ,KAAKD,GAAO,IAAI,GACtDmB,EAAU,IAAI,MAAO,YAAcG,GAAOA,EAAG,SAAS,KAAKrB,GAAO,OAAOmB,CAAO,CAAC,CAAC,EAEtF,QAAWZ,KAAQ,KAAKN,GACpB,GAAIM,EAAK,kBAAoB,EAC7B,GAAIA,EAAK,OAAO,IAAM,WAClBW,EAAU,IAAI,OAAQ,aAAcX,EAAK,IAAI,UACtCA,EAAK,OAAO,IAAM,OAASA,EAAK,OAAS,WAChDW,EAAU,IAAI,MAAO,aAAcX,EAAK,KAAOc,GAAOA,EAAG,SAASd,EAAK,OAAO,CAAE,GAAGY,EAAS,KAAM,EAAM,CAAC,CAAC,CAAC,MACxG,CAEH,GAAI,CADeZ,EAAK,WAAW,EACnB,OAAQ,SACxBW,EAAU,IAAI,MAAO,aAAcX,EAAK,KAAOc,GAAOA,EAAG,SAASd,EAAK,OAAO,CAAE,GAAGY,EAAS,KAAM,EAAM,CAAC,CAAC,CAAC,CAC/G,CAEJ,OAAOD,CACX,CAEA,aAAaS,EAAOR,EAAS,CAC/B,IAAMS,EAAiB,KAAK,eAAe,CACjC,GAAG,MAAM,aAAaD,EAAOR,CAAO,EAC7C,KAAM,KAAK,MAAM,GAAG,OAAOA,CAAO,CACnC,EAAG,CACF,KAAMQ,EAAM,MAAM,GAAG,OAAOR,CAAO,CACpC,EAAGA,CAAO,EACEU,EAAkB,KAAK,uBAAuB,KAAK,eACrD,IAAI,IAAI,KAAK,YAAY,EAAE,IAAItB,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EACzD,IAAI,IAAIoB,EAAM,YAAY,EAAE,IAAIpB,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAC1D,CAACuB,EAAGC,IAAMD,EAAE,aAAaC,EAAGZ,CAAO,CACvC,EAAGA,CAAO,EACV,MAAO,CAAE,GAAGS,EAAgB,GAAGC,CAAgB,CACnD,CAIA,uBAAuBjB,EAAa,CAChC,IAAIQ,EAAO,CAAC,EACZ,QAAWb,KAAQK,EAAa,CAC5B,GAAM,CAAE,KAAAoB,EAAM,GAAGC,CAAK,EAAI1B,EACpBiB,EAAWC,GAASO,EAAK,YAAY,EAAE,QAAQ,IAAK,GAAG,CAAC,EAC9DZ,EAAO,CAAE,GAAGA,EAAM,CAAEI,CAAS,EAAI,OAAO,KAAKS,CAAI,EAAE,OAAQC,GAAMD,EAAKC,CAAC,IAAM,MAAU,EAAE,OAAgBD,EAAP,EAAY,CAClH,CACA,OAAOb,CACX,CAEA,OAAO,yBAAyBA,EAAM,CAClC,OAAO,OAAO,QAAQA,CAAI,EAAE,IAAI,CAAC,CAACY,EAAMG,CAAI,IAAM,CAC9C,IAAMC,EAAUC,GAAW,CACvB,MAAM,IAAI,MAAM,WAAWA,EAAS,yBAAyBA,CAAM,IAAM,QAAQ,oBAAqBL,CAAK,GAAG,CAClH,EAIA,GAHAA,EAAOM,GAAYN,EAAO,GAAK,GAAG,EAAE,YAAY,EAChDG,EAAOA,IAAS,GAAO,CAAC,EAAKA,IAAS,GAAQ,CAAE,OAAQ,UAAW,EAAIA,EAEnE,CAAC,QAAS,aAAc,UAAW,WAAW,EAAE,SAASH,CAAI,GACzD,CAACvB,EAAU0B,CAAI,GAAK,CAACA,EAAK,QAAMA,EAAO,CAAE,KAAMA,CAAK,WACjDH,IAAS,cACXlC,EAAe,SAAS,CAAC,EAAGqC,GAAM,WAAW,GAAGC,EAAO,aAAa,EACpE,MAAM,QAAQD,GAAM,aAAa,GAAGC,EAAO,eAAe,UACvD,CAAC,cAAe,aAAc,WAAY,WAAY,OAAQ,gBAAgB,EAAE,SAASJ,CAAI,EAE7FvB,EAAU0B,CAAI,GAAGC,EAAO,MADhC,OAAM,IAAI,MAAM,oCAAoCJ,CAAI,EAAE,EAE9D,MAAO,CAAE,KAAAA,EAAM,GAAGG,CAAK,CAC3B,CAAC,CACL,CAIH,OAAO,SAASI,EAASnB,EAAMoB,EAAW,KAAM,CACzC,GAAM,CAAE,SAAAC,EAAU,KAAAC,EAAM,MAAAC,EAAO,OAAAC,EAAQ,QAAAC,EAAS,KAAAb,EAAM,MAAAc,EAAO,OAAAC,EAAQ,cAAAC,EAAe,GAAGpC,CAAY,EAAIQ,EACvG,GAAKjB,GAAS,SAAS,CAAC,EAAG6B,CAAI,EAC/B,OAAO,MAAM,SAASO,EAASnB,EAAO6B,GAAa,CAC/CA,EAAS,KAAKjB,CAAI,EAClBiB,EAAS,gBAAgBH,EAAQA,GAAUG,EAAS,KAAKH,CAAK,CAAC,EAC/D,QAAWvC,KAAQ,KAAK,yBAAyBK,CAAW,EACxDqC,EAAS,WAAW1C,CAAI,EAE5BiC,IAAWS,CAAQ,CACvB,CAAC,CACR,CAEA,OAAO9B,EAAU,CAAC,EAAG+B,EAAS,CAAC,EAAGC,EAAU,KAAM,CAC3C,IAAMvC,EAAc,KAAKX,GAAa,OAAO,CAACmD,EAAMC,EAAOC,IAAM,CAC7D,GAAIH,EAAS,CACT,IAAMI,EAASJ,EAAQE,EAAOC,CAAC,EAC/B,GAAI,CAACC,EAAQ,OAAOH,EACpB,GAAI,CAAC,CAACC,EAAO,EAAI,EAAE,SAASE,CAAM,EAAG,CACjC,GAAIA,aAAkBC,EAAc,MAAM,IAAI,MAAM,yDAAyD,EAC7G,OAAOJ,EAAK,OAAOG,CAAM,CAC7B,CACJ,CACA,OAAOH,EAAK,OAAOC,EAAM,OAAOlC,CAAO,GAAK,CAAC,CAAC,CAClD,EAAG,CAAC,CAAC,EACL,OAAO,MAAM,OAAOA,EAAS,CACzB,KAAM,KAAKpB,IAAO,OAAOoB,CAAO,EAChC,GAAI,KAAKnB,GAAS,CAAE,MAAO,KAAKA,GAAO,OAAOmB,CAAO,CAAE,EAAI,CAAC,EAC5D,GAAG,KAAK,uBAAuBP,CAAW,EAC1C,GAAGsC,CACP,CAAC,CACL,CAEH,OAAO,MAAMX,EAASkB,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAUC,CAAS,EAAIC,EAAM,MAAMJ,EAAM,CAAC,MAAM,EAAG,CAAE,SAAU,GAAM,MAAO,CAAE,CAAC,EAC3E,CAACf,CAAI,EAAI,KAAK,WAAWH,EAASoB,EAAS,KAAK,CAAC,EACvD,GAAI,CAACjB,EAAM,OACX,IAAMO,EAAY,IAAI,KAAKV,CAAO,EAAG,KAAKG,CAAI,EAExCoB,EAAY,2BACZC,EAAU,CACZ,CAAE,KAAM,GAAID,CAAU,2FAA4F,EAClH,CAAE,SAAU,4BAA6B,KAAM,GAAIA,CAAU,MAAO,EACpE,CAAE,SAAU,qBAAsB,KAAM,GAAIA,CAAU,SAAU,EAChE,CAAE,SAAU,4BAA6B,KAAM,cAAe,CAClE,EACM,CAAEE,EAAY,GAAGC,CAAO,EAAIJ,EAAM,MAAMD,EAAUG,EAAS,CAAE,SAAS,IAAK,eAAgB,EAAK,CAAC,EAEvGd,EAAS,KAAKS,EAAcT,EAAUe,EAAW,KAAK,EAAG,CAAC7D,EAAQ,CAAC,CAAC,EAEpE,QAAW+D,KAAcD,EAAQ,CAC7B,IAAM1D,EAAOmD,EAAcT,EAAUiB,EAAY,KAAK,gBAAgB,EACtEjB,EAAS,WAAW1C,CAAI,CAC5B,CACA,OAAO0C,CACX,CAEH,WAAY,CACL,IAAIrC,EAAc,KAAKX,GACvB,OAAI,KAAK,OAAO,UAAY,UAAWW,EAAcA,EAAY,OAAOJ,GAAKA,EAAE,OAAS,aAAa,GAC9F,GAAI,KAAK,eAAe,KAAK,MAAM,CAAC,CAAE,IAAK,KAAK,MAAM,CAAE,GAAII,EAAY,OAAS,IAAKA,EAAY,KAAK,GAAG,CAAE,GAAK,EAAG,EAC/H,CACJ,ECrQO,IAAMuD,GAAN,cAAmBC,CAAe,CAErCC,GAEA,MAAMC,EAAO,CACT,OAAK,UAAU,QACP,KAAKD,GAASC,EAAO,MADC,KAAKD,EAEvC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAClD,GAAKD,GAAM,MACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,MAAMF,EAAK,KAAK,EACzBC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKN,GACZ,GAAGO,CACJ,CAAC,CACF,CAEG,OAAO,MAAML,EAASM,EAAM,CACxB,GAAM,CAACP,CAAK,EAAIO,EAAK,MAAM,OAAO,GAAK,CAAC,EACxC,GAAIP,EAAO,OAAQ,IAAI,KAAKC,CAAO,EAAG,MAAMD,EAAM,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,CACvF,CAEA,WAAY,CAAE,OAAO,KAAKD,IAAQ,QAAQ,IAAK,GAAG,GAAK,EAAI,CAC/D,EC7BO,IAAMS,GAAN,cAAuBC,CAAY,CACtC,WAAW,gBAAiB,CACxB,MAAO,CAACC,EAAI,CAChB,CACJ,ECFO,IAAMC,GAAN,cAA0BC,GAAqBC,EAAoB,CAAE,CAE3EC,GACAC,GAEA,KAAKC,EAAO,CACX,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,SAAU,MAAM,IAAI,MAAM,yDAAyDA,CAAK,EAAE,EAC/G,OAAI,KAAK,gBAAgB,EACxB,KAAKD,GAASC,EACR,KAAKF,GAAQE,EACb,IACL,CAEH,OAAQ,CAAE,OAAO,KAAKD,IAAU,KAAKD,EAAO,CAI5C,WAAWG,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CAAC,MAAM,CAAC,CACnC,CACD,CAEA,UAAUC,EAAWC,EAAS,CAEvB,OADW,KAAK,OAAOA,CAAO,CAElC,CAEA,aAAc,CAEV,OADiBC,GAAS,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,CAE5D,CAEA,aAAaC,EAAOF,EAAS,CAC/B,OAAO,KAAK,eAAe,CACjB,GAAG,MAAM,aAAaE,EAAOF,CAAO,EAC7C,KAAM,KAAK,MAAM,CAClB,EAAG,CACF,KAAME,EAAM,MAAM,CACnB,EAAGF,CAAO,CACR,CAIH,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,0BAA0B,KAAKD,EAAK,IAAI,EAC7C,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,IAAI,EACvBE,EAAS,gBAAgBF,EAAK,MAAQG,GAAUD,EAAS,KAAKC,CAAK,CAAC,EACpEF,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAON,EAAU,CAAC,EAAGQ,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOR,EAAS,CACnB,KAAM,KAAKL,GACpB,GAAI,KAAKC,GAAS,CAAE,MAAO,KAAKA,EAAO,EAAI,CAAC,EAC5C,GAAGY,CACJ,CAAC,CACF,CAEG,OAAO,cAAcC,EAAa,CAAE,MAAO,EAAO,CAErD,OAAO,MAAMN,EAASO,EAAM,CAC3B,GAAM,CAAEC,EAAOC,EAAMC,CAAK,EAAI,2EAA2E,KAAKH,CAAI,GAAK,CAAC,EAClH,GAAI,CAACC,EAAO,OAClB,IAAML,EAAW,IAAI,KAAKH,CAAO,EAC3B,CAAEW,EAAUC,CAAY,EAAIC,EAAM,MAAMH,EAAM,CAAC,CAAC,EAChD,CAACI,CAAI,EAAI,KAAK,WAAWd,EAASW,EAAS,KAAK,CAAC,EACjD,OAAOR,EACX,KAAKM,EAAK,QAAQ,kBAAmB,EAAE,EAAE,YAAY,CAAC,EACtD,QAAQ,KAAK,aAAaN,EAAUS,CAAW,CAAC,EAChD,KAAKE,CAAI,CACT,CAEH,WAAY,CAAE,MAAO,GAAI,KAAK,MAAM,CAAE,GAAI,KAAK,MAAM,EAAI,IAAK,KAAK,eAAe,KAAK,MAAM,CAAC,CAAE,GAAK,EAAG,GAAI,KAAK,iBAAiB,CAAE,EAAI,CACzI,ECvEO,IAAMC,GAAN,cAAkBC,EAAsBC,CAAc,CAAE,CAC9D,WAAW,gBAAiB,CACrB,MAAO,CACH,OAAQ,CAACC,CAAY,EACrB,WAAY,CAACC,GAAsBC,GAAsBC,GAAqBC,EAAe,EACtG,MAAO,CAACC,EAAW,CACd,CACJ,CAEA,WAAW,WAAY,CACnB,MAAO,CACH,OAAQ,CAACC,CAAS,EAClB,WAAY,CAACC,CAAU,EAChC,MAAO,CAACA,CAAU,CACb,CACJ,CAEH,IAAI,OAAQ,CAAE,OAAO,KAAK,OAAS,SAAW,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK,EAAI,KAAK,SAAS,GAAG,IAAM,CAEvGC,GACAC,GAEA,MAAMC,EAAO,CACZ,OAAK,UAAU,QACP,KAAKF,GAAS,CAAC,CAACE,EAAO,MADD,KAAKF,EAEpC,CAEA,MAAME,EAAO,CACZ,OAAK,UAAU,QACf,KAAKD,GAAS,KAAK,YAAY,CAACC,CAAK,EAAG,KAAK,YAAY,UAAU,KAAK,IAAI,EAAG,KAAKD,GAAQ,KAAK,EAC1F,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,OAAOE,EAAS,MAAM,EAAI,EAC/BF,EAAK,OAAOE,EAAS,MAAMF,EAAK,KAAK,EACzCC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,GAAI,KAAKP,GAAS,CAAE,MAAO,EAAK,EAAI,CAAC,EACrC,GAAI,KAAKC,GAAS,CAAE,MAAO,KAAKA,GAAO,OAAOM,CAAO,CAAE,EAAI,CAAC,EAC5D,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASM,EAAMC,EAAeC,EAAmB,KAAM,CACnE,IAAIC,EACA,CAAC,CAAEC,EAAUC,EAAcC,EAAUC,CAAK,EAAIP,EAAK,MAAM,IAAI,OAAO,IAAI,KAAK,MAAM,WAAW,OAAO,KAAK,KAAK,cAAc,EAAE,KAAK,GAAG,CAAC,yDAA0D,GAAG,CAAC,GAAK,CAAC,EAUhN,GATKI,IACA,mCAAmC,KAAKC,CAAY,GACvDD,EAAW,aACXD,EAAkB,IACR,uBAAuB,KAAKE,CAAY,GAClDD,EAAW,QACXD,EAAkB,IACRE,IAAcD,EAAW,WAEjC,CAACA,EAAU,OACf,IAAMP,EAAW,IAAI,KAAKH,EAASU,EAAS,YAAY,CAAC,EACzD,GAAIP,EAAS,SAAW,MAAO,CAC9B,GAAM,CAAC,CAAEW,EAAaC,CAAa,EAAIJ,EAAa,MAAM,oCAAoC,EAC1FG,GAAaX,EAAS,SAAS,eAAe,EAClDQ,EAAeI,CAChB,CAEIH,EAAUT,EAAS,MAAMI,EAAcJ,EAAUS,EAAU,KAAK,UAAUT,EAAS,IAAI,CAAC,CAAC,EACpFU,GAAOV,EAAS,MAAM,EAE/B,IAAMa,GAAYR,GAAoBD,GAAeJ,EAAUA,EAAS,OAAS,UAAYM,EAAkBE,EAAe,GAAGR,EAAS,IAAI,IAAIQ,CAAY,GAAI,KAAK,eAAeR,EAAS,IAAI,CAAC,EACpM,OAAOA,EAAS,SAASa,CAAQ,CAClC,CAEA,WAAY,CACX,IAAMC,EAAM,CAAC,KAAK,MAAM,EACxB,OAAI,KAAK,QAAQ,eAAe,GAAGA,EAAI,KAAK,eAAe,EAC3DA,EAAI,KAAK,KAAK,SAAS,CAAC,EACpB,KAAKpB,GAAQoB,EAAI,KAAK,OAAO,EACxB,KAAKnB,IAAQmB,EAAI,KAAK,QAAS,KAAKnB,EAAM,EACtCmB,EAAI,KAAK,GAAG,CAC1B,CACD,EC7FO,IAAMC,GAAN,cAAqBC,EAAI,CAAC,ECC1B,IAAMC,GAAN,cAAqBC,EAAuBC,EAAM,CAAE,CAC1D,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,OAAO,MAAM,MAAMF,EAASC,EAAMC,EAAe,CAACC,EAAUC,EAAcC,IAAU,CACnF,GAAM,CAACC,EAAgBC,CAAa,EAAI,MAAM,MAAMH,EAAc,CAAC,MAAM,EAAG,CAAE,SAAU,GAAM,MAAO,CAAE,CAAC,EACxG,OAAAD,EAAS,UAAUD,EAAcC,EAAUG,EAAgB,KAAK,UAAUH,EAAS,IAAI,CAAC,CAAC,EAClFD,EAAcC,EAAUI,EAAeF,CAAK,CACpD,CAAC,CACF,CAEA,WAAY,CAAE,OAAO,MAAM,UAAU,EAAE,QAAQ,KAAK,KAAM,GAAG,KAAK,IAAI,IAAI,KAAK,UAAU,CAAC,EAAE,CAAG,CAChG,ECRO,IAAMG,GAAN,cAAmBC,EAAuBC,CAAc,CAAE,CAChE,WAAW,gBAAiB,CAC3B,MAAO,CACN,OAAQ,CAAC,QAAQ,EACjB,WAAY,CAAC,cAAe,cAAe,aAAc,OAAO,EAChE,MAAO,CAAC,OAAO,CAChB,CACD,CAEG,WAAW,WAAY,CACnB,MAAO,CACH,OAAQ,CAACC,CAAS,EAClB,WAAY,CAACC,CAAU,EAChC,MAAO,CAACA,CAAU,CACb,CACJ,CAEH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,IAAMC,EAAQ,OAAO,KAAK,KAAK,cAAc,EACvCC,EAASJ,GAAS,QAAQ,UAAY,QACzC,CAAC,GAAG,IAAI,IAAIG,EAAM,OAAO,CAACE,EAAOC,IAAMD,EAAM,OAAOC,EAAG,KAAK,eAAeA,CAAC,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC,EACpFH,EACG,CAAEI,EAAYC,EAAU,SAAUC,EAAUC,EAAeC,CAAqB,EAAIV,EAAK,MAAM,IAAI,OAAO,gBAAgBG,EAAO,IAAIQ,GAAKA,EAAE,QAAQ,MAAO,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,gFAAiF,GAAG,CAAC,GAAK,CAAC,EAC9Q,GAAI,CAACL,EAAY,OACjB,IAAMM,EAAQL,EAAQ,QAAQ,OAAQ,GAAG,EAAE,YAAY,EACjDM,EAAOX,EAAM,SAASU,CAAK,EAAIA,EAAQV,EAAM,KAAKG,GAAK,KAAK,eAAeA,CAAC,EAAE,SAASO,CAAK,CAAC,EACnG,GAAI,CAACC,EAAM,OACX,IAAMC,EAAW,IAAI,KAAKf,EAASc,EAAMD,CAAK,EAC9C,OAAIJ,GAAUM,EAAS,SAAS,WAAW,EACvCJ,GAAsBI,EAAS,SAASJ,CAAoB,EAC5DD,GAAeK,EAAS,UAAUb,EAAca,EAAUL,EAAe,KAAK,UAAUI,CAAI,CAAC,CAAC,EAC3FC,CACR,CAEA,WAAY,CACX,IAAMC,EAAM,CAAC,OAAQ,KAAK,OAAO,UAAY,QAAU,KAAK,MAAM,QAAQ,KAAM,GAAG,EAAI,KAAK,IAAI,EAChG,OAAI,KAAK,QAAQ,WAAW,GAAGA,EAAI,KAAK,WAAW,EAC/C,KAAK,UAAU,GAAGA,EAAI,KAAK,KAAK,UAAU,CAAC,EAC3C,KAAK,QAAQ,UAAU,EAAGA,EAAI,KAAK,UAAU,EACxC,KAAK,QAAQ,SAAS,EAAGA,EAAI,KAAK,SAAS,EAC3C,KAAK,QAAQ,OAAO,GAAGA,EAAI,KAAK,OAAO,EACzCA,EAAI,KAAK,GAAG,CACpB,CACD,EC5CO,IAAMC,GAAN,cAAkBC,EAAsBC,CAAc,CAAE,CAC3D,WAAW,gBAAiB,CACxB,MAAO,CAAE,OAAQ,CAACC,EAAW,CAAE,CACnC,CAEH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CACpC,GAAM,CAAC,CAAEC,EAAUC,CAAY,EAAK,IAAI,OAAO,YAAY,OAAO,KAAK,KAAK,cAAc,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,oBAAqB,GAAG,EAAG,KAAKJ,CAAI,GAAK,CAAC,EACjL,GAAI,CAACE,EAAU,OACf,IAAMG,EAAW,IAAI,KAAKN,EAASG,EAAS,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,EAC7E,OAAOG,EAAS,SAASJ,EAAcI,EAAUF,EAAc,KAAK,eAAeE,EAAS,IAAI,CAAC,CAAC,CACtG,CAEA,WAAY,CAAE,MAAO,OAAO,KAAK,KAAK,QAAQ,KAAM,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,EAAI,CACnF,ECPO,IAAMC,GAAN,cAAoBC,EAAuBC,EAAsBC,CAAc,CAAC,CAAE,CACxF,WAAW,gBAAiB,CACrB,MAAO,CACH,OAAQ,CAACC,EAAS,EAClB,WAAY,CAACC,EAAa,EACnC,MAAO,CAACC,EAAQ,CACX,CACJ,CAEA,WAAW,WAAY,CACnB,MAAO,CACH,OAAQ,CAACC,CAAS,EAClB,WAAY,CAACC,CAAU,EAChC,MAAO,CAACA,CAAU,CACb,CACJ,CAEH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAC,CAAEC,EAAW,SAAUC,CAAS,EAAIH,EAAK,MAAM,IAAI,OAAO,iBAAiB,OAAO,KAAK,KAAK,cAAc,EAAE,KAAK,GAAG,CAAC,sBAAuB,GAAG,CAAC,GAAK,CAAC,EACvJ,CAAEI,EAAeC,CAAa,EAAIC,EAAM,MAAMH,EAAU,CAAC,GAAG,EAAG,CAAE,MAAO,CAAE,CAAC,EAAE,IAAKI,GAAMA,EAAE,KAAK,CAAC,EACtG,GAAI,CAACF,EAAc,OACnB,IAAMG,EAAW,IAAI,KAAKT,EAASG,EAAS,YAAY,CAAC,EACzD,OAAAM,EAAS,UAAUP,EAAcO,EAAUJ,EAAe,KAAK,UAAUI,EAAS,IAAI,CAAC,CAAC,EACxFA,EAAS,SAASP,EAAcO,EAAUH,EAAc,KAAK,eAAeG,EAAS,IAAI,CAAC,CAAC,EACpFA,CACR,CAEA,WAAY,CACX,MAAO,CAAC,GAAG,KAAK,SAAS,CAAC,EAAE,IAAIC,GACxB,SAAS,KAAK,IAAI,IAAI,KAAK,UAAU,CAAC,IAAIA,CAAM,EACvD,EAAE,KAAK;AAAA,CAAI,CACb,CACD,ECnCO,IAAMC,GAAN,cAAqBC,EAAuBC,EAAsBC,CAAc,CAAC,CAAE,CACtF,WAAW,WAAY,CACnB,MAAO,CACH,OAAQ,CAACC,CAAS,EAClB,WAAY,CAACC,CAAU,EAChC,MAAO,CAACA,CAAU,CACb,CACJ,CAEH,WAAW,gBAAiB,CAAE,OAAO,KAAK,SAAW,CAErD,WAAW,cAAe,CAAE,OAAOC,CAAgB,CAEnD,IAAI,gBAAiB,CAAE,OAAQ,KAAK,KAAuC,KAAK,YAAY,eAAe,KAAK,IAAI,EAAzE,KAAK,YAAY,YAA2D,CAEvH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAC,CAAEC,EAAW,SAAUC,EAAeC,CAAa,EAAIJ,EAAK,MAAM,IAAI,OAAO,kBAAkB,OAAO,KAAK,KAAK,SAAS,EAAE,KAAK,GAAG,CAAC,wDAAyD,GAAG,CAAC,GAAK,CAAC,EAC9M,GAAI,CAACI,EAAc,OACnB,IAAMC,EAAW,IAAI,KAAKN,EAASI,GAAiBD,EAAS,YAAY,CAAC,EAC1E,OAAIC,GACHE,EAAS,UAAUJ,EAAcI,EAAUF,EAAe,KAAK,UAAUE,EAAS,IAAI,CAAC,CAAC,EACxFA,EAAS,SAASJ,EAAcI,EAAUD,EAAc,KAAK,eAAeC,EAAS,IAAI,CAAC,CAAC,GACrFA,EAAS,SAASJ,EAAcI,EAAUD,EAAc,CAAC,KAAK,YAAY,CAAC,CAAC,EAC5EC,CACR,CAEA,WAAY,CACX,MAAO,CAAC,SAAU,KAAK,KAAM,KAAK,UAAU,EAAG,KAAM,KAAK,SAAS,CAAC,EAAE,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CAC9F,CACD,EC3BO,IAAMC,GAAN,cAAuBC,CAAY,CACtC,WAAW,gBAAiB,CACxB,MAAO,CAACC,GAAKC,GAAQC,GAAQC,GAAMC,GAAKC,GAAOC,EAAM,CACzD,CACJ,ECRO,IAAMC,GAAN,cAAyBC,EAAqBC,EAAmB,CAAE,CACtE,WAAW,gBAAiB,CACxB,MAAO,CACZ,MAAO,CAACC,EAAQ,EAChB,KAAM,CAACA,EAAQ,CACV,CACJ,CAEA,WAAW,WAAY,CACnB,MAAO,CACX,MAAO,CAACC,CAAc,EACvB,KAAM,CAACA,CAAc,CAChB,CACJ,CAEA,WAAY,CACd,GAAM,CAACC,EAAYC,EAAWC,EAASC,CAAO,EAAI,KAAK,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAACC,EAAGC,EAAGC,EAAGC,CAAC,EAAGC,IAC7FA,EAAO,SAAW,OAASA,EAAO,OAAS,SAAiB,CAACA,EAAQH,EAAGC,EAAGC,CAAC,EAC5EC,EAAO,SAAW,UAAY,CAACA,EAAO,KAAa,CAACJ,EAAGI,EAAQF,EAAGC,CAAC,EACnEC,EAAO,SAAW,SAAiB,CAACJ,EAAGC,EAAGC,EAAE,OAAOE,CAAM,EAAGD,CAAC,EAC1D,CAACH,EAAGC,EAAGC,EAAGC,EAAE,OAAOC,CAAM,CAAC,EAC/B,CAAC,KAAM,KAAM,CAAC,EAAG,CAAC,CAAC,CAAC,EACjBC,EAAM,CAAC,EAAGC,EAAQ,SAAS,KAAK,IAAI,GAAI,KAAK,QAAQ,WAAW,EAAI,aAAe,EAAE,GACvFP,EAAQ,QAAQM,EAAI,KAAK,GAAGC,CAAK,IAAI,KAAK,UAAU,CAAC;AAAA,GAAOP,EAAQ,KAAK;AAAA,EAAO,CAAC,EAAE,EACvF,QAAWQ,KAAUT,EAAQ,OAAOD,GAAa,CAAC,CAAC,EAAGQ,EAAI,KAAK,GAAGC,CAAK,IAAI,KAAK,UAAU,CAAC,IAAIC,CAAM,EAAE,EACvG,OAAIX,GAAYS,EAAI,KAAK,GAAGC,CAAK,IAAIT,GAAW,SAAS,GAAK,KAAK,UAAU,CAAC,IAAID,CAAU,EAAE,EACvFS,EAAI,KAAK;AAAA,CAAK,CACtB,CACD,EC9BO,IAAMG,GAAN,cAAmCC,EAAsBC,CAAc,CAAE,CAE/E,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAC,CAAEC,EAAUC,EAAaC,CAAY,EAAIJ,EAAK,MAAM,IAAI,OAAO,IAAI,KAAK,MAAM,QAAQ,OAAO,KAAK,KAAK,cAAc,EAAE,KAAK,GAAG,CAAC,8CAA+C,GAAG,CAAC,GAAK,CAAC,EAChM,GAAI,CAACE,EAAU,OACf,IAAMG,EAAW,IAAI,KAAKN,EAASG,EAAS,YAAY,CAAC,EACrDC,GAAaE,EAAS,SAAS,eAAe,EAClD,IAAMC,EAAWL,EAAcI,EAAUD,EAAc,KAAK,eAAeC,EAAS,IAAI,CAAC,EACzF,OAAOA,EAAS,SAASC,CAAQ,CAClC,CAEA,WAAY,CACX,IAAMC,EAAM,CAAC,SAAU,KAAK,IAAI,EAChC,OAAI,KAAK,QAAQ,eAAe,GAAGA,EAAI,KAAK,eAAe,EAC3DA,EAAI,KAAK,KAAK,SAAS,CAAC,EACjBA,EAAI,KAAK,GAAG,CACpB,CACD,EChBO,IAAMC,GAAN,cAA0BC,EAAqBC,EAAoB,CAAE,CAC3E,WAAW,gBAAiB,CAC3B,MAAO,CACN,MAAO,CAACC,EAAW,EACnB,KAAM,CAACA,EAAW,CACnB,CACD,CACD,ECRO,IAAMC,GAAN,cAAiCC,EAAuBC,CAAc,CAAE,CAE9E,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,IAAMC,EAAQ,OAAO,KAAK,KAAK,cAAc,EACvC,CAAC,CAAEC,EAASC,EAAUC,EAAeC,CAAqB,EAAIN,EAAK,MAAM,IAAI,OAAO,gBAAgBE,EAAM,IAAIK,GAAKA,EAAE,QAAQ,MAAO,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,2EAA4E,GAAG,CAAC,GAAK,CAAC,EAClP,GAAI,CAACJ,EAAS,OACd,IAAMK,EAAW,IAAI,KAAKT,EAASI,EAAQ,QAAQ,OAAQ,GAAG,EAAE,YAAY,CAAC,EAC7E,OAAIC,GAAUI,EAAS,SAAS,WAAW,EACvCF,GAAsBE,EAAS,SAASF,CAAoB,EAC5DD,GAAeG,EAAS,UAAUP,EAAcO,EAAUH,EAAe,KAAK,UAAUG,EAAS,IAAI,CAAC,CAAC,EACpGA,CACR,CAEA,WAAY,CACX,IAAMC,EAAM,CAAC,OAAQ,KAAK,IAAI,EAC9B,OAAI,KAAK,QAAQ,WAAW,GAAGA,EAAI,KAAK,WAAW,EAC/C,KAAK,UAAU,GAAGA,EAAI,KAAK,KAAK,UAAU,CAAC,EAC3C,KAAK,QAAQ,UAAU,EAAGA,EAAI,KAAK,UAAU,EACxC,KAAK,QAAQ,SAAS,EAAGA,EAAI,KAAK,SAAS,EAC3C,KAAK,QAAQ,OAAO,GAAGA,EAAI,KAAK,OAAO,EACzCA,EAAI,KAAK,GAAG,CACpB,CACD,ECrBO,IAAMC,GAAN,cAAwBC,EAAqBC,EAAkB,CAAE,CACpE,WAAW,gBAAiB,CAC9B,MAAO,CACN,MAAO,GACP,KAAM,EACP,CACD,CAEG,WAAW,WAAY,CACnB,MAAO,CACZ,MAAO,CAACC,CAAc,EACtB,KAAM,CAACA,CAAc,CAChB,CACJ,CACJ,ECdO,IAAMC,GAAN,cAAmCC,EAAuBC,EAAsBC,CAAc,CAAC,CAAE,CAEvG,WAAW,gBAAiB,CAAE,OAAO,KAAK,SAAW,CAErD,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAC,CAAEC,EAAUC,EAAeC,CAAa,EAAIJ,EAAK,MAAM,IAAI,OAAO,kBAAkB,OAAO,KAAK,KAAK,SAAS,EAAE,KAAK,GAAG,CAAC,wDAAyD,GAAG,CAAC,GAAK,CAAC,EACnM,GAAI,CAACI,EAAc,OACnB,IAAMC,EAAW,IAAI,KAAKN,EAASI,GAAiBD,EAAS,YAAY,CAAC,EAC1E,OAAIC,GACHE,EAAS,UAAUJ,EAAcI,EAAUF,EAAe,KAAK,UAAUE,EAAS,IAAI,CAAC,CAAC,EACxFA,EAAS,SAASJ,EAAcI,EAAUD,EAAc,KAAK,eAAeC,EAAS,IAAI,CAAC,CAAC,GACrFA,EAAS,SAASJ,EAAcI,EAAUD,EAAc,CAAC,KAAK,YAAY,CAAC,CAAC,EAC5EC,CACR,CAEA,WAAY,CACX,MAAO,CAAC,SAAU,KAAK,KAAM,KAAK,UAAU,EAAG,KAAM,KAAK,SAAS,CAAC,EAAE,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CAC9F,CACD,EClBO,IAAMC,GAAN,cAAqBC,EAAqB,CAC7C,WAAW,WAAY,CACnB,MAAO,CACX,MAAO,CAACC,CAAc,EACvB,KAAM,CAACA,CAAc,CAChB,CACJ,CAEH,WAAW,cAAe,CACnB,OAAOC,CACX,CAEH,IAAI,gBAAiB,CAAE,OAAQ,KAAK,KAAuC,KAAK,YAAY,eAAe,KAAK,IAAI,EAAzE,KAAK,YAAY,YAA2D,CACxH,ECbO,IAAMC,GAAN,cAAkBC,EAAsBC,CAAc,CAAE,CAC3D,WAAW,gBAAiB,CACxB,MAAO,CAAE,WAAY,CAACC,CAAU,CAAE,CACtC,CAEH,OAAO,MAAMC,EAASC,EAAMC,EAAe,CACpC,GAAM,CAAC,CAAEC,EAAUC,CAAY,EAAK,IAAI,OAAO,YAAY,OAAO,KAAK,KAAK,cAAc,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,oBAAqB,GAAG,EAAG,KAAKJ,CAAI,GAAK,CAAC,EACjL,GAAI,CAACE,EAAU,OACf,IAAMG,EAAW,IAAI,KAAKN,EAASG,EAAS,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,EAC7E,OAAOG,EAAS,SAASJ,EAAcI,EAAUF,EAAc,KAAK,eAAeE,EAAS,IAAI,CAAC,CAAC,CACtG,CAEA,WAAY,CAAE,MAAO,OAAO,KAAK,KAAK,QAAQ,KAAM,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,EAAI,CACnF,ECVO,IAAMC,GAAN,cAA0BC,CAAY,CACzC,WAAW,gBAAiB,CACxB,MAAO,CAACC,GAAYC,GAAaC,GAAWC,GAAQC,EAAG,CAC3D,CACJ,ECNO,IAAMC,GAAN,cAA4BC,EAAqBC,EAAmB,CAAE,CACzE,WAAW,gBAAiB,CACxB,MAAO,CACZ,SAAU,CAACC,EAAW,EACtB,OAAQ,CAACA,EAAW,CACf,CACJ,CAEA,WAAW,WAAY,CACnB,MAAO,CACZ,SAAU,CAACC,CAAiB,EAC5B,OAAQ,CAACA,CAAiB,CACrB,CACJ,CAEA,WAAY,CACd,GAAM,CAACC,EAAWC,EAASC,EAAMC,CAAO,EAAI,KAAK,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAACC,EAAGC,EAAGC,EAAGC,CAAC,EAAGC,IACvFA,EAAO,SAAW,UAAY,CAACA,EAAO,KAAa,CAACA,EAAQH,EAAGC,EAAGC,CAAC,EACnEC,EAAO,SAAW,SAAiB,CAACJ,EAAGC,EAAE,OAAOG,CAAM,EAAGF,EAAGC,CAAC,EAC7DC,EAAO,SAAW,MAAc,CAACJ,EAAGC,EAAGC,EAAE,OAAOE,CAAM,EAAGD,CAAC,EACvD,CAACH,EAAGC,EAAGC,EAAGC,EAAE,OAAOC,CAAM,CAAC,EAC/B,CAAC,KAAM,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,EACfC,EAAM,CAAC,EACPA,EAAI,KAAK,GAAGN,EAAS,GAAGF,CAAO,EACrC,QAAWS,KAAOR,EAAMO,EAAI,KAAK,SAAS,KAAK,IAAI,IAAI,KAAK,UAAU,CAAC,IAAIC,CAAG,EAAE,EAChF,OAAIV,GAAWS,EAAI,KAAK,SAAS,KAAK,IAAI,IAAI,KAAK,UAAU,CAAC,IAAIT,CAAS,EAAE,EACtES,EAAI,KAAK;AAAA,CAAK,CACtB,CACD,EC5BO,IAAME,GAAN,cAA6BC,EAAqBC,EAAoB,CAAE,CAC9E,WAAW,gBAAiB,CAC3B,MAAO,CACN,SAAU,CAACC,CAAc,EACzB,OAAQ,CAACA,CAAc,CACxB,CACD,CAEA,WAAY,CACX,IAAMC,EAAM,CAAC,MAAM,UAAU,CAAC,EAC9B,OAAAA,EAAI,KAAK,GAAG,KAAK,SAAS,EAAE,OAAO,EAAE,IAAIC,GAAa,CACrD,IAAMC,EAAYC,GAAY,SAAS,KAAM,CAAE,SAAUF,CAAU,CAAC,EACpE,OAAI,KAAK,QAAQ,eAAe,GAAGC,EAAU,SAAS,eAAe,EAC9DA,CACR,CAAC,CAAC,EACKF,EAAI,KAAK;AAAA,CAAK,CACtB,CACD,EClBO,IAAMI,GAAN,cAA2BC,EAAqBC,EAAkB,CAAE,CACvE,WAAW,gBAAiB,CAC9B,MAAO,CACN,SAAU,GACV,OAAQ,EACT,CACD,CAEG,WAAW,WAAY,CACnB,MAAO,CACH,SAAU,CAACC,CAAiB,EAC5B,OAAQ,CAACA,CAAiB,CAC9B,CACJ,CACJ,ECdO,IAAMC,GAAN,cAA6BC,EAAqBC,EAAoB,CAAE,CAC3E,WAAW,WAAY,CACnB,MAAO,CACH,SAAU,CAACC,CAAiB,EAC5B,OAAQ,CAACA,CAAiB,CAC9B,CACJ,CACJ,ECLO,IAAMC,GAAN,cAAsBC,CAAY,CACrC,WAAW,gBAAiB,CACxB,MAAO,CAACC,GAAeC,GAAgBC,GAAcC,EAAc,CACvE,CACJ,ECFO,IAAMC,GAAN,cAAmCC,GAAqBC,CAAwB,CAAE,CAExFC,GACAC,GACAC,GAAiB,CAAC,EACfC,GAAkB,CAAC,EACtBC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEA,YAAYC,EAAO,CACZ,OAAK,UAAU,QACX,KAAK,gBAAgB,EAC9B,KAAKT,GAAgB,KAAK,YAAY,CAACS,CAAK,EAAGC,EAAgB,KAAKV,GAAe,cAAc,EAC3F,KAAKD,GAAe,KAAK,YAAY,CAACU,CAAK,EAAGC,EAAgB,KAAKX,GAAc,cAAc,EAC/F,MAJ6B,KAAKA,EAKvC,CAEA,cAAe,CAAE,OAAO,KAAKC,IAAiB,KAAK,YAAY,CAAG,CAErE,cAAcW,EAAS,CAChB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKV,GACnC,GAAI,CAAC,MAAM,QAAQU,CAAO,GAAK,CAACA,EAAQ,OAAQ,MAAM,IAAI,MAAM,wCAAwC,EACxG,OAAI,KAAK,gBAAgB,EAC9B,KAAKT,GAAkBS,EACjB,KAAKV,GAAiBU,EACtB,IACL,CAEA,gBAAiB,CAAE,OAAO,KAAKT,GAAgB,OAAS,KAAKA,GAAkB,KAAK,cAAc,CAAG,CAExG,UAAUU,EAAM,CACT,OAAK,UAAU,QACX,KAAK,gBAAgB,EAC9B,KAAKR,GAAcQ,EACb,KAAKT,GAAaS,EAClB,MAJ6B,KAAKT,EAKvC,CAEA,YAAa,CAAE,OAAO,KAAKC,IAAe,KAAK,UAAU,CAAG,CAE/D,WAAWQ,EAAM,CACV,OAAK,UAAU,QACX,KAAK,gBAAgB,EAC9B,KAAKN,GAAeM,EACd,KAAKP,GAAcO,EACnB,MAJ6B,KAAKP,EAKvC,CAEA,aAAc,CAAE,OAAO,KAAKC,IAAgB,KAAK,WAAW,CAAG,CAElE,WAAWM,EAAM,CACV,OAAK,UAAU,QACX,KAAK,gBAAgB,EAC9B,KAAKJ,GAAeI,EACd,KAAKL,GAAcK,EACnB,MAJ6B,KAAKL,EAKvC,CAEA,aAAc,CAAE,OAAO,KAAKC,IAAgB,KAAK,WAAW,CAAG,CAIlE,WAAWK,EAAS,GAAO,CAC1B,OAAO,MAAM,WAAWA,CAAM,EAAE,OAC/B,KAAK,qBAAqB,CACb,cACA,gBACA,YACA,aACA,YACJ,CAAC,CACX,CACD,CAEG,aAAaC,EAAOC,EAAS,CAC/B,OAAO,KAAK,eAAe,CACjB,GAAG,MAAM,aAAaD,EAAOC,CAAO,EAC7C,YAAa,KAAK,aAAa,GAAG,OAAOA,CAAO,EAChD,cAAe,KAAK,eAAe,EAAE,MAAM,EAC3C,UAAW,KAAK,WAAW,EAC3B,WAAY,KAAK,YAAY,EAC7B,WAAY,KAAK,YAAY,CAC9B,EAAG,CACF,YAAaD,EAAM,aAAa,GAAG,OAAOC,CAAO,EACjD,cAAeD,EAAM,eAAe,EAAE,MAAM,EAC5C,UAAWA,EAAM,WAAW,EAC5B,WAAYA,EAAM,YAAY,EAC9B,WAAYA,EAAM,YAAY,CAC/B,EAAGC,CAAO,CACR,CAIH,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CACzC,GAAK,MAAM,QAAQD,GAAM,aAAa,EACtC,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC/CA,EAAS,YAAYF,EAAK,WAAW,EACrCE,EAAS,gBAAgBF,EAAK,aAAeG,GAAiBD,EAAS,YAAYC,CAAY,CAAC,EACzGD,EAAS,cAAcF,EAAK,aAAa,EAChCE,EAAS,gBAAgBF,EAAK,eAAiBI,GAAmBF,EAAS,cAAcE,CAAc,CAAC,EAC7GJ,EAAK,WAAWE,EAAS,UAAUF,EAAK,SAAS,EAC5CE,EAAS,gBAAgBF,EAAK,WAAaK,GAAeH,EAAS,UAAUG,CAAU,CAAC,EAC7FL,EAAK,YAAYE,EAAS,WAAWF,EAAK,UAAU,EAC/CE,EAAS,gBAAgBF,EAAK,YAAcM,GAAgBJ,EAAS,WAAWI,CAAW,CAAC,EACjGN,EAAK,YAAYE,EAAS,WAAWF,EAAK,UAAU,EAC/CE,EAAS,gBAAgBF,EAAK,YAAcO,GAAgBL,EAAS,WAAWK,CAAW,CAAC,EAC5FN,IAAWC,CAAQ,CACvB,CAAC,CACR,CAEA,OAAOJ,EAAU,CAAC,EAAGU,EAAS,CAAC,EAAG,CACjC,IAAIR,EAAO,MAAM,OAAOF,EAAS,KAAK,eAAe,CAC3C,YAAa,KAAKhB,IAAc,OAAOgB,CAAO,EAC9C,cAAe,KAAKd,GAAe,MAAM,EACzC,GAAI,KAAKE,GAAa,CAAE,UAAW,KAAKA,EAAW,EAAI,CAAC,EACxD,GAAI,KAAKE,GAAc,CAAE,WAAY,KAAKA,EAAY,EAAI,CAAC,EAC3D,GAAI,KAAKE,GAAc,CAAE,WAAY,KAAKA,EAAY,EAAI,CAAC,EACpE,GAAGkB,CACE,EAAG,CACC,YAAa,KAAKzB,IAAe,OAAOe,CAAO,EAC/C,cAAe,KAAKb,GAAgB,MAAM,EAC1C,UAAW,KAAKE,GAChB,WAAY,KAAKE,GACjB,WAAY,KAAKE,EAC3B,EAAGO,CAAO,CAAC,EACL,GAAI,EAAEA,EAAQ,mBAAmBW,IAAU,OAAOT,EAClD,GAAI,CAACA,EAAM,OAEX,IAAMU,EAAO,CAAE,YAAa,CAAC,EAAG,QAAS,EAAM,EACzCC,EAAcC,GAAO,CACvB,GAAIA,GAAM,CAACA,EAAG,QAAQ,SAAS,EAAG,MAAM,IAAI,MAAM,eAAeA,EAAG,IAAI,IAAIA,EAAG,UAAU,CAAC,sCAAsC,EAChIF,EAAK,QAAU,GACXZ,EAAQ,OACRE,EAAO,CAAE,GAAGA,EAAM,OAAQ,UAAW,EAE7C,EACMa,EAAsBC,GAAa,CACrC,IAAMC,EAAYD,EAAS,OAAOhB,CAAO,EACzCE,EAAO,KAAK,eAAeA,EAAM,CAAE,YAAa,CAAE,GAAGA,EAAK,YAAa,OAAQe,CAAU,CAAE,EAAGjB,CAAO,EACjGA,EAAQ,OAAS,KACZE,EAAK,gBAAeA,EAAK,cAAgB,CAAC,GAC/CA,EAAK,cAAc,KAAK,aAAa,EAE7C,EACMgB,EAAoBF,GAAa,CACnC,IAAMC,EAAYD,EAAS,OAAOhB,CAAO,EACzCE,EAAO,KAAK,eAAeA,EAAM,CAAE,YAAa,CAAE,GAAGA,EAAK,YAAa,GAAGe,CAAU,CAAE,EAAGjB,CAAO,EAC5FA,EAAQ,OAAS,KACZE,EAAK,gBAAeA,EAAK,cAAgB,CAAC,GAC/CA,EAAK,cAAc,KAAK,aAAa,EAE7C,EACMiB,EAAsB,IAAM,CAC9B,IAAMC,EAAgB,KAAK,wBAAwBlB,EAAK,cAAeU,EAAK,YAAa,EAAI,EACzFQ,EAAc,SAAWlB,EAAK,cAAc,OAE5CW,EAAW,EACJQ,GAAWD,EAAelB,EAAK,aAAa,EAAE,SAAWA,EAAK,cAAc,SAEnFA,EAAO,KAAK,eAAeA,EAAM,CAAE,cAAAkB,CAAc,EAAGpB,CAAO,EACvDA,EAAQ,OAAS,KACZE,EAAK,gBAAeA,EAAK,cAAgB,CAAC,GAC/CA,EAAK,cAAc,KAAK,eAAe,GAGnD,EACMoB,EAAeC,GAAcA,GAAW,aAAa,KAAK,aAAa,EAAE,OAAO,EAAI,CAAC,EACrFC,EAAaD,GAAcA,GAAW,aAAa,KAAK,aAAa,EAAE,KAAK,CAAC,EAC7EE,EAAgBC,GAAa,CAC/B,QAAWZ,KAAMY,EACTZ,EAAG,SAAW,SACTA,EAAG,KACCA,EAAG,OAAS,UAAUF,EAAK,YAAY,KAAKE,CAAE,EADzCI,EAAiBJ,EAAG,SAAS,CAAC,EAErCA,EAAG,SAAW,MACjBA,EAAG,OAAS,UAAUC,EAAmBD,EAAG,SAAS,CAAC,EACnDA,EAAG,SAAW,QACjBA,EAAG,OAAS,UAAUF,EAAK,YAAY,KAAKE,CAAE,CAG9D,EACMa,EAAmBC,GAAgB,CACrC,QAAWd,KAAMc,EAAa,CAC1B,GAAId,EAAG,SAAW,SACTA,EAAG,KACCU,EAAUV,EAAG,UAAU,CAAC,GAAGI,EAAiBJ,EAAG,SAAS,CAAC,EADpDC,EAAmBD,EAAG,SAAS,CAAC,UAEvC,CAACU,EAAUV,EAAG,YAAY,CAAC,EAAG,SACrCA,EAAG,SAAW,QAASW,EAAaX,EAAG,SAAS,CAAC,EAC5CA,EAAG,SAAW,QAAQD,EAAWC,CAAE,CAChD,CACJ,EAWA,IAVqBe,GAAY,CAC7B,QAAWf,KAAMe,EACRP,EAAYR,EAAG,YAAY,CAAC,IAC7BA,EAAG,SAAW,SAAUC,EAAmBD,EAAG,SAAS,CAAC,EACnDA,EAAG,SAAW,QAASa,EAAgBb,EAAG,SAAS,CAAC,EACpDA,EAAG,SAAW,QAAQD,EAAWC,CAAE,EAEpD,GACYd,EAAQ,OAAO,EAC3BmB,EAAoB,EAChB,EAAAP,EAAK,SAAW,CAACZ,EAAQ,MAC7B,OAAOE,CACd,CAEG,OAAO,MAAMD,EAAS6B,EAAMC,EAAe,CACvC,GAAI,CAAE,KAAAC,EAAM,KAAMC,EAAQ,EAAG,EAAI,KAAK,UAAUhC,EAAS6B,EAAM,EAAI,EACrE1B,EACJ,GAAI,KAAK,cAAcH,CAAO,EAAG,CAChC,GAAI,EAAEgC,EAAQA,EAAM,MAAM,2BAA2B,IAAI,CAAC,GAAI,OAC9D7B,EAAW,IAAI,KAAKH,CAAO,CAC5B,KAAO,CACN,GAAI,CAAC,kBAAkB,KAAKgC,CAAK,EAAG,OACpC7B,EAAW,IAAI,KAAKH,CAAO,EAC3B,GAAM,CAAE,CAAEiC,EAAa,GAAGC,CAAK,EAAIC,EAAM,MAAMH,EAAO,CAAC,CAAC,EACxD7B,EAAS,QAAQ,KAAK,aAAaH,EAASiC,CAAW,CAAC,EACxDD,EAAQE,EAAK,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,2BAA2B,IAAI,CAAC,CACpE,CACM,GAAM,CAAEE,EAAsBC,EAAMC,EAAO,EAAG,EAAIH,EAAM,MAAMH,EAAO,CAAC,CAAC,EACjEO,EAAcT,EAAc3B,EAAUiC,EAAqB,KAAK,EAAG,CAAC1C,CAAc,CAAC,EACnFyB,EAAgBgB,EAAM,MAAMK,EAAQH,EAAM,IAAK,GAAG,EAAG,CAAC,GAAG,CAAC,EAAE,IAAII,GAAO,KAAK,WAAWzC,EAASyC,EAAI,KAAK,CAAC,EAAE,CAAC,CAAC,EAC9GC,EAAuB,CAACC,EAAKC,IAAS,CACxC,GAAIA,IAAS,QAAS,OAAOD,EAAI,MAAM,gBAAgB,IAAI,CAAC,EAC5D,IAAME,EAAsB,gFACtB,CAAE,CAAEC,EAAUC,EAAUC,CAAgB,EAAIL,EAAI,MAAM,IAAI,OAAO,SAAUC,CAAK,OAAQC,EAAoB,MAAO,GAAI,GAAG,CAAC,GAAK,CAAC,EACvI,OAAOE,EAAaC,EAA6B,CAAE,KAAMD,EAAU,cAAeC,EAAgB,MAAM,GAAG,EAAE,IAAIC,GAAKA,EAAE,KAAK,CAAC,CAAE,EAA1FF,EAA+FD,CACzI,EACA,OAAO3C,EACX,KAAK4B,CAAI,EACA,YAAYQ,CAAW,EACvB,cAAcpB,CAAa,EAC3B,UAAUuB,EAAqBJ,EAAM,OAAO,CAAC,EAC7C,WAAWI,EAAqBJ,EAAM,QAAQ,CAAC,EAC/C,WAAWI,EAAqBJ,EAAM,QAAQ,CAAC,CACxD,CAEA,WAAY,CACd,IAAIY,EAAO,KAAK,cAEb,KAAK,cAAc,EADnB,GAAI,KAAK,cAAc,CAAE,cAAe,KAAK,iBAAiB,CAAE,IAEnEA,GAAO,cAAe,KAAK,aAAa,CAAE,KAAM,KAAK,eAAe,EAAE,IAAIC,GAAK,KAAK,eAAeA,CAAC,CAAC,EAAE,KAAK,IAAI,CAAE,IAC5G,IAAMC,EAA2BxD,GAAQ,OAAOA,GAAS,UAAYA,EAAO,GAAIA,EAAK,IAAK,KAAMA,EAAK,cAAc,KAAK,IAAI,CAAE,IAAMA,EACpI,OAAI,KAAK,WAAW,IAAKsD,GAAO,UAAW,KAAK,WAAW,CAAE,IACzD,KAAK,YAAY,IAAKA,GAAO,cAAeE,EAAyB,KAAK,YAAY,CAAC,CAAE,IACzF,KAAK,YAAY,IAAKF,GAAO,cAAeE,EAAyB,KAAK,YAAY,CAAC,CAAE,IACtFF,CACX,CACJ,EClPO,IAAMG,GAAN,cAA0BC,EAA+B,CAC/D,WAAW,kBAAmB,CAAE,MAAO,CAACC,GAAsBC,GAAsBC,GAAqBC,EAAe,CAAG,CAC3H,WAAW,aAAc,CAAE,MAAO,CAACC,CAAiB,CAAG,CAEvDC,GAAW,CAAC,EACZC,GAAe,CAAC,EAChBC,GAAW,CAAC,EACZC,GAAS,IAAI,IAEb,CAAC,OAAO,QAAQ,GAAI,CAAE,OAAO,KAAKH,GAAS,OAAO,QAAQ,EAAE,CAAG,CAE/D,IAAI,QAAS,CAAE,OAAO,KAAKA,GAAS,MAAQ,CAE5C,SAASI,EAAaC,EAAe,CACpC,MAAI,CAAC,cAAc,EAAE,SAASD,CAAW,EAAU,KAC5C,MAAM,SAASA,EAAaC,CAAa,CACjD,CAEA,QAAQC,EAAWC,EAAa,CAC/B,MAAI,CAAC,YAAa,cAAc,EAAE,SAASD,CAAS,GAAK,CAACE,EAAcC,EAA0BC,EAAW,EAAE,KAAKC,GAAKJ,aAAuBI,IAC/IJ,EAAY,cAAgB,MAASA,EAAY,uBAAuBC,GAAgBD,EAAY,YAAY,cAAgB,KAChI,IACID,IAAc,eAAgB,KAAKH,GAAO,OAAOI,CAAW,EAC3D,KAAKJ,GAAO,IAAII,CAAW,GAE1B,MAAM,QAAQD,EAAWC,CAAW,CAC5C,CAIA,OAAOK,KAASC,EAAM,CACrB,GAAI,OAAOD,GAAS,SAAU,CAC7B,IAAME,EAAW,KAAKd,GAAS,KAAMe,GAAQA,EAAI,aAAaH,CAAI,CAAC,EACnE,GAAI,CAACC,EAAK,OAAQ,OAAOC,EACzB,GAAID,EAAK,CAAC,IAAM,GACf,YAAKb,GAAW,KAAKA,GAAS,OAAQgB,GAAMA,IAAMF,CAAQ,EAC1DA,GAAU,OAAO,cAAc,EACxB,KAERF,EAAO,CAAE,KAAMA,EAAM,GAAI,OAAOC,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAE,KAAMA,EAAK,CAAC,CAAE,CAAG,CACrF,CACA,YAAKb,GAAW,KAAK,YAAY,CAACY,CAAI,EAAGJ,EAAc,KAAKR,GAAU,UAAW,KAAOiB,GAChF,KAAKjB,GAAS,KAAMe,GAAQA,EAAI,aAAaE,EAAS,KAAK,CAAC,CAAC,CACpE,EACM,IACR,CAEA,WAAWL,KAASC,EAAM,CACzB,GAAI,OAAOD,GAAS,SAAU,CAC7B,IAAME,EAAW,CAAC,GAAG,KAAKX,EAAM,EAAY,KAAMe,GAASA,EAAK,aAAaN,CAAI,CAAC,EAClF,GAAI,CAACC,EAAK,OAAQ,OAAOC,EACzB,GAAID,EAAK,CAAC,IAAM,GACf,OAAI,KAAKZ,GAAa,SAASa,CAAQ,GACtC,KAAKb,GAAe,KAAKA,GAAa,OAAQe,GAAMA,IAAMF,CAAQ,EAClEA,GAAU,OAAO,cAAc,GACrBA,GACV,KAAK,OAAOA,EAAS,QAAQ,EAAE,CAAC,CAAC,EAAE,WAAWA,EAAS,KAAM,EAAK,EAE5D,KAERF,EAAO,CAAE,KAAMA,EAAM,GAAI,OAAOC,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAE,KAAMA,EAAK,CAAC,EAAG,QAASA,EAAK,CAAC,CAAE,CAAG,CACvG,CACA,YAAKZ,GAAe,KAAK,YAAY,CAACW,CAAI,EAAG,KAAK,YAAY,iBAAkB,KAAKX,GAAc,cAAe,KAAOgB,GAAa,CACrI,IAAMH,EAAW,KAAKb,GAAa,KAAMiB,GAASA,EAAK,aAAaD,EAAS,KAAK,CAAC,CAAC,EACpF,MAAI,CAACH,GAAYG,EAAS,QAAQ,EAAE,SAAW,GAAG,KAAK,OAAOA,EAAS,QAAQ,EAAE,CAAC,CAAC,GAAG,WAAWA,EAAS,KAAM,EAAK,EAC9GH,CACR,CAAC,EACM,IACR,CAEA,MAAMF,KAASC,EAAM,CACpB,GAAI,OAAOD,GAAS,SAAU,CAC7B,IAAME,EAAW,KAAKZ,GAAS,KAAMiB,GAAQA,EAAI,aAAaP,CAAI,CAAC,EACnE,GAAI,CAACC,EAAK,OAAQ,OAAOC,EACzB,GAAID,EAAK,CAAC,IAAM,GACf,YAAKX,GAAW,KAAKA,GAAS,OAAQkB,GAAMA,IAAMN,CAAQ,EAC1DA,GAAU,OAAO,cAAc,EACxB,KAERF,EAAO,CAAE,KAAMA,EAAM,GAAI,OAAOC,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAE,KAAMA,EAAK,CAAC,EAAG,QAASA,EAAK,CAAC,CAAE,CAAG,CACvG,CACA,YAAKX,GAAW,KAAK,YAAY,CAACU,CAAI,EAAGF,GAAa,KAAKR,GAAU,UAAW,KAAOe,GAC/E,KAAKf,GAAS,KAAMiB,GAAQA,EAAI,aAAaF,EAAS,KAAK,CAAC,CAAC,CACpE,EACM,IACR,CAIA,QAAQI,EAAc,GAAM,CAC3B,IAAMC,EAAU,KAAKtB,GACrB,OAAQqB,EAA2CC,EAA7BA,EAAQ,IAAIN,GAAKA,EAAE,KAAK,CAAC,CAChD,CAEA,YAAYK,EAAc,GAAME,EAAS,GAAM,CAC9C,IAAMC,EAAeD,EAA6B,CAAC,GAAG,KAAKpB,EAAM,EAAE,OAAOsB,GAAQA,aAAgBhB,CAAwB,EAA5F,KAAKR,GACnC,OAAQoB,EAAkDG,EAApCA,EAAY,IAAIR,GAAKA,EAAE,QAAQ,CAAC,CACvD,CAEA,QAAQK,EAAc,GAAM,CAC3B,IAAMK,EAAU,KAAKxB,GACrB,OAAQmB,EAA8CK,EAAhCA,EAAQ,IAAIN,GAAKA,EAAE,QAAQ,CAAC,CACnD,CAEA,WAAWC,EAAc,GAAME,EAAS,GAAM,CAC7C,IAAMI,GAAOJ,EAA6B,CAAC,GAAG,KAAKpB,EAAM,EAAnC,KAAKF,IAAiC,KAAKwB,GAAQA,EAAK,OAAS,aAAa,EACpG,OAAQJ,EAA6BM,EAAfA,EAAG,QAAQ,CAClC,CAEA,YAAYN,EAAc,GAAME,EAAS,GAAM,CAC9C,IAAMK,GAAQL,EAA6B,CAAC,GAAG,KAAKpB,EAAM,EAAnC,KAAKF,IAAiC,OAAOwB,GAAQA,EAAK,OAAS,aAAa,EACvG,OAAQJ,EAA4CO,EAA9BA,EAAI,IAAIC,GAAMA,EAAG,QAAQ,CAAC,CACjD,CAEA,WAAWR,EAAc,GAAME,EAAS,GAAM,CAC7C,IAAMO,GAAQP,EAA6B,CAAC,GAAG,KAAKpB,EAAM,EAAnC,KAAKF,IAAiC,OAAOwB,GAAQA,EAAK,OAAS,YAAY,EACtG,OAAQJ,EAA4CS,EAA9BA,EAAI,IAAIC,GAAMA,EAAG,QAAQ,CAAC,CACjD,CAEA,OAAOV,EAAc,GAAME,EAAS,GAAM,CACzC,IAAMS,GAAQT,EAA6B,CAAC,GAAG,KAAKpB,EAAM,EAAnC,KAAKF,IAAiC,OAAOwB,GAAQA,EAAK,OAAS,OAAO,EACjG,OAAQJ,EAAyCW,EAA3BA,EAAI,IAAIC,GAAMA,EAAG,KAAK,CAAC,CAC9C,CAIA,WAAWV,EAAS,GAAO,CAC1B,IAAMW,EAAa,MAAM,WAAWX,CAAM,EAC1C,OAAKA,EACEW,EAAW,OAAO,CAAC,UAAW,cAAe,SAAS,EAAE,OAAQC,GAC/D,KAAKA,CAAG,EAAE,EAAE,KAAKV,GAAQA,EAAK,WAAWF,CAAM,EAAE,MAAM,CAC9D,CAAC,EAHkBW,CAIrB,CAEA,UAAUE,EAAUC,EAAU,CAAC,EAAG,CACjC,GAAM,CAAE,QAAAC,EAAS,GAAGC,CAAS,EAAIF,EAC3BG,EAAe,IAAI,IACnBC,EAAc,IAAI,IAGlBC,EAAW,CAACC,EAAMC,EAAMC,EAAe,GAAMC,EAAgB,KAAS,CAC3E,IAAMC,EAAS,CAAC,EAAE,OAAOJ,CAAI,EACvBK,GAAOD,EAAO,SAAS,QAAQ,EAAIvC,EAAgBuC,EAAO,SAAS,OAAO,EAAIrC,GAAcD,EAC5FgB,EAAO,CAAC,GAAG,KAAKtB,EAAM,EAAE,KAAKsB,IAAQA,cAAgBuB,KAC1DvB,GAAK,aAAamB,CAAI,GAAM,CAACA,GAAQ,KAAK,OAAO,UAAY,SAAWG,EAAO,SAAS,aAAa,EACrG,EACD,IAAK,CAACtB,GAASe,EAAa,IAAIf,CAAI,GAAK,CAACe,EAAa,IAAIf,CAAI,IAAkBoB,EAChF,MAAM,IAAI,MAAM,GAAGE,EAAO,CAAC,CAAC,GAAGH,EAAO,KAAKA,CAAI,IAAM,EAAE,kBAAkB,EAE1E,OAAIE,GAAiBN,EAAa,IAAIf,CAAI,EAAU,CAACA,EAAMA,EAAK,YAAY,SAASA,EAAK,YAAY,MAAM,EAAGe,EAAa,IAAIf,CAAI,CAAC,CAAC,EAC/H,CAACA,CAAI,CACb,EAEMwB,EAAeC,GAAO,CAC3B,IAAIC,EAAY,GAAGD,EAAG,IAAI,QAM1B,GALIA,EAAG,MAAM,EACZ,CAACC,CAAS,EAAIT,EAASQ,EAAG,KAAMA,EAAG,MAAM,EAAE,KAAK,EAAG,GAAM,EAAK,EACpDA,EAAG,MAAM,IAAGC,EAAY,GAAGD,EAAG,IAAI,UACxCT,EAAY,IAAIU,CAAS,GAAGV,EAAY,IAAIU,EAAW,CAAC,CAAC,EAE1D,CAAC,SAAU,QAAQ,EAAE,SAASD,EAAG,MAAM,EAAG,CAC7C,GAAM,CAACE,EAASC,EAAQ,EAAIX,EAASQ,EAAG,KAAMA,EAAG,SAAW,SAAWA,EAAG,UAAU,EAAE,KAAK,EAAIA,EAAG,SAAS,EAAE,KAAK,CAAC,EAC7GI,GAAaD,IAAYD,GAAS,aAAaF,EAAG,SAAS,EAAGX,CAAQ,EAC5EE,EAAY,IAAIU,CAAS,EAAE,QAAQG,CAAS,EAC5C,MACD,CAEA,GAAM,CAACxC,CAAQ,EAAI4B,EAASQ,EAAG,KAAMA,EAAG,SAAS,EAAE,KAAK,EAAG,GAAO,EAAK,EACvE,GAAIpC,EAAU,CACb,GAAI0B,EAAa,IAAI1B,CAAQ,IAAM,CAAC0B,EAAa,IAAI1B,CAAQ,GAAK0B,EAAa,IAAI1B,CAAQ,EAAE,SAAW,YAAa,CAEpH0B,EAAa,IAAI1B,EAAUoC,EAAG,SAAS,EAAE,OAAOX,CAAQ,CAAC,EACzD,MACD,CACA,GAAIW,EAAG,QAAQ,eAAe,EAAG,OACjC,MAAM,IAAI,MAAM,GAAGA,EAAG,IAAI,IAAIA,EAAG,SAAS,GAAG,KAAK,GAAKA,EAAG,KAAK,iBAAiB,CACjF,CACA,IAAII,EAAYJ,EAAG,SAAS,EAAE,OAAOX,CAAQ,EAG7C,GAFIA,EAAS,OAAS,KAAOe,EAAY,CAAE,GAAGA,EAAW,OAAQ,KAAM,GAEnEJ,EAAG,OAAS,cAAgBA,EAAG,SAAS,EAAE,SAAS,EAAE,SAAW,EAAG,CACtE,GAAM,CAACE,EAASC,EAAQ,EAAIX,EAAS,SAAUQ,EAAG,SAAS,EAAE,SAAS,EAAE,CAAC,EAAG,EAAK,GAAK,CAAC,EACvF,GAAIE,EAAS,CAEZ,IAAMG,IADYF,IAAY7C,EAAa,SAAS,KAAK,MAAM,EAAG4C,EAAQ,OAAOb,CAAQ,CAAC,GAC7D,WAAWe,CAAS,EAAE,OAAOf,CAAQ,EAClEC,EAAa,IAAIY,EAASG,EAAU,CACrC,MAAOd,EAAY,IAAIU,CAAS,EAAE,QAAQG,CAAS,CACpD,MAAOb,EAAY,IAAIU,CAAS,EAAE,QAAQG,CAAS,CACpD,EAEME,EAAgBN,GAAO,CAC5B,GAAM,CAACE,EAASC,CAAQ,EAAIX,EAAS,CAACQ,EAAG,KAAMA,EAAG,KAAK,EAAGA,EAAG,UAAU,EAAE,KAAK,EAAG,CAACA,EAAG,QAAQ,WAAW,EAAGX,EAAS,OAAS,EAAK,EAC9Ha,GAASZ,EAAa,IAAIY,EAASb,EAAS,OAAS,GAAQ,OAAY,CAAE,IAAIc,GAAYD,GAAS,OAAOb,CAAQ,EAAG,OAAQ,UAAW,CAAC,CAC/I,EAEMkB,EAAeP,GAAO,CAAE,EAExBQ,EAAkBR,GAAO,CAC9B,GAAM,CAACE,EAASC,CAAQ,EAAIX,EAAS,CAACQ,EAAG,KAAMA,EAAG,KAAK,EAAGA,EAAG,UAAU,EAAE,KAAK,CAAC,EACzEI,EAAY,KAAK,gBAAgBD,GAAYD,GAAS,OAAOb,CAAQ,EAAGW,EAAG,SAAS,EAAE,OAAOX,CAAQ,EAAGA,CAAQ,EACtHC,EAAa,IAAIY,EAASE,CAAS,CACpC,EAEMK,EAAiBT,GAAO,CAC7B,GAAM,CAACE,EAASC,CAAQ,EAAIX,EAASQ,EAAG,KAAMA,EAAG,UAAU,EAAE,KAAK,CAAC,EAC7DU,GAASP,GAAYD,GAAS,UAAUF,EAAG,SAAS,EAAGX,CAAQ,EACrEC,EAAa,IAAIY,EAASQ,CAAK,CAChC,EAEMC,EAAcpC,GAAS,CAC5B,IAAMqC,EAAkB/C,GAAQ,CAE/B,GAAI,CAACyB,EAAa,IAAIzB,CAAG,EAAG,OAC5B,IAAMgD,GAAOhD,EAAI,YAAY,SAASA,EAAI,YAAY,MAAM,EAAGyB,EAAa,IAAIzB,CAAG,CAAC,EACpF,QAAWG,KAAQH,EAAI,YAAY,EAC7ByB,EAAa,IAAItB,CAAI,IACtBsB,EAAa,IAAItB,CAAI,EAAG6C,GAAK,WAAWvB,EAAa,IAAItB,CAAI,CAAC,EAC7D6C,GAAK,WAAW7C,EAAK,KAAM,EAAK,GAEtC,OAAO6C,GAAK,OAAO,CAAE,SAAA3B,EAAU,GAAGC,CAAQ,CAAC,CAC5C,EACM2B,EAAgB9C,GAEjB,CAACmB,EAAQ,SAAW,CAACG,EAAa,IAAItB,CAAI,EAAUsB,EAAa,IAAItB,CAAI,EACtEA,EAAK,YAAY,SAASA,EAAK,YAAY,MAAM,EAAGsB,EAAa,IAAItB,CAAI,CAAC,EAAE,OAAO,CAAE,SAAAkB,EAAU,GAAGC,CAAQ,CAAC,EAE/GuB,EACJ,OAAIpB,EAAa,IAAIf,CAAI,EACxBmC,EAAQnC,aAAgBjB,EAAesD,EAAerC,CAAI,EAAIuC,EAAavC,CAAI,EACrEA,aAAgBjB,EAC1BoD,EAAQnC,EAAK,OAAOc,EAAU,CAAC,EAAIrB,GAC3BsB,EAAa,IAAItB,CAAI,EAAI8C,EAAa9C,CAAI,EAAIA,EAAK,OAAO,CAAE,SAAAkB,EAAU,GAAGC,CAAQ,CAAC,CACzF,EACKuB,EAAQnC,EAAK,OAAO,CAAE,SAAAW,EAAU,GAAGC,CAAQ,CAAC,EAC5CuB,CACR,EAEMK,EAAgB,CAACC,EAAOvB,IACduB,EAAM,OAAO,CAACC,EAAO1C,IAC5B0C,EAAM,OAAON,EAAWpC,CAAI,GAAK,CAAC,EAAGgB,EAAY,IAAIhB,CAAI,GAAK,CAAC,CAAC,EACrEgB,EAAY,IAAI,GAAGE,CAAI,QAAQ,GAAK,CAAC,CAAC,EAC3B,QAAQF,EAAY,IAAI,GAAGE,CAAI,OAAO,GAAK,CAAC,GAAG,QAAQ,CAAC,EAInEyB,EAAa,MAAM,OAAO7B,CAAQ,EAChC8B,EAAgBD,IAChBA,EAAW,SAAQA,EAAa,CAAE,GAAGA,EAAY,OAAQ,KAAK,OAAO,EAAI,EAAE,OAAO7B,CAAQ,CAAE,GAC1F6B,GAER,QAAWlB,KAAMd,EAChB,GAAI,CAAC,MAAO,SAAU,QAAQ,EAAE,SAASc,EAAG,MAAM,EACjDD,EAAYC,CAAE,UACJA,EAAG,SAAW,OACxBM,EAAaN,CAAE,UACLA,EAAG,SAAW,MACxB,GAAIA,EAAG,OAAS,SAAU,CACzB,IAAMI,EAAYJ,EAAG,SAAS,EAAE,OAAOX,CAAQ,EAC/C6B,EAAa,KAAK,eAAeC,EAAaD,CAAU,EAAG,CAAE,OAAQd,CAAU,EAAGf,CAAQ,CAC3F,MAAOkB,EAAYP,CAAE,UACXA,EAAG,SAAW,SACxB,GAAKA,EAAG,KAGDQ,EAAeR,CAAE,MAHV,CACb,IAAMI,EAAYJ,EAAG,SAAS,EAAE,OAAOX,CAAQ,EAC/C6B,EAAa,KAAK,eAAeC,EAAaD,CAAU,EAAGd,EAAWf,CAAQ,CAC/E,SACUW,EAAG,SAAW,QACxBS,EAAcT,CAAE,MACV,OAAM,IAAI,MAAM,0BAA0BA,EAAG,MAAM,IAAIA,EAAG,IAAI,EAAE,EAExE,IAAMoB,EAAmBL,EAAc,KAAKjE,GAAU,QAAQ,EACxDuE,EAAuBN,EAAc,KAAKhE,GAAc,YAAY,EACpEuE,EAAkBP,EAAc,KAAK/D,GAAU,OAAO,EAC5D,MAAO,CAAE,GAAGkE,EAAY,QAASE,EAAkB,YAAaC,EAAsB,QAASC,CAAgB,CAChH,CAEA,YAAYnC,EAAU,CAAC,EAAG,CACzB,IAAMD,EAAWqC,GAAS,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EAClDC,EAAgB,KAAK,WAAW,EAClCA,EAAc,SAAS,MAAM,GAChCtC,EAAS,IAAI,SAAU,KAAOc,GAAOA,EAAG,SAAS,KAAK,MAAM,CAAC,CAAC,EAE3DwB,EAAc,SAAS,QAAQ,GAClCtC,EAAS,IAAI,MAAO,SAAWc,GAAOA,EAAG,SAAS,KAAK,QAAQ,EAAE,OAAO,CAAC,CAAC,EAE3E,QAAWzB,KAAQ,KAAKtB,GAAQ,CAC/B,IAAMwC,EAAOlB,aAAgBhB,EAC1B,aAAgBgB,aAAgBf,GAAc,QAAU,SACrDiE,EAAQhC,IAAS,UAAYlB,EAAK,KACpCmD,EAAiBC,GAAYpD,EAAK,WAAW,EAAGA,EAAK,cAAc,CAAC,EACxE,GAAIA,EAAK,OAAO,IAAM,MACrBW,EAAS,IAAI,MAAOO,EAAMgC,EAAQzB,GAAO,CACxCA,EAAG,SAASzB,EAAK,OAAO,CAAE,YAAakB,IAAS,SAAU,KAAM,EAAM,CAAC,CAAC,EACpEA,IAAS,UAAYN,EAAQ,cAAca,EAAG,SAAS,eAAe,CAC3E,CAAC,UACSzB,EAAK,OAAO,IAAM,WAC5BW,EAAS,IAAI,OAAQO,EAAMgC,EAAQzB,GAAO,CACzCA,EAAG,UAAUzB,EAAK,KAAK,CAAC,EACpBY,EAAQ,aAAaa,EAAG,SAASb,EAAQ,WAAW,EACpDA,EAAQ,cAAca,EAAG,SAAS,WAAW,CAClD,CAAC,MACmB,CACpB,IAAM4B,EAAUrD,EAAK,YAAY,EAC7BkB,IAAS,UAAY,KAAK,OAAO,UAAY,SAAW,EAAEmC,EAAQ,SAAW,GAAKA,EAAQ,QAAQ,EAAE,CAAC,EAAE,OAAS,WACnH1C,EAAS,IAAI,SAAU,SAAWc,GAAOA,EAAG,SAASzB,EAAK,OAAOY,EAAS,CAAC,EAAInB,GAASA,EAAK,kBAAoB,EAAIA,EAAO,EAAK,CAAC,CAAC,EACzH4D,EAAQ,OAClB1C,EAAS,IAAI,QAASO,EAAMgC,EAAQzB,GAAO,CAAEA,EAAG,UAAUzB,EAAK,KAAK,CAAC,EAAGyB,EAAG,SAAS4B,CAAO,CAAG,CAAC,EACrFnC,IAAS,WAAaiC,EAAe,OAAS,GAAKA,EAAe,SAAW,GAAKA,EAAe,CAAC,IAAM,UAClHxC,EAAS,IAAI,OAAQO,EAAMgC,EAAQzB,GAAOA,EAAG,UAAUzB,EAAK,KAAK,CAAC,CAAC,EACnEW,EAAS,IAAI,MAAOO,EAAMgC,EAAQzB,GAAOA,EAAG,SAASzB,EAAK,OAAO,CAAE,YAAa,EAAK,CAAC,CAAC,CAAC,EACxFmD,EAAiBA,EAAe,OAAOG,GAAKA,IAAM,MAAM,EAE1D,CAEIH,EAAe,SAAS,MAAM,GACjCxC,EAAS,IAAI,SAAUO,EAAMgC,EAAQzB,GAAO,CAAEA,EAAG,UAAUzB,EAAK,KAAK,CAAC,EAAGyB,EAAG,SAASzB,EAAK,MAAM,CAAC,CAAG,CAAC,CAEvG,CACA,OAAOW,CACR,CAEA,aAAa4C,EAAO3C,EAAS,CAC5B,IAAM+B,EAAa,MAAM,aAAaY,EAAO3C,CAAO,EAE9C4C,EAAkB,IAAI,IACtB,CAACC,EAAcC,CAAY,EAAI,CAAC,IAAI,IAAK,IAAI,GAAG,EACtD,OAAW,CAAClE,EAAUO,EAAa4D,CAAS,GAAK,CAAC,CAAC,KAAMF,EAAcF,CAAK,EAAG,CAACA,EAAOG,EAAc,IAAI,CAAC,EACzG,QAAWjE,KAAQD,EAAS,YAAY,GAAM,EAAK,EAAG,CACrD,IAAIoE,EACJ,GAAI,CAACD,EAAU,WAAWlE,EAAK,KAAK,CAAC,GAAKA,EAAK,QAAQ,EAAE,SAAW,IAAMmE,EAAYpE,EAAS,OAAOC,EAAK,QAAQ,EAAE,CAAC,CAAC,GAAI,CAC1H,IAAMoE,EAAaL,EAAgB,IAAII,CAAS,GAAKA,EAAU,MAAM,EACrEC,EAAW,WAAWpE,EAAK,OAAOmB,CAAO,CAAC,EAC1C4C,EAAgB,IAAII,EAAWC,CAAU,CAC1C,MAAO9D,EAAY,IAAIN,EAAK,KAAK,EAAE,YAAY,EAAGA,CAAI,CACvD,CAED,IAAMqE,EAAc,KAAK,eAAe,KAAKvF,GAAUgF,EAAM,QAAQ,EAAG,CAACQ,EAAGC,KAAOR,EAAgB,IAAIO,CAAC,GAAKA,GAAG,aAAcP,EAAgB,IAAIQ,CAAC,GAAKA,EAAIpD,CAAO,EAAGA,CAAO,EACvKqD,EAAkB,KAAK,eAAeR,EAAcC,EAAc,CAACK,EAAGC,IAAMD,EAAE,aAAaC,EAAGpD,CAAO,EAAGA,CAAO,EAC/GsD,EAAc,KAAK,eAAe,KAAKzF,GAAU8E,EAAM,QAAQ,EAAG,CAACQ,EAAGC,IAAMD,EAAE,aAAaC,EAAGpD,CAAO,EAAGA,CAAO,EACrH,MAAO,CAAE,GAAG+B,EAAY,QAASmB,EAAa,YAAaG,EAAiB,QAASC,CAAY,CAClG,CAIA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAAC,MAAM,QAAQD,GAAM,OAAO,GAAK,CAAC,cAAe,SAAS,EAAE,KAAK1D,GAAOA,KAAO0D,GAAQ,CAAC,MAAM,QAAQA,EAAK1D,CAAG,CAAC,CAAC,GACpH,OAAO,MAAM,SAASyD,EAASC,EAAO5E,GAAa,CAClD,QAAWF,KAAO8E,EAAK,QAAS5E,EAAS,OAAOF,CAAG,EACnD,QAAWG,KAAS2E,EAAK,aAAe,CAAC,EAAI5E,EAAS,WAAWC,CAAI,EACrE,QAAWC,KAAQ0E,EAAK,SAAW,CAAC,EAAI5E,EAAS,MAAME,CAAG,EAC1D2E,IAAW7E,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOoB,EAAU,CAAC,EAAG0D,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAO1D,EAAS,CAC5B,QAAS,KAAKrC,GAAS,IAAIe,GAAOA,EAAI,OAAOsB,CAAO,CAAC,EACrD,YAAa,KAAKpC,GAAa,IAAIiB,GAAQA,EAAK,OAAOmB,CAAO,CAAC,EAAE,OAAOrB,GAAKA,CAAC,EAC9E,QAAS,KAAKd,GAAS,IAAIiB,GAAOA,EAAI,OAAOkB,CAAO,CAAC,EAAE,OAAOrB,GAAKA,CAAC,EACpE,GAAG+E,CACJ,CAAC,CACF,CAEA,OAAO,MAAMH,EAASI,EAAMC,EAAe,CAC1C,GAAM,CAACC,EAAUC,EAAU,GAAGC,CAAI,EAAIC,EAAM,MAAML,EAAM,CAAC,EAAG,CAAE,MAAO,CAAE,CAAC,EACxE,GAAI,CAACE,GAAY,CAACI,GAASH,GAAY,GAAI,IAAK,GAAG,EAAG,OACtD,IAAMlF,EAAW,IAAI,KAAK2E,CAAO,EAC3B,CAAChD,EAAM2D,CAAM,EAAI,KAAK,WAAWtF,EAAUiF,EAAS,KAAK,CAAC,EAAE,QAAQ,EAC1EjF,EAAS,KAAK2B,CAAI,EACd2D,GAAQtF,EAAS,OAAOsF,CAAM,EAClC,IAAMC,EAAOH,EAAM,MAAMI,EAAQN,EAAU,IAAK,GAAG,EAAG,CAAC,GAAG,CAAC,EAAE,IAAIO,GACzDT,EAAchF,EAAUyF,EAAI,KAAK,EAAG,CAAC,GAAG,KAAK,iBAAkBhG,GAAaF,CAAY,CAAC,CAChG,EACD,QAAWkG,KAAOF,EACbE,aAAelG,EAAcS,EAAS,OAAOyF,CAAG,EAC3CA,aAAehG,GAAaO,EAAS,MAAMyF,CAAG,EAClDzF,EAAS,WAAWyF,CAAG,EAE7B,OAAOzF,CACR,CAEA,WAAY,CACX,IAAMuF,EAAO,CAAC,KAAKxG,GAAS,IAAIe,GAAOA,EAAI,UAAU,CAAC,EAAE,KAAK;AAAA,EAAO,CAAC,EAC/DS,EAAc,KAAKvB,GAAa,MAAM,CAAC,EACvCyB,EAAU,KAAKxB,GAAS,MAAM,CAAC,EACrC,OAAI,KAAK,OAAO,UAAY,SAC3BsB,EAAY,KAAK,GAAG,KAAKxB,GAAS,OAAO,CAACwB,EAAaT,IAAQ,CAC9D,IAAM4F,EAAa5F,EAAI,WAAW,EAClC,OAAI4F,EAAmBnF,EAAY,OAAO5B,GAAqB,SAAS,KAAK,MAAM,EAAG,CAAE,GAAG+G,EAAW,OAAO,EAAG,QAAS,CAAC5F,EAAI,KAAK,CAAC,CAAE,CAAC,CAAC,EACjIS,CACR,EAAG,CAAC,CAAC,CAAC,EAEHA,EAAY,QAAUgF,EAAK,KAAKhF,EAAY,IAAIoF,GAAQA,EAAK,UAAU,CAAC,EAAE,KAAK;AAAA,EAAO,CAAC,EACvFlF,EAAQ,QAAU8E,EAAK,KAAK9E,EAAQ,IAAImF,GAAOA,EAAI,UAAU,CAAC,EAAE,KAAK;AAAA,EAAO,CAAC,EAC1E,GAAGC,EAAe,SAAS,KAAM,CAAC,KAAK,QAAQ,EAAI,EAAG,KAAK,MAAM,CAAC,CAAC,CAAC;AAAA,GAASN,EAAK,KAAK;AAAA,EAAO,CAAC;AAAA,EACvG,CACD,ECvZO,IAAMO,EAAN,cAA6BC,EAAqB,CAExDC,GACAC,GAAU,CAAC,EAEX,CAAC,OAAO,QAAQ,GAAI,CAAE,OAAO,KAAKA,GAAQ,OAAO,QAAQ,EAAE,CAAG,CAE9D,IAAI,QAAS,CAAE,OAAO,KAAKA,GAAQ,MAAQ,CAE3C,SAASC,EAAaC,EAAe,CACpC,MAAI,CAAC,iBAAiB,EAAE,SAASD,CAAW,EAAU,KAC/C,MAAM,SAASA,EAAaC,CAAa,CACjD,CAIA,SAAU,CAAE,OAAO,KAAKH,EAAU,CAElC,MAAMI,KAASC,EAAM,CACpB,GAAI,OAAOD,GAAS,SAAU,CAC7B,IAAME,EAAW,KAAKL,GAAQ,KAAMM,GAAQA,EAAI,aAAaH,CAAI,CAAC,EAClE,GAAI,CAACC,EAAK,OAAQ,OAAOC,EACzB,GAAID,EAAK,CAAC,IAAM,GACf,YAAKJ,GAAU,KAAKA,GAAQ,OAAQO,GAAMA,IAAMF,CAAQ,EACxDA,GAAU,OAAO,cAAc,EACxB,KAERF,EAAO,CAAE,KAAMA,EAAM,GAAI,OAAOC,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAE,QAASA,EAAK,CAAC,CAAE,CAAG,CACxF,CACA,YAAKJ,GAAU,KAAK,YAAY,CAACG,CAAI,EAAGK,GAAa,KAAKR,GAAS,SAAU,KAAOK,GAC5E,KAAKL,GAAQ,KAAMM,GAAQA,EAAI,aAAaD,EAAS,KAAK,CAAC,CAAC,CACnE,EACM,IACR,CAIA,OAAOI,EAAc,GAAM,CAC1B,OAAIA,EAAoB,KAAKT,GACtB,KAAKA,GAAQ,OAAO,CAACU,EAAMJ,IAAQI,EAAK,OAAOJ,EAAI,KAAK,CAAC,EAAG,CAAC,CAAC,CACtE,CAEA,QAAQG,EAAc,GAAM,CAC3B,OAAO,KAAKT,GAAQ,OAAO,CAACW,EAAML,IAC1BK,EAAK,OAAQF,EAAmEH,EAAI,QAAQ,EAAjEA,EAAI,QAAQ,EAAK,EAAE,IAAIM,GAAQ,CAACN,EAAI,KAAK,EAAGM,CAAI,CAAC,CAAiB,EAClG,CAAC,CAAC,CACN,CAEA,YAAYH,EAAc,GAAMI,EAAS,GAAM,CAC9C,OAAO,KAAKb,GAAQ,OAAO,CAACW,EAAML,IAC1BK,EAAK,OAAQF,EAAuEH,EAAI,WAAW,GAAMO,CAAM,EAApF,CAAC,CAACP,EAAI,KAAK,EAAGA,EAAI,YAAY,GAAOO,CAAM,CAAS,CAAC,CAAgC,EACrH,CAAC,CAAC,CACN,CAEA,YAAYJ,EAAc,GAAMI,EAAS,GAAM,CAC9C,OAAO,KAAKb,GAAQ,OAAO,CAACW,EAAML,IAC1BK,EAAK,OAAQF,EAA+EH,EAAI,YAAY,GAAMO,CAAM,EAA7FP,EAAI,YAAY,GAAOO,CAAM,EAAE,IAAIF,GAAQ,CAACL,EAAI,KAAK,EAAGK,CAAI,CAAC,CAAiC,EAC9H,CAAC,CAAC,CACN,CAEA,WAAWF,EAAc,GAAMI,EAAS,GAAM,CAC7C,OAAO,KAAKb,GAAQ,OAAO,CAACW,EAAML,IAC1BK,EAAK,OAAQF,EAA8EH,EAAI,WAAW,GAAMO,CAAM,EAA3FP,EAAI,WAAW,GAAOO,CAAM,EAAE,IAAIF,GAAQ,CAACL,EAAI,KAAK,EAAGK,CAAI,CAAC,CAAgC,EAC5H,CAAC,CAAC,CACN,CAEA,OAAOF,EAAc,GAAMI,EAAS,GAAM,CACzC,OAAO,KAAKb,GAAQ,OAAO,CAACW,EAAML,IAC1BK,EAAK,OAAQF,EAA0EH,EAAI,OAAO,GAAMO,CAAM,EAAnFP,EAAI,OAAO,GAAOO,CAAM,EAAE,IAAIC,GAAQ,CAACR,EAAI,KAAK,EAAGQ,CAAI,CAAC,CAA4B,EACpH,CAAC,CAAC,CACN,CAIA,WAAWD,EAAS,GAAO,CAC1B,IAAME,EAAa,MAAM,WAAWF,CAAM,EAC1C,OAAKA,EACEE,EAAW,OAAO,CAAC,QAAQ,EAAE,OAAQC,GACpC,KAAKA,CAAG,EAAE,EAAE,KAAKC,GAAQA,EAAK,WAAWJ,CAAM,EAAE,MAAM,CAC9D,CAAC,EAHkBE,CAIrB,CAEA,UAAUG,EAAaC,EAAS,CAC/B,GAAM,CAAE,QAAAC,EAAS,GAAGC,CAAS,EAAIF,EAC3BG,EAAmB,IAAI,IACvBC,EAAe,IAAI,IACnBC,EAAc,CAAC,EAGfC,EAAY,CAACb,EAAMc,EAAe,GAAMC,EAAgB,KAAS,CACtE,IAAMV,EAAO,KAAK,MAAML,CAAI,EAC5B,IAAK,CAACK,GAASM,EAAa,IAAIN,CAAI,GAAK,CAACM,EAAa,IAAIN,CAAI,IAAkBS,EAChF,MAAM,IAAI,MAAM,UAAU,KAAK,KAAK,CAAC,MAAMd,CAAI,mBAAmB,EAEnE,OAAIe,GAAiBJ,EAAa,IAAIN,CAAI,EAAU,CAACA,EAAMA,EAAK,YAAY,SAASA,EAAK,YAAY,MAAM,EAAGM,EAAa,IAAIN,CAAI,CAAC,CAAC,EAC/H,CAACA,CAAI,CACb,EACMW,EAAiBX,GAAS,CAC/B,IAAMY,EAAY,CAAE,GAAGR,EAAU,QAAS,CAACC,EAAiB,IAAIL,CAAI,GAAKG,CAAQ,EACjF,OAAKE,EAAiB,IAAIL,CAAI,GAAGK,EAAiB,IAAIL,CAAI,EACnDY,CACR,EAEMC,EAAkBC,GAAO,CAC9B,GAAIN,EAAUM,EAAG,SAAS,EAAE,KAAK,EAAG,GAAO,EAAK,EAAE,CAAC,EAAG,CACrD,GAAIA,EAAG,QAAQ,eAAe,EAAG,OACjC,MAAM,IAAI,MAAM,UAAUA,EAAG,SAAS,GAAG,KAAK,CAAC,kBAAkB,CAClE,CACA,IAAIC,EAAYD,EAAG,SAAS,EAAE,OAAOV,CAAQ,EACzCA,EAAS,OAAMW,EAAY,CAAE,GAAGA,EAAW,OAAQ,KAAM,GAC7DR,EAAY,KAAKQ,CAAS,CAC3B,EAEMC,EAAgBF,GAAO,CAC5B,GAAM,CAACG,EAASC,CAAQ,EAAIV,EAAUM,EAAG,UAAU,EAAE,KAAK,EAAG,CAACA,EAAG,QAAQ,WAAW,EAAG,CAAC,CAACV,EAAS,IAAI,EAClGa,GAASX,EAAa,IAAIW,EAAUb,EAAS,KAAmB,CAAE,IAAIc,GAAYD,GAAS,OAAOb,CAAQ,EAAG,OAAQ,UAAW,EAA5E,MAA6E,CACtI,EAEMe,EAAeL,GAAO,CAAE,EAExBM,EAAkBN,GAAO,CAC9B,GAAM,CAACG,EAASC,CAAQ,EAAIV,EAAUM,EAAG,UAAU,EAAE,KAAK,CAAC,EACrDC,EAAY,KAAK,gBAAgBG,GAAYD,GAAS,OAAON,EAAcM,CAAO,CAAC,EAAGH,EAAG,SAAS,EAAE,OAAOV,CAAQ,EAAGA,CAAQ,EACpIE,EAAa,IAAIW,EAASF,CAAS,CACpC,EAEMM,EAAiBP,GAAO,CAC7B,GAAM,CAACG,EAASC,CAAQ,EAAIV,EAAUM,EAAG,UAAU,EAAE,KAAK,CAAC,EACrDQ,GAASJ,GAAYD,GAAS,UAAUH,EAAG,SAAS,EAAGH,EAAcM,CAAO,CAAC,EACnFX,EAAa,IAAIW,EAASK,CAAK,CAChC,EAEMC,EAAcvB,GAAS,CAC5B,IAAIsB,EACEV,EAAYD,EAAcX,CAAI,EACpC,GAAIM,EAAa,IAAIN,CAAI,EAAG,CAE3B,GAAI,CAACM,EAAa,IAAIN,CAAI,EAAG,OACzBY,EAAU,QACbU,EAAQtB,EAAK,YAAY,SAAS,KAAK,MAAM,EAAGM,EAAa,IAAIN,CAAI,CAAC,EAAE,OAAOY,CAAS,EAClFU,EAAQhB,EAAa,IAAIN,CAAI,CACrC,MAAOsB,EAAQtB,EAAK,OAAOY,CAAS,EACpC,OAAOU,CACR,EAEME,EAAiBC,GACfA,EAAM,OAAO,CAACC,EAAO1B,IACpB0B,EAAM,OAAOH,EAAWvB,CAAI,GAAK,CAAC,CAAC,EACxC,CAAC,CAAC,EAAE,OAAOO,CAAW,EAItBoB,EAAa,MAAM,OAAOvB,CAAQ,EACtC,QAAWU,KAAMb,EAChB,GAAIa,EAAG,SAAW,SACjBD,EAAeC,CAAE,UACPA,EAAG,SAAW,OACxBE,EAAaF,CAAE,UACLA,EAAG,SAAW,MACxBK,EAAYL,CAAE,UACJA,EAAG,SAAW,SACxB,GAAKA,EAAG,KAGDM,EAAeN,CAAE,MAHV,CACb,IAAMC,EAAYD,EAAG,SAAS,EAAE,OAAOV,CAAQ,EAC/CuB,EAAa,KAAK,eAAeA,EAAYZ,EAAWX,CAAQ,CACjE,SACUU,EAAG,SAAW,QACxBO,EAAcP,CAAE,MACV,OAAM,IAAI,MAAM,0BAA0BA,EAAG,MAAM,IAAIA,EAAG,IAAI,EAAE,EAExE,MAAO,CAAE,GAAGa,EAAY,OAAQH,EAAc,KAAKzC,EAAO,CAAE,CAC7D,CAEA,YAAYmB,EAAU,CAAC,EAAG0B,EAAO,QAAqB,CACrD,IAAM3B,EAAc4B,GAAY,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EACxC,KAAK,WAAW,EACpB,SAAS,MAAM,GAChC5B,EAAY,IAAI,SAAU,KAAOa,GAAOA,EAAG,SAAS,KAAK,MAAM,CAAC,CAAC,EAElE,QAAWzB,KAAO,KAAKN,GACtB,GAAIM,EAAI,OAAO,IAAM,MACpBY,EAAY,IAAI,SAAU2B,EAAOd,GAAO,CACvCA,EAAG,SAAS,CAAE,OAAQ,KAAK,KAAK,EAAG,GAAGzB,EAAI,OAAO,CAAE,GAAGa,EAAS,KAAM,EAAM,CAAC,CAAE,CAAC,EAC3EA,EAAQ,cAAcY,EAAG,SAAS,eAAe,CACtD,CAAC,UACSzB,EAAI,OAAO,IAAM,WAC3BY,EAAY,IAAI,OAAQ2B,EAAOd,GAAO,CACrCA,EAAG,UAAU,CAAC,KAAK,KAAK,EAAGzB,EAAI,KAAK,CAAC,CAAC,EAClCa,EAAQ,aAAaY,EAAG,SAASZ,EAAQ,WAAW,EACpDA,EAAQ,cAAcY,EAAG,SAAS,WAAW,CAClD,CAAC,MACK,CACN,IAAMgB,EAASzC,EAAI,YAAYa,CAAO,EAClC4B,EAAO,QAAQ7B,EAAY,IAAI,QAAS2B,EAAOd,GAAO,CACzDA,EAAG,UAAU,CAAC,KAAK,KAAK,EAAGzB,EAAI,KAAK,CAAC,CAAC,EACtCyB,EAAG,SAASgB,CAAM,CACnB,CAAC,CACF,CAED,OAAO7B,CACR,CAEA,aAAa8B,EAAO7B,EAAS,CAC5B,IAAMyB,EAAa,MAAM,aAAaI,EAAO7B,CAAO,EAC9C8B,EAAa,KAAK,eAAe,KAAKjD,GAASgD,EAAM,OAAO,EAAG,CAACE,EAAGC,IAAMD,EAAE,aAAaC,EAAGhC,CAAO,EAAGA,CAAO,EAClH,MAAO,CAAE,GAAGyB,EAAY,OAAQK,CAAW,CAC5C,CAIA,WAAWrC,EAAM,CAAE,OAAO,KAAK,OAAO,EAAE,KAAKN,GAAOA,EAAI,OAAOM,CAAI,CAAC,GAAG,KAAK,CAAG,CAI/E,OAAO,SAASwC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,aAAaD,GAAQ,CAAC,IAAM,CAAC,MAAM,QAAQA,EAAK,MAAM,GAC3D,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClD,QAAWjD,KAAO+C,EAAK,QAAU,CAAC,EAAGE,EAAS,MAAMjD,CAAG,EACnD,OAAO+C,EAAK,SAAY,WAAUE,EAASxD,GAAWsD,EAAK,SAC/DC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOpC,EAAU,CAAC,EAAGqC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOrC,EAAS,CAC5B,GAAI,OAAO,KAAKpB,IAAa,SAAW,CAAE,QAAS,KAAKA,EAAS,EAAI,CAAC,EACtE,OAAQ,KAAKC,GAAQ,IAAIyD,GAASA,EAAM,OAAOtC,CAAO,CAAC,EACvD,GAAGqC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMJ,EAAStC,EAAM4C,EAAe,CAC1C,GAAM,CAAC9C,CAAI,EAAI,KAAK,WAAWwC,EAAStC,CAAI,EAC5C,GAAKF,EACL,OAAQ,IAAI,KAAKwC,CAAO,EAAG,KAAKxC,CAAI,CACrC,CAEA,WAAY,CAAE,OAAO,KAAK,eAAe,KAAK,MAAM,CAAC,CAAG,CACzD,EC9OO,IAAM+C,GAAN,cAAoCC,CAAa,CACpD,WAAW,WAAY,CAAE,MAAO,CAAC,CAAG,CACpC,WAAW,WAAY,CAAE,MAAO,CAAC,CAAG,CACpC,WAAW,WAAY,CAAE,MAAO,CAAC,CAAG,CAEpCC,GACAC,GACAC,GAEH,SAASC,EAAO,CACf,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKH,GACnC,GAAI,CAACI,GAAa,KAAK,YAAY,UAAWD,CAAK,EAAG,MAAM,IAAI,MAAM,qBAAsBA,CAAM,EAAE,EACpG,OAAQ,KAAKH,GAAYG,EAAO,IACjC,CAEA,SAASE,EAAKC,EAAK,CAClB,GAAI,CAAC,UAAU,OAAQ,MAAO,CAAC,KAAKL,GAAM,KAAKC,EAAI,EACnD,IAAMK,EAAW,KAAK,YAAY,UAAU,CAAC,EAC7C,OAAO,KAAK,IAAIF,CAAG,EAAE,IAAIC,CAAG,EAAE,SAASE,EAAUD,CAAQ,EAAIA,EAAS,SAAWA,CAAQ,CAC1F,CAEA,IAAIJ,EAAO,CACV,OAAK,UAAU,QACf,KAAKF,GAAO,KAAK,YAAY,CAACE,CAAK,EAAG,KAAK,YAAY,UAAW,KAAKF,GAAM,UAAU,EAChF,MAFuB,KAAKA,EAGpC,CAEA,IAAIE,EAAO,CACV,OAAK,UAAU,QACf,KAAKD,GAAO,KAAK,YAAY,CAACC,CAAK,EAAG,KAAK,YAAY,UAAW,KAAKD,GAAM,UAAU,EAChF,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASO,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACD,GAAM,UAAY,CAACN,GAAa,KAAK,UAAWM,EAAK,QAAQ,GAAK,CAACA,EAAK,KAAQ,QAASA,GAAQ,CAACA,EAAK,KAC5G,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,SAASF,EAAK,QAAQ,EAAE,IAAIA,EAAK,GAAG,EACzCA,EAAK,KAAKE,EAAS,IAAIF,EAAK,GAAG,EACnCC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,SAAU,KAAKb,GACf,IAAK,KAAKC,IAAM,OAAOY,CAAO,EAC9B,GAAI,KAAKX,GAAO,CAAE,IAAK,KAAKA,GAAK,OAAOW,CAAO,CAAE,EAAI,CAAC,EACtD,GAAGC,CACJ,CAAC,CACF,CAEA,WAAY,CAAE,MAAO,CAAC,KAAKb,GAAM,KAAKD,EAAS,EAAE,OAAO,KAAKE,IAAQ,CAAC,CAAC,EAAE,KAAK,GAAG,CAAG,CACrF,EAEME,GAAe,CAACW,EAAMC,IAAOD,EAAK,KAAKE,GAAOT,EAAUS,CAAE,EAAiBD,IAAOC,EAAG,UAAa,IAAI,OAAOA,EAAG,IAAI,EAAG,KAAK,IAAKD,CAAG,GAA+B,EAArGA,IAAOC,CAAgG,ECrDpK,IAAMC,GAAN,cAAwBC,EAAsB,CAEpD,WAAW,WAAY,CAAE,OAAOC,CAAO,CACvC,WAAW,WAAY,CAAE,OAAOA,CAAO,CACvC,WAAW,WAAY,CACtB,MAAO,CACN,CAAE,KAAM,QAAS,EACjB,CAAE,KAAM,iBAAkB,SAAU,kBAAgC,EACpE,CAAE,KAAM,+BAAgC,SAAU,WAAyB,EAC3E,CAAE,KAAM,iNAEO,CAChB,CACD,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,YAAa,CAACC,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,IAAK,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACtF,iBAAkB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC5F,gBAAiB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,IAAK,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC1F,yBAA0B,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACpG,iBAAkB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,IAAK,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC3F,4BAA6B,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACvG,IAAK,CAACF,EAASC,KAAQC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,MAAO,IAAAC,EAAK,IAAK,CAAE,IAAKC,CAAI,CAAE,CAAC,EACjG,IAAK,CAACF,EAASC,KAAQC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,MAAO,IAAAC,EAAK,IAAK,CAAE,IAAKC,CAAI,CAAE,CAAC,EACjG,GAAI,CAACF,EAASC,KAAQC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAK,CAAE,IAAKC,CAAI,CAAE,CAAC,EAC/F,MAAO,CAACF,EAASC,KAAQC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,SAAU,IAAAC,EAAK,IAAK,CAAE,IAAKC,CAAI,CAAE,CAAC,EACtG,OAAQ,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,SAAU,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACtF,UAAW,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,aAAc,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC7F,KAAM,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,OAAQ,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAClF,QAAS,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,WAAY,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACzF,UAAW,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,aAAc,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC7F,aAAc,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,iBAAkB,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACpG,QAAS,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,IAAK,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAClF,SAAU,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACpF,WAAY,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,KAAM,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACtF,YAAa,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,MAAO,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACxF,QAAS,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,UAAW,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACxF,WAAY,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,cAAe,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC/F,iBAAkB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,oBAAqB,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAC3G,oBAAqB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,wBAAyB,IAAAC,EAAK,IAAAC,CAAI,CAAC,EAClH,OAAQ,CAACF,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,UAAW,IAAAC,CAAI,CAAC,EAC7E,UAAW,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,cAAe,IAAAC,CAAI,CAAC,EACpF,OAAQ,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,UAAW,IAAAC,CAAI,CAAC,EAC7E,UAAW,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,cAAe,IAAAC,CAAI,CAAC,EACpF,QAAS,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,WAAY,IAAAC,CAAI,CAAC,EAC/E,WAAY,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,eAAgB,IAAAC,CAAI,CAAC,EACtF,SAAU,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,aAAc,IAAAC,CAAI,CAAC,EAClF,YAAa,CAACD,EAASC,IAAQ,KAAK,SAASD,EAAS,CAAE,SAAU,iBAAkB,IAAAC,CAAI,CAAC,EACzF,eAAgB,CAACD,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,mBAAoB,IAAAC,EAAK,IAAAC,CAAI,CAAC,EACxG,kBAAmB,CAACF,EAASC,EAAKC,IAAQ,KAAK,SAASF,EAAS,CAAE,SAAU,uBAAwB,IAAAC,EAAK,IAAAC,CAAI,CAAC,CAChH,CACD,CAEA,OAAO,MAAMF,EAASG,EAAMC,EAAe,CAC1C,GAAM,CAAE,OAAQ,CAACH,EAAKC,EAAM,EAAE,EAAG,QAAS,CAACG,CAAQ,CAAE,EAAIC,EAAM,IAAIH,EAAM,KAAK,UAAW,CAAE,SAAU,GAAI,CAAC,EAC1G,GAAI,CAACE,EAAU,OACf,IAAME,EAAY,IAAI,KAAKP,CAAO,EAAG,SAASK,EAAS,KAAK,EAAE,QAAQ,MAAO,GAAG,EAAE,YAAY,CAAC,EAC/F,OAAAE,EAAS,IAAIH,EAAcG,EAAUN,EAAI,KAAK,CAAC,CAAC,EAC5CC,EAAI,KAAK,GAAGK,EAAS,IAAIH,EAAcG,EAAUL,EAAI,KAAK,CAAC,CAAC,EACzDK,CACR,CACD,EC/DO,IAAMC,GAAN,cAA4BC,CAAa,CAE/CC,GACAC,GAEA,KAAKC,EAAM,CACV,OAAK,UAAU,QACf,KAAKF,GAAQ,KAAK,YAAY,CAACE,CAAI,EAAGC,EAAO,KAAKH,GAAO,eAAe,EACjE,MAFuB,KAAKA,EAGpC,CAEA,UAAUI,EAAO,CAChB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKH,GACnC,GAAI,CAAC,CAAC,MAAM,MAAM,EAAE,SAASG,EAAQA,EAAM,YAAY,CAAC,EAAG,MAAM,IAAI,MAAM,2BAA4BA,CAAM,EAAE,EAC/G,OAAQ,KAAKH,GAAaG,EAAO,IAClC,CAEA,MAAO,CAAE,OAAO,KAAK,UAAU,MAAM,CAAG,CAExC,KAAM,CAAE,OAAO,KAAK,UAAU,KAAK,CAAG,CAEtC,aAAaA,EAAO,CAAE,OAAO,KAAKJ,IAAO,aAAaI,CAAK,GAAK,MAAM,aAAaA,CAAK,CAAG,CAE3F,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,QAAO,KAAKD,GAAQ,CAAC,CAAC,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAQ,WAAW,EAAE,SAASA,CAAC,CAAC,EAAE,OAC1F,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAC9CH,EAAK,MAAMG,EAAS,KAAKH,EAAK,IAAI,EAClCA,EAAK,WAAWG,EAAS,UAAUH,EAAK,SAAS,EACrDC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKV,IAAO,OAAOU,CAAO,EAChC,GAAI,KAAKT,GAAa,CAAE,UAAW,KAAKA,EAAW,EAAI,CAAC,EACxD,GAAGU,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASH,EAAMU,EAAe,CAC1C,GAAM,CAAE,CAAEC,EAAOC,CAAK,EAAIZ,EAAK,MAAM,IAAI,OAAO,oCAAqC,GAAG,CAAC,GAAK,CAAC,EACzFO,EAAW,IAAI,KAAKJ,CAAO,EACjC,OAAAI,EAAS,KAAKG,EAAcH,EAAUI,EAAOV,CAAK,CAAC,EAC/CW,GAAML,EAAS,UAAUK,EAAK,YAAY,CAAC,EACxCL,CACR,CAEA,WAAY,CAAE,MAAO,CAAC,KAAKT,GAAM,UAAU,EAAG,KAAKC,EAAU,EAAE,OAAOc,GAAKA,CAAC,EAAE,KAAK,GAAG,CAAG,CAE1F,EClDO,IAAMC,EAAN,cAA4BC,CAAiB,CACnD,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAa,CAAG,CACtD,WAAW,OAAQ,CAAE,MAAO,aAAe,CAE3C,YAAa,CAAE,OAAO,KAAK,SAAS,aAAa,CAAG,CAEpD,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAaC,EAAaC,CAAW,EAAIJ,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,KAAM,oCAAqC,GAAG,CAAC,GAAK,CAAC,EACtI,GAAI,CAACE,EAAa,OAClB,IAAMG,EAAW,MAAM,MAAMN,EAASI,EAAaF,CAAa,EAChE,GAAKI,EACL,OAAID,GAAYC,EAAS,SAAS,aAAa,EACxCA,CACR,CAEA,WAAY,CAAE,OAAQ,KAAK,QAAQ,EAAE,OAAc,CAAC,WAAY,MAAM,UAAU,CAAC,EAAE,OAAO,KAAK,QAAQ,aAAa,EAAI,cAAgB,CAAC,CAAC,EAAE,KAAK,GAAG,EAAtG,EAAyG,CACxJ,EChBO,IAAMC,GAAN,cAA0BC,CAAa,CAC1C,WAAW,QAAS,CAAE,MAAO,OAAS,CAEtCC,GAEA,KAAKC,EAAM,CACP,OAAK,UAAU,QACf,KAAKD,GAAQ,KAAK,YAAY,CAACC,CAAI,EAAGC,EAAO,KAAKF,GAAO,YAAY,EAC9D,MAFuB,KAAKA,EAGvC,CAEH,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,QAAO,KAAKD,GAAQ,CAAC,CAAC,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,MAAM,EAAE,SAASA,CAAC,CAAC,EAAE,OAC7E,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAC9CH,EAAK,MAAMG,EAAS,KAAKH,EAAK,IAAI,EACtCC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKR,IAAO,OAAOQ,CAAO,EAChC,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASF,EAAMS,EAAe,CACpC,GAAM,CAAEC,EAAaC,CAAM,EAAIX,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,MAAO,eAAgB,GAAG,CAAC,GAAK,CAAC,EACtG,GAAI,CAACU,EAAa,OAClB,IAAMJ,EAAW,IAAI,KAAKJ,CAAO,EACjC,OAAAI,EAAS,KAAKG,EAAcH,EAAUK,EAAM,KAAK,EAAGV,CAAK,CAAC,EACnDK,CACR,CAEA,WAAY,CAAE,MAAO,GAAI,KAAK,YAAY,MAAO,IAAK,KAAKP,EAAM,EAAI,CACtE,EClCO,IAAMa,GAAN,cAAoCC,CAAiB,CAC3D,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,WAAY,CAAE,MAAO,CAAC,CAAG,CAEpCC,GAEA,SAASC,EAAO,CACf,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GACnC,GAAI,CAAC,KAAK,YAAY,UAAU,SAASC,CAAK,EAAG,MAAM,IAAI,MAAM,qBAAsBA,CAAM,GAAG,EAChG,OAAQ,KAAKD,GAAYC,EAAO,IACjC,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,KAAK,UAAU,SAASD,GAAM,QAAQ,EAC3C,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,SAASF,EAAK,QAAQ,EAC/BC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEG,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACpC,OAAO,MAAM,OAAOD,EAAS,CAC5B,SAAU,KAAKN,GACf,GAAGO,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASM,EAAMC,EAAe,CAC1C,GAAI,KAAK,OAAQ,CACP,GAAM,CAAEC,EAAaC,CAAK,EAAIH,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,MAAO,eAAgB,GAAG,CAAC,GAAK,CAAC,EAC/F,GAAI,CAACE,EAAa,OAClBF,EAAOG,CACX,CACN,QAAWC,KAAY,KAAK,UAAW,CACtC,IAAMC,EAASC,EAAM,MAAMN,EAAM,CAAE,QAAQ,KAAKI,CAAQ,EAAI,OAAQA,CAAS,OAASA,EAAS,MAAM,EAAE,EAAE,IAAIG,GAAa,KAAMA,CAAU,EAAE,EAAE,KAAK,EAAE,CAAE,EAAG,CAAE,SAAU,GAAI,CAAC,EAAE,OAAQC,GAAMA,EAAE,KAAK,CAAC,EACnM,GAAIH,EAAO,QAAU,KAAK,YAAc,GAAI,SAC5C,IAAMR,EAAY,IAAI,KAAKH,CAAO,EAAG,SAASU,CAAQ,EACtD,OAAOP,EAAS,IAAI,GAAGQ,EAAO,IAAII,GAASR,EAAcJ,EAAUY,EAAM,KAAK,CAAC,CAAC,CAAC,CAClF,CACD,CAEA,WAAY,CAEX,IAAIC,EAAM,KAAK,QAAQ,EAAE,KAAK,IAAK,KAAKlB,EAAU,GAAG,EACrD,GAAI,KAAK,YAAY,OAAQ,CAEnB,GAAI,CAAC,KAAK,QAAQ,EAAE,OAAQ,MAAO,GACnCkB,EAAM,GAAG,KAAK,YAAY,MAAM,IAAIA,CAAG,EAC3C,MAAW,KAAK,uBAAuB,KAAK,cAEjDA,EAAM,IAAKA,CAAI,KAEhB,OAAOA,CACR,CACD,ECxDO,IAAMC,GAAN,cAAwBC,EAAsB,CACjD,WAAW,WAAY,CAAE,MAAO,CAAC,MAAO,IAAI,CAAG,CAClD,WAAW,QAAS,CAAC,CAElB,SAASC,EAAM,CAAE,OAAO,KAAK,SAAS,KAAK,EAAE,IAAI,GAAGA,CAAI,CAAG,CAE3D,QAAQA,EAAM,CAAE,OAAO,KAAK,SAAS,IAAI,EAAE,IAAI,GAAGA,CAAI,CAAG,CAE5D,WAAW,QAAS,CACnB,MAAO,CACG,MAAO,CAACC,KAAYC,IAAYA,EAAQ,OAAS,GAAuD,KAAK,SAASD,EAAS,CAAE,SAAU,MAAO,QAAAC,CAAQ,CAAC,EACjK,KAAM,CAACD,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,SAAU,KAAM,QAAAC,CAAQ,CAAC,CAC/E,CACJ,CAEJ,ECfO,IAAMC,EAAN,cAA0BC,EAAU,CACvC,WAAW,QAAS,CAAE,MAAO,OAAS,CACtC,WAAW,YAAa,CAAE,MAAO,EAAG,CACxC,ECDO,IAAMC,EAAN,cAAoBC,EAAsB,CAChD,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAeC,EAAQ,CAAG,CACjE,ECJO,IAAMC,GAAN,cAAuBC,EAAU,CACpC,WAAW,QAAS,CAAE,MAAO,IAAM,CACnC,WAAW,YAAa,CAAE,MAAO,EAAG,CACxC,ECAO,IAAMC,GAAN,cAAyBC,CAAM,CACrC,WAAW,OAAQ,CAAE,MAAO,yEAA2E,CAEvGC,GACAC,GACAC,GAEA,KAAKC,EAAO,CACX,OAAK,UAAU,QACP,KAAKH,GAAQG,EAAO,MADE,KAAKH,EAEpC,CAEA,QAAQI,EAAM,CACb,OAAOA,EAAK,OAAS,EAAI,MAAM,KAAKA,CAAI,EAAI,MAAM,KAAK,GAAGA,CAAI,CAC/D,CAEA,MAAMA,EAAM,CACX,OAAK,UAAU,QACf,KAAKF,GAAY,KAAK,YAAYE,EAAMC,GAAU,KAAKH,GAAW,YAAa,OAAO,EAC/E,MAFuB,KAAKA,EAGpC,CAEA,MAAMI,EAAa,CAClB,OAAK,UAAU,QACf,KAAKL,GAAe,KAAK,YAAY,CAACK,CAAW,EAAGC,EAAY,KAAKN,GAAc,cAAc,EAC1F,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASO,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACD,GAAM,MAAQ,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAQ,OAAQ,QAAS,cAAe,WAAY,SAAS,EAAE,SAASA,CAAC,CAAC,EAAE,QAC7I,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAClDA,EAAS,KAAKH,EAAK,IAAI,EACnBA,EAAK,aAAaG,EAAS,MAAMH,EAAK,WAAW,EACjDA,EAAK,UAAUG,EAAS,GAAGH,EAAK,QAAQ,EAC5CC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKb,GACX,GAAI,KAAKC,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAOY,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAI,KAAKX,GAAY,CAAE,SAAU,KAAKA,GAAU,OAAOW,CAAO,CAAE,EAAI,CAAC,EACrE,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASO,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAWC,EAAMC,CAAS,EAAIJ,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,KAAM,eAAgB,GAAG,CAAC,GAAK,CAAC,EACtG,GAAI,CAACE,EAAW,OAChB,GAAM,CAAEG,EAAQC,CAAa,EAAIC,EAAM,MAAMH,EAAU,CAAC,sBAAsB,EAAG,CAAE,SAAS,IAAK,eAAgB,EAAK,CAAC,EAAE,IAAII,GAAKA,EAAE,KAAK,CAAC,EACpIX,EAAW,MAAM,MAAMJ,EAASY,EAAQJ,CAAa,EAC3D,OAAAJ,EAAS,KAAKM,EAAK,KAAK,EAAE,YAAY,EAAI,OAAO,EAC7C,UAAU,KAAKG,CAAY,EAC9BT,EAAS,MAAMI,EAAcJ,EAAUS,EAAa,QAAQ,aAAc,EAAE,EAAG,CAACd,CAAU,CAAC,CAAC,EAClF,OAAO,KAAKc,CAAY,GAClCT,EAAS,GAAGI,EAAcJ,EAAUS,EAAc,CAAChB,EAAQ,CAAC,CAAC,EAEvDO,CACR,CAEA,WAAY,CACX,MAAO,CACN,KAAKZ,IAAO,QAAQ,IAAK,GAAG,EAAE,YAAY,GAAK,OAC/C,MAAM,UAAU,EACX,KAAKC,GAAe,SAAU,KAAKA,EAAa,GAAK,GAAI,KAAKC,EAAU,EAC9E,EAAE,OAAOqB,GAAKA,CAAC,EAAE,KAAK,GAAG,CAC1B,CACD,EClEO,IAAMC,GAAN,cAA2BC,GAAcC,EAAqB,CAAE,CAEtE,IAAI,QAAS,CAAE,MAAO,EAAM,CAE5B,KAAKC,EAAiB,GAAO,CAC5B,IAAMC,EAAe,KAAK,OAAO,EAC7BC,EAAcC,EAClB,GAAI,KAAK,IAAI,YAAaC,GAAc,CACvC,IAAMC,EAAc,KAAK,IAAI,EAAE,SAAS,EAClCC,EAAQD,EAAY,OAAO,EAAE,WAAW,EAC9C,GAAI,CAACC,EAAO,MAAM,IAAI,MAAM,IAAI,IAAI,aAAaD,EAAY,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAC,wBAAwB,EACpH,IAAME,EAAmBD,EAAM,YAAY,EACrCE,EAAc,KAAK,QAAQ,iBAAiB,EAClD,QAAWC,KAAQD,EAAqB,QAAQ,EAC/C,GAAKC,EAAK,WAAW,GACjBA,EAAK,OAAO,EAAI,EAAE,aAAaF,CAAgB,EAAG,CACrD,IAAMG,EAAgBC,EAAU,SAAS,KAAM,CAACF,EAAK,YAAY,KAAK,EAAGA,EAAK,KAAK,CAAC,CAAC,EACrF,GAAIP,EAAc,MAAM,IAAI,MAAM,IAAI,IAAI,yCAAyCG,EAAY,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAC,yBAAyBH,CAAY,OAAOQ,CAAa,IAAI,EAC3LR,EAAeQ,CAChB,CAED,GAAI,CAACR,EAAc,MAAM,IAAI,MAAM,QAAQ,IAAI,4CAA4C,EAC3F,IAAMU,EAAS,KAAK,IAAI,EAAE,IAAI,EAC9BT,EAAeS,aAAkBC,GAC9BD,EAAO,MAAM,CAAE,QAAS,EAAK,CAAC,EAC9BA,EAAO,MAAM,CAAE,eAAAZ,CAAe,CAAC,CACnC,MACCE,EAAe,KAAK,IAAI,EAAE,MAAM,CAAE,eAAAF,CAAe,CAAC,EAClDG,EAAeQ,EAAU,SAAS,KAAM,CAACV,EAAa,KAAK,EAAGA,EAAa,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAEtG,IAAMa,EAAmBC,EAAe,SAAS,KAAM,CAACd,EAAa,OAAO,EAAI,EAAE,KAAK,EAAGA,EAAa,KAAK,CAAC,CAAC,EAC9G,MAAO,CAAEC,EAAcY,EAAkBX,CAAa,CACvD,CAEG,OAAOa,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC9B,MAAI,CAACD,EAAQ,SAAW,CAAC,KAAK,cAAsB,MAAM,OAAOA,EAASC,CAAM,EAC/E,KAAK,cAAc,YAAY,KAAMD,CAAO,CACjD,CACJ,ECxCO,IAAME,GAAN,MAAMC,UAAiBC,EAAa,CAC1C,WAAW,WAAY,CAAE,MAAO,CAAC,IAAI,CAAG,CACxC,WAAW,WAAY,CAAE,MAAO,CAACD,EAASE,CAAS,CAAG,CACnD,WAAW,WAAY,CAAE,MAAO,CAACA,CAAS,CAAG,CAChD,WAAW,aAAc,CAAE,MAAO,CAACC,CAAS,CAAG,CAE/C,SAASC,EAAaC,EAAe,CACpC,GAAID,IAAgB,eAAgB,CACnC,GAAIC,IAAkB,KAAK,IAAI,EAAG,OAAO,KAAK,OAAO,EACrD,GAAIA,IAAkB,KAAK,IAAI,GAAK,KAAK,uBAAuBL,EAE/D,OAAO,KAAK,YAAY,OAAO,CAEjC,CACA,OAAO,MAAM,SAASI,EAAaC,CAAa,CACjD,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,KAAM,CAACC,EAASC,EAAKC,EAAUC,IAAQ,KAAK,SAASH,EAAS,CAAE,IAAAC,EAAK,SAAAC,EAAU,IAAAC,CAAI,CAAC,EACpF,MAAO,CAACH,EAASC,EAAKE,IAAQ,KAAK,SAASH,EAAS,CAAE,IAAAC,EAAK,SAAU,KAAM,IAAAE,CAAI,CAAC,CAClF,CACD,CAEA,QAAS,CACR,IAAMC,EAAK,KAAK,IAAI,EAAE,OAAO,EAAE,WAAW,EAC1C,GAAI,CAACA,EAAI,MAAM,IAAI,MAAM,IAAK,IAAK,aAAc,KAAK,IAAI,EAAE,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAE,wBAAwB,EACpH,OAAOA,EAAG,YAAY,EAAwB,OAAO,CACtD,CAEA,UAAW,CAAE,OAAO,KAAK,IAAI,YAAaV,EAAW,KAAK,IAAI,EAAE,SAAS,EAAI,KAAK,IAAI,CAAG,CAEtF,OAAOW,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC9B,OAAKD,EAAQ,QACN,CACH,SAAUR,EAAU,UACpB,IAAK,KAAK,IAAI,GAAG,OAAOQ,CAAO,EAC/B,IAAK,KAAK,IAAI,GAAG,OAAOA,CAAO,EAC/B,SAAU,IACd,EAN6B,MAAM,OAAOA,EAASC,CAAM,CAO7D,CAEH,OAAO,MAAMN,EAASO,EAAMC,EAAe,CAC1C,IAAMC,EAASC,EAAM,MAAMH,EAAM,KAAK,UAAW,CAAE,SAAU,EAAK,CAAC,EACnE,GAAIE,EAAO,OAAS,EAAG,OACvB,IAAMP,EAAW,KAAK,UAAU,CAAC,EAC3BS,EAAY,IAAI,KAAKX,CAAO,EAAG,SAASE,CAAQ,EACtD,OAAAS,EAAS,IAAIH,EAAcG,EAAUF,EAAO,IAAI,EAAgB,KAAK,EAAG,KAAK,SAAS,CAAC,EAChFE,EAAS,IAAIH,EAAcG,EAAUF,EAAO,KAAKP,CAAQ,EAAE,KAAK,EAAG,KAAK,SAAS,CAAC,CAC1F,CACD,ECpDO,IAAMU,GAAN,cAA2BC,EAAS,CACvC,WAAW,WAAY,CAAE,MAAO,CAACC,CAAc,CAAG,CAErD,SAASC,EAAaC,EAAe,CACpC,OAAID,IAAgB,eAAuB,KAAK,IAAI,EAAE,OAAO,EACtD,MAAM,SAASA,EAAaC,CAAa,CACjD,CAEA,QAAS,CAAE,OAAO,KAAK,IAAI,EAAE,OAAO,CAAG,CACxC,ECTO,IAAMC,GAAN,cAAuBC,EAAsB,CAChD,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,2BAA4B,CAAE,MAAO,EAAM,CAC1D,ECFO,IAAMC,GAAN,cAAkBC,CAAa,CAErCC,GAAS,GACTC,GAAS,IAET,MAAMC,EAAO,CACZ,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,SAAU,MAAM,IAAI,MAAM,+BAAgCA,CAAM,EAAE,EACvF,OAAQ,KAAKF,GAASE,EAAO,IAC9B,CAEA,MAAMA,EAAQ,KAAKD,GAAQ,CAC1B,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKA,GACnC,GAAI,CAAC,CAAC,IAAK,GAAG,EAAE,SAASC,CAAK,EAAG,MAAM,IAAI,MAAM,8BAA+BA,CAAM,EAAE,EACxF,OAAQ,KAAKD,GAASC,EAAO,IAC9B,CAEA,aAAaA,EAAO,CACnB,OAAI,OAAOA,GAAU,SAAiB,KAAK,IAAI,KAAKF,GAAQE,EAAO,IAAI,EAChE,MAAM,aAAaA,CAAK,CAChC,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,aAAc,CAACC,EAASD,EAAOE,IAAU,KAAK,SAASD,EAAS,CAAE,MAAAD,EAAO,MAAAE,CAAM,CAAC,EAChF,MAAO,CAACD,EAASD,IAAU,OAAOA,GAAU,UAAY,KAAK,SAASC,EAAS,CAAE,MAAAD,CAAM,CAAC,CACzF,CACD,CAEA,OAAO,SAASC,EAASE,EAAMC,EAAW,KAAM,CAE/C,GADI,OAAOD,GAAS,UAAY,CAACA,EAAK,KAAK,IAAGA,EAAO,CAAE,MAAOA,CAAK,GAC/D,SAAOA,GAAM,OAAU,UAAY,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,QAAS,OAAO,EAAE,SAASA,CAAC,CAAC,EAAE,QAAWF,EAAK,OAAS,CAAC,CAAC,IAAK,GAAG,EAAE,SAASA,EAAK,KAAK,GAC5K,OAAO,MAAM,SAASF,EAASE,EAAOG,GAAa,CAClDA,EAAS,MAAMH,EAAK,KAAK,EAAE,MAAMA,EAAK,KAAK,EAC3CC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKR,GACZ,MAAO,KAAKD,GACZ,GAAGU,CACJ,CAAC,CACC,CAEH,OAAO,MAAMP,EAASQ,EAAM,CAC3B,GAAM,CAACC,EAAMR,CAAK,EAAI,KAAK,YAAYD,EAASQ,EAAM,EAAI,GAAK,CAAC,EAChE,GAAIP,EAAO,OAAQ,IAAI,KAAKD,CAAO,EAAG,MAAMS,CAAI,EAAE,MAAMR,CAAK,CAC9D,CAEA,WAAY,CAAE,OAAO,KAAK,gBAAgB,KAAKJ,GAAQ,EAAI,CAAG,CAC/D,ECpDO,IAAMa,GAAN,cAAiBC,CAAa,CAEpCC,GACAC,GAAQ,CAAC,EAET,KAAKC,EAAO,CACX,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,SAAU,MAAM,IAAI,UAAU,oCAAoC,EACvF,OAAQ,KAAKF,GAAQE,EAAO,IAC7B,CAEA,QAAQC,EAAM,CACb,OAAK,UAAU,QACf,KAAKF,GAAQ,KAAK,YAAYE,EAAMC,EAAO,KAAKH,GAAO,eAAe,EAC/D,MAFuB,KAAKA,EAGpC,CAEA,aAAaC,EAAO,CAAE,OAAOA,IAAU,KAAKF,IAAS,MAAM,aAAaE,CAAK,CAAG,CAEhF,WAAW,QAAS,CACnB,MAAO,CACN,IAAK,CAACG,KAAYF,IAAS,KAAK,SAASE,EAAS,CAAE,KAAM,MAAO,KAAAF,CAAK,CAAC,EACvE,OAAQ,CAACE,KAAYF,IAAS,KAAK,SAASE,EAAS,CAAE,KAAM,SAAU,KAAAF,CAAK,CAAC,EAC7E,MAAO,CAACE,KAAYF,IAAS,KAAK,SAASE,EAAS,CAAE,KAAM,QAAS,KAAAF,CAAK,CAAC,EAC3E,GAAI,CAACE,EAASC,KAASH,IAAS,KAAK,SAASE,EAAS,CAAE,KAAAC,EAAM,KAAAH,CAAK,CAAC,CACtE,CACD,CAEA,OAAO,SAASE,EAASE,EAAMC,EAAW,KAAM,CAC/C,GAAI,SAAOD,GAAM,MAAS,UAAY,CAAC,MAAM,QAAQA,EAAK,IAAI,GAC9D,OAAO,MAAM,SAASF,EAASE,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,IAAI,EACvB,QAAWG,KAAOH,EAAK,KAAME,EAAS,KAAKC,CAAG,EAC9CF,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOE,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKX,GACX,KAAM,KAAKC,GAAM,IAAIY,GAAKA,EAAE,OAAOF,CAAO,CAAC,EAC3C,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMP,EAASS,EAAMC,EAAe,CAC1C,GAAM,CAAE,CAAET,EAAMH,EAAO,EAAG,EAAI,iCAAiC,KAAKW,CAAI,GAAK,CAAC,EAC9E,GAAI,CAACR,GAAQU,EAAM,MAAMF,EAAK,QAAQR,EAAM,EAAE,EAAE,KAAK,EAAG,CAAC,GAAG,CAAC,EAAE,OAAQ,OACvE,IAAMG,EAAY,IAAI,KAAKJ,CAAO,EAAG,KAAKC,CAAI,EACxCW,EAAQD,EAAM,MAAMb,EAAM,CAAC,GAAG,CAAC,EAAE,IAAIO,GAAOK,EAAcN,EAAUC,EAAI,KAAK,CAAC,CAAC,EACrF,QAAWA,KAAOO,EAAOR,EAAS,KAAKC,CAAG,EAC1C,OAAOD,CACR,CAEA,WAAY,CAAE,MAAO,GAAI,KAAKT,GAAM,YAAY,CAAE,IAAK,KAAKC,GAAM,KAAK,IAAI,CAAE,GAAK,CACnF,ECrDO,IAAMiB,GAAN,cAA6BC,GAAcC,CAAgB,CAAE,CAChE,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAQ,CAAG,CACjD,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAC1C,WAAW,aAAc,CAAE,MAAO,CAACC,EAAE,CAAG,CAExC,WAAW,QAAS,CACnB,MAAO,CACN,OAAQ,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACpE,CACD,CAEG,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAGC,EAAU,KAAM,CAC9C,OAAKF,EAAQ,QACN,CACH,SAAUH,GAAG,UACb,KAAM,KAAK,OAAO,UAAY,QAAU,cAAgB,oBACxD,KAAM,KAAK,QAAQ,EAAE,OAAO,CAACM,EAAMC,IAAa,CAC5C,IAAMC,EAAM,CAAE,SAAUC,GAAI,UAAW,MAAOF,EAAS,MAAM,EAAI,CAAE,EAC7DG,EAAQH,EAAS,KAAK,EAAE,OAAOJ,CAAO,EAC5C,OAAOG,EAAK,OAAOE,EAAKE,CAAK,CACjC,EAAG,CAAC,CAAC,CACT,EAT6B,MAAM,OAAOP,EAASC,EAAQC,CAAO,CAUtE,CACJ,ECxBO,IAAMM,GAAN,cAA4BC,GAAcC,CAAgB,CAAE,CAC/D,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAC1C,WAAW,aAAc,CAAE,MAAO,CAACC,EAAE,CAAG,CAExC,WAAW,QAAS,CACnB,MAAO,CACN,MAAO,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACnE,CACD,CAEG,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAGC,EAAU,KAAM,CAC9C,OAAKF,EAAQ,QACN,CACH,SAAUH,GAAG,UACb,KAAM,KAAK,OAAO,UAAY,QAAU,aAAe,mBACvD,KAAM,KAAK,QAAQ,EAAE,IAAIM,GAAKA,EAAE,OAAOH,CAAO,CAAC,EAC/C,cAAe,KAAK,UAAU,CAClC,EAN6B,MAAM,OAAOA,EAASC,EAAQC,CAAO,CAOtE,CACJ,ECrBO,IAAME,EAAN,cAA0BC,CAAiB,CAC9C,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAWC,CAAS,CAAG,CAC7D,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAE1C,WAAW,QAAS,CACnB,MAAO,CACN,QAAS,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACrE,CACD,CAED,ECXO,IAAMC,EAAN,cAAsBC,CAAiB,CAC1C,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,aAAc,CAAE,MAAO,EAAG,CACrC,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAE1C,WAAW,QAAS,CACnB,MAAO,CACN,IAAK,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACjE,CACD,CACD,ECVO,IAAMC,GAAN,cAAgCC,CAAiB,CACvD,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,OAAQ,CAAE,MAAO,iBAAmB,CAE/C,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAaC,CAAY,EAAIH,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,KAAM,eAAgB,GAAG,CAAC,GAAK,CAAC,EACrG,GAAKE,EACL,OAAO,MAAM,MAAMH,EAASI,EAAaF,CAAa,CACvD,CAEA,WAAY,CAAE,OAAQ,KAAK,QAAQ,EAAE,OAAc,CAAC,eAAgB,MAAM,UAAU,CAAC,EAAE,KAAK,GAAG,EAAjD,EAAoD,CACnG,ECRO,IAAMG,GAAN,cAAqBC,CAAa,CAExCC,GACAC,GACAC,GACAC,GAEA,KAAKC,EAAO,CACX,OAAK,UAAU,QACP,KAAKJ,GAAQI,EAAO,MADE,KAAKJ,EAEpC,CAEA,SAASI,EAAO,CACf,OAAK,UAAU,QACP,KAAKH,GAAaG,EAAO,MADH,KAAKH,EAEpC,CAEA,QAAQG,EAAO,CAAE,OAAO,KAAK,SAAS,GAAG,SAAS,CAAG,CAErD,eAAeC,EAAM,CACpB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKH,GACnC,GAAI,KAAKD,GAAY,MAAM,IAAI,MAAM,4EAA4E,EACjH,YAAKC,GAAqB,KAAK,YAAYG,EAAMC,GAAmB,KAAKJ,GAAoB,sBAAuB,KAAK,EAClH,IACR,CAEA,WAAWG,EAAM,CAChB,OAAK,UAAU,QACf,KAAKF,GAAiB,KAAK,YAAYE,EAAME,EAAe,KAAKJ,GAAgB,kBAAmB,KAAK,EAClG,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASK,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,OAAOD,GAAS,SAAUA,EAAO,CAAE,UAAWA,CAAK,UAC9C,EAAE,OAAOA,GAAS,UAAYA,IAAS,CAAC,CAAC,OAAQ,YAAa,oBAAqB,eAAe,EAAE,KAAKE,GAAKA,KAAKF,CAAI,EAAG,OACnI,GAAI,QAAO,KAAKA,GAAQ,CAAC,CAAC,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAQ,YAAa,oBAAqB,eAAe,EAAE,SAASA,CAAC,CAAC,EAAE,OAChI,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAC9CH,EAAK,MAAMG,EAAS,KAAKH,EAAK,IAAI,EAClCA,EAAK,WAAWG,EAAS,QAAQH,EAAK,SAAS,EAC/CA,EAAK,mBAAmBG,EAAS,YAAYH,EAAK,iBAAiB,EACnEA,EAAK,eAAeG,EAAS,QAAQH,EAAK,aAAa,EAC3DC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,GAAI,KAAKb,IAAS,CAAC,KAAKC,GAAa,CAAE,KAAM,KAAKD,EAAM,EAAI,CAAC,EAC7D,GAAI,KAAKC,IAAc,CAAC,KAAKD,GAAQ,CAAE,UAAW,KAAKC,EAAW,EAAI,CAAC,EACvE,GAAI,KAAKC,GAAqB,CAAE,kBAAmB,KAAKA,GAAmB,OAAOW,CAAO,CAAE,EAAI,CAAC,EAChG,GAAI,KAAKV,GAAiB,CAAE,cAAe,KAAKA,GAAe,OAAOU,CAAO,CAAE,EAAI,CAAC,EACpF,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASO,EAAMC,EAAe,CAC1C,IAAMJ,EAAW,IAAI,KAAKJ,CAAO,EAC3BS,EAAiB,MAAOC,GAAc,CAC3C,GAAM,CAAE,OAAQ,CAAEC,EAAY,GAAGC,CAAQ,EAAG,QAASC,CAAY,EAAIC,EAAM,IAAIC,EAAQL,EAAU,KAAK,EAAG,IAAK,GAAG,EAAG,CAAC,kBAAmB,aAAa,EAAG,CAAE,SAAS,IAAK,eAAgB,EAAK,CAAC,EAC1LC,EAAW,KAAK,GAAGP,EAAS,QAAQO,EAAW,KAAK,CAAC,EACzD,QAAWK,KAAcH,EAAa,CAErC,GAAI,kBAAkB,KAAKG,CAAU,EAAG,CACvCZ,EAAS,YAAYI,EAAcJ,EAAUQ,EAAQ,MAAM,EAAE,KAAK,EAAG,CAACd,EAAiB,CAAC,CAAC,EACzF,QACD,CAEAM,EAAS,QAAQI,EAAcJ,EAAUQ,EAAQ,MAAM,EAAE,KAAK,EAAG,CAACb,CAAa,CAAC,CAAC,CAClF,CACD,EACMkB,EAAeV,EAAK,SAAS,GAAG,EAEtC,GADsBU,GAAgB,CAACV,EAAK,WAAW,GAAG,EACvC,CAGlB,GAAM,CAAEW,EAAMR,CAAU,EAAII,EAAM,MAAMP,EAAM,CAAC,MAAM,EAAG,CAAE,SAAU,GAAI,CAAC,EACzEH,EAAS,KAAKc,EAAK,KAAK,CAAC,EACzBT,EAAeC,CAAS,CACzB,MAAWO,EACVR,EAAeF,CAAI,EAGnBH,EAAS,SAASG,CAAI,EAEvB,OAAOH,CACR,CAEA,WAAY,CACX,IAAMe,EAAM,CAAC,EACb,MAAI,CAAC,KAAK3B,IAAS,KAAKC,IAAc,CAAC,KAAKC,IAAsB,CAAC,KAAKC,GAEvEwB,EAAI,KAAK,KAAK1B,EAAU,GAIpB,KAAKD,IAAO2B,EAAI,KAAK,GAAI,KAAK3B,EAAM,MAAM,EAC9C2B,EAAI,KAAK,IAAK,CACb,KAAK1B,GACL,KAAKC,GACL,KAAKC,EACN,EAAE,OAAOyB,GAAKA,CAAC,EAAE,KAAK,GAAG,CAAE,GAAG,GAExBD,EAAI,KAAK,EAAE,CACnB,CACD,ECxGO,IAAME,GAAN,cAAmBC,EAAG,CAE5BC,GACAC,GAEA,KAAKC,EAAO,CACX,OAAK,UAAU,QAEVA,IAAOA,EAAQ,CAAE,KAAM,EAAG,GAC/B,KAAKF,GAAc,KAAK,YAAY,CAACE,CAAK,EAAGC,GAAQ,KAAKH,GAAa,aAAa,EAC7E,MAJuB,KAAKA,EAKpC,CAEA,WAAWI,EAAM,CAChB,OAAK,UAAU,QACf,KAAKH,GAAiB,KAAK,YAAYG,EAAMC,EAAe,KAAKJ,GAAgB,kBAAmB,KAAK,EAClG,MAFuB,KAAKA,EAGpC,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,GAAI,CAACK,EAASC,KAASH,IAAS,KAAK,MAAM,KAAK,EAAE,SAASG,GAAM,YAAY,CAAC,GAAK,KAAK,SAASD,EAAS,CAAE,KAAAC,EAAM,KAAAH,CAAK,CAAC,EACxH,GAAG,OAAO,YAAY,KAAK,MAAM,KAAK,EAAE,IAAII,GACpC,CAAEC,GAASD,EAAG,YAAY,EAAE,QAAQ,KAAM,GAAG,CAAC,EAAG,CAACF,KAAYF,IAAS,KAAK,SAASE,EAAS,CAAE,KAAME,EAAI,KAAAJ,CAAK,CAAC,CAAE,CACzH,CAAC,CACH,CACD,CAEA,OAAO,SAASE,EAASI,EAAMC,EAAW,KAAM,CAC/C,GAAK,KAAK,MAAM,KAAK,EAAE,SAASD,GAAM,MAAM,cAAc,CAAC,GACvD,QAAO,KAAKA,GAAQ,CAAC,CAAC,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAQ,OAAQ,gBAAiB,aAAc,QAAS,YAAY,EAAE,SAASA,CAAC,CAAC,EAAE,OAC3I,OAAO,MAAM,SAASN,EAASI,EAAOG,GAAa,CAC9CH,EAAK,eAAeG,EAAS,QAAQH,EAAK,aAAa,EACvDA,EAAK,YAAYG,EAAS,KAAKH,EAAK,UAAU,EAClDC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,GAAI,KAAKb,GAAiB,CAAE,cAAe,KAAKA,GAAe,OAAOa,CAAO,CAAE,EAAI,CAAC,EACpF,GAAI,KAAKd,GAAc,CAAE,WAAY,KAAKA,GAAY,OAAOc,CAAO,CAAE,EAAI,CAAC,EAC3E,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMT,EAASU,EAAMC,EAAe,CAE1C,GAAM,CAAEC,EAAMC,CAAW,EAAIC,EAAM,MAAMJ,EAAM,CAAC,UAAU,EAAG,CAAE,SAAU,GAAI,CAAC,EAAE,IAAIK,GAAKA,EAAE,KAAK,CAAC,EAE3F,CAAE,CAAEd,EAAMe,EAAUlB,EAAO,EAAG,EAAI,+DAA+D,KAAKc,CAAI,GAAK,CAAC,EACtH,GAAI,CAAC,KAAK,MAAM,KAAK,EAAE,SAASX,GAAM,YAAY,CAAC,EAAG,OAEtD,GAAM,CAAE,CAAEgB,EAAOC,CAAc,EAAI,uCAAuC,KAAKpB,CAAI,GAAK,CAAE,CAAEA,CAAK,EAC3FS,EAAW,MAAM,MAAMP,EAAS,GAAIC,CAAK,IAAKgB,CAAM,IAAKN,CAAa,EAC5E,OAAIK,GAAUT,EAAS,SAASS,EAAS,YAAY,CAAC,EAClDE,EAAeX,EAAS,QAAQI,EAAcJ,EAAUW,EAAe,CAACnB,CAAa,CAAC,CAAC,EAClFc,GAAYN,EAAS,KAAKI,EAAcJ,EAAUM,EAAW,KAAK,EAAG,CAAChB,EAAM,CAAC,CAAC,EAChFU,CACR,CAEA,WAAY,CAEX,MADY,GAAI,KAAK,KAAK,EAAE,YAAY,CAAE,IAAK,CAAC,GAAG,KAAK,QAAQ,EAAG,KAAK,KAAK,EAAE,KAAK,IAAI,EAAG,KAAKZ,EAAc,EAAE,OAAOoB,GAAKA,CAAC,EAAE,KAAK,GAAG,CAAE,KAC3H,KAAKrB,GAAc,SAAU,KAAKA,EAAY,GAAK,GAClE,CAEA,OAAO,MAAQ,CACd,CACC,MACA,UACA,SACA,UACA,QACA,WACA,gBACA,iBACA,MACA,MACA,aACA,SACA,MACA,cACA,MACA,UACA,WACA,WAEA,eACA,iBACD,EACA,CACC,YACA,aACA,cACA,MACA,aACA,OACA,YACA,OACA,eACA,OACA,YACD,EACA,CACC,YACA,SACA,UACA,UACD,CACD,CACD,EC7GO,IAAMyB,GAAN,cAAsBC,GAAcC,CAAY,CAAE,CACxD,WAAW,aAAc,CAAE,MAAO,CAACC,EAAI,CAAG,CACvC,WAAW,gBAAiB,CAAE,OAAOC,EAAM,IAAIC,GAAKA,IAAMC,EAAUC,EAAcF,CAAC,CAAI,CAEvFG,GAEA,KAAKC,EAAO,CACR,OAAK,UAAU,QACf,KAAKD,GAAQ,KAAK,YAAY,CAACC,CAAK,EAAG,KAAK,YAAY,eAAgB,KAAKD,GAAO,gBAAgB,EAC7F,MAFuB,KAAKA,EAGvC,CAEA,OAAO,SAASE,EAASC,EAAMC,EAAW,KAAM,CAClD,GAAKD,GAAM,KACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CACzCA,EAAS,KAAKF,EAAK,IAAI,EAChCC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CAC3B,OAAID,EAAQ,QACI,CACR,SAAUX,GAAK,UACf,KAAM,KAAK,OAAO,UAAY,QAAU,gBAAkB,WAC1D,KAAM,CAAE,KAAKK,IAAO,OAAOM,CAAO,CAAE,EACpC,WAAY,KAAK,UAAU,CAC/B,EAGH,MAAM,OAAOA,EAAS,CAC5B,KAAM,KAAKN,IAAO,OAAOM,CAAO,EAChC,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASM,EAAMC,EAAe,CACpC,IAAKD,EAAOA,EAAK,MAAM,cAAc,GAAG,SAAW,EAAG,OAC5D,IAAMH,EAAW,IAAI,KAAKH,CAAO,EAC3B,OAAOG,EAAS,KAAKI,EAAcJ,EAAUG,EAAK,MAAM,EAAE,KAAK,EAAG,KAAK,cAAc,CAAC,CAC7F,CAEA,WAAY,CAAE,MAAO,GAAI,KAAKR,EAAM,IAAM,CAC3C,EC9CO,IAAMU,GAAN,cAAuBC,CAAa,CAE1CC,GACAC,GACAC,GAAW,GAEX,MAAMC,EAAO,CACZ,OAAK,UAAU,QACf,KAAKH,GAAS,KAAK,YAAY,CAACG,CAAK,EAAGC,EAAO,KAAKJ,GAAQ,WAAW,EAChE,MAFuB,KAAKA,EAGpC,CAEA,KAAKG,EAAO,CACX,OAAK,UAAU,QACP,KAAKF,GAAQE,EAAO,MADE,KAAKF,EAEpC,CAEA,QAAQE,EAAQ,KAAKD,GAAU,CAC9B,OAAK,UAAU,QACP,KAAKA,GAAWC,EAAO,MADD,KAAKD,EAEpC,CAEA,WAAW,QAAS,CACnB,MAAO,CAAE,KAAM,CAACG,EAASF,EAAOG,EAAMC,IAAY,KAAK,SAASF,EAAS,CAAE,MAAAF,EAAO,KAAAG,EAAM,QAAAC,CAAQ,CAAC,CAAG,CACrG,CAEA,OAAO,SAASF,EAASG,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACD,GAAM,OAAS,CAACA,EAAK,MAAQ,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAQ,QAAS,SAAS,EAAE,SAASA,CAAC,CAAC,EAAE,QACzH,OAAO,MAAM,SAASL,EAASG,EAAOG,GAAa,CAClDA,EAAS,MAAMH,EAAK,KAAK,EAAE,KAAKA,EAAK,IAAI,EAAE,QAAQA,EAAK,OAAO,EAC/DC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKZ,IAAQ,OAAOY,CAAO,EAClC,KAAM,KAAKX,GACX,QAAS,KAAKC,GACd,GAAGW,CACJ,CAAC,CACC,CAEH,OAAO,MAAMR,EAASS,EAAMC,EAAe,CAC1C,IAAIZ,EAAOG,EAAMC,EAAU,GAC3B,GAAI,6BAA6B,KAAKO,CAAI,EAAG,CAC5C,GAAM,CAAE,CAAEE,CAAO,EAAIC,EAAM,MAAMH,EAAM,CAAC,CAAC,EACzC,CAACX,EAAOG,CAAI,EAAIW,EAAM,MAAMD,EAAO,MAAM,EAAG,EAAE,EAAG,CAAC,IAAI,EAAG,CAAE,SAAU,GAAI,CAAC,CAC3E,KAAO,CAGN,IAFKX,GAAS,QAAQ,cAAgBA,GAAS,QAAQ,WAAa,UACpE,CAACF,EAAOG,CAAI,EAAIW,EAAM,MAAMH,EAAM,CAAC,IAAI,CAAC,EACpC,CAACR,GAAM,OACXC,EAAU,EACX,CACA,IAAMI,EAAY,IAAI,KAAKN,CAAO,EAAG,KAAKC,EAAK,KAAK,CAAC,EAAE,QAAQC,CAAO,EACtE,OAAOI,EAAS,MAAMI,EAAcJ,EAAUR,EAAM,KAAK,CAAC,CAAC,CAC5D,CAEA,WAAY,CACX,OAAI,KAAKD,IAAY,KAAK,OAAO,UAAY,QAAgB,GAAI,KAAKF,EAAO,KAAM,KAAKC,EAAM,GACvF,QAAS,KAAKD,EAAO,OAAQ,KAAKC,EAAM,GAChD,CACD,EC7DO,IAAMiB,GAAN,cAAmBC,EAAI,CAE7B,WAAW,QAAS,CACnB,MAAO,CAAE,KAAM,CAACC,EAASC,IAAU,KAAK,SAASD,EAAS,CAAE,MAAO,MAAM,QAAQC,CAAK,GAAKC,EAAUD,CAAK,EAAI,KAAK,UAAUA,CAAK,EAAIA,CAAM,CAAC,CAAE,CAChJ,CAEA,OAAO,SAASD,EAASG,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACF,EAAUC,CAAI,GAAK,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAO,EAAE,SAASA,CAAC,CAAC,EAAE,QAC5F,IAAI,CAAE,OAAOF,GAAM,OAAU,UAAY,KAAK,MAAMA,EAAK,KAAK,CAAG,MAAW,CAAE,MAAQ,CACtF,OAAO,MAAM,SAASH,EAASG,EAAOG,GAAa,CAClDF,IAAWE,CAAQ,CACpB,CAAC,EACF,CAEA,OAAO,MAAMN,EAASO,EAAM,CAC3B,IAAMC,EAAS,CAAC,CAAC,IAAI,GAAG,EAAG,CAAC,IAAI,GAAG,CAAC,EAAGC,EAAI,CAAC,EACtC,CAACC,EAAMC,CAAK,EAAI,KAAK,YAAYX,EAASO,EAAM,EAAI,GAAK,CAAC,EAChE,GAAKI,GACD,IAAEF,EAAE,OAASD,EAAO,KAAKI,GAAKC,GAASN,EAAMK,EAAE,CAAC,EAAGA,EAAE,CAAC,CAAC,CAAC,IAAME,EAAM,MAAMP,EAAM,CAAC,GAAG,CAAC,EAAE,QAC3F,IAAI,CAAE,KAAK,MAAMG,CAAI,CAAG,MAAW,CAAE,MAAQ,CAC7C,OAAQ,IAAI,KAAKV,EAASW,CAAK,EAAG,MAAMD,CAAI,EAC7C,CACD,ECzBO,IAAMK,GAAN,cAAkBC,CAAa,CAErCC,GAEA,MAAMC,EAAO,CACZ,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKD,GACnC,GAAI,OAAOC,GAAU,SAAU,MAAM,IAAI,MAAM,cAAe,OAAOA,CAAM,aAAa,EACxF,OAAQ,KAAKD,GAASC,EAAO,IAC9B,CAEA,aAAaA,EAAO,CAAE,OAAOA,IAAU,KAAKD,IAAU,MAAM,aAAaC,CAAK,CAAG,CAEjF,WAAW,QAAS,CACnB,MAAO,CACN,gBAAiB,CAACC,EAASD,IAAU,KAAK,SAASC,EAAS,CAAE,MAAO,WAAWD,CAAK,CAAE,CAAC,EACxF,MAAO,CAACC,EAASD,IAAU,QAAQ,KAAKA,CAAK,GAAK,KAAK,SAASC,EAAS,CAAE,MAAO,WAAWD,CAAK,CAAE,CAAC,CACtG,CACD,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,OAAOD,GAAS,SACnBA,EAAO,CAAE,MAAOA,CAAK,UACX,OAAOA,GAAM,OAAU,UAAY,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAO,EAAE,SAASA,CAAC,CAAC,EAAE,OAAQ,OAC1H,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAClDA,EAAS,MAAMH,EAAK,KAAK,EACzBC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKP,GACZ,GAAGQ,CACJ,CAAC,CACC,CAEH,OAAO,MAAMN,EAASO,EAAM,CAC3B,GAAK,QAAQ,KAAKA,CAAI,EACtB,OAAQ,IAAI,KAAKP,CAAO,EAAG,MAAM,WAAWO,CAAI,CAAC,CAClD,CAEA,WAAY,CAAE,MAAO,GAAI,KAAKT,EAAO,EAAI,CAC1C,ECpCO,IAAMU,GAAN,cAAuBC,EAAsB,CACnD,WAAW,WAAY,CAAE,MAAO,CAAC,MAAO,KAAM,MAAO,IAAI,CAAG,CAC5D,WAAW,WAAY,CAAE,MAAO,CAACC,GAAKC,CAAS,CAAG,CAC/C,WAAW,WAAY,CAAE,MAAO,CAACC,GAASF,GAAKG,GAAIC,EAAG,CAAG,CAE5D,WAAW,QAAS,CACnB,MAAO,CAAE,KAAM,CAACC,EAASC,EAAKC,EAAUC,IAAQ,KAAK,SAASH,EAAS,CAAE,IAAAC,EAAK,SAAAC,EAAU,IAAAC,CAAI,CAAC,CAAG,CACjG,CAEA,OAAO,MAAMH,EAASI,EAAMC,EAAe,CAC1C,IAAKL,GAAS,QAAQ,cAAgBA,GAAS,QAAQ,WAAa,QAAS,OAC7E,GAAM,CAAE,OAAQ,CAACC,EAAKE,CAAG,EAAG,QAAS,CAACD,CAAQ,CAAE,EAAII,EAAM,IAAIF,EAAM,KAAK,UAAW,CAAE,MAAO,CAAE,CAAC,EAChG,GAAI,CAACH,GAAO,CAACC,GAAY,CAACC,EAAK,OAC/B,IAAMI,EAAY,IAAI,KAAKP,CAAO,EAAG,SAASE,CAAQ,EACtD,OAAAK,EAAS,IAAIF,EAAcE,EAAUN,EAAI,KAAK,EAAG,KAAK,SAAS,CAAC,EAChEM,EAAS,IAAIF,EAAcE,EAAUJ,EAAI,KAAK,EAAG,KAAK,SAAS,CAAC,EACzDI,CACR,CACD,EChBO,IAAMC,EAAN,MAAMC,UAAkBC,EAAa,CAC3C,WAAW,WAAY,CAAE,MAAO,CAAE,KAAM,CAAE,KAAM,iBAAkB,SAAU,GAAI,CAAE,CAAG,CACrF,WAAW,WAAY,CAAE,MAAO,CAACC,GAAaC,CAAS,CAAG,CACvD,WAAW,WAAY,CAAE,MAAO,CAAC,KAAKC,GAASC,GAAQC,GAAeC,GAAcC,EAAYL,CAAS,CAAG,CAC/G,WAAW,aAAc,CAAE,OAAO,KAAK,SAAW,CAElD,SAASM,EAAaC,EAAe,CACpC,GAAID,IAAgB,eAAgB,CACnC,GAAIC,IAAkB,KAAK,IAAI,EAAG,OAAO,KAAK,OAAO,EACrD,GAAIA,IAAkB,KAAK,IAAI,GAAK,KAAK,uBAAuBV,EAE/D,OAAO,KAAK,YAAY,OAAO,CAEjC,CACA,OAAO,MAAM,SAASS,EAAaC,CAAa,CACjD,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,KAAM,CAACC,EAASC,EAAKC,EAAUC,IAAQ,KAAK,SAASH,EAAS,CAAE,IAAAC,EAAK,SAAAC,EAAU,IAAAC,CAAI,CAAC,EACpF,MAAO,CAACH,EAASC,EAAKE,IAAQ,KAAK,SAASH,EAAS,CAAE,IAAAC,EAAK,SAAU,KAAM,IAAAE,CAAI,CAAC,CAClF,CACD,CAEA,QAAS,CACR,GAAI,KAAK,IAAI,YAAaZ,GAAc,OAAO,KAAK,IAAI,EAAE,OAAO,EACjE,IAAMa,EAAK,KAAK,IAAI,EAAE,OAAO,EAAE,WAAW,EAC1C,GAAI,CAACA,EAAI,MAAM,IAAI,MAAM,IAAK,IAAK,aAAc,KAAK,IAAI,EAAE,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAE,wBAAwB,EACpH,OAAOA,EAAG,YAAY,EAAwB,OAAO,CACtD,CAEA,UAAW,CAAE,OAAO,KAAK,IAAI,YAAaf,EAAY,KAAK,IAAI,EAAE,SAAS,EAAI,KAAK,IAAI,CAAG,CAE1F,YAAa,CAAE,OAAO,KAAK,MAAM,CAAE,WAAY,EAAK,CAAC,EAAE,UAAU,CAAG,CAEjE,OAAOgB,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACpC,OAAID,EAAQ,YAAc,CAACV,GAAeC,GAAcF,GAAQG,CAAW,EAAE,KAAKU,GAAK,KAAK,IAAI,YAAaA,CAAC,EACtG,KAAK,IAAI,EAAE,OAAO,CAAE,GAAGF,EAAS,WAAY,EAAM,EAAGC,CAAM,EAEtD,MAAM,OAAOD,CAAO,CAC/B,CAEH,OAAO,MAAML,EAASQ,EAAMC,EAAe,CAC1C,GAAM,CAAE,OAAQ,CAACR,EAAKE,CAAG,EAAG,QAAS,CAACD,CAAQ,CAAE,EAAIQ,EAAM,IAAIF,EAAM,KAAK,UAAW,CAAE,MAAO,EAAG,SAAU,EAAK,CAAC,EAChH,GAAI,CAACP,GAAO,CAACC,GAAY,CAACC,EAAK,OAC/B,IAAMQ,EAAY,IAAI,KAAKX,CAAO,EAAG,SAASE,CAAQ,EACtD,OAAAS,EAAS,IAAIF,EAAcE,EAAUV,EAAI,KAAK,EAAG,KAAK,SAAS,CAAC,EAChEU,EAAS,IAAIF,EAAcE,EAAUR,EAAI,KAAK,EAAG,KAAK,SAAS,CAAC,EACzDQ,CACR,CAEA,WAAY,CACX,MAAI,CAACjB,GAAQC,GAAeC,GAAcC,CAAW,EAAE,KAAMU,GAAM,KAAK,IAAI,YAAaA,CAAC,EAClF,GAAI,KAAK,IAAI,CAAE,KAAM,KAAK,IAAI,CAAE,GAEjC,MAAM,UAAU,CACxB,CACD,ECxDO,IAAMK,GAAyBC,GAAS,cAAcA,CAAM,CAElEC,GAAe,CAAC,EAChBC,GACAC,GACAC,GAEA,SAASC,EAAM,CACd,OAAK,UAAU,QACf,KAAKJ,GAAe,KAAK,YAAYI,EAAMC,GAAY,KAAKL,GAAc,aAAa,EAChF,MAFuB,KAAKA,EAGpC,CAEA,KAAKM,EAAO,CAAE,OAAO,KAAK,MAAMA,CAAK,CAAG,CAExC,UAAUA,EAAO,CAChB,YAAK,KAAKA,CAAK,EACP,KAAKN,GAAa,KAAKA,GAAa,OAAS,CAAC,EAAE,KAAK,YAAY,EAAG,IAC7E,CAEA,UAAUM,EAAO,CAChB,YAAK,KAAKA,CAAK,EACP,KAAKN,GAAa,KAAKA,GAAa,OAAS,CAAC,EAAE,KAAK,YAAY,EAAG,IAC7E,CAEA,SAASM,EAAO,CACf,YAAK,KAAKA,CAAK,EACP,KAAKN,GAAa,KAAKA,GAAa,OAAS,CAAC,EAAE,KAAK,WAAW,EAAG,IAC5E,CAEA,UAAUM,EAAO,CAChB,YAAK,KAAKA,CAAK,EACP,KAAKN,GAAa,KAAKA,GAAa,OAAS,CAAC,EAAE,KAAK,YAAY,EAAG,IAC7E,CAEA,SAASM,EAAO,CACf,YAAK,KAAKA,CAAK,EACP,KAAKN,GAAa,KAAKA,GAAa,OAAS,CAAC,EAAE,KAAK,WAAW,EAAG,IAC5E,CAEA,SAASI,EAAM,CACd,OAAK,UAAU,QACf,KAAKH,GAAe,KAAK,YAAYG,EAAMG,EAAa,KAAKN,GAAc,eAAgB,OAAO,EAC3F,MAFuB,KAAKA,EAGpC,CAEA,WAAWG,EAAM,CAChB,OAAK,UAAU,QACf,KAAKF,GAAiB,KAAK,YAAYE,EAAMI,EAAe,KAAKN,GAAgB,kBAAmB,KAAK,EAClG,KAAKA,IAFkB,KAAKA,EAGpC,CAEA,MAAMO,EAAO,CACZ,OAAK,UAAU,QACf,KAAKN,GAAe,KAAK,YAAY,CAACM,CAAK,EAAGC,GAAa,KAAKP,GAAc,eAAgB,OAAO,EAC9F,MAFuB,KAAKA,EAGpC,CAEA,OAAO,CAAE,gBAAAQ,EAAkB,EAAM,EAAI,CAAC,EAAG,CACxC,IAAMC,EAAWC,EAAe,SAAS,KAAM,CAAE,KAAM,GAAI,OAAQ,CAAC,CAAE,CAAC,EACjEC,EAAiB,CAAC,EACxB,GAAIH,EAAiB,CACpB,IAAMI,EAA2BJ,IAAoB,mBACrD,QAAWK,KAAS,KAAK,SAAS,GAAK,CAAC,EAAG,CAC1C,GAAIA,EAAM,KAAK,EAAE,OAAO,IAAM,IAAK,CAC9BD,GAA0BD,EAAe,KAAKE,EAAM,KAAK,EAAE,OAAO,GAAG,KAAK,CAAC,EAC/E,QACD,CACA,IAAMC,EAAcD,EAAM,OAAO,EACjC,GAAI,CAACC,EAAa,SAClB,IAAMC,EAAWD,EAAY,YAAY,KAAK,EAC9C,GAAI,CAACL,EAAS,MAAMM,CAAQ,EAAG,CAC9B,IAAMC,EAAiBF,EAAY,YAAY,OAAO,EACtDL,EAAS,MAAM,CAAE,GAAGO,EAAgB,QAAS,CAAC,CAAE,CAAC,CAClD,CACAP,EAAS,MAAMM,CAAQ,EAAE,OAAOD,EAAY,OAAO,CAAC,CACrD,CACA,GAAIF,GAA4B,CAACD,EAAe,OAAQ,OAAOF,CAChE,CACA,QAAWQ,IAAa,CAAC,GAAG,KAAK,OAAO,EAAG,GAAG,KAAK,MAAM,CAAC,EAAE,IAAIC,GAAOA,EAAI,OAAO,CAAC,EAAG,CACrF,IAAMH,EAAWE,EAAU,KAAK,EAChC,GAAIN,EAAe,QAAU,CAACA,EAAe,SAASI,CAAQ,GAAK,CAACJ,EAAe,SAAS,MAAS,EAAG,SACxG,IAAMK,EAAiBC,EAAU,OAAO,EACxC,GAAIR,EAAS,MAAMM,CAAQ,EAC1B,QAAWI,KAAkBH,EAAe,QAC3CP,EAAS,MAAMM,CAAQ,EAAE,OAAOI,CAAc,OAEzCV,EAAS,MAAMO,CAAc,CACrC,CACA,OAAOP,CACR,CAEAW,GAAsB,IAAI,IAC1B,SAASC,EAAaC,EAAe,CACpC,GAAID,IAAgB,eACpB,IAAIA,IAAgB,kBAAmB,CACtC,IAAMb,EAAkB,KAAK,QAAQ,GAAG,SAASc,CAAa,EAAI,EAAI,EACtE,OAAK,KAAKF,GAAoB,IAAIZ,CAAe,GAChD,KAAKY,GAAoB,IAAIZ,EAAiB,KAAK,OAAO,CAAE,gBAAAA,CAAgB,CAAC,CAAC,EAExE,KAAKY,GAAoB,IAAIZ,CAAe,CACpD,CACA,OAAO,MAAM,SAASa,EAAaC,CAAa,EACjD,CAEAC,GAAkB,IAAI,IACtB,YAAYC,EAAMC,EAAS,CAC1B,GAAI,EAAED,aAAgBE,GAAY,MAAM,IAAI,MAAM,uBAAuBF,CAAI,kCAAkC,EAC/G,GAAM,CAACG,EAAcC,EAAkBC,CAAY,EAAIL,EAAK,KAAK,EAAsB,EAEjFM,EAAa,cAAc,CAACH,EAAcC,EAAkBC,CAAY,EAAE,KAAK,GAAG,CAAC,GAAGL,EAAK,IAAI,YAAaO,GAAU,KAAO,EAAE,GAErI,GAAI,CAAC,KAAKR,GAAgB,IAAIO,CAAU,EAAG,CAC1C,IAAME,EAAa,UAAU,EAAI,KAAK,OAAO,EAAI,KAAK,SAAS,EAAE,CAAC,GAC5DC,EAAS,IAAI/B,GAAW,IAAI,EAClC+B,EAAO,KAAK,WAAW,EAAE,KACxBC,GAAKA,EAAE,OAAOA,GAAKA,EAAE,KAAKL,EAAa,OAAO,CAAC,EAAE,GAAGG,CAAU,CAAC,EAAE,KAAK,CAACJ,EAAiB,OAAO,EAAGA,EAAiB,KAAK,CAAC,CAAC,CAC3H,EAAE,GAAGE,CAAU,EAAE,GAAGK,GAAMA,EAAG,OAAO,CAACL,EAAYE,CAAU,EAAGL,EAAa,OAAO,CAAC,CAAC,EAChFH,EAAK,IAAI,YAAaO,IAAWE,EAAO,KAAK,EAAE,KAAK,EAAE,QAAQD,CAAU,EAC5E,KAAKT,GAAgB,IAAIO,EAAYG,CAAM,CAC5C,CACA,IAAMG,EAAS,WAAW,EAAI,KAAK,OAAO,EAAI,KAAK,SAAS,EAAE,CAAC,GACzDC,EAAUH,GAAKA,EAAE,KAAKV,EAAK,IAAI,EAAE,OAAO,CAAC,EAAE,GAAGY,CAAM,EAC1D,YAAKb,GAAgB,IAAIO,CAAU,EAAE,KAAK,EAAc,KAAK,EAAY,OAAO,EAAE,IAAIO,CAAO,EACtF,CACN,SAAUC,EAAU,UACpB,KAAMF,EACN,OAAQN,EACR,WAAYN,EAAK,WAAW,CAC7B,CACD,CAEA,OAAO,SAASe,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,aAAa,QAAQE,EAAS,MAAM,GAAGF,EAAK,WAAW,EAC5DA,EAAK,aAAaE,EAAS,MAAMF,EAAK,WAAW,EACjDA,EAAK,eAAeE,EAAS,QAAQF,EAAK,aAAa,EACvDA,EAAK,aAAaE,EAAS,MAAMF,EAAK,WAAW,EACrDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOjB,EAASkB,EAAgB,CAC/B,OAAO,MAAM,OAAOlB,EAAS,KAAO,CACnC,GAAI,KAAK5B,GAAa,OAAS,CAAE,YAAa,KAAKA,GAAa,IAAI+C,GAAKA,EAAE,OAAOnB,CAAO,CAAC,CAAE,EAAI,CAAC,EACjG,GAAI,KAAK3B,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAO2B,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAI,KAAK1B,GAAiB,CAAE,cAAe,KAAKA,GAAe,OAAO0B,CAAO,CAAE,EAAI,CAAC,EACpF,GAAI,KAAKzB,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAOyB,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAGkB,EAAe,CACnB,EAAE,CACH,CAEA,aAAaH,EAAMf,EAAS,CAC3B,GAAI,CAAC,KAAKF,GAAgB,KACzB,OAAO,MAAM,aAAaiB,EAAMf,CAAO,EAGxC,IAAMoB,GAAQ,EAAI,KAAK,OAAO,EAAI,KAAK,SAAS,EAAE,EAClD,GAAI,KAAK,OAAO,UAAY,YAAc,KAAK,YAAc,mBAAoB,CAChF,IAAMC,EAAyB,IAAI,IAC7BC,EAAuCC,GACrCR,EAAK,OAAO,OAAO,CAACS,EAAM/B,IAAQ,CACxC,GAAI+B,EAAM,OAAOA,EACjB,IAAMC,EAAiBhC,EAAI,KACrBiC,EAAmBjC,EAAI,OAASA,EAAI,KAAK,KACzCkC,EAAiBJ,EAAU,KACjC,GAAIA,EAAU,OAAO,OAASG,EAAkB,OAChD,IAAME,EAAkB,GAAGF,CAAgB,IAAIN,CAAI,GAC7CS,EAAgB,GAAGF,CAAc,IAAIP,CAAI,GAC/C,OAAKC,EAAuB,IAAIK,CAAgB,GAC/CL,EAAuB,IAAIK,EAAkB,CAC5C,iBAAAA,EACA,gBAAAE,EACA,eAAAD,EACA,cAAAE,EACA,MAAO,CAAE,KAAMJ,CAAe,EAC9B,MAAOG,EACP,OAAQ,CAAC,CACV,CAAC,EAEFP,EAAuB,IAAIK,CAAgB,EAAE,OAAO,KAAK,CACxD,KAAM,CAAE,KAAMC,CAAe,EAAG,MAAOE,CACxC,CAAC,EACM,CACN,KAAMA,EACN,OAAQ,CAAE,KAAMD,CAAgB,CACjC,CACD,EAAG,IAAI,GAAKL,EAERR,EAAK,cAAaA,EAAK,YAAc,CAAC,GAC3C,OAAW,CAAC,CAAEe,CAAI,IAAK,KAAKhC,GAAiB,CAC5C,IAAMiC,EAAWD,EAAK,OAAO9B,CAAO,EACpC+B,EAAS,SAAS,QAAUA,EAAS,SAAS,QAAQ,IAAKC,IAAO,CACjE,GAAGA,EAAG,IAAKV,EAAoCU,EAAE,GAAG,CACrD,EAAE,EACFjB,EAAK,YAAY,KAAKgB,CAAQ,CAC/B,CACA,GAAIV,EAAuB,KAAM,CAC3BN,EAAK,mBAAkBA,EAAK,iBAAmB,CAAC,GAChDA,EAAK,cAAaA,EAAK,YAAc,CAAE,SAAU,eAAgB,QAAS,CAAC,CAAE,GAClF,OAAW,CAAC,CAAEkB,CAAU,IAAKZ,EAC5BN,EAAK,iBAAiB,KACrBmB,EAAM,SAAS,KAAM,CACpB,KAAOzB,GAAMA,EAAE,OAAO,GAAGwB,EAAW,MAAM,EAAE,KAAKA,EAAW,KAAK,EACjE,MAAOA,EAAW,KACnB,CAAC,EAAE,OAAOjC,CAAO,CAClB,EACAe,EAAK,YAAY,QAAQ,QACxBoB,GAAU,SAAS,KAAM,CACxB,SAAU,IACV,IAAK,CAACF,EAAW,iBAAkBA,EAAW,cAAc,EAC5D,IAAK,CAACA,EAAW,gBAAiBA,EAAW,aAAa,CAC3D,CAAC,CACF,CAEF,CACD,SAAW,KAAK,OAAO,UAAY,YAAc,KAAK,YAAc,mBAAoB,CACvF,IAAMR,EAAiBV,EAAK,MAAM,KAC5BW,EAAmBX,EAAK,MAAM,OAASA,EAAK,MAAM,KAAK,KACvDa,EAAkB,GAAGF,CAAgB,IAAIN,CAAI,GAC7CgB,EAAsBrB,EAAK,YAC3BsB,EAAK,KAAK,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,EACxDtB,EAAK,MAAQ,CACZ,KAAMU,EACN,MAAOG,CACR,EACAb,EAAK,YAAcoB,GAAU,SAAS,KAAM,CAC3C,SAAU,KACV,IAAK,CACJ,KAAME,EACN,OAAQ,CAAE,KAAMT,CAAgB,CACjC,EACA,IAAMnB,GAAM,CACXA,EAAE,OAAO,CAAE,KAAM4B,CAAI,CAAC,EACrB,KAAK,CAAE,KAAMZ,EAAgB,MAAOC,CAAiB,CAAC,EACtD,MAAMU,CAAmB,EACzB,MAAM,GAAG,CAAC,GAAG,KAAKtC,EAAe,EAAE,IAAI,CAAC,CAAC,CAAEqB,CAAC,IAAMA,EAAE,OAAOnB,CAAO,CAAC,CAAC,CACtE,CACD,CAAC,EAAE,OAAOA,CAAO,CAClB,KAAO,CACDe,EAAK,cAAaA,EAAK,YAAc,CAAC,GAC3C,OAAW,CAAC,CAAEe,CAAI,IAAK,KAAKhC,GAC3BiB,EAAK,YAAY,KAAKe,EAAK,OAAO9B,CAAO,CAAC,CAE5C,CACA,YAAKF,GAAgB,MAAM,EACpB,MAAM,aAAaiB,EAAMf,CAAO,CACxC,CACD,EC/PO,IAAMsC,GAAN,cAAyBC,EAAqB,CAEpDC,GAAa,CAAC,EAEd,CAAC,OAAO,QAAQ,GAAI,CAAE,OAAO,KAAKA,GAAW,OAAO,QAAQ,EAAE,CAAG,CAEjE,IAAI,QAAS,CAAE,OAAO,KAAKA,GAAW,MAAQ,CAE9C,SAASC,EAAaC,EAAe,CACpC,OAAID,IAAgB,cAAsB,KACnC,MAAM,SAASA,EAAaC,CAAa,CACjD,CAIA,SAASC,KAASC,EAAM,CACvB,GAAI,OAAOD,GAAS,SAAU,CAC7B,IAAME,EAAW,KAAKL,GAAW,KAAMM,GAAOA,EAAG,aAAaH,CAAI,CAAC,EACnE,GAAI,CAACC,EAAK,OAAQ,OAAOC,EACzB,GAAID,EAAK,CAAC,IAAM,GACf,YAAKJ,GAAa,KAAKA,GAAW,OAAQO,GAAMA,IAAMF,CAAQ,EAC9DA,GAAU,OAAO,cAAc,EACxB,KAERF,EAAO,CAAE,KAAMA,EAAM,GAAI,OAAOC,EAAK,CAAC,GAAM,SAAWA,EAAK,CAAC,EAAI,CAAE,OAAQA,EAAK,CAAC,CAAE,CAAG,CACvF,CACA,YAAKJ,GAAa,KAAK,YAAY,CAACG,CAAI,EAAGK,EAAgB,KAAKR,GAAY,YAAa,KAAOK,GACxF,KAAKL,GAAW,KAAMM,GAAOA,EAAG,aAAaD,EAAS,KAAK,CAAC,CAAC,CACpE,EACM,IACR,CAIA,UAAUI,EAAc,GAAM,CAC7B,OAAIA,EAAoB,KAAKT,GACtB,KAAKA,GAAW,IAAIM,GAAMA,EAAG,KAAK,CAAC,CAC3C,CAEA,OAAOG,EAAc,GAAM,CAC1B,OAAO,KAAKT,GAAW,OAAO,CAACU,EAAMJ,IAC7BI,EAAK,OAAQD,EAAiEH,EAAG,OAAO,EAA7DA,EAAG,OAAO,EAAK,EAAE,IAAIK,GAAO,CAACL,EAAG,KAAK,EAAG,GAAGK,CAAG,CAAC,CAAe,EAC9F,CAAC,CAAC,CACN,CAEA,QAAQF,EAAc,GAAM,CAC3B,OAAO,KAAKT,GAAW,OAAO,CAACY,EAAMN,IAC7BM,EAAK,OAAQH,EAAkEH,EAAG,QAAQ,EAA/DA,EAAG,QAAQ,EAAK,EAAE,IAAIO,GAAO,CAACP,EAAG,KAAK,EAAG,GAAGO,CAAG,CAAC,CAAgB,EAChG,CAAC,CAAC,CACN,CAEA,YAAYJ,EAAc,GAAMK,EAAS,GAAM,CAC9C,OAAO,KAAKd,GAAW,OAAO,CAACe,EAAKT,IAC5BS,EAAI,OAAQN,EAA4EH,EAAG,YAAY,GAAMQ,CAAM,EAAzFR,EAAG,YAAY,GAAOQ,CAAM,EAAE,IAAIE,GAAM,CAACV,EAAG,KAAK,EAAG,GAAGU,CAAE,CAAC,CAAgC,EACzH,CAAC,CAAC,CACN,CAEA,YAAYP,EAAc,GAAMK,EAAS,GAAM,CAC9C,OAAO,KAAKd,GAAW,OAAO,CAACe,EAAKT,IAC5BS,EAAI,OAAQN,EAA4EH,EAAG,YAAY,GAAMQ,CAAM,EAAzFR,EAAG,YAAY,GAAOQ,CAAM,EAAE,IAAIG,GAAM,CAACX,EAAG,KAAK,EAAG,GAAGW,CAAE,CAAC,CAAgC,EACzH,CAAC,CAAC,CACN,CAEA,WAAWR,EAAc,GAAMK,EAAS,GAAM,CAC7C,OAAO,KAAKd,GAAW,OAAO,CAACe,EAAKT,IAC5BS,EAAI,OAAQN,EAA2EH,EAAG,WAAW,GAAMQ,CAAM,EAAvFR,EAAG,WAAW,GAAOQ,CAAM,EAAE,IAAII,GAAM,CAACZ,EAAG,KAAK,EAAG,GAAGY,CAAE,CAAC,CAA+B,EACvH,CAAC,CAAC,CACN,CAEA,OAAOT,EAAc,GAAMK,EAAS,GAAM,CACzC,OAAO,KAAKd,GAAW,OAAO,CAACe,EAAKT,IAC5BS,EAAI,OAAQN,EAAuEH,EAAG,OAAO,GAAMQ,CAAM,EAA/ER,EAAG,OAAO,GAAOQ,CAAM,EAAE,IAAIK,GAAM,CAACb,EAAG,KAAK,EAAG,GAAGa,CAAE,CAAC,CAA2B,EAC/G,CAAC,CAAC,CACN,CAIA,UAAUC,EAASC,EAAS,CAC3B,IAAMC,EAAWD,EACXE,EAAmB,IAAI,IACvBC,EAAe,IAAI,IACnBC,EAAc,CAAC,EAGfC,EAAe,CAACC,EAAMC,EAAe,GAAMC,EAAgB,KAAS,CACzE,IAAMC,EAAO,KAAK,SAASH,CAAI,EAC/B,IAAK,CAACG,GAASN,EAAa,IAAIM,CAAI,GAAK,CAACN,EAAa,IAAIM,CAAI,IAAkBF,EAChF,MAAM,IAAI,MAAM,aAAaD,CAAI,mBAAmB,EAErD,OAAIE,GAAiBL,EAAa,IAAIM,CAAI,EAAU,CAACA,EAAMA,EAAK,YAAY,SAASA,EAAK,YAAY,MAAM,EAAGN,EAAa,IAAIM,CAAI,CAAC,CAAC,EAC/H,CAACA,CAAI,CACb,EACMC,EAAiBD,GAAS,CAC/B,IAAME,EAAY,CAAE,GAAGV,EAAU,QAAS,CAACC,EAAiB,IAAIO,CAAI,GAAKV,CAAQ,EACjF,OAAKG,EAAiB,IAAIO,CAAI,GAAGP,EAAiB,IAAIO,CAAI,EACnDE,CACR,EAEMC,EAAkBC,GAAO,CAC9B,GAAIR,EAAaQ,EAAG,SAAS,EAAE,KAAK,EAAG,GAAO,EAAK,EAAE,CAAC,EAAG,CACxD,GAAIA,EAAG,QAAQ,eAAe,EAAG,OACjC,MAAM,IAAI,MAAM,aAAaA,EAAG,SAAS,GAAG,KAAK,CAAC,kBAAkB,CACrE,CACA,IAAIC,EAAYD,EAAG,SAAS,EAAE,OAAOZ,CAAQ,EACzCA,EAAS,OAAS,KAAOa,EAAY,CAAE,GAAGA,EAAW,OAAQ,KAAM,GACvEV,EAAY,KAAKU,CAAS,CAC3B,EAEMC,EAAgBF,GAAO,CAC5B,GAAM,CAACG,EAASC,CAAQ,EAAIZ,EAAaQ,EAAG,UAAU,EAAE,KAAK,EAAG,CAACA,EAAG,QAAQ,WAAW,EAAGZ,EAAS,OAAS,EAAK,EAC7Ge,GAASb,EAAa,IAAIa,EAASf,EAAS,OAAS,GAAQ,OAAY,CAAE,IAAIgB,GAAYD,GAAS,OAAOf,CAAQ,EAAG,OAAQ,UAAW,CAAC,CAC/I,EAEMiB,EAAkBL,GAAO,CAC9B,GAAM,CAACG,EAASC,CAAQ,EAAIZ,EAAaQ,EAAG,UAAU,EAAE,KAAK,CAAC,EACxDC,EAAY,KAAK,gBAAgBG,GAAYD,GAAS,OAAON,EAAcM,CAAO,CAAC,EAAGH,EAAG,SAAS,EAAE,OAAOZ,CAAQ,EAAGA,CAAQ,EACpIE,EAAa,IAAIa,EAASF,CAAS,CACpC,EAEMK,EAAiBN,GAAO,CAC7B,GAAM,CAACG,EAASC,CAAQ,EAAIZ,EAAaQ,EAAG,UAAU,EAAE,KAAK,CAAC,EACxDO,GAASH,GAAYD,GAAS,UAAUH,EAAG,SAAS,EAAGH,EAAcM,CAAO,CAAC,EACnFb,EAAa,IAAIa,EAASI,CAAK,CAChC,EAEMC,EAAcpC,GAAO,CAC1B,IAAImC,EACET,EAAYD,EAAczB,CAAE,EAClC,GAAIkB,EAAa,IAAIlB,CAAE,EAAG,CAEzB,GAAI,CAACkB,EAAa,IAAIlB,CAAE,EAAG,OACE0B,EAAU,QACtCS,EAAQnC,EAAG,YAAY,SAAS,KAAMkB,EAAa,IAAIlB,CAAE,CAAC,EAAE,OAAO0B,CAAS,EACtES,EAAQjB,EAAa,IAAIlB,CAAE,CACnC,MAAOmC,EAAQnC,EAAG,OAAO0B,CAAS,EAClC,OAAOS,CACR,EAIA,QAAWP,KAAMd,EAChB,GAAIc,EAAG,SAAW,SACjBD,EAAeC,CAAE,UACPA,EAAG,SAAW,OACxBE,EAAaF,CAAE,UACLA,EAAG,SAAW,SACxBK,EAAeL,CAAE,UACPA,EAAG,SAAW,QACxBM,EAAcN,CAAE,MACV,OAAM,IAAI,MAAM,0BAA0BA,EAAG,MAAM,IAAIA,EAAG,IAAI,EAAE,EAExE,OAAO,KAAK,iBAAiB,KAAKlC,GAAY0C,CAAU,EAAE,OAAOjB,CAAW,CAC7E,CAEA,iBAAiBkB,EAAKC,EAAgBC,EAAiB,GAAO,CAC7D,IAAMC,EAAW,CAACC,EAAQC,IAAW,KAAK,IAAID,EAAQC,GAAQ,MAAQA,EAAQ,IAAI,EAC5E,CAACC,EAASC,CAAkB,EAAIP,EAAI,OAAO,CAAC,CAACQ,EAAQC,CAAiB,EAAG9C,IAAO,CACrF,IAAImC,EAAQG,EAAetC,CAAE,EAE7B,GAAImC,EAAO,CACV,IAAIY,EAEJZ,EAAQ,CACP,GAAGA,EACH,OAAQA,EAAM,OAAO,OAAO,CAAC/B,EAAMC,IAAQ,CAC1C,GAAIA,EAAI,OACP,GAAImC,EAASxC,EAAG,KAAK,EAAGK,EAAI,MAAM,EAC5BA,EAAI,UAAU,CAAE,OAAQ0C,EAAG,GAAG1C,CAAI,EAAIA,OACrC,CACN,IAAM2C,EAAWH,EAAO,KAAKI,GAAUT,EAASS,EAAO,KAAM5C,EAAI,MAAM,CAAC,EACxE,OAAI2C,GACE3C,EAAI,UAAU,CAAE,OAAQ0C,EAAG,GAAG1C,CAAI,EAAIA,GAC3C2C,EAAS,OAAO,KAAK3C,CAAG,GAClByC,EAAkB,KAAK,CAAE,GAAA9C,EAAI,IAAAK,CAAI,CAAC,EAClCD,CACR,CAED,OAAOA,EAAK,OAAOC,CAAG,CACvB,EAAG,CAAC,CAAC,CACN,EAEAyC,EAAoBA,EAAkB,OAAO,CAACI,EAAOC,IAAU,CAC9D,IAAIC,EAAOD,EAAM,IACjB,OAAIX,EAASxC,EAAG,KAAK,EAAGoD,EAAK,MAAM,GAC7BA,EAAK,UAAU,CAAE,OAAQL,EAAG,GAAGK,CAAK,EAAIA,GAC7CjB,EAAM,OAAO,KAAKiB,CAAI,EACfF,GAEDA,EAAM,OAAOC,CAAK,CAC1B,EAAG,CAAC,CAAC,CACN,CACA,MAAO,CAACN,EAAO,OAAOV,GAAS,CAAC,CAAC,EAAGW,CAAiB,CACtD,EAAG,CAAC,CAAC,EAAG,CAAC,CAAC,CAAC,EACX,GAAIF,EAAmB,OACtB,GAAIL,EACH,OAAW,CAAE,IAAAlC,CAAI,IAAKuC,EAAoB,CACzC,IAAIQ,EAAO/C,EAAK0C,EACXK,EAAK,UAAU,CAAE,OAAQL,EAAG,GAAGK,CAAK,EAAIA,GAC7C,IAAMJ,EAAWL,EAAQ,KAAKM,GAAUT,EAASS,EAAO,KAAM5C,EAAI,MAAM,CAAC,EACrE2C,EACHA,EAAS,OAAO,KAAKI,CAAI,EACnBT,EAAQ,KAAK,CACnB,KAAMtC,EAAI,OAAO,MAAQA,EAAI,OAC7B,OAAQ,CAAC+C,CAAI,CACd,CAAC,CACF,KACM,OAAM,IAAI,MAAM,2EAA2ER,EAAmB,IAAKO,GAAU,IAAIA,EAAM,GAAG,KAAK,CAAC,MAAMA,EAAM,IAAI,IAAI,SAASA,EAAM,IAAI,OAAO,MAAQA,EAAM,IAAI,MAAM,MAAMA,EAAM,IAAI,IAAI,GAAG,EAAE,KAAK,MAAM,CAAC,EAAE,EAErQ,OAAOR,CACR,CAEA,YAAY5B,EAAU,CAAC,EAAGsC,EAAO,SAA0B,CAC1D,IAAMvC,EAAUwC,GAAQ,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EACtD,QAAWtD,KAAM,KAAKN,GACrB,GAAIM,EAAG,OAAO,IAAM,MACnBc,EAAQ,IAAI,SAAUuC,EAAOzB,GAAO,CACnCA,EAAG,SAAS5B,EAAG,OAAO,CAAE,GAAGe,EAAS,KAAM,EAAM,CAAC,CAAC,EAC9CA,EAAQ,cAAca,EAAG,SAAS,eAAe,CACtD,CAAC,UACS5B,EAAG,OAAO,IAAM,WAC1Bc,EAAQ,IAAI,OAAQuC,EAAOzB,GAAO,CACjCA,EAAG,UAAU5B,EAAG,KAAK,CAAC,EAClBe,EAAQ,aAAaa,EAAG,SAASb,EAAQ,WAAW,EACpDA,EAAQ,cAAca,EAAG,SAAS,WAAW,CAClD,CAAC,MACK,CACN,IAAM2B,EAAQvD,EAAG,YAAYe,CAAO,EAChCwC,EAAM,QAAQzC,EAAQ,IAAI,QAASuC,EAAOzB,GAAO,CACpDA,EAAG,UAAU5B,EAAG,KAAK,CAAC,EACtB4B,EAAG,SAAS2B,CAAK,CAClB,CAAC,CACF,CAED,OAAOzC,CACR,CAEA,aAAa0C,EAAOzC,EAAS,CAC5B,OAAO,KAAK,eACX,KAAKrB,GACL8D,EAAM,UAAU,EAChB,CAACC,EAAGC,IAAMD,EAAE,aAAaC,EAAG3C,CAAO,EACnCA,CACD,CACD,CAIA,WAAY,CAAE,OAAO,KAAK,UAAU,EAAK,EAAE,CAAC,CAAG,CAE/C,WAAWM,EAAMsC,EAAiB,GAAO,CACxC,IAAMC,EAAO,KAAK,OAAO,EAAK,EAAE,KAAKvD,GAAOA,EAAI,CAAC,EAAE,YAAY,IAAMgB,EAAK,YAAY,CAAC,IAAI,CAAC,EAC5F,MAAI,CAACuC,GAAQD,EAAuB,KAAK,UAAU,EAC5CC,CACR,CAIA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,MAAM,QAAQD,CAAI,EACvB,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClD,QAAWhE,KAAM8D,EAAME,EAAS,SAAShE,CAAE,EAC3C+D,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOjD,EAAU,CAAC,EAAGkD,EAAS,CAAC,EAAG,CACjC,OAAO,KAAK,iBAAiB,KAAKvE,GAAaM,GAAOA,EAAG,OAAOe,CAAO,EAAGA,EAAQ,cAAc,CACjG,CACD,EC9QO,IAAMmD,GAAN,cAAsBC,CAAa,CAEzCC,GAAU,EACVC,GAEA,OAAOC,EAAO,CACb,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKF,GACnC,GAAI,OAAOE,GAAU,SAAU,MAAM,IAAI,MAAM,yBAAyB,EACxE,OAAQ,KAAKF,GAAUE,EAAO,IAC/B,CAEA,MAAMA,EAAO,CACZ,OAAK,UAAU,QACP,KAAKD,GAASC,EAAO,MADC,KAAKD,EAEpC,CAEA,WAAW,QAAS,CACnB,MAAO,CAAE,QAAS,CAACE,EAASD,IAAW,IAAI,KAAKC,CAAO,EAAG,MAAMD,CAAK,CAAG,CACzE,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACD,GAAM,UAAY,OAAOA,GAAM,QAAW,UAC/C,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC9CF,EAAK,QAAQE,EAAS,OAAOF,EAAK,MAAM,EACxCA,EAAK,QAAU,QAAWE,EAAS,MAAMF,EAAK,KAAK,EACvDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,OAAQ,KAAKP,GACb,GAAI,KAAKC,KAAW,OAAY,CAAE,MAAO,KAAKA,EAAO,EAAI,CAAC,EAC1D,GAAGO,CACJ,CAAC,CACF,CAEA,OAAO,MAAML,EAASM,EAAM,CAC3B,IAAMC,GAAYP,GAAS,QAAQ,cAAgBA,GAAS,QAAQ,WAAa,QAAU,IAAM,IAC3F,CAAEQ,EAAOC,CAAO,EAAK,IAAI,OAAO,MAAOF,CAAS,QAAQ,EAAG,KAAKD,CAAI,GAAK,CAAC,EAChF,GAAKE,EACL,OAAQ,IAAI,KAAKR,CAAO,EAAG,OAAO,SAASS,CAAM,CAAC,CACnD,CAEA,WAAY,CAAE,OAAO,KAAK,OAAO,UAAY,QAAU,IAAM,IAAK,KAAKZ,EAAQ,EAAI,CACpF,EC1CO,IAAMa,GAA0BC,GAAS,cAAcC,GAAsBD,CAAK,CAAE,CAE1FE,GACAC,GAAiB,IAAI,IAErB,IAAI,MAAO,CACV,OAAK,KAAKD,KAAO,KAAKA,GAAQ,UAAU,EAAI,KAAK,OAAO,EAAI,KAAK,SAAS,EAAE,CAAC,IACtE,KAAKA,EACb,CAEA,IAAI,eAAgB,CAAE,MAAO,CAAC,GAAG,KAAKC,EAAc,EAAE,KAAK,CAACC,EAAGC,IAAMA,EAAE,OAAO,IAAM,GAAKA,EAAE,OAAO,EAAID,EAAE,OAAO,EAAI,GAAK,CAAC,CAAG,CAE5H,IAAI,UAAW,CAAE,MAAO,CAAC,GAAG,KAAK,WAAW,EAAE,KAAKE,GAAKA,EAAE,MAAM,CAAG,CAEnE,QAAQC,EAAWC,EAAa,CAC/B,MAAI,CAAC,YAAa,cAAc,EAAE,SAASD,CAAS,GAAK,CAACE,EAAO,EAAE,KAAKC,GAAKF,aAAuBE,CAAC,IAChGH,IAAc,eAAgB,KAAKJ,GAAe,OAAOK,CAAW,EACnE,KAAKL,GAAe,IAAIK,CAAW,GAGlC,MAAM,QAAQD,EAAWC,CAAW,CAC5C,CAEA,SAASG,EAAaC,EAAe,CACpC,IAAMC,EAAS,MAAM,SAASF,EAAaC,CAAa,EACxD,OAAID,IAAgB,eAAiB,CAACE,EAC9BC,GAAW,SAAS,KAAM,CAAC,CAAC,EAE7BD,CACR,CAEA,eAAeE,EAAQ,CACtB,GAAI,CAAC,MAAM,QAAQA,CAAM,EAAG,MAAM,IAAI,MAAM,yBAAyB,EACrE,IAAMC,EAAgB,CAAC,GAAG,KAAKb,EAAc,EAC7C,QAASc,EAAI,EAAGA,EAAIF,EAAO,OAAQE,IAAK,CACvC,IAAMC,EAAWF,EAAc,OAAOX,GAAKA,EAAE,OAAO,IAAMY,EAAE,CAAC,EAC7D,GAAI,CAACC,EAAS,OAAQ,MAAM,IAAI,MAAM,iCAAiCD,CAAC,EAAE,EAC1EC,EAAS,QAAQb,GAAKA,EAAE,MAAMU,EAAOE,CAAC,CAAC,CAAC,CACzC,CACD,CAEA,kBAAkBE,EAAS,GAAO,CACjC,IAAMH,EAAgB,CAAC,GAAG,KAAKb,EAAc,EAC7C,GAAI,CAACgB,EACJ,OAAAH,EAAc,QAAQ,CAACX,EAAGY,IAAMZ,EAAE,OAAOY,EAAE,CAAC,CAAC,EACtCD,EAER,IAAII,EAAa,IAAI,IAAKC,EAAU,EACpC,QAAWhB,KAAKW,EACf,GAAIX,EAAE,OAAO,IAAM,GAAK,CAACe,EAAW,IAAIf,EAAE,OAAO,CAAC,EAAG,CACpD,IAAMiB,EAAYD,IAClBD,EAAW,IAAIf,EAAE,OAAO,EAAGiB,CAAS,EACpCjB,EAAE,OAAOiB,CAAS,CACnB,MAAOjB,EAAE,OAAOe,EAAW,IAAIf,EAAE,OAAO,CAAC,CAAC,EAAE,WAAW,YAAa,EAAI,EAEzE,OAAOW,EAAc,OAAOX,GAAK,CAACA,EAAE,UAAU,WAAW,CAAC,CAC3D,CAEA,OAAO,yBAAyBkB,EAASC,EAAM,CAC9C,OAAKD,GAAS,QAAQ,cAAgBA,GAAS,QAAQ,WAAa,SAAWC,EAAK,QAAQ,GAAG,IAAM,GAAWA,EACzGC,EAAM,MAAMD,EAAM,CAAC,GAAG,EAAG,CAAE,OAAQ,CAAC,CAAE,CAAC,EAAE,OAAO,CAACA,EAAME,EAAO,IAAOF,EAAeA,EAAO,IAAM,EAAIE,EAAzBA,EAAgC,IAAI,CACxH,CAEA,OAAO,SAASH,EAASI,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASL,EAASI,EAAOE,GAAa,CAC9CF,EAAK,OAAME,EAAS3B,GAAQyB,EAAK,MACrCC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAASC,EAAgB,CAC/B,IAAMJ,EAAO,MAAM,OAAOG,EAASC,CAAc,EACjD,OAAO,KAAK,aAAaJ,EAAMG,CAAO,CACvC,CAEA,aAAaH,EAAMG,EAAS,CAC3B,MAAO,CACN,GAAI,KAAK5B,GAAQ,CAAE,KAAM,KAAKA,EAAM,EAAI,CAAC,EACzC,GAAGyB,CACJ,CACD,CACD,ECpFO,IAAMK,GAAN,cAA2BC,EAAY,CAC1C,WAAW,QAAS,CAAE,MAAO,QAAU,CAC3C,ECDO,IAAMC,GAAN,cAA4BC,CAAiB,CACnD,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,OAAQ,CAAE,MAAO,aAAe,CAE3C,YAAa,CAAE,OAAO,KAAK,SAAS,aAAa,CAAG,CAEpD,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAaC,EAAaC,CAAW,EAAIJ,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,KAAM,oCAAqC,GAAG,CAAC,GAAK,CAAC,EACtI,GAAI,CAACE,EAAa,OAClB,IAAMG,EAAW,MAAM,MAAMN,EAASI,EAAaF,CAAa,EAChE,GAAKI,EACL,OAAID,GAAYC,EAAS,SAAS,aAAa,EACxCA,CACR,CAEA,WAAY,CAAE,OAAQ,KAAK,QAAQ,EAAE,OAAc,CAAC,WAAY,MAAM,UAAU,CAAC,EAAE,OAAO,KAAK,QAAQ,aAAa,EAAI,cAAgB,CAAC,CAAC,EAAE,KAAK,GAAG,EAAtG,EAAyG,CACxJ,ECjBO,IAAMC,GAAN,cAA2BC,EAAU,CACxC,WAAW,QAAS,CAAE,MAAO,QAAU,CACvC,WAAW,YAAa,CAAE,MAAO,EAAG,CACxC,ECFO,IAAMC,GAAN,cAA2BC,CAAiB,CAClD,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAM,CAAG,CAC/C,WAAW,QAAS,CAAE,MAAO,QAAU,CACxC,ECSO,IAAMC,GAAN,cAA8BC,GACpCC,GAAwBC,CAAY,CACrC,CAAE,CACD,WAAW,QAAS,CAAE,MAAO,QAAU,CAEvCC,GACAC,GAAY,CAAC,EACbC,GACAC,GACAC,GACAC,GACAC,GAEG,IAAI,eAAgB,CAAE,MAAO,KAAO,CAEvC,UAAUC,EAAM,CACf,OAAK,UAAU,QACf,KAAKP,GAAc,KAAK,YAAYO,EAAMC,GAAY,KAAKR,GAAa,cAAe,KAAK,EACrF,MAFuB,KAAKA,EAGpC,CAEA,QAAQO,EAAM,CACb,OAAK,UAAU,QACf,KAAKN,GAAY,KAAK,YAAYM,EAAME,EAAO,KAAKR,GAAW,aAAa,EACrE,MAFuB,KAAKA,EAGpC,CAEA,QAAS,CAAE,OAAO,KAAKA,EAAW,CAElC,WAAWM,EAAM,CAChB,OAAK,UAAU,QACf,KAAKL,GAAiB,KAAK,YAAYK,EAAMG,GAAe,KAAKR,GAAgB,kBAAmB,KAAK,EAClG,MAFuB,KAAKA,EAGpC,CAEA,UAAUK,EAAM,CACf,OAAK,UAAU,QACf,KAAKJ,GAAgB,KAAK,YAAYI,EAAMI,GAAc,KAAKR,GAAe,gBAAiB,KAAK,EAC7F,MAFuB,KAAKA,EAGpC,CAEA,UAAUI,EAAM,CACf,OAAK,UAAU,QACf,KAAKH,GAAgB,KAAK,YAAYG,EAAMK,GAAc,KAAKR,GAAe,gBAAiB,KAAK,EAC7F,MAFuB,KAAKA,EAGpC,CAEA,OAAOS,EAAO,CACb,OAAK,UAAU,QACf,KAAKR,GAAgB,KAAK,YAAY,CAACQ,CAAK,EAAGC,GAAc,KAAKT,GAAe,gBAAiB,OAAO,EAClG,MAFuB,KAAKA,EAGpC,CAEA,SAASE,EAAM,CACd,OAAK,UAAU,QACf,KAAKD,GAAe,KAAK,YAAYC,EAAM,KAAK,YAAa,KAAKD,GAAc,eAAgB,QAAQ,EACjG,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASS,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,WACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAElD,GADAA,EAAS,OAAO,GAAG,CAAC,EAAE,OAAOF,EAAK,UAAU,CAAC,EACzCA,EAAK,UAAU,OAAQ,QAAWG,KAAOH,EAAK,SAAUE,EAAS,KAAKC,CAAG,EACzEH,EAAK,eAAeE,EAAS,QAAQF,EAAK,aAAa,EACvDA,EAAK,cAAcE,EAAS,OAAOF,EAAK,YAAY,EACpDA,EAAK,cAAcE,EAAS,OAAOF,EAAK,YAAY,EACpDA,EAAK,cAAcE,EAAS,OAAOF,EAAK,YAAY,EACpDA,EAAK,aAAaE,EAAS,MAAMF,EAAK,WAAW,EACrDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOE,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,KAAO,CACnC,WAAY,KAAKpB,IAAa,OAAOoB,CAAO,EAC5C,GAAI,KAAKnB,GAAU,OAAS,CAAE,SAAU,KAAKA,GAAU,IAAKqB,GAAMA,EAAE,OAAOF,CAAO,CAAC,CAAE,EAAI,CAAC,EAC1F,GAAI,KAAKlB,GAAiB,CAAE,cAAe,KAAKA,GAAe,OAAOkB,CAAO,CAAE,EAAI,CAAC,EACpF,GAAI,KAAKjB,GAAgB,CAAE,aAAc,KAAKA,GAAc,OAAOiB,CAAO,CAAE,EAAI,CAAC,EACjF,GAAI,KAAKhB,GAAgB,CAAE,aAAc,KAAKA,GAAc,OAAOgB,CAAO,CAAE,EAAI,CAAC,EACjF,GAAI,KAAKf,GAAgB,CAAE,aAAc,KAAKA,GAAc,OAAOe,CAAO,CAAE,EAAI,CAAC,EACjF,GAAI,KAAKd,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAOc,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAGC,CACJ,EAAE,CACH,CAEA,OAAO,MAAMN,EAASQ,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAOC,EAAeC,CAAK,EAAI,uCAAuC,KAAKJ,EAAK,KAAK,CAAC,GAAK,CAAC,EACpG,GAAI,CAACE,EAAO,OACZ,IAAMP,EAAW,IAAI,KAAKH,CAAO,EAC3Ba,EAAQ,KAAK,yBAAyBV,EAAUS,EAAK,KAAK,CAAC,EAE3DE,EAAU,CAAE,KAAM,CAAE,SAAU,2BAA4B,KAAM,MAAO,EAAG,KAAKC,GAAY,MAAMC,EAAa,QAAQrB,GAAe,OAAOC,GAAc,OAAOC,GAAc,QAAQoB,EAAe,MAAMC,GAAa,OAAOnB,GAAc,MAAM,OAAQ,EAC5P,CAAEoB,EAAY,GAAGC,CAAO,EAAIC,EAAM,MAAMR,EAAO,OAAO,OAAOC,CAAO,EAAE,IAAIQ,GAAKA,EAAE,OAASA,EAAE,QAAU,GAAGA,EAAE,MAAM,WAAaA,CAAC,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EAE/KnB,EAAS,OAAOM,EAAcN,EAAUgB,EAAW,KAAK,EAAG,CAAC1B,EAAU,CAAC,CAAC,EACxE8B,EAAM,QAAWC,KAASJ,EAAQ,CACjC,GAAI,SAAS,KAAKI,CAAK,EAAG,CACzB,IAAMC,EAAOJ,EAAM,MAAMG,EAAM,QAAQ,QAAS,EAAE,EAAG,CAAC,GAAG,CAAC,EAAE,IAAIjB,GAAKE,EAAcN,EAAUI,EAAE,KAAK,EAAG,CAACb,CAAK,CAAC,CAAC,EAC/G,QAAWU,KAAOqB,EAAMtB,EAAS,KAAKC,CAAG,EACzC,QACD,CACA,GAAI,UAAU,KAAKoB,CAAK,EAAG,CAC1BrB,EAAS,MAAMM,EAAcN,EAAUqB,EAAM,QAAQ,SAAU,EAAE,EAAE,KAAK,EAAG,CAAC,IAAI,CAAC,CAAC,EAClF,QACD,CACA,GAAI,wBAAwB,KAAKA,CAAK,EAAG,CACxC,GAAM,CAAEE,EAAQC,CAAM,EAAIH,EAAM,MAAM,8BAA8B,EACpEJ,EAAO,KAAK,SAAUO,CAAM,GAAI,UAAWD,CAAO,EAAE,EACpD,QACD,CACA,QAAWE,KAAQd,EAAS,CAC3B,IAAMe,EAAOf,EAAQc,CAAI,EAAE,QAAQzB,EAAUqB,EAAM,KAAK,EAAGf,CAAa,EACxE,GAAIoB,EAAM,CAAC1B,EAASyB,CAAI,EAAEC,CAAI,EAAG,SAASN,CAAM,CACjD,CACD,CACA,OAAIZ,GAAeR,EAAS,SAASQ,CAAa,EAC3CR,CACR,CAEA,WAAY,CACX,IAAM2B,EAAM,CAAC,QAAQ,EACrB,OAAI,KAAK,QAAQ,EAAE,QAAQA,EAAI,KAAK,KAAK,QAAQ,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,GAAG,CAAC,CAAC,EACjFD,EAAI,KAAK,KAAK7C,EAAW,EACrB,KAAKC,GAAU,QAAQ4C,EAAI,KAAK,OAAQ,KAAK5C,GAAU,KAAK,IAAI,CAAC,EACrE4C,EAAI,KAAK,GAAG,KAAK,MAAM,EAAG,KAAK,MAAM,EAAG,KAAK3C,GAAgB,KAAKC,GAAe,KAAKC,GAAe,KAAK,QAAQ,EAAG,KAAK,MAAM,EAAG,KAAKC,EAAa,EACjJ,KAAKC,IAAcuC,EAAI,KAAK,KAAKvC,EAAY,EAC1CuC,EAAI,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CACnC,CACD,EC3IO,IAAMC,GAAN,MAAMC,UAAeC,CAAa,CACxC,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAE5CC,GAEA,QAAQC,EAAM,CACb,OAAK,UAAU,QACf,KAAKD,GAAQ,KAAK,YAAYC,EAAM,KAAK,YAAY,eAAgB,KAAKD,GAAO,aAAa,EACvF,MAFuB,KAAKA,EAGpC,CAEA,eAAgB,CAAE,OAAO,KAAKA,cAAiBH,EAAS,KAAKG,GAAM,cAAc,EAAI,KAAKA,EAAO,CAEjG,WAAW,QAAS,CACnB,MAAO,CAAE,OAAQ,CAACE,EAASC,IAAS,KAAK,SAASD,EAAS,CAAE,KAAMC,CAAK,CAAC,CAAG,CAC7E,CAEA,OAAO,SAASD,EAASE,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,KACX,OAAO,MAAM,SAASF,EAASE,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,IAAI,EACvBC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKP,IAAO,OAAOO,CAAO,EAChC,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASC,EAAMM,EAAe,CAC1C,GAAI,CAACC,GAASP,EAAM,IAAK,GAAG,GAAKQ,EAAM,MAAMR,EAAM,CAAC,GAAG,CAAC,EAAE,QAAUQ,EAAM,MAAMR,EAAM,CAAC,CAAC,EAAE,SAAW,EAAyC,OAC9I,IAAMG,EAAW,IAAI,KAAKJ,CAAO,EAC3BU,EAAQH,EAAcH,EAAUO,EAAQV,EAAM,IAAK,GAAG,EAAG,KAAK,YAAY,cAAc,EAC9F,OAAOG,EAAS,KAAKM,CAAK,CAC3B,CAEA,WAAY,CAAE,MAAO,IAAM,KAAKZ,GAAM,UAAU,EAAI,GAAK,CAC1D,ECzCO,IAAMc,GAAN,cAAuBC,EAAO,CACpC,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAe,CAAG,CAExD,UAAUC,EAAY,CAAE,OAAO,KAAK,KAAK,CAAE,WAAAA,CAAW,CAAC,EAAE,KAAK,CAAG,CAEjE,WAAW,QAAS,CAAS,CAE7B,QAAS,CACR,IAAMC,EAAYC,GAAY,SAAS,KAAM,CAAE,KAAM,GAAI,QAAS,CAAC,CAAE,CAAC,EAChEC,EAAgB,KAAK,KAAK,EAAE,OAAO,CAAE,gBAAiB,kBAAmB,CAAC,EAAoB,QAAQ,GAAK,CAAC,EAClH,QAAWC,KAAaD,EAAeF,EAAU,OAAO,CAAE,GAAGG,EAAU,OAAO,CAAE,CAAC,EACjF,OAAOH,CACR,CAEA,OAAO,SAASI,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAACD,GAAM,MAAQ,CAACA,GAAM,MAAM,YAChC,OAAO,MAAM,SAASD,EAASC,EAAMC,CAAQ,CAC9C,CAEA,OAAO,MAAMF,EAASG,EAAMC,EAAe,CAC1C,GAAK,kBAAkB,KAAKD,CAAI,EAChC,OAAO,MAAM,MAAMH,EAASG,EAAMC,CAAa,CAChD,CACD,ECvBO,IAAMC,GAAN,cAAyBC,CAAa,CAE5CC,GACAC,GAEA,KAAKC,EAAO,CACX,OAAK,UAAU,QACf,KAAKF,GAAQ,KAAK,YAAY,CAACE,CAAK,EAAGC,EAAO,KAAKH,GAAO,aAAa,EAChE,MAFuB,KAAKA,EAGpC,CAEA,KAAKE,EAAO,CACX,OAAK,UAAU,QACf,KAAKD,GAAQ,KAAK,YAAY,CAACC,CAAK,EAAGC,EAAO,KAAKF,GAAO,aAAa,EAChE,MAFuB,KAAKA,EAGpC,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,KAAM,CAACG,EAASC,IAAS,KAAK,SAASD,EAAS,CAAE,KAAAC,CAAK,CAAC,CACzD,CACD,CAEA,OAAO,SAASD,EAASE,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,KACX,OAAO,MAAM,SAASF,EAASE,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,IAAI,EAAE,KAAKA,EAAK,IAAI,EACvCC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,KAAM,KAAKT,IAAO,OAAOS,CAAO,EAChC,KAAM,KAAKR,IAAO,OAAOQ,CAAO,EAChC,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMN,EAASO,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAaC,CAAM,EAAIH,EAAK,MAAM,IAAI,OAAO,oBAAqB,GAAG,CAAC,GAAK,CAAC,EACpF,GAAI,CAACE,EAAa,OAClB,IAAME,EAASC,EAAM,MAAMF,EAAO,CAAC,cAAc,EAAG,CAAE,SAAU,GAAI,CAAC,EACrE,GAAIC,EAAO,SAAW,EAAG,OACzB,IAAMP,EAAW,IAAI,KAAKJ,CAAO,EAC3B,CAACC,EAAMY,CAAI,EAAIF,EAAO,IAAID,GAASF,EAAcJ,EAAUM,EAAM,KAAK,CAAC,CAAC,EAC9E,OAAON,EAAS,KAAKH,CAAI,EAAE,KAAKY,CAAI,CACrC,CAEA,WAAY,CAAE,MAAO,QAAS,KAAKjB,EAAM,SAAU,KAAKC,EAAM,EAAI,CACnE,ECjDO,IAAMiB,GAAN,cAA4BC,CAAa,CAE/CC,GACAC,GAAS,CAAC,EACVC,GAEA,WAAWC,EAAY,CACtB,OAAK,UAAU,QACf,KAAKH,GAAc,KAAK,YAAY,CAACG,CAAU,EAAGC,EAAO,KAAKJ,GAAa,YAAY,EAChF,MAFuB,KAAKA,EAGpC,CAEA,SAASK,EAAM,CACd,OAAK,UAAU,QACf,KAAKJ,GAAS,KAAK,YAAYI,EAAMC,GAAY,KAAKL,GAAQ,OAAO,EAC9D,MAFuB,KAAKA,GAAO,MAAM,CAGjD,CAEA,QAAQM,EAAa,CACpB,GAAI,CAAC,UAAU,OAAQ,OAAO,KAAKL,GACnC,GAAI,CAAC,KAAKD,GAAO,OAAQ,MAAM,IAAI,MAAM,2DAA2D,EACpG,YAAKC,GAAe,KAAK,YAAY,CAACK,CAAW,EAAGH,EAAO,KAAKF,GAAc,aAAa,EACpF,IACR,CAEA,WAAW,QAAS,CACnB,MAAO,CACN,OAAQ,CAACM,EAASL,IAAe,KAAK,SAASK,EAAS,CAAE,WAAAL,EAAY,MAAO,CAAC,CAAE,CAAC,EACjF,MAAO,CAACK,KAAYC,IAAU,KAAK,SAASD,EAAS,CAAE,MAAAC,CAAM,CAAC,CAC/D,CACD,CAEA,OAAO,SAASD,EAASE,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAAC,MAAM,QAAQD,GAAM,KAAK,GAAK,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,aAAc,QAAS,aAAa,EAAE,SAASA,CAAC,CAAC,EAAE,QACpI,OAAO,MAAM,SAASJ,EAASE,EAAOG,GAAa,CAC9CH,EAAK,YAAYG,EAAS,WAAWH,EAAK,UAAU,EACxDG,EAAS,MAAM,GAAGH,EAAK,KAAK,EACxBA,EAAK,aAAaG,EAAS,QAAQH,EAAK,WAAW,EACvDC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,WAAY,KAAKd,IAAa,OAAOc,CAAO,EAC5C,MAAO,KAAKb,GAAO,IAAIe,GAAKA,EAAE,OAAOF,CAAO,CAAC,EAC7C,YAAa,KAAKZ,IAAc,OAAOY,CAAO,EAC9C,GAAGC,CACJ,CAAC,CACF,CAEA,OAAO,MAAMP,EAASS,EAAMC,EAAe,CAC1C,GAAM,CAACC,EAAUC,CAAa,EAAIH,EAAK,MAAM,qCAAqC,GAAK,CAAC,EACxF,GAAI,CAACE,EAAW,OAChB,GAAM,CAAE,OAAQ,CAAEhB,EAAY,GAAGkB,CAAW,EAAG,QAASC,CAAQ,EAAIC,EAAM,IAAIH,EAAe,CAAC,OAAO,MAAM,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EAC/IP,EAAW,IAAI,KAAKL,CAAO,EAE7BL,EAAW,KAAK,GAAGU,EAAS,WAAWK,EAAcL,EAAUV,EAAW,KAAK,CAAC,CAAC,EAErF,QAAWqB,KAAUF,EAAS,CAC7B,IAAMG,EAAaJ,EAAW,MAAM,EACpC,GAAI,QAAQ,KAAKG,CAAM,EACtBX,EAAS,QAAQK,EAAcL,EAAUY,EAAW,QAAQ,QAAS,EAAE,EAAE,KAAK,CAAC,CAAC,UACtE,QAAQ,KAAKD,CAAM,EAC7BX,EAAS,MAAMK,EAAcL,EAAUY,EAAW,KAAK,EAAG,CAACnB,EAAU,CAAC,CAAC,MAEvE,OAAM,IAAI,MAAM,wBAAyBkB,CAAO,gCAAgC,CAElF,CACA,OAAOX,CACR,CAEA,WAAY,CACX,IAAMa,EAAM,CAAC,EACb,OAAI,KAAK1B,IAAa0B,EAAI,KAAK,KAAK1B,EAAW,EAC/C0B,EAAI,KAAK,GAAG,KAAKzB,EAAM,EACnB,KAAKC,IAAcwB,EAAI,KAAK,OAAQ,KAAKxB,EAAY,EAClD,QAASwB,EAAI,KAAK,GAAG,CAAE,OAAQ,KAAK,OAAO,UAAY,QAAU,QAAU,EAAG,EACtF,CACD,ECjFO,IAAMC,GAAN,cAAoBC,CAAiB,CACxC,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAC5C,WAAW,QAAS,CAAE,MAAO,OAAS,CACtC,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAE1C,WAAW,QAAS,CACnB,MAAO,CACN,MAAO,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACnE,CACD,CACD,ECXO,IAAMC,GAAN,cAAsBC,EAAsB,CAClD,WAAW,WAAY,CAAE,MAAO,CAAC,IAAI,CAAG,CAExC,WAAW,QAAS,CACnB,MAAO,CAAE,KAAM,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,SAAU,KAAM,QAAAC,CAAQ,CAAC,CAAG,CAC9F,CACD,ECNO,IAAMC,GAAN,cAAmBC,EAAsB,CAC5C,WAAW,WAAY,CAAE,MAAO,CAAC,IAAK,IAAK,IAAK,GAAG,CAAG,CAEzD,WAAW,QAAS,CACnB,MAAO,CACG,IAAK,CAACC,KAAYC,IAAYA,EAAQ,OAAS,GAAqD,KAAK,SAASD,EAAS,CAAE,SAAU,IAAK,QAAAC,CAAQ,CAAC,EAC3J,IAAK,CAACD,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,SAAU,IAAK,QAAAC,CAAQ,CAAC,EAC/E,YAAa,CAACD,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,SAAU,IAAK,QAAAC,CAAQ,CAAC,EACvF,IAAK,CAACD,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,SAAU,IAAK,QAAAC,CAAQ,CAAC,CAC7E,CACJ,CACJ,ECXO,IAAMC,GAAN,cAAmBC,CAAa,CAEtCC,GAEA,MAAMC,EAAO,CACZ,OAAK,UAAU,QACP,KAAKD,GAASC,EAAO,MADC,KAAKD,EAEpC,CAEA,aAAaC,EAAO,CAAE,OAAOA,IAAU,KAAKD,IAAU,MAAM,aAAaC,CAAK,CAAG,CAEjF,WAAW,QAAS,CACnB,MAAO,CACN,KAAMC,GAAW,KAAK,SAASA,EAAS,CAAE,MAAO,EAAK,CAAC,EACvD,MAAOA,GAAW,KAAK,SAASA,EAAS,CAAE,MAAO,EAAM,CAAC,EACzD,MAAO,CAACA,EAASD,IAAU,kBAAkB,KAAKA,CAAK,GAAK,KAAK,SAASC,EAAS,CAAE,MAAO,UAAU,KAAKD,CAAK,CAAE,CAAC,CACpH,CACD,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAAC,CAAC,GAAK,EAAK,EAAE,SAASD,GAAM,KAAK,GAAK,OAAO,KAAKA,CAAI,EAAE,OAAQE,GAAM,CAAC,CAAC,WAAY,OAAO,EAAE,SAASA,CAAC,CAAC,EAAE,QAC/G,OAAO,MAAM,SAASH,EAASC,EAAOG,GAAa,CAClDA,EAAS,MAAMH,EAAK,KAAK,EACzBC,IAAWE,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,MAAO,KAAKP,GACZ,GAAGQ,CACJ,CAAC,CACC,CAEH,OAAO,MAAMN,EAASO,EAAM,CAC3B,GAAI,UAAU,KAAKA,CAAI,EAAG,OAAQ,IAAI,KAAKP,CAAO,EAAG,MAAM,EAAI,EAC/D,GAAI,WAAW,KAAKO,CAAI,EAAG,OAAQ,IAAI,KAAKP,CAAO,EAAG,MAAM,EAAK,CAClE,CAEA,WAAY,CAAE,MAAO,GAAI,KAAKF,EAAO,EAAI,CAC1C,ECvCO,IAAMU,GAAN,cAA2BC,CAAiB,CAC/C,WAAW,gBAAiB,CAAE,MAAO,CAACC,CAAO,CAAG,CAChD,WAAW,iBAAkB,CAAE,MAAO,KAAO,CAC7C,WAAW,QAAS,CAAE,MAAO,QAAU,CAE1C,WAAW,QAAS,CACnB,MAAO,CACN,OAAQ,CAACC,KAAYC,IAAY,KAAK,SAASD,EAAS,CAAE,QAAAC,CAAQ,CAAC,CACpE,CACD,CACD,ECVO,IAAMC,GAAN,cAA4BC,CAAQ,CACvC,WAAW,aAAc,CAAE,MAAO,EAAG,CACrC,WAAW,QAAS,CAAE,MAAO,KAAO,CAEpC,WAAY,CACR,IAAMC,EAAM,MAAM,UAAU,EAC5B,OAAO,KAAK,uBAAuBC,GAC/B,IAAID,CAAG,IACPA,CACR,CACJ,ECXO,IAAME,GAAN,cAA8BC,EAAa,CAC9C,WAAW,MAAO,CAAE,MAAO,CAAC,IAAK,GAAG,CAAG,CAC3C,ECDO,IAAMC,GAAN,cAA6BC,EAAQ,CAE3CC,GAAkB,CAAC,EAEnB,IAAI,gBAAiB,CAAE,OAAO,KAAKA,GAAgB,MAAM,CAAG,CAE5D,IAAI,WAAY,CAAE,MAAO,EAAM,CAE/B,WAAW,QAAS,CAAE,MAAO,CAAC,CAAG,CAEjC,QAAQC,EAAaC,EAAY,CAChC,GAAI,CAAC,CAAC,mBAAoB,mBAAoB,kBAAkB,EAAE,SAASD,GAAa,SAAS,EAAG,MAAM,IAAI,MAAM,6DAA6D,EACjL,GAAI,KAAKD,GAAgB,CAAC,IAAMC,EAAY,KAAM,OAClD,GAAI,CAAC,MAAM,QAAQC,CAAU,EAAG,MAAM,IAAI,MAAM,+BAA+B,EAC/E,GAAI,CAACC,EAAUD,EAAW,KAAKF,GAAgB,CAAC,CAAC,CAAC,EAAG,MAAM,IAAI,MAAM,6CAA6C,KAAK,eAAe,CAAC,CAAC,EAAE,EAC1I,IAAMI,EAAQF,EAAW,KAAKF,GAAgB,CAAC,CAAC,EAAE,KAAKA,GAAgB,CAAC,CAAC,EACzE,GAAI,CAACI,EAAO,MAAM,IAAI,MAAM,2CAA2C,KAAK,cAAc,GAAG,EAC7F,OAAO,KAAK,MAAMA,CAAK,CACxB,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAI,GAAC,MAAM,QAAQD,GAAM,cAAc,GAAKA,EAAK,eAAe,SAAW,GAC3E,OAAO,MAAM,SAASD,EAAS,CAAE,OAAQ,EAAmB,GAAGC,CAAK,EAAIE,GAAa,CACpFA,EAASR,GAAkBM,EAAK,eAAe,MAAM,EACrDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,CAC5B,eAAgB,KAAKT,GAAgB,MAAM,EAC3C,GAAGU,CACJ,CAAC,CACF,CAEA,WAAY,CACX,OAAI,KAAK,MAAM,EAAU,MAAM,UAAU,EAClC,KAAK,OAAO,UAAY,QAAU,IAAK,KAAKV,GAAgB,KAAK,GAAG,CAAE,GAAK,IAAK,KAAKA,GAAgB,KAAK,GAAG,CAAE,EACvH,CACD,ECdO,IAAMW,EAAQ,CACpBC,GAEAC,GAEAC,GACAC,GACAC,GACAC,EACAC,GACAC,GAEAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GAEAC,GACAC,GAEAC,EAEAC,EACD,EC5DO,IAAMC,GAAN,cAAoBC,EAAsB,CAC7C,WAAW,gBAAiB,CAAE,OAAOC,CAAO,CAChD,ECFO,IAAMC,GAAN,cAAyBC,CAAiB,CAC7C,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAK,CAAG,CAClD,ECHO,IAAMC,EAAN,cAA8BC,EAAW,CAC5C,WAAW,QAAS,CAAE,MAAO,WAAa,CAC9C,ECAO,IAAMC,GAAN,cAAmCC,GAAwBC,CAAY,CAAE,CAE5EC,GAEH,IAAI,eAAgB,CAAE,MAAO,KAAO,CAEpC,aAAaC,EAAM,CAClB,OAAK,UAAU,QACf,KAAKD,GAAmB,KAAK,YAAYC,EAAMC,EAAiB,KAAKF,GAAkB,mBAAoB,KAAK,EACzG,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,iBAAiBE,EAAS,UAAUF,EAAK,eAAe,EACjEC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAASC,EAAgB,CAC/B,OAAO,MAAM,OAAOD,EAAS,KAAO,CACnC,GAAI,KAAKP,GAAmB,CAAE,gBAAiB,KAAKA,GAAiB,OAAOO,CAAO,CAAE,EAAI,CAAC,EAC1F,GAAGC,EAAe,CACnB,EAAE,CACH,CACD,EClBO,IAAMC,GAAN,cAA8BC,GAAuBC,EAAoB,CAAE,CACjF,WAAW,QAAS,CAAE,MAAO,QAAU,CAEvCC,GAAmB,CAAC,EACpBC,GACAC,GAAqB,CAAC,EAEtB,UAAUC,EAAQ,CACjB,OAAK,UAAU,QACf,KAAKH,GAAmB,KAAK,YAAYG,EAAQC,EAAY,KAAKJ,GAAkB,aAAa,EAC1F,MAFuB,KAAKA,EAGpC,CAEA,KAAKK,EAAO,CACX,OAAK,UAAU,QACf,KAAKJ,GAAS,KAAK,YAAY,CAACI,CAAK,EAAGC,EAAO,KAAKL,GAAQ,cAAe,MAAM,EAC1E,MAFuB,KAAKA,EAGpC,CAEA,SAASE,EAAQ,CAChB,OAAK,UAAU,QACf,KAAKD,GAAqB,KAAK,YAAYC,EAAQG,EAAO,KAAKJ,GAAoB,eAAgB,MAAM,EAClG,MAFuB,KAAKA,EAGpC,CAEA,QAAS,CACR,IAAMC,EAAS,KAAKF,IAAU,CAAC,KAAKA,EAAM,GAAK,CAAC,EAChD,OAAI,KAAKA,IAAU,KAAKC,GAAmB,QAI1CC,EAAO,KAAK,GAAG,KAAKD,GAAmB,OAAOK,GAAK,CAACA,EAAE,KAAK,EAAE,aAAa,KAAKN,GAAO,KAAK,EAAE,KAAK,CAAC,GAAMM,EAAE,MAAM,GAAK,KAAKN,GAAO,MAAM,GAAK,CAAC,KAAK,IAAIM,EAAE,MAAM,EAAG,KAAKN,GAAO,MAAM,EAAG,IAAI,CAAE,CAAC,EAExLE,CACR,CAEA,OAAO,SAASK,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,MACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAC9CF,EAAK,iBAAiB,QAAQE,EAAS,OAAO,GAAGF,EAAK,eAAe,EACzEE,EAAS,KAAKF,EAAK,KAAK,EACpBA,EAAK,mBAAmB,QAAQE,EAAS,MAAM,GAAGF,EAAK,iBAAiB,EAC5EC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,KAAO,CACnC,GAAI,KAAKZ,GAAiB,OAAS,CAAE,gBAAiB,KAAKA,GAAiB,IAAIO,GAAKA,EAAE,OAAOK,CAAO,CAAC,CAAE,EAAI,CAAC,EAC7G,MAAO,KAAKX,IAAQ,OAAOW,CAAO,EAClC,GAAI,KAAKV,GAAmB,OAAS,CAAE,kBAAmB,KAAKA,GAAmB,IAAIK,GAAKA,EAAE,OAAOK,CAAO,CAAC,CAAE,EAAI,CAAC,EACnH,GAAGC,CACJ,EAAE,CACH,CAEA,OAAO,MAAML,EAASM,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAOC,EAAaC,CAAK,EAAI,qCAAqC,KAAKJ,EAAK,KAAK,CAAC,GAAK,CAAC,EAChG,GAAI,CAACE,EAAO,OACZ,IAAML,EAAW,IAAI,KAAKH,CAAO,EAC3BW,EAAQ,KAAK,yBAAyBR,EAAUO,EAAK,KAAK,CAAC,EAE3DE,EAAUZ,GAAS,QAAQ,SAAW,WACtCa,EAAU,CAAE,KAAM,CAAE,SAAU,2BAA4B,KAAM,MAAO,EAAG,GAAID,IAAY,WAAa,CAAE,MAAO,CAAE,SAAU,sBAAuB,KAAM,OAAQ,CAAE,EAAI,CAAC,EAAI,GAAIA,IAAY,QAAU,CAAE,KAAKE,EAAW,EAAI,CAAC,EAAI,MAAMC,EAAa,GAAIH,IAAY,QAAU,CAAE,QAAQI,CAAc,EAAI,CAAC,EAAI,MAAMC,GAAa,UAAUC,CAAgB,EAC5V,CAAEC,EAAkB,GAAI,GAAGC,CAAO,EAAIC,EAAM,MAAMV,EAAO,OAAO,OAAOE,CAAO,EAAE,IAAIS,GAAKA,EAAE,OAASA,EAAE,QAAU,GAAGA,EAAE,MAAM,WAAaA,CAAC,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EAErLH,EAAgB,KAAK,GAAGhB,EAAS,OAAO,GAAGkB,EAAM,MAAMF,EAAiB,CAAC,GAAG,CAAC,EAAE,IAAIpB,GAAKQ,EAAcJ,EAAUJ,EAAE,KAAK,EAAG,CAACH,CAAU,CAAC,CAAC,CAAC,EAC5I2B,EAAM,QAAWC,KAASJ,EAAQ,CACjC,GAAI,SAAS,KAAKI,CAAK,EAAG,CACzBrB,EAAS,KAAKI,EAAcJ,EAAUqB,EAAM,QAAQ,QAAS,EAAE,EAAE,KAAK,EAAG,CAAC1B,CAAK,CAAC,CAAC,EACjF,QACD,CACA,GAAI,UAAU,KAAK0B,CAAK,EAAG,CAC1BrB,EAAS,MAAM,GAAGkB,EAAM,MAAMG,EAAM,QAAQ,SAAU,EAAE,EAAG,CAAC,GAAG,CAAC,EAAE,IAAIzB,GAAKQ,EAAcJ,EAAUJ,EAAE,KAAK,EAAG,CAACD,CAAK,CAAC,CAAC,CAAC,EACtH,QACD,CACA,QAAW2B,KAAQZ,EAAS,CAC3B,IAAMa,EAAOb,EAAQY,CAAI,EAAE,QAAQtB,EAAUqB,EAAM,KAAK,EAAGjB,CAAa,EACxE,GAAImB,EAAM,CAACvB,EAASsB,CAAI,EAAEC,CAAI,EAAG,SAASH,CAAM,CACjD,CACD,CACA,OAAId,GAAaN,EAAS,SAASM,CAAW,EACvCN,CACR,CAEA,WAAY,CACX,IAAMwB,EAAM,CAAC,QAAQ,EACrB,OAAAA,EAAI,KAAK,GAAG,KAAK,QAAQ,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,GAAG,CAAC,CAAC,EACrD,KAAK,OAAO,UAAY,SAC3BD,EAAI,KAAK,KAAKnC,GAAiB,KAAK,IAAI,CAAC,EACzCmC,EAAI,KAAK,QAAS,KAAKlC,EAAO,EAAE,EAChCkC,EAAI,KAAK,GAAG,KAAK,MAAM,EAAG,KAAK,MAAM,EAAG,KAAK,QAAQ,EAAG,KAAK,MAAM,EAAsB,KAAK,UAAU,CAAC,IAEzGA,EAAI,KAAK,QAAS,KAAKlC,EAAO,EAAE,EAC5B,KAAKC,GAAmB,QAAQiC,EAAI,KAAK,SAAU,KAAKjC,GAAmB,KAAK,IAAI,CAAE,EAAE,EAC5FiC,EAAI,KAAK,KAAK,MAAM,EAAG,KAAK,MAAM,EAAG,KAAK,UAAU,CAAC,GAE/CA,EAAI,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CACnC,CACD,ECrGO,IAAMC,GAAN,cAAyBC,EAAsB,CAClD,WAAW,WAAY,CAAE,MAAO,CAAC,GAAG,CAAG,CACvC,WAAW,WAAY,CAAE,MAAO,CAACC,EAAaC,EAAWC,CAAS,CAAG,CACrE,WAAW,WAAY,CAAE,MAAO,CAACC,EAAS,GAAGC,CAAK,CAAG,CAExD,OAAO,MAAMC,EAASC,EAAMC,EAAe,CAC1C,GAAM,CAACC,EAAKC,CAAG,EAAIC,EAAM,MAAMJ,EAAM,KAAK,SAAS,EAC7C,GAAI,CAACG,EAAK,OAChB,IAAME,EAAY,IAAI,KAAKN,CAAO,EAAG,SAAS,GAAG,EACjD,OAAAM,EAAS,IAAIJ,EAAcI,EAAUH,EAAI,KAAK,EAAG,KAAK,SAAS,CAAC,EAChEG,EAAS,IAAIJ,EAAcI,EAAUF,EAAI,KAAK,EAAI,KAAK,SAAS,CAAC,EAC1DE,CACR,CACD,ECfO,IAAMC,GAAN,cAAwBC,CAAiB,CAC/C,WAAW,gBAAiB,CAAE,MAAO,CAACC,EAAU,CAAG,CACnD,WAAW,QAAS,CAAE,MAAO,KAAO,CAEpC,SAAU,CACT,OAAO,KAAK,QAAQ,EAAE,OAAO,CAACC,EAAMC,IAC/BA,EAAW,IAAI,YAAaC,EAAoBF,EAAK,OAAOC,EAAW,IAAI,EAAE,QAAQ,CAAC,EACnFD,EAAK,OAAOC,EAAW,IAAI,CAAC,EACjC,CAAC,CAAC,CACN,CAEA,QAAS,CACR,OAAO,KAAK,QAAQ,EAAE,OAAO,CAACE,EAAMF,IAC/BA,EAAW,IAAI,YAAaG,EAAgBD,EAAK,OAAOF,EAAW,IAAI,EAAE,QAAQ,CAAC,EAC/EE,EAAK,OAAOF,EAAW,IAAI,CAAC,EACjC,CAAC,CAAC,CACN,CAEA,OAAOI,EAAM,CACZ,OAAO,MAAM,IAAI,GAAGA,EAAK,IAAKC,GAAQ,MAAM,QAAQA,CAAG,EAAI,CAAE,SAAUA,CAAI,EAAIA,CAAG,CAAC,CACpF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAGC,EAAU,KAAM,CACjD,MAAI,CAACF,EAAQ,SAAW,CAAC,KAAK,cAAsB,MAAM,OAAOA,EAASC,EAAQC,CAAO,EAClF,MAAM,OAAOF,EAASC,EAAmBP,GAAc,CAE7D,GAAIA,EAAW,IAAI,YAAaS,EAAW,CAC1C,GAAM,CAACC,EAAWC,CAAU,EAAI,KAAK,cAAc,gBAAgBX,EAAW,IAAI,EAAGM,CAAO,EACtFM,EAAYF,EAAU,QAAQ,EAAGV,EAAW,IAAI,CAAC,EACvD,OAAKW,EACE,CACN,SAAUb,GAAW,UACrB,IAAKa,EACL,IAAKC,EACL,SAAU,GACX,EANiB,MAOlB,CAEA,GAAIZ,EAAW,IAAI,YAAaC,EAAa,CAC5C,IAAMY,EAAW,CAAE,GAAGP,EAAS,kBAAmB,CAAE,EAC9C,CAACQ,EAAmB,CAACC,CAAc,CAAC,EAAI,KAAK,cAAc,cAAcf,EAAW,IAAI,EAAG,CAACA,EAAW,IAAI,CAAC,EAAGa,CAAQ,EAC7H,OAAIC,EAAkB,QAAQ,OAAQ,OAC/B,CACN,SAAUhB,GAAW,UACrB,IAAKgB,EACL,IAAKC,EACL,SAAU,GACX,CACD,CACA,MAAO,EACR,CAAC,CACF,CACD,EC/CO,IAAMC,GAA2BC,GAAS,cAAcA,CAAM,CAEpEC,GAAgB,CAAC,EACjBC,GAAc,CAAC,EACfC,GAEA,IAAI,cAAe,CAAE,OAAO,KAAKF,EAAe,CAChD,IAAI,YAAa,CAAE,OAAO,KAAKC,EAAa,CAC5C,IAAI,eAAgB,CAAE,OAAO,KAAK,cAAc,OAAOE,GAAK,CAACA,EAAE,SAAS,CAAG,CAC3E,IAAI,iBAAkB,CAAE,OAAO,KAAK,cAAc,OAAOA,GAAKA,EAAE,SAAS,CAAG,CAE5E,IAAI,oBAAqB,CAAE,MAAO,EAAM,CAExC,OAAOC,EAAM,CACZ,OAAK,UAAU,QACf,KAAKF,GAAa,KAAK,YAAYE,EAAMC,GAAW,KAAKH,GAAY,MAAO,KAAK,EAC1E,MAFuB,KAAKA,EAGpC,CAEA,sBAAsBI,EAAaC,EAAY,CAE9C,OADwB,KAAK,gBACN,OAAOC,GAAWA,EAAQ,QAAQF,EAAaC,CAAU,CAAC,CAClF,CAEA,oBAAoBE,EAAmB,CAuBtC,MAAO,CAtBS,SAAY,CAC3B,GAAK,KAAKT,GAAc,OACxB,QAAWU,KAAmB,KAAKV,GAAe,CACjD,IAAMW,EAAiB,MAAMF,EAAkBC,CAAe,EAC9D,KAAK,sBAAsBA,EAAiBC,CAAc,CAC3D,CACD,EACiB,MAAOJ,GAAe,CACtC,GAAI,CAAC,KAAKN,GAAY,OAAQ,OAAOM,EACrC,GAAI,KAAK,YAAc,mBACtB,QAAWK,KAAaL,EAAY,CACnC,KAAKN,GAAY,CAAC,EAAE,sBAAsB,KAAM,CAACW,CAAS,CAAC,EAC3D,IAAMC,EAAgB,MAAMJ,EAAkB,KAAKR,GAAY,CAAC,CAAC,CAClE,KAEA,SAAWa,KAAkB,KAAKb,GAAa,CAC9Ca,EAAe,sBAAsB,KAAMP,CAAU,EACrD,IAAMM,EAAgB,MAAMJ,EAAkBK,CAAc,CAC7D,CAED,OAAOP,CACR,CACyB,CAC1B,CAEA,cAAcQ,EAAaC,EAAeC,EAAU,CAAC,EAAG,CACvD,IAAMC,EAAa,IAAI,IACjBC,EAAoBJ,EAAY,OAAOE,EAAS,CAAC,EAAc,CAACG,EAAYC,IAAiB,CAClG,GAAID,aAAsBE,EAAW,CACpC,GAAM,CAACC,EAAWC,CAAU,EAAI,KAAK,gBAAgBJ,EAAYH,CAAO,EAExE,GADAC,EAAW,IAAIG,EAAcE,CAAS,EAClCC,EAAY,OAAOA,CACxB,KAAO,QAAOJ,EAAW,OAAOH,CAAO,CACxC,CAAC,EACKQ,EAAkBT,EAAc,IAAI,CAACU,EAAYC,IAAcD,EAAW,OAAOT,EAAS,CAAC,EAAc,CAACW,EAAWP,IACtHH,EAAW,IAAIG,CAAY,EACvBH,EAAW,IAAIG,CAAY,EAAE,QAAQJ,EAAQ,mBAAqBU,EAAWC,CAAS,EAEvFA,EAAU,OAAOX,CAAO,CAC/B,CAAC,EACF,OAAAC,EAAW,MAAM,EACV,CAACC,EAAmBM,CAAe,CAC3C,CAEAI,GAAyB,IAAI,IAC7BC,GAAuB,IAAI,IAC3BC,GAAsBC,EAAgB,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EACpE,gBAAgBC,EAAehB,EAAU,CAAC,EAAG,CAC5C,GAAI,CAAC,CAACiB,EAAaC,EAAWb,CAAS,EAAE,KAAKc,GAAKH,EAAc,IAAI,YAAaG,CAAC,EAClF,MAAM,IAAI,MAAM,yBAAyBH,CAAa,EAAE,EAEzD,IAAMI,EAAW,CAAE,GAAGpB,EAAS,QAAS,EAAM,EACxC,CAACqB,EAAkBC,EAAkBC,CAAgB,EAAIP,EAAc,KAAK,EAE5EQ,EAAQ,IAAK,CAAC,EAAE,OAAO,KAAK,YAAY,aAAa,GAAE,CAAC,EAAG,KAAK,UAAU,EAChFA,EAAM,KAAKF,EAAiB,OAAO,CAAC,EAEpC,IAAIxB,EAAckB,EAAc,IAAI,EACpCQ,EAAM,QAAQ1B,EAAY,OAAOsB,CAAQ,CAAC,EAE1C,IAAMK,EAAiB,CAACC,EAASC,EAAsB,KAAU,CAEhE,GADID,aAAmBE,KAAQF,EAAUA,EAAQ,cAAc,GAC3D,CAACC,GAAwBD,aAAmBG,GAAkB,MAAM,IAAI,MAAM,+DAA+Db,EAAc,IAAI,CAAC,cAAcU,EAAQ,SAAS,GAAG,EACtM,OAAIC,GAAuB,EAAED,aAAmBG,MAC/CH,EAAU,CAACA,CAAO,GAEZA,CACR,EACMI,EAAoB,CAACC,EAAKC,EAA8B,IAAM,CACnE,IAAMC,GAAaF,aAAeG,EAAUH,EAAI,OAAS,GAAKC,EAC9D,GAAIC,EAAYT,EAAM,QAAQ,EAAE,OAAQ,MAAM,IAAI,MAAM,iDAAiD,EACzG,GAAIS,EAAYT,EAAM,QAAQ,EAAE,OAAQ,MAAM,IAAI,MAAM,iDAAiD,EACzG,OAAOO,CACR,EAEA,GAAIf,EAAc,IAAI,YAAamB,GAAc,CAChDX,EAAM,QAAQ,EAAE,IAAID,EAAiB,KAAK,CAAC,EAC3C,IAAMa,EAAUf,EAAiB,KAAK,EAClC,CAAC,KAAK,UAAU,GAAG,IAAIe,CAAO,GAAK,CAAC,KAAKtB,GAAoB,IAAIsB,CAAO,GAC3E,KAAKtB,GAAoB,IAAIsB,CAAO,EAarC,IAAM9B,EAAY,CAAE,MAAAkB,EAAO,QAXX,CAACd,EAAWgB,IAAY,CACvCA,EAAUD,EAAeC,EAAS,EAAI,EACtC,IAAMW,EAAYC,GAAe,SAASd,EAAO,CAChD,eAAgB,CAAC,KAAK,KAAMd,EAAW0B,CAAO,CAC/C,CAAC,EACD,QAAWL,KAAOL,EAAS,CAC1B,IAAMa,EAAOT,EAAkBC,EAAK,CAAC,EAAE,OAAO/B,CAAO,EACrDuC,EAAK,QAAQ,KAAKF,EAAU,OAAO,CAAC,EACpCb,EAAM,OAAOe,CAAI,CAClB,CACD,CACoC,EACpC,YAAK1B,GAAqB,IAAIP,CAAS,EAChC,CAACA,CAAS,CAClB,CACAkB,EAAM,UAAU,GAAG,EASnB,IAAMlB,EAAY,CAAE,MAAAkB,EAAO,QAPX,CAACd,EAAWgB,IAAY,CACvC,IAAMa,EAAOd,EAAeC,EAAS,EAAK,EAC1C,OAAAF,EAAM,OAAOM,EAAkBS,CAAI,EAAE,OAAOvC,CAAO,CAAC,EAC7CsC,GAAe,SAAS,KAAM,CACpC,eAAgB,CAACd,EAAM,KAAMd,EAA8Ba,EAAiB,KAAK,CAAC,CACnF,CAAC,EAAE,OAAO,CACX,CACmC,EACnC,YAAKX,GAAuB,IAAIN,CAAS,EAClC,CAACA,EAAWe,EAAiB,OAAO,CAAe,CAC3D,CAEA,OAAO,SAASmB,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,WAAWE,EAAS,IAAIF,EAAK,SAAS,EAC3CA,EAAK,cAAc,SACtBE,EAAS5D,GAAgB4D,EAAS,YAAYF,EAAK,aAAc,KAAK,cAAe,CAAC,EAAG,cAAe,GAErGA,EAAK,YAAY,SACpBE,EAAS3D,GAAc2D,EAAS,YAAYF,EAAK,WAAY,KAAK,cAAe,CAAC,EAAG,YAAa,GAE/FA,EAAK,oBAAoB,SAC5BE,EAAS7B,GAAsB6B,EAAS,YAAY,CAACF,EAAK,kBAAkB,EAAG1B,CAAe,GAE/F2B,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAO3C,EAAS4C,EAAgB,CAC/B,IAAIC,EAAU,MAAM,OAAO7C,EAAS,KAAO,CAC1C,GAAI,KAAKf,GAAa,CAAE,UAAW,KAAKA,IAAY,OAAOe,CAAO,CAAE,EAAI,CAAC,EACzE,GAAG4C,EAAe,CACnB,EAAE,EACF,GAAI,KAAK9B,GAAoB,OAC5B,GAAId,EAAQ,QAAS,CACpB,IAAM8C,GAAWD,EAAQ,iBAAiB,SAAW,CAAC,GAAG,OAAO,KAAK/B,GAAoB,OAAOd,CAAO,EAAE,OAAO,EAChH6C,EAAU,CAAE,GAAGA,EAAS,gBAAiB,CAAE,QAAAC,CAAQ,CAAE,CACtD,MACCD,EAAU,CAAE,GAAGA,EAAS,mBAAoB,KAAK/B,GAAoB,OAAOd,CAAO,CAAE,EAGvF,OAAO6C,CACR,CAEA,aAAaJ,EAAMzC,EAAS,CAC3B,OAAI,KAAKY,GAAuB,MAAQ,KAAKC,GAAqB,QACjE4B,EAAK,aAAe,CAAC,GAAG,KAAK7B,EAAsB,EAAE,IAAImC,GAAKA,EAAE,MAAM,OAAO,CAAE,GAAG/C,EAAS,QAAS,EAAM,CAAC,CAAC,EAC5GyC,EAAK,WAAa,CAAC,GAAG,KAAK5B,EAAoB,EAAE,IAAIkC,GAAKA,EAAE,MAAM,OAAO,CAAE,GAAG/C,EAAS,QAAS,EAAM,CAAC,CAAC,EACxG,KAAKY,GAAuB,MAAM,EAClC,KAAKC,GAAqB,MAAM,GAE1B,MAAM,aAAa4B,EAAMzC,CAAO,CACxC,CACD,ECtLO,IAAMgD,GAAN,cAA+BC,EAAU,CAC/C,WAAW,QAAS,CAAC,CAElBC,GACHC,GAEA,eAAeC,EAAM,CACpB,OAAK,UAAU,QACf,KAAKD,GAAe,KAAK,YAAYC,EAAMC,EAAa,KAAKF,GAAc,eAAgB,KAAK,EACzF,MAFuB,KAAKA,EAGpC,CAEA,SAASC,EAAM,CACd,OAAK,UAAU,QACf,KAAKF,GAAe,KAAK,YAAYE,EAAME,EAAa,KAAKJ,GAAc,eAAgB,OAAO,EAC3F,MAFuB,KAAKA,EAGpC,CAEA,OAAO,SAASK,EAASC,EAAMC,EAAW,KAAM,CAC/C,OAAO,MAAM,SAASF,EAASC,EAAOE,GAAa,CAC9CF,EAAK,aAAaE,EAAS,YAAYF,EAAK,WAAW,EACvDA,EAAK,aAAaE,EAAS,MAAMF,EAAK,WAAW,EACrDC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAGC,EAAU,KAAM,CACjD,OAAO,MAAM,OAAOF,EAAS,CAC5B,GAAI,KAAKR,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAOQ,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAI,KAAKT,GAAe,CAAE,YAAa,KAAKA,GAAa,OAAOS,CAAO,CAAE,EAAI,CAAC,EAC9E,GAAGC,CACJ,EAAGC,CAAO,CACX,CAEA,WAAW,OAAQ,CAAE,MAAO,2GAA6G,CACzI,OAAO,MAAMN,EAASO,EAAMC,EAAe,CAC1C,GAAM,CAAEC,EAAiBC,EAAaC,EAAQC,CAAW,EAAIL,EAAK,MAAM,IAAI,OAAO,IAAK,KAAK,KAAM,eAAgB,GAAG,CAAC,GAAK,CAAC,EAC7H,GAAI,CAACE,EAAiB,OAChB,GAAI,gBAAgB,KAAKE,CAAM,EAAG,OAAO,IAAI,KAAKX,CAAO,EACzD,GAAM,CAACa,EAAgBC,CAAS,EAAIC,EAAM,MAAMH,EAAY,CAAC,OAAO,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EACxGT,EAAW,MAAM,MAAMH,EAASa,EAAgBL,CAAa,EACnE,OAAIE,GAAaP,EAAS,YAAYK,EAAcL,EAAUO,EAAa,CAACZ,CAAW,CAAC,CAAC,EACrFgB,GAAWX,EAAS,MAAMK,EAAcL,EAAUW,EAAU,KAAK,EAAG,CAACf,CAAW,CAAC,CAAC,EAC/EI,CACX,CAEH,WAAY,CACX,IAAMa,EAAM,CAAC,EACR,OAAI,KAAK,OAAO,UAAY,QAASA,EAAI,KAAK,yBAAyB,EAC/DA,EAAI,KAAK,eAAgB,KAAKpB,GAAe,GAAI,KAAKA,EAAa,IAAM,EAAG,GAAI,KAAK,QAAQ,EAAE,OAAS,gBAAkB,YAAa,EAAE,EAChJoB,EAAI,KAAK,MAAM,UAAU,CAAC,EAC5B,KAAKrB,IAAcqB,EAAI,KAAK,KAAKrB,EAAY,EAC1CqB,EAAI,KAAK,GAAG,CACpB,CACD,EC/CO,IAAMC,GAAN,MAAMC,UAAwBC,GAAyBC,EAAoB,CAAE,CACnF,WAAW,QAAS,CAAE,MAAO,QAAU,CACvC,WAAW,eAAgB,CAAE,MAAO,CAACF,CAAe,CAAG,CAEvDG,GACAC,GACAC,GACAC,GACAC,GAEA,KAAKC,EAAO,CACX,OAAK,UAAU,QACf,KAAKL,GAAS,KAAK,YAAY,CAACK,CAAK,EAAGC,EAAgB,KAAKN,GAAQ,aAAc,MAAM,EAClF,MAFuB,KAAKA,EAGpC,CAEA,WAAWO,EAAM,CAChB,OAAK,UAAU,QACf,KAAKN,GAAe,KAAK,YAAYM,EAAMC,EAAa,KAAKP,GAAc,eAAgB,KAAK,EACzF,MAFuB,KAAKA,EAGpC,CAEA,UAAUM,EAAM,CACf,OAAK,UAAU,QACf,KAAKL,GAAgB,KAAK,YAAYK,EAAME,GAAc,KAAKP,GAAe,gBAAiB,KAAK,EAC7F,MAFuB,KAAKA,EAGpC,CAEA,UAAUQ,EAAO,CAChB,OAAK,UAAU,QACf,KAAKP,GAAgB,KAAK,YAAYO,EAAOC,GAAiB,KAAKR,GAAe,gBAAiB,QAAQ,EACpG,MAFuB,KAAKA,EAGpC,CAEA,cAAcI,EAAM,CACnB,OAAK,UAAU,QACf,KAAKH,GAAoB,KAAK,YAAYG,EAAMK,GAAkB,KAAKR,GAAmB,qBAAsB,YAAY,EACrH,MAFuB,KAAKA,EAGpC,CAEA,QAAS,CACR,IAAMS,EAAWC,EAAe,SAAS,KAAM,CAAE,KAAM,GAAI,OAAQ,CAAC,CAAE,CAAC,EACvE,OAAAD,EAAS,MAAM,KAAKb,GAAO,OAAO,EAAE,OAAO,CAAE,eAAgB,EAAK,CAAC,CAAC,EAC7Da,CACR,CAEAE,GACA,SAASC,EAAaC,EAAe,CACpC,GAAID,IAAgB,eACpB,OAAIA,IAAgB,mBACd,KAAKD,KAAqB,KAAKA,GAAsB,KAAK,OAAO,GAC/D,KAAKA,IAEN,MAAM,SAASC,EAAaC,CAAa,CACjD,CAEA,OAAO,SAASC,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAKD,GAAM,MACX,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,KAAKF,EAAK,KAAK,EACpBA,EAAK,aAAaE,EAAS,QAAQF,EAAK,WAAW,EACnDA,EAAK,cAAcE,EAAS,OAAOF,EAAK,YAAY,EACpDA,EAAK,cAAcE,EAAS,OAAOF,EAAK,YAAY,EACpDA,EAAK,kBAAkBE,EAAS,WAAWF,EAAK,gBAAgB,EACpEC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,IAAM,CAClC,IAAIE,EAAaC,EAAcC,EAE/B,GAAIJ,EAAQ,SAAW,KAAKrB,IAAgB,KAAKC,GAAe,CAC/D,GAAM,CAAEyB,EAAmBC,CAAgB,EAAI,KAAK,cAAc,KAAK3B,GAAc,KAAKC,GAAc,QAAQ,EAAGoB,CAAO,EAC1HE,EAAcG,EACdF,EAAe,CACd,SAAUhB,GAAa,UACvB,QAASmB,CACV,CACD,MACCJ,EAAc,KAAKvB,IAAc,OAAOqB,CAAO,EAC/CG,EAAe,KAAKvB,IAAe,OAAOoB,CAAO,EACjDI,EAAe,KAAKvB,IAAe,OAAOmB,CAAO,EAGlD,IAAMO,EAAmB,KAAKzB,IAAmB,OAAOkB,CAAO,EAC/D,MAAO,CACN,MAAO,KAAKtB,IAAQ,OAAOsB,CAAO,EAClC,GAAIE,EAAc,CAAE,YAAAA,CAAY,EAAI,CAAC,EACrC,GAAIC,EAAe,CAAE,aAAAA,CAAa,EAAI,CAAC,EACvC,GAAIC,EAAe,CAAE,aAAAA,CAAa,EAAI,CAAC,EACvC,GAAIG,EAAmB,CAAE,iBAAAA,CAAiB,EAAI,CAAC,EAC/C,GAAGN,CACJ,CACD,CAAC,CACF,CAEA,OAAO,MAAML,EAASY,EAAMC,EAAe,CAC1C,GAAM,CAACC,EAAOC,EAAaC,CAAI,EAAK,IAAI,OAAO,IAAI,KAAK,MAAM,6CAA8C,GAAG,EAAG,KAAKJ,EAAK,KAAK,CAAC,GAAK,CAAC,EACxI,GAAI,CAACE,EAAO,OACZ,IAAMX,EAAW,IAAI,KAAKH,CAAO,EAC3BiB,EAAQ,KAAK,yBAAyBd,EAAUa,EAAK,KAAK,CAAC,EAE3DE,EAAUlB,GAAS,QAAQ,SAAW,WACtCmB,EAAU,CAAE,OAAQ5B,GAAc,GAAI2B,IAAY,QAAU,CAAE,IAAKE,EAAU,EAAI,CAAC,EAAI,OAAQ3B,GAAiB,WAAYC,GAAkB,UAAW2B,CAAgB,EACxK,CAACC,EAAqB,GAAGC,CAAM,EAAIC,EAAM,MAAMP,EAAO,OAAO,OAAOE,CAAO,EAAE,IAAIM,GAAKA,EAAE,OAASA,EAAE,QAAU,GAAGA,EAAE,MAAM,WAAaA,CAAC,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EAChL,CAACC,EAAWpB,EAAc,EAAE,EAAIkB,EAAM,MAAMF,EAAqB,CAAC,CAAC,EAEzEnB,EAAS,KAAKU,EAAcV,EAAUuB,EAAU,KAAK,EAAG,CAACtC,CAAc,CAAC,CAAC,EACrEkB,EAAY,KAAK,GAAGH,EAAS,QAAQU,EAAcV,EAAUG,EAAY,KAAK,EAAG,CAAChB,CAAW,CAAC,CAAC,EACnGqC,EAAM,QAAWC,KAASL,EACzB,QAAWM,KAAQV,EAAS,CAC3B,IAAMW,EAAOX,EAAQU,CAAI,EAAE,QAAQ1B,EAAUyB,EAAM,KAAK,EAAGf,CAAa,EACxE,GAAIiB,EAAM,CAAE3B,EAAS0B,CAAI,EAAEC,CAAI,EAAG,SAASH,CAAM,CAClD,CAED,OAAIZ,GAAaZ,EAAS,SAASY,CAAW,EACvCZ,CACR,CAEA,WAAY,CACX,IAAM4B,EAAM,CAAC,KAAK,YAAY,MAAM,EACpC,OAAAA,EAAI,KAAK,GAAG,KAAK,QAAQ,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,GAAG,CAAC,CAAC,EACzDD,EAAI,KAAK,OAAQ,KAAKjD,EAAM,EACxB,KAAK,OAAO,UAAY,SAAW,KAAK,IAAI,EAC/CiD,EAAI,KAAK,KAAK,IAAI,CAAC,GAEnBA,EAAI,KAAK,KAAKhD,EAAY,EACtB,KAAKC,GAAe+C,EAAI,KAAK,KAAK/C,EAAa,EAC9C+C,EAAI,KAAK,KAAK9C,EAAa,GAEjC8C,EAAI,KAAK,KAAK7C,EAAiB,EAC/B6C,EAAI,KAAK,KAAK,UAAU,CAAC,EAClBA,EAAI,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CACnC,CACD,EChJO,IAAMC,GAAN,MAAMC,CAAU,CAEnB,YAAYC,EAAQC,EAAM,CACtB,OAAO,eAAe,KAAM,IAAK,CAC7B,MAAO,CACH,OAAAD,EACA,KAAAC,CACJ,CACJ,CAAC,CACL,CAEA,IAAI,QAAS,CAAE,OAAO,KAAK,EAAE,MAAQ,CAErC,IAAK,CAAE,OAAO,KAAK,EAAE,KAAK,EAAI,CAE9B,iBAAkB,CAAE,OAAO,KAAK,EAAE,KAAK,gBAAkB,CAEzD,KAAKC,EAAc,GAAO,CACtB,OAAIA,EAAoB,KAAK,aAAa,IAAM,YAAc,KAAK,EAAE,KAAK,OAAS,KAAK,EAAE,KAAK,KACxF,KAAK,aAAa,IAAM,UAAY,KAAK,EAAE,KAAK,OAAS,KAAK,EAAE,KAAK,IAChF,CAEA,QAAS,CACL,GAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,OAAAC,EAAS,CAAC,EAAG,OAAAC,CAAO,EAAI,KAAK,EAAE,KACpD,OAAOC,EAAe,SAAS,KAAK,OAAQ,CAAE,KAAAJ,EAAM,GAAIC,EAAQ,CAAE,MAAAA,CAAM,EAAI,CAAC,EAAI,OAAAC,EAAQ,OAAAC,CAAO,CAAC,CACrG,CAEA,UAAW,CACP,YAAK,EAAE,UAAY,KAAK,EAAE,YAAc,KAAK,EAAE,KAAK,UAAY,CAAC,GAAG,IAAIE,GAAW,IAAIT,EAAU,KAAK,OAAQS,CAAO,CAAC,EAC/G,KAAK,EAAE,SAClB,CAEA,aAAc,CAAE,OAAO,KAAK,EAAE,KAAK,YAAc,CAEjD,YAAa,CAAE,OAAO,KAAK,EAAE,KAAK,WAAa,CAE/C,aAAc,CAAE,OAAO,KAAK,EAAE,KAAK,cAAgB,CAAC,KAAK,EAAE,KAAK,WAAW,CAAG,CAE9E,WAAY,CAAE,OAAO,KAAK,YAAY,EAAE,OAAO,CAACC,EAAMC,IAAMD,IAASC,EAAI,KAAK,WAAW,EAAIA,EAAI,GAAI,CAAC,CAAG,CAEzG,aAAc,CAAE,MAAO,CAAC,GAAG,KAAK,YAAY,CAAC,EAAE,QAAQ,EAAE,OAAO,CAACD,EAAMC,IAAMD,IAASC,EAAI,KAAK,WAAW,EAAIA,EAAI,GAAI,CAAC,CAAG,CAE1H,YAAa,CAAE,OAAO,KAAK,IAAI,GAAG,KAAK,YAAY,CAAC,CAAG,CAEvD,cAAe,CAAE,OAAO,KAAK,EAAE,KAAK,aAAe,CAEnD,YAAa,CAAE,OAAO,KAAK,EAAE,KAAK,WAAa,CAE/C,YAAa,CAAE,OAAO,KAAK,EAAE,KAAK,WAAa,CAE/C,gBAAiB,CAAE,OAAO,KAAK,EAAE,KAAK,gBAAkB,CAExD,iBAAkB,CAAE,OAAO,KAAK,EAAE,KAAK,iBAAmB,CAE1D,cAAe,CAAE,OAAO,KAAK,EAAE,KAAK,aAAe,CAEnD,cAAe,CAAE,OAAO,KAAK,EAAE,KAAK,aAAe,CAEnD,kBAAmB,CAAE,OAAO,KAAK,EAAE,KAAK,kBAAoB,CAE5D,mBAAoB,CAAE,OAAO,KAAK,EAAE,KAAK,mBAAqB,CAE9D,eAAgB,CACZ,IAAMC,EAAW,KAAK,EAAE,KAAK,SAAW,MAAQ,CAAC,OAAQ,UAAU,EAAK,KAAK,EAAE,KAAK,SAAW,WAAa,CAAC,WAAY,MAAM,EAAI,CAAC,OAAO,EAC3I,OAAO,KAAK,aAAa,IAAM,WAAaA,EAAS,QAAQ,EAAE,CAAC,EAAIA,EAAS,CAAC,CAClF,CAEA,YAAa,CACT,OAAI,KAAK,aAAa,IAAM,WAAmB,KAAK,QAAQ,EAAI,EACzD,CAAC,KAAK,QAAQ,EAAI,EAAG,GAAG,KAAK,SAAS,EAAE,IAAIC,GAAKA,EAAE,WAAW,CAAC,CAAC,EAAE,KAAK;AAAA,CAAI,CACtF,CAEA,OAAO,SAASC,EAASZ,EAAM,CAC3B,OAAO,IAAI,KAAKY,EAASZ,CAAI,CACjC,CAEA,QAAS,CACL,OAAO,KAAK,EAAE,IAClB,CAEA,QAAQa,EAAW,GAAO,CACtB,IAAIC,EAAaC,GAAW,SAAS,KAAK,OAAQ,CAAC,KAAK,OAAO,CAAC,CAAC,EAC7DC,EAAY,KAAK,aAAa,IAAM,WACxC,OAAIH,IAAUG,EAAY,CAACA,GACvBA,IACAF,EAAaA,EAAW,YAAY,CAAE,eAAgB,GAAM,oBAAqB,KAAK,aAAa,IAAM,UAAW,CAAC,GAElHA,EAAW,YAAY,CAAE,YAAa,SAAU,CAAC,EAAE,QAAQ,EAAE,CAAC,CACzE,CAEA,MAAM,oBAAqB,CAEvB,OAD0B,MAAM,KAAK,OAAO,SAAS,KAAK,KAAK,CAAC,EAAE,UAAU,CAAE,UAAW,KAAK,aAAa,IAAM,WAAY,aAAc,EAAM,CAAC,GAAM,CAAC,GACjI,KAAK,IAAM,KAAK,EAAE,KAAK,EACnD,CAEA,MAAM,SAASG,EAAiB,CAAC,EAAG,CAChC,GAAI,KAAK,aAAa,IAAM,WAAY,MAAM,IAAI,MAAM,4BAA4B,EACpF,OAAO,MAAM,KAAK,QAAQA,CAAc,CAC5C,CAEA,MAAM,SAASC,EAAe,CAAC,EAAG,CAC9B,GAAI,KAAK,aAAa,IAAM,SAAU,MAAM,IAAI,MAAM,0BAA0B,EAChF,OAAO,MAAM,KAAK,QAAQA,CAAY,CAC1C,CAEA,MAAM,QAAQC,EAAgB,CAAC,EAAG,CAC9B,GAAI,KAAK,gBAAgB,GACrB,GAAI,KAAK,aAAa,IAAM,SAAU,CAClC,IAAMC,EAAQ,KAAK,QAAQ,EAAI,EAC3BA,GAAO,MAAM,KAAK,OAAO,SAAS,UAAW,IAAM,KAAK,OAAO,MAAMA,CAAK,CAAC,CACnF,MACG,CACH,GAAI,CAAE,MAAM,KAAK,mBAAmB,EAAI,MAAM,IAAI,MAAM,wBAAwB,EAChF,MAAM,KAAK,OAAO,SAAS,UAAW,IAAM,KAAK,OAAO,MAAM,KAAK,QAAQ,EAAI,CAAC,CAAC,CACrF,CACA,IAAMC,EAAW,MAAM,KAAK,OAAO,SAAS,EAEtCC,EAAe,KAAK,aAAa,IAAM,WAAa,SAAW,WAC/DC,EAAgB,MAAMF,EAAS,MAAM,YAAY,EAAE,OAAO,CAC5D,KAAM,CACD,cAAkBC,EACnB,CAAC,GAAGA,CAAY,OAAO,EAAGE,GAAKA,EAAE,IAAI,EACrC,CAAC,GAAGF,CAAY,OAAO,EAAGH,EAAc,MAAQ,KAAK,GAAGG,CAAY,MAAM,EAAE,EAC5E,CAAC,GAAGA,CAAY,YAAY,EAAG,KAAK,OAAO,OAAO,UAAY,KAAK,GAAGA,CAAY,UAAU,EAAE,EAC9F,CAAC,GAAGA,CAAY,aAAa,EAAIE,GAAMA,EAAE,GAAG,KAAK,OAAO,OAAO,UAAY,QAAU,gBAAkB,gBAAgB,CAC3H,EACA,MAAQA,GAAMA,EAAE,GAAG,KAAOA,GAAMA,EAAE,MAAM,KAAK,EAAE,KAAK,EAAE,CAAC,EAAG,UAAW,CAAC,GAAG,CAC7E,CAAC,EACD,QAAWjB,KAAW,KAAK,SAAS,EAChC,MAAMA,EAAQ,QAAQY,CAAa,EAEvC,YAAK,EAAE,KAAOI,EAAc,CAAC,EACtB,EACX,CACJ,ECtIO,IAAME,GAAN,cAA0BC,EAAqBC,EAAM,CAAE,CAAC,ECExD,IAAMC,GAAN,MAAMC,UAAwBC,GAAcC,EAAe,CAAE,CACnE,WAAW,QAAS,CAAE,MAAO,QAAU,CACvC,WAAW,eAAgB,CAAE,MAAO,CAACF,CAAe,CAAG,CACvD,WAAW,aAAc,CAAE,MAAO,CAACE,EAAe,CAAG,CAErD,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,GAAI,CAACD,EAAQ,QAAS,OAAO,MAAM,OAAOA,EAASC,CAAM,EACzD,GAAM,CAAE,SAAUC,EAAG,MAAAC,EAAO,GAAGC,CAAU,EAAI,MAAM,OAAOJ,EAASC,CAAM,EAEzE,GAAI,KAAK,WAAW,EAAG,MAAM,IAAI,MAAM,6CAA6C,EACpF,IAAMI,GAAW,KAAK,IAAI,EAAI,KAAK,IAAI,EAAE,QAAQ,EAAI,KAAK,QAAQ,EAAE,QAAQ,GAAG,IAAIC,GAAKA,EAAE,KAAK,CAAC,EAC1FC,EAAQ,KAAK,OAAO,UAAY,QAAUC,GAAOC,GAAKA,EAAE,GAAG,SAAUD,CAAG,EAAIA,GAAO,CAAC,WAAYA,CAAG,EACnGE,EAAmBC,GAAiB,SAAS,KAAM,CAAE,QAAS,CAAC,CAAE,CAAC,EACxE,QAAWH,KAAOH,EAASK,EAAiB,IAAI,CAACF,EAAKD,EAAMC,CAAG,CAAC,CAAC,EAEjE,GAAI,KAAK,OAAO,UAAY,QAAS,CACpC,IAAMI,EAAY,KAAK,KAAK,EAAE,OAAO,EAC/BC,EAAa,CAAC,EAAE,OAAOD,EAAU,WAAW,GAAK,CAAC,CAAC,EAAE,OAAOA,EAAU,WAAW,CAAC,EAAE,IAAIE,GAAMA,EAAG,QAAQ,CAAC,EAChH,GAAI,CAACD,EAAW,OAAQ,MAAM,IAAI,MAAM,SAAU,KAAK,KAAK,EAAE,MAAM,CAAE,eAAgB,EAAK,CAAC,CAAE,gHAAgH,EAC9M,IAAME,EAAiBF,EAAW,KAAKG,GAAWC,GAAWD,EAASX,CAAO,EAAE,MAAM,GAAKQ,EAAW,CAAC,EACtGH,EAAiB,YAAY,GAAGK,CAAc,CAC/C,CACM,MAAO,CACH,SAAUhB,GAAgB,UACnC,GAAGK,EACH,iBAAkBM,EAAiB,OAAOV,CAAO,EACjD,GAAIG,EAAQ,CAAE,MAAAA,CAAM,EAAI,CAAC,CACpB,CACP,CACD,ECtBO,IAAMe,GAAN,cAA8BC,GACpCC,GAAuBC,EAAoB,CAC5C,CAAE,CACD,WAAW,QAAS,CAAE,MAAO,QAAU,CACvC,WAAW,eAAgB,CAAE,MAAO,CAACC,EAAe,CAAG,CAEvDC,GAAU,CAAC,EACXC,GAAoB,CAAC,EAErB,SAASC,EAAQ,CAChB,OAAK,UAAU,QACf,KAAKF,GAAU,KAAK,YAAYE,EAAQC,EAAO,KAAKH,GAAS,aAAc,MAAM,EAC1E,MAFuB,KAAKA,EAGpC,CAEA,QAAQE,EAAQ,CACf,OAAK,UAAU,QACf,KAAKD,GAAoB,KAAK,YAAYC,EAAQC,EAAO,KAAKF,GAAmB,cAAe,MAAM,EAC/F,MAFuB,KAAKA,EAGpC,CAEA,QAAS,CAAE,OAAO,KAAKD,GAAQ,OAAO,KAAKC,EAAiB,CAAG,CAE/D,OAAO,SAASG,EAASC,EAAMC,EAAW,KAAM,CAC/C,GAAK,MAAM,QAAQD,GAAM,MAAM,EAC/B,OAAO,MAAM,SAASD,EAASC,EAAOE,GAAa,CAClDA,EAAS,MAAM,GAAGF,EAAK,MAAM,EACzBA,EAAK,kBAAkB,QAAQE,EAAS,KAAK,GAAGF,EAAK,gBAAgB,EACzEC,IAAWC,CAAQ,CACpB,CAAC,CACF,CAEA,OAAOC,EAAU,CAAC,EAAGC,EAAS,CAAC,EAAG,CACjC,OAAO,MAAM,OAAOD,EAAS,KAAO,CACnC,OAAQ,KAAKR,GAAQ,IAAKU,GAAMA,EAAE,OAAOF,CAAO,CAAC,EACjD,GAAI,KAAKP,GAAkB,OAAS,CAAE,iBAAkB,KAAKA,GAAkB,IAAKS,GAAMA,EAAE,OAAOF,CAAO,CAAC,CAAE,EAAI,CAAC,EAClH,GAAGC,CACJ,EAAE,CACH,CAEA,OAAO,MAAML,EAASO,EAAMC,EAAe,CAC1C,GAAM,CAACC,EAAOC,EAAaC,CAAI,EAAI,qCAAqC,KAAKJ,EAAK,KAAK,CAAC,GAAK,CAAC,EAC9F,GAAI,CAACE,EAAO,OACZ,IAAMN,EAAW,IAAI,KAAKH,CAAO,EAC3BY,EAAQ,KAAK,yBAAyBT,EAAUQ,EAAK,KAAK,CAAC,EAE3DE,EAAUb,GAAS,QAAQ,SAAW,WACtCc,EAAU,CAAE,GAAID,IAAY,WAAa,CAAE,IAAKE,GAAW,KAAM,CAAE,SAAU,2BAA4B,KAAM,MAAO,CAAE,EAAI,CAAC,EAAI,KAAKC,GAAY,GAAIH,IAAY,QAAU,CAAE,IAAKE,EAAU,EAAI,CAAC,EAAI,MAAOE,EAAa,GAAIJ,IAAY,QAAU,CAAE,MAAOK,EAAY,EAAI,CAAC,EAAI,UAAWC,CAAgB,EAC7S,CAACC,EAAW,GAAGC,CAAM,EAAIC,EAAM,MAAMV,EAAO,OAAO,OAAOE,CAAO,EAAE,IAAIS,GAAKA,EAAE,OAASA,EAAE,QAAU,GAAGA,EAAE,MAAM,WAAaA,CAAC,EAAG,CAAE,SAAU,IAAK,eAAgB,EAAK,CAAC,EAE5KpB,EAAS,MAAM,GAAGmB,EAAM,MAAMF,EAAW,CAAC,GAAG,CAAC,EAAE,IAAId,GAAKE,EAAcL,EAAUG,EAAE,KAAK,EAAG,CAACP,CAAK,CAAC,CAAC,CAAC,EACpGyB,EAAM,QAAWC,KAASJ,EAAQ,CACjC,GAAI,SAAS,KAAKI,CAAK,EAAG,CACzBtB,EAAS,KAAK,GAAGmB,EAAM,MAAMG,EAAM,QAAQ,QAAS,EAAE,EAAG,CAAC,GAAG,CAAC,EAAE,IAAInB,GAAKE,EAAcL,EAAUG,EAAE,KAAK,EAAG,CAACP,CAAK,CAAC,CAAC,CAAC,EACpH,QACD,CACA,QAAW2B,KAAQZ,EAAS,CAC3B,IAAMa,EAAOb,EAAQY,CAAI,EAAE,QAAQvB,EAAUsB,EAAM,KAAK,EAAGjB,CAAa,EACxE,GAAImB,EAAM,CAAExB,EAASuB,CAAI,EAAEC,CAAI,EAAG,SAASH,CAAM,CAClD,CACD,CACA,OAAId,GAAaP,EAAS,SAASO,CAAW,EACvCP,CACR,CAEA,WAAY,CACX,IAAMyB,EAAM,CAAC,QAAQ,EACrB,OAAAA,EAAI,KAAK,GAAG,KAAK,QAAQ,EAAE,IAAIC,GAAKA,EAAE,QAAQ,KAAM,GAAG,CAAC,CAAC,EACzDD,EAAI,KAAK,KAAKhC,GAAQ,KAAK,IAAI,CAAC,EAC5B,KAAK,OAAO,UAAY,QAC3BgC,EAAI,KAAK,GAAG,KAAK,MAAM,EAAG,KAAK,IAAI,EAAG,KAAK,MAAM,EAAG,KAAK,MAAM,EAAsB,KAAK,UAAU,CAAC,GAErGA,EAAI,KAAK,KAAK,IAAI,CAAC,EACf,KAAK/B,GAAkB,QAAQ+B,EAAI,KAAK,QAAQ,KAAK/B,GAAkB,KAAK,IAAI,CAAC,EAAE,EACvF+B,EAAI,KAAK,GAAG,KAAK,MAAM,EAAG,KAAK,MAAM,EAAG,KAAK,UAAU,CAAC,GAElDA,EAAI,OAAOC,GAAKA,CAAC,EAAE,KAAK,GAAG,CACnC,CACD,ECrEA,IAAOC,GAAQ,CAEdC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEA,GAAGC,CACJ,ECpCO,IAAMC,GAAN,KAAa,CAKnB,OAAO,QAAUC,GAEjB,OAAO,MAAMC,EAASC,EAAMC,EAASC,EAAS,CAAC,EAAG,CACjD,GAAI,CAACF,GAAM,OAAQ,OACdD,EAAQ,YAAWC,EAAOA,EAAK,KAAK,GACzC,IAAMG,EAAWF,GAAS,OAASA,EAAU,KAAK,QAClD,QAAWG,KAAQD,EAAU,CAC5B,IAAME,EAAO,KAAK,SAASN,EAASC,EAAMI,EAAMF,CAAM,EACtD,GAAKG,EACL,OAAIH,EAAO,SAAS,QAAQ,IAAI,oBAAqBF,EAAM,qBAAsBK,EAAK,YAAY,IAAI,EAC/FA,CACR,CACA,GAAIH,EAAO,SAAW,GACtB,MAAM,IAAI,YAAYF,CAAI,CAC3B,CAEA,OAAO,SAASD,EAASC,EAAMI,EAAMF,EAAS,CAAC,EAAG,CACjD,OAAOE,EAAK,MAAML,EAASC,EAAM,CAACM,EAAUC,EAAOJ,EAAUK,EAAU,CAAC,IAChE,KAAK,MAAMF,EAAUC,EAAOJ,EAAU,CAAE,GAAGD,EAAQ,GAAGM,CAAQ,CAAC,CACtE,CACF,CACD,ECbO,IAAMC,GAAN,KAAqB,CAExB,YAAYC,EAAS,CAAC,EAAG,CACrB,OAAO,eAAe,KAAM,IAAK,CAC7B,MAAO,CACH,OAAQ,CACJ,wBAAyB,EACzB,eAAgB,CAAC,sBAAuB,cAAe,GAAIA,EAAO,UAAY,WAAa,CAAC,OAAO,EAAI,CAAC,CAAE,EAC1G,GAAGA,CACP,CACJ,CACJ,CAAC,CACL,CAEA,IAAI,QAAS,CAAE,OAAO,KAAK,EAAE,QAAU,CAAC,CAAG,CAE3C,MAAM,cAAcC,EAAM,CACtB,IAAMC,EAAWD,EAAK,IAAI,EAC1B,GAAIA,EAAK,CAAC,IAAM,GAAO,OAAOC,EAAS,EACvC,IAAMF,EAAS,MAAM,QAAQC,EAAK,CAAC,CAAC,GAAKE,EAAUF,EAAK,CAAC,CAAC,EAAIA,EAAK,IAAI,EAAI,CAAE,MAAO,CAAE,EACtF,OAAO,MAAM,KAAK,OAAOD,EAAQE,CAAQ,CAC7C,CAEAE,GAAa,CAAC,EACd,MAAM,SAASC,EAAMH,EAAU,CAC3B,KAAKE,GAAW,QAAQC,CAAI,EAC5B,IAAMC,EAAc,MAAMJ,EAAS,EACnC,YAAKE,GAAW,MAAM,EACfE,CACX,CAEA,MAAM,OAAOC,EAAkBP,EAAS,CAAC,KAAMQ,EAAM,CACjD,IAAMC,EAAgB,OAAOD,EAAK,CAAC,GAAM,UAAYA,EAAK,MAAM,EAAI,GAC9DN,EAAW,OAAOM,EAAK,CAAC,GAAM,WAAaA,EAAK,MAAM,EAAME,GAAWA,EAEvEC,EADYR,EAAUH,CAAM,GAAKA,EAAO,QAAU,GAAK,EAAEA,EAAO,UAAY,CAAC,GAAG,OAChD,KAAK,OAAO,wBAA0B,EACxEY,EAAOC,EAAQ,KAAKC,GAAoBd,EAAQS,CAAa,EACjE,GAAI,CAACI,EAAO,CACR,IAAME,EAAgB,QAAQ,QAAQR,EAAiBJ,EAAUH,CAAM,EAAI,CAAE,GAAGA,EAAQ,UAAWA,EAAO,UAAY,CAAC,GAAG,OAASA,EAAO,SAAW,KAAK,OAAO,cAAe,EAAIA,CAAM,CAAC,EAAE,KAAMgB,IAC3L,MAAM,QAAQhB,CAAM,IACpBgB,EAAaA,EAAW,OAAO,CAACC,EAAKC,IAAO,CACxC,IAAMC,EAAKnB,EAAO,KAAKmB,GAAMA,EAAG,OAASD,EAAG,IAAI,EAC1CE,EAAa,CAAC,EAAE,OAAOD,GAAI,QAAU,CAAC,CAAC,EAC7C,OAAIC,EAAW,QAAUA,EAAW,CAAC,IAAM,MAAKF,EAAK,CAAE,GAAGA,EAAI,OAAQA,EAAG,OAAO,OAAOG,GAAOD,EAAW,SAASC,EAAI,IAAI,CAAC,CAAE,GACtHJ,EAAI,OAAOE,GAAMD,GAAM,CAAC,CAAC,CACpC,EAAG,CAAC,CAAC,GAEFI,GAAW,SAAS,KAAMN,CAAU,EAC9C,EAEDH,EAAQ,CAAE,OAAAb,EAAQ,cAAAe,CAAc,EAChC,KAAKQ,GAAoB,IAAIV,CAAK,EAClCE,EAAc,KAAMS,GAAmB,CAEnCX,EAAM,eAAiBW,EACvB,OAAOX,EAAM,cACTF,IAAsB,GAEtB,KAAK,OAAO,aAAec,GAAM,CAC7B,IAAMC,EAAU,KAAK,MAAMD,EAAE,OAAO,EACpC,GAAIC,EAAQ,SAAW,SAAU,OACjC,IAAMC,EAAY,IAAIC,GAAU,KAAMF,EAAQ,IAAI,EAC5CG,EAAUC,GAAQ,SAAS,KAAM,CAAE,QAAS,CAACH,EAAU,QAAQ,CAAC,CAAE,CAAC,EACzEd,EAAM,eAAiBA,EAAM,eAAe,UAAUgB,EAAS,CAAE,KAAM,EAAM,CAAC,CAClF,CAAC,CAET,CAAC,EACDjB,EAAQ,EACZ,CACA,IAAMN,EAAc,MAAMJ,EAASW,EAAM,gBAAmB,MAAMA,EAAM,aAAc,EACtF,OAAID,GAASD,IAAsB,GAC/B,KAAKY,GAAoB,OAAOV,CAAK,EAElCP,CACX,CAEA,MAAM,SAASL,EAAM,CACjB,IAAI8B,EAAO/B,EAAS,CAAC,EACrB,OAAIG,EAAUF,EAAK,CAAC,CAAC,GAAK,EAAEA,EAAK,CAAC,YAAa+B,GAC1C,CAAE,MAAAD,EAAO,GAAG/B,CAAO,EAAIC,EAAK,CAAC,GAE9B8B,EAAQ9B,EAAK,MAAM,EACf,MAAM,QAAQA,EAAK,CAAC,CAAC,IAAGD,EAAO,OAASC,EAAK,MAAM,GACnDE,EAAUF,EAAK,CAAC,CAAC,IAAGD,EAAS,CAAE,GAAGA,EAAQ,GAAGC,EAAK,MAAM,CAAE,IAE9D,OAAO8B,GAAU,WACjBA,EAAQE,GAAO,MAAM,KAAMF,EAAO,KAAM,CAAE,QAAS/B,EAAO,OAAQ,CAAC,GAEhE,MAAM,KAAK,UAAU+B,EAAO/B,CAAM,CAC7C,CAEA,MAAM,eAAekC,EAAYlC,EAAS,CAAC,EAAG,CACtC,OAAOkC,GAAe,WAAYA,EAAa,CAAE,KAAMA,EAAY,OAAQ,CAAC,CAAE,GAClF,IAAMH,EAAQI,GAAe,SAAS,KAAM,CAAE,KAAMnC,EAAO,KAAM,SAAUkC,CAAW,CAAC,EACnFlC,EAAO,aAAa+B,EAAM,SAAS,eAAe,EAClD/B,EAAO,WAAW+B,EAAM,UAAU/B,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,UAAUyB,EAAO/B,CAAM,EACtD,OAAIM,IAAgB,GAAa,KAAK,SAASyB,EAAM,SAAS,EAAE,KAAK,CAAC,EAC/DzB,CACX,CAEA,MAAM,eAAe8B,EAAQC,EAAUrC,EAAS,CAAC,EAAG,CAChD,IAAM+B,EAAQO,GAAe,SAAS,KAAM,CAAE,KAAMtC,EAAO,KAAM,UAAWoC,EAAQ,SAAUC,CAAS,CAAC,EACxG,GAAI,CAACN,EAAO,MAAM,IAAI,MAAM,iDAAiD,EACzE/B,EAAO,WAAW+B,EAAM,UAAU/B,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,UAAUyB,EAAO/B,CAAM,EACtD,OAAIM,IAAgB,GAAa,KAAK,SAAS+B,CAAQ,EAChD/B,CACX,CAEA,MAAM,cAAciC,EAAWrC,EAAUF,EAAS,CAAC,EAAG,CAClD,GAAI,OAAOE,GAAa,WAAY,MAAM,IAAI,MAAM,gDAAgD,EACpG,OAAI,OAAOqC,GAAc,WAAYA,EAAY,CAAE,KAAMA,CAAU,GAC5D,MAAM,KAAK,WAAW,SAAY,CAErC,IAAMC,GAAY,MAAM,KAAK,OAAO,CAAC,CAAE,KAAMD,EAAU,KAAM,OAAQA,EAAU,QAAU,CAAC,GAAG,CAAE,CAAC,CAAC,GAAG,SAASA,EAAU,IAAI,EAC3H,GAAI,CAACC,EAAU,MAAM,IAAI,MAAM,aAAaD,EAAU,IAAI,mBAAmB,EAC7E,IAAME,EAAmBD,EAAS,MAAM,EACxC,MAAMtC,EAASuC,EAAiB,UAAU,EAAI,CAAC,EAC/C,IAAMC,EAAcF,EAAS,SAASC,CAAgB,EAAE,YAAY,CAAE,YAAazC,EAAO,YAAa,aAAcA,EAAO,YAAa,CAAC,EAC1I,GAAI,CAAC0C,EAAY,OAAQ,OACzB,IAAMX,EAAQY,GAAc,SAAS,KAAM,CAAE,KAAM3C,EAAO,KAAM,UAAWwC,EAAS,KAAK,EAAG,SAAUE,CAAY,CAAC,EAC/G1C,EAAO,WAAW+B,EAAM,UAAU/B,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,UAAUyB,EAAO/B,CAAM,EACtD,OAAIM,IAAgB,GAAa,KAAK,SAAS,KAAK,oBAAoByB,CAAK,CAAC,EACvEzB,CACX,CAAC,CACL,CAEA,MAAM,aAAa8B,EAAQpC,EAAS,CAAC,EAAG,CACpC,IAAM+B,EAAQa,GAAa,SAAS,KAAM,CAAE,KAAM5C,EAAO,KAAM,UAAWoC,CAAO,CAAC,EAClF,GAAI,CAACL,EAAO,MAAM,IAAI,MAAM,+CAA+C,EAC3E,OAAI/B,EAAO,UAAU+B,EAAM,SAAS,WAAW,EAC3C/B,EAAO,SAAU+B,EAAM,SAAS,UAAU,EACrC/B,EAAO,SAAS+B,EAAM,SAAS,SAAS,EAC7C/B,EAAO,WAAW+B,EAAM,UAAU/B,EAAO,SAAS,EAC/C,MAAM,KAAK,UAAU+B,EAAO/B,CAAM,CAC7C,CAEA,MAAM,YAAY6C,EAAM,CACpB,OAAQ,MAAM,KAAK,UAAU,GAAG,SAASA,CAAI,CACjD,CAEA,MAAM,WAAY,CACd,OAAQ,MAAM,KAAK,OAAO,GAAG,UAAU,EAAK,CAChD,CAEA,SAASA,EAAM7C,EAAS,CAAC,EAAG,CACxB,OAAO,IAAI,KAAK,YAAY,SAAS,KAAM,GAAG,SAAS,CAC3D,CAEA,MAAM,UAAU+B,EAAO/B,EAAS,CAAC,EAAG,CAChC,GAAI,EAAE+B,aAAiBC,GACnB,MAAM,IAAI,MAAM,4CAA4C,EAEhE,IAAMc,EAAiBf,EAAM,gBAAkB,OAASA,EAAM,UAAYA,EAAM,QAChF,OAAO,MAAM,KAAK,WAAWe,EAAgB,MAAOC,GAAe,CAC/D,GAAIhB,EAAM,gBAAkB,MACxB,OAAO,MAAM,KAAK,QAAQA,EAAOgB,EAAY/C,CAAM,EAEvD,IAAMgD,EAAO,CAAC,EAEdjB,EAAM,iBAAiB/B,EAAO,QAAU,CAAC,CAAC,EACtC+B,EAAM,YAAWA,EAAQA,EAAM,QAAQ,GAEvCA,EAAM,qBACN,CAACiB,EAAK,QAASA,EAAK,QAAQ,EAAIjB,EAAM,oBAAoBkB,GAAU,KAAK,UAAUA,EAAQ,CAAE,QAASjD,EAAO,OAAQ,CAAC,CAAC,EACvH,MAAMgD,EAAK,QAAQ,GAIvB,IAAME,GADgBnB,EAAM,oBAAoB,EAAI,EAAE,IAAKoB,GAAMA,EAAE,MAAM,CAAC,GAAK,CAAC,GAC3C,IAAIC,GAAS,MAAM,QAAQA,CAAK,GAAK,OAAOA,GAAU,UAAYA,EAAQ,KAAK,UAAUA,CAAK,EAAIA,CAAK,EAE5I,OAAIpD,EAAO,SAAS,QAAQ,IAAI,CAAE,MAAO+B,EAAM,UAAU,EAAG,OAAQmB,CAAe,CAAC,EAChFnB,EAAM,gBAAkB,MACxBiB,EAAK,YAAc,MAAM,KAAK,QAAQjB,EAAOmB,EAAgBlD,CAAM,EAC5D+B,EAAM,gBAAkB,MAC/BiB,EAAK,YAAc,MAAM,KAAK,QAAQjB,EAAOmB,EAAgBlD,CAAM,EAEnEgD,EAAK,YAAc,MAAM,KAAK,QAAQjB,EAAOmB,EAAgBlD,CAAM,EAEnE+B,EAAM,qBACNiB,EAAK,YAAc,MAAMA,EAAK,SAASA,EAAK,WAAW,GAEpDA,EAAK,WAChB,CAAC,CACL,CAEA,MAAM,QAAQK,EAAUtB,EAAOgB,EAAY/C,EAAQ,CAC/C,IAAMgD,EAAO,CACT,SAAUjB,EACV,kBAAmB,KACnB,sBAAuB,CAAC,EACxB,UAAWA,EAAM,UAAU,EAC3B,aAAc,CAAC,UAAW,cAAe,UAAW,WAAW,EAAE,SAAS,KAAK3B,GAAW,CAAC,CAAC,CAChG,EACMkD,EAAW,MAAM,KAAK,SAAS,EACrC,GAAI,CAACN,EAAK,cAAiB,MAAMM,EAAS,OAAO,eAAe,IAAO,SACnE,MAAM,IAAI,MAAM,6EAA6E,EAEjG,GAAI,CAAC,KAAK,OAAO,UAAc,SAAS,MAAMA,EAAS,OAAO,oBAAoB,CAAC,EAC/E,MAAM,IAAI,MAAM,iFAAiF,EAErG,GAAI,CAACN,EAAK,cAAgB,CAAChD,EAAO,MAAU,SAAS,MAAMsD,EAAS,OAAO,sBAAsB,CAAC,EAC9F,MAAM,IAAI,MAAM,2EAA2E,EAK/F,GAFIvB,EAAM,YAAWA,EAAQA,EAAM,QAAQ,GAEvC,CAAC,QAAS,MAAM,EAAE,SAASA,EAAM,IAAI,EAAG,CAExC,GAAIA,EAAM,SAAW,SAAU,CAC3B,GAAM,CAACwB,EAAUC,CAAM,EAAI,CAACzB,EAAM,UAAU,EAAE,OAAO,EAAGA,EAAM,SAAS,EAAE,OAAO,CAAC,EACjFA,EAAQ0B,GAAW,SAAS,KAAM,CAAE,KAAM1B,EAAM,KAAM,UAAWwB,EAAU,SAAU,CAAE,QAAS,CAAC,CAAE,CAAE,CAAC,EACtGxB,EAAM,IAAI,SAAU,KAAO2B,GAAOA,EAAG,SAASF,CAAM,CAAC,CACzD,MAAWzB,EAAM,SAAW,UAAY,CAACA,EAAM,SAAS,EAAE,OAAO,GAC7DA,EAAM,SAAS,EAAE,OAAOgB,EAAW,UAAU,CAAC,EAElDC,EAAK,SAAWL,GAAc,SAAS,KAAM,CACzC,WAAYZ,EAAM,YAAY,GAAKA,EAAM,SAAS,GAAG,OAAO,EAAI,EAAE,KAAK,EACvE,SAAU,CAAE,QAAS,CAACA,CAAK,CAAE,CACjC,CAAC,CACL,SAEQA,EAAM,SAAW,SAAU,CAC3B,GAAM,CAACwB,EAAUC,CAAM,EAAI,CAACzB,EAAM,UAAU,EAAE,OAAO,EAAGA,EAAM,SAAS,EAAE,OAAO,CAAC,EACjFA,EAAQY,GAAc,SAAS,KAAM,CAAE,KAAMZ,EAAM,KAAM,UAAWwB,EAAU,SAAU,CAAE,QAAS,CAAC,CAAE,CAAE,CAAC,EACzGxB,EAAM,IAAI,SAAU,KAAO2B,GAAOA,EAAG,SAASF,CAAM,CAAC,EACrDR,EAAK,SAAWjB,CACpB,CAIJ,GAFAiB,EAAK,QAAUlB,GAAQ,SAAS,KAAM,CAAE,QAAS,CAACkB,EAAK,QAAQ,CAAE,CAAC,EAE9D,CAACA,EAAK,cAAgB,SAAS,MAAMM,EAAS,OAAO,iBAAiB,CAAC,IAAM,EAAG,CAChF,IAAMK,EAAcZ,EAAW,UAAUC,EAAK,QAAS,CAAE,KAAM,EAAK,CAAC,EACrEA,EAAK,aAAeA,EAAK,SAAS,YAAY,GAAKA,EAAK,SAAS,SAAS,GAAG,KAAK,EAClF,CAACA,EAAK,kBAAmBA,EAAK,qBAAqB,EAAIW,EAAY,UAAU,EAAE,OAAO,CAAC,CAACC,EAAMC,CAAQ,EAAG3C,IACjGA,EAAG,aAAa8B,EAAK,WAAW,EAAU,CAAC9B,EAAI2C,CAAQ,EACpD,CAACD,EAAMC,EAAS,OAAO3C,EAAG,WAAW,EAAI,EAAE,OAASA,EAAK,CAAC,CAAC,CAAC,EACpE,CAAC,KAAM,CAAC,CAAC,CAAC,CACjB,CAIA,GAHIlB,EAAO,SAAS,QAAQ,IAAI,CAAE,MAAO+B,EAAM,UAAU,CAAE,CAAC,EAC5D,MAAMsB,EAAStB,EAAOgB,EAAY/C,CAAM,EACxCgD,EAAK,YAAc,GACfA,EAAK,kBAAmB,CACxBA,EAAK,kBAAoB,MAAM,KAAK,gBAAgBA,EAAK,kBAAmB,CAAE,GAAGhD,EAAQ,gBAAiB,IAAK,CAAC,EAChHgD,EAAK,kBAAkB,EAAE,UAAY,CAAC,EACtC,QAAWc,KAAwBd,EAAK,sBACpCA,EAAK,kBAAkB,EAAE,UAAU,KAAK,MAAM,KAAK,gBAAgBc,EAAsB,CAAE,GAAG9D,EAAQ,gBAAiBgD,EAAK,kBAAkB,GAAG,CAAE,CAAC,CAAC,CAE7J,CAEA,IAAMnC,EAAQ,KAAKC,GAAoB,CAAE,MAAO,CAAE,CAAC,EAGnD,GAFAD,EAAM,eAAiBA,EAAM,eAAe,UAAUmC,EAAK,QAAS,CAAE,KAAM,EAAM,CAAC,EAE/EA,EAAK,YAAc,SAAU,CAC7B,IAAMe,GAAkBhC,EAAM,SAAW,OAASgB,EAAalC,EAAM,gBAAgB,SAAS,KAAK,oBAAoBmC,EAAK,QAAQ,CAAC,EACrI,MAAI,CAAC,QAAS,MAAM,EAAE,SAASjB,EAAM,IAAI,EAAUgC,EAAe,MAAM,KAAK,oBAAoBhC,CAAK,CAAC,EAChGgC,CACX,CACA,OAAIf,EAAK,YAAc,YAAoBA,EAAK,mBAAqB,KAC9DA,EAAK,WAChB,CAEA,MAAM,gBAAgBR,EAAUwB,EAAU,CAAC,EAAG,CAE1C,IAAMC,GADW,MAAM,KAAK,SAAS,GACJ,MAAM,YAAY,EAE7C,CAAE,KAAApB,EAAM,MAAAqB,EAAO,QAASC,EAAG,GAAG3D,CAAK,EAAIgC,EAAS,OAAO,CAAE,UAAW,EAAM,CAAC,EAC3E4B,EAAgB,CAClB,iBAAkBJ,EAAQ,gBAC1B,KAAAnB,EACA,MAAAqB,EACA,aAAc,KACd,GAAG1D,EACH,YAAa,KACb,cAAe,SACf,YAAa6D,GAAKA,EAAE,IAAI,EACxB,YAAaL,EAAQ,KACrB,iBAAkB,KAAK,OAAO,SAC9B,kBAAmBK,GAAKA,EAAE,GAAG,KAAK,OAAO,UAAY,QAAU,gBAAkB,gBAAgB,CACrG,EAEMjC,EAASI,EAAS,KAAK,EACvB8B,EAAoB,MAAM,KAAK,SAASlC,CAAM,EAAE,UAAU,CAAE,UAAW,GAAM,aAAc,EAAM,CAAC,GAAM,MAAM,KAAK,SAASA,CAAM,EAAE,UAAU,CAAE,aAAc,EAAM,CAAC,EACvKkC,GAEAF,EAAc,aAAeE,EAAiB,YAAY,EAC1DF,EAAc,YAAcJ,EAAQ,gBAAkB,EAAIM,EAAiB,WAAW,EAAI,EAEtF,CAACN,EAAQ,iBAAmBM,EAAiB,aAAa,IAAM,YAChE,MAAML,EAAgB,OAAOI,GAAKA,EAAE,MAChCA,GAAKA,EAAE,GAAG,eAAgBA,GAAKA,EAAE,MAAMC,EAAiB,YAAY,CAAC,CAAC,EACtED,GAAKA,EAAE,GAAG,gBAAiBA,GAAKA,EAAE,MAAM,UAAU,CAAC,CACvD,CAAC,IAILD,EAAc,aAAe,MAAM,KAAK,IAAI,CAAC,GAC7CA,EAAc,YAAcJ,EAAQ,gBAAkB,EAAI,GAG9D,IAAMO,EAAe,MAAMN,EAAgB,OAAO,CAAE,KAAMG,EAAe,UAAW,GAAI,CAAC,EACzF,OAAO,IAAIxC,GAAU,KAAM2C,CAAY,CAC3C,CAEA,MAAM,cAAcvE,EAAS,CAAC,EAAG,CAE7B,IAAMwE,GADW,MAAM,KAAK,SAAS,GACT,MAAM,YAAY,EAAE,MAC1CC,EAAQ,KAAK,qBAAqB,EAClCC,EAAa,CAAC,YAAYD,EAAM,MAAM,OAAO,CAAC,kBAAmB,eAAgB,aAAa,EAC9FE,EAAY,CAAC,mBAAoB,KAAM,eAAgB,OAAQF,EAAM,MAAM,OAAO,EAAG,SAAU,cAAe,SAAU,gBAAiB,cAAe,cAAe,mBAAoB,gBAAiB,gBAAiB,oBAAoB,EACjPG,EAAmB,WAAWH,EAAM,QAAQ,aAAa,CAAC,SAASD,CAAU;AAAA;AAAA,2BAG7EK,EAAiB,WAAWJ,EAAM,QAAQ,SAAS,CAAC;AAAA,qBAC7CA,EAAM,gBAAgBE,EAAU,OAAO,CAACG,EAASC,IAAMD,EAAQ,OAAO,IAAIC,CAAC,IAAKA,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC;AAAA,mBAC1FP,CAAU;AAAA;AAAA,mEAGfQ,EAAiBZ,IAAmB,CAAE,GAAGA,EAAe,aAAcA,EAAc,aAAa,OAAOa,GAAKA,IAAM,CAAC,EAAE,KAAK,EAAG,SAAUb,EAAc,UAAY,CAAC,CAAE,GAC3K,GAAIpE,EAAO,aACP,OAAQ,MAAM,KAAK,MAAM;AAAA,yBACZ,CAAC,GAAG2E,EAAWC,EAAkBC,CAAc,EAAE,KAAK,IAAI,CAAC;AAAA,uBAC7DL,CAAU;AAAA;AAAA,aAEpB,GAAG,IAAIQ,CAAa,EAEzB,IAAME,EAASlF,EAAO,KAChB,CAAC,GAAG0E,EAAYE,CAAgB,EAChC,CAAC,GAAGD,EAAWC,EAAkB,GAAI5E,EAAO,eAAiB,GAAQ,CAAC6E,CAAc,EAAI,CAAC,CAAE,EAC3FM,EAAiB,CAAC,EAAE,OAAOnF,EAAO,UAAY,CAAC,CAAC,EAChDU,EAAS,MAAM,KAAK,MAAM;AAAA,qBACnBwE,EAAO,KAAK,IAAI,CAAC;AAAA;AAAA,wFAEkDlF,EAAO,UAAY,aAAe,UAAU,sBAAsBA,EAAO,UAAY,MAAQ,MAAM;AAAA,uBACpKwE,CAAU;AAAA;AAAA,wCAEQxE,EAAO,SAAoF,GAAzE,mBAAmBA,EAAO,UAAY,aAAe,UAAU,OAAY,sBAAsBA,EAAO,SAAYA,EAAO,UAAY,QAAQyE,EAAM,cAAc,OAAQU,CAAc,GAAK,MAAM,GAAK,QAAQV,EAAM,cAAc,YAAYA,EAAM,MAAM,OAAO,CAAC,UAAWU,CAAc,GAAK,MAAM,GAAM,EAAE;AAAA,SACnW,EACD,OAAInF,EAAO,KAAaU,EACjBA,EAAO,IAAK0D,GAAkB,IAAIxC,GAAU,KAAMoD,EAAcZ,CAAa,CAAC,CAAC,CAC1F,CAMAgB,GACA,MAAM,OAAOC,EAAa,CACtB,OAAK,KAAKD,KAAM,KAAKA,GAAO,MAAMC,EAAY,GACvC,KAAKD,EAChB,CAEAE,GAAa,IAAI,IACjB,OAAOC,EAAaC,EAAStF,EAAUuF,EAAY,GAAO,CACtD,OAAK,KAAKH,GAAW,IAAIE,CAAO,IAC5B,KAAKF,GAAW,IAAIE,EAAS,IAAI,GAAG,EACpCD,EAAYC,EAAS,MAAO/D,GAAM,CAC9B,IAAMiE,EAAS,MAAM,KAAK,OAAO,EACjC,OAAW,CAACxF,EAAUuF,CAAS,IAAK,KAAKH,GAAW,IAAIE,CAAO,EACvD,CAACC,GAAahE,EAAE,WAAaA,EAAE,YAAciE,GACjDxF,EAASuB,CAAC,CAElB,CAAC,GAEL,KAAK6D,GAAW,IAAIE,CAAO,EAAE,IAAI,CAACtF,EAAUuF,CAAS,CAAC,EAC/C,IACX,CAMAlE,GAAsB,IAAI,IAC1BT,GAAoBd,EAAQS,EAAgB,GAAO,CAC/C,MAAO,CAAC,GAAG,KAAKc,EAAmB,EAAE,KAAMV,GAAU,CACjD,GAAIV,EAAUU,EAAM,MAAM,GAAKV,EAAUH,CAAM,EAC3C,OAAO,OAAO,KAAKA,CAAM,EAAE,MAAM2F,GAAO,CACpC,GAAIA,IAAQ,QAAS,CAEjB,GAAM,CAACC,EAAGzC,CAAC,EAAI,CAACtC,EAAM,OAAO8E,CAAG,GAAK,EAAG3F,EAAO2F,CAAG,GAAK,CAAC,EACxD,OAAQlF,EAAyBmF,IAAMzC,EAAfyC,GAAKzC,CACjC,CACA,OAAOtC,EAAM,OAAO8E,CAAG,IAAM3F,EAAO2F,CAAG,CAC3C,CAAC,EAEL,GAAI,MAAM,QAAQ9E,EAAM,MAAM,GAAK,MAAM,QAAQb,CAAM,EACnD,OAAOA,EAAO,MAAM6F,GAEThF,EAAM,OAAO,KAAKiF,GAASD,EAAM,OAASC,EAAM,OAE/C,CAACC,EAAOC,IAAUvF,EAAgBwF,GAAWF,EAAOC,CAAK,EAAE,SAAWD,EAAM,OAAS,CAACG,GAAYH,EAAOC,CAAK,EAAE,QAAQG,GAASN,EAAM,MAAM,EAAGM,GAASL,EAAM,MAAM,CAAC,CAAC,CAClL,EAEL,GAAI3F,EAAUU,EAAM,MAAM,GAAKA,EAAM,OAAO,OAAS,MAAM,QAAQb,CAAM,EACrE,OAAOA,EAAO,MAAOoG,GACVvF,EAAM,eAAe,SAASuF,EAAI,IAAI,IAAM,CAAC,CAAC,EAAE,OAAOA,EAAI,QAAU,CAAC,CAAC,EAAE,QAAUvF,EAAM,OAAO,QAAU,EACpH,CAET,CAAC,CACL,CAEA,SAASwF,EAAaC,EAAe,CACjC,GAAID,IAAgB,cAChB,OAAO,KAAKvF,GAAoB,CAAE,MAAO,CAAE,CAAC,GAAG,cAEvD,CAEA,oBAAoBiB,EAAO,CACvB,OAAIA,EAAM,SAAW,SAAiBA,EAAM,SAAS,EAAE,KAAK,EACxDA,EAAM,SAAW,SAAgBA,EAAM,SAAS,EAAE,QAAQ,EAAE,KAAM2B,GAAOA,EAAG,SAAW,UAAY,CAACA,EAAG,IAAI,GAAG,SAAS,EAAE,KAAK,GAAK3B,EAAM,UAAU,EAAE,KAAK,CAElK,CAEA,sBAAuB,CACnB,IAAM0C,EAAQ,CACV,MAAQ5B,GAAS0D,EAAW,SAAS,KAAM1D,CAAI,EAC/C,IAAMO,GAAUoD,GAAI,SAAS,KAAM,CAAE,MAAApD,CAAM,CAAC,EAC5C,gBAAkBqD,GAAU,KAAK,OAAO,UAAY,QAAU,eAAeA,EAAM,KAAK,IAAI,CAAC,IAAM,qBAAqBA,EAAM,KAAK,IAAI,CAAC,IACxI,QAAUC,GAAS,KAAK,OAAO,UAAY,QAAU,iBAAiBA,CAAI,IAAM,YAAYA,CAAI,IAChG,SAAWC,GAAQ,KAAK,OAAO,UAAY,QAAUA,EAAM,OAAOA,CAAG,IACrE,YAAa,CAACA,EAAKC,IAAY,KAAK,OAAO,UAAY,QAAU,gBAAgBD,CAAG,GAAGC,EAAU,aAAaA,CAAO,GAAK,EAAE,kBAAoB,cAAcD,CAAG,QAAQC,EAAU,aAAaA,CAAO,GAAK,EAAE,IAC9M,cAAe,CAACC,EAAOC,IAAU,CAC7B,GAAM,CAACC,EAAOC,EAAQC,CAAQ,EAAIH,EAAM,OAAO,CAAC,CAACC,EAAOC,EAAQC,CAAQ,EAAGxF,IACnE,YAAY,KAAKA,CAAC,EAAU,CAACsF,EAAOC,EAAQC,EAAS,OAAOxF,CAAC,CAAC,EAC9D,KAAK,KAAKA,CAAC,EAAU,CAACsF,EAAOC,EAAO,OAAOvF,EAAE,MAAM,CAAC,CAAC,EAAGwF,CAAQ,EAC7D,CAACF,EAAM,OAAOtF,CAAC,EAAGuF,EAAQC,CAAQ,EAC1C,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,EACTC,EAASH,EAAM,QAAU,EAAEA,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,KAAO,GAAGF,CAAK,QAAQE,EAAM,IAAItC,EAAM,GAAG,EAAE,KAAK,IAAI,CAAC,IAAM,KAC1H0C,EAAUH,EAAO,OAAS,GAAGH,CAAK,YAAYG,EAAO,IAAIvC,EAAM,GAAG,EAAE,KAAK,IAAI,CAAC,IAAM,KACpF2C,EAAYH,EAAS,OAASA,EAAS,IAAKI,GAAM,KAAK,KAAKA,CAAC,EAAI,GAAGR,CAAK,aAAapC,EAAM,IAAI4C,EAAE,MAAM,CAAC,CAAC,CAAC,GAAK,GAAGR,CAAK,SAASpC,EAAM,IAAI4C,CAAC,CAAC,EAAE,EAAE,KAAK,OAAO,EAAI,KACvK,MAAO,CAACH,EAAQC,EAASC,CAAS,EAAE,OAAOE,GAAKA,CAAC,EAAE,KAAK,OAAO,CACnE,CACJ,EACA,OAAO7C,CACX,CAEA8C,GACA,MAAM,UAAW,CACb,IAAMC,EAAa,CAEf,MAAOpF,GAAW,CACd,MAAM,KAAK,SAAS,UAAW,IAAM,KAAK,eAAe,CACrD,KAAMA,EACN,OAAQ,CAAC,CACL,KAAM,aACN,QAAS,CACL,CAAE,KAAM,KAAM,GAAI,KAAK,OAAO,UAAY,QAAU,CAAE,KAAM,WAAY,QAAS,CAAE,KAAOiC,GAAMA,EAAE,GAAG,MAAM,CAAE,CAAE,EAAI,CAAE,KAAM,OAAQ,QAAS,CAAE,KAAOA,GAAMA,EAAE,GAAG,iBAAiB,CAAE,CAAE,EAAI,WAAY,EAAK,EAC1M,CAAE,KAAM,mBAAoB,GAAI,KAAK,OAAO,UAAY,QAAU,CAAE,KAAM,UAAW,EAAI,CAAE,KAAM,MAAO,EAAI,WAAY,CAAE,YAAa,CAACjC,EAAQ,YAAY,EAAG,cAAe,CAAC,IAAI,EAAG,WAAY,SAAU,CAAE,EAE9M,CAAE,KAAM,OAAQ,KAAM,CAAC,UAAW,GAAG,EAAG,QAAS,EAAK,EACtD,CAAE,KAAM,QAAS,KAAM,CAAC,UAAW,GAAG,CAAE,EACxC,CAAE,KAAM,SAAU,KAAM,MAAO,EAC/B,CAAE,KAAM,SAAU,KAAM,CAAC,UAAW,CAAC,EAAG,MAAO,CAAE,GAAI,CAAC,SAAU,CAAE,MAAO,IAAK,EAAG,CAAE,MAAO,KAAM,EAAG,CAAE,MAAO,UAAW,CAAC,CAAE,CAAE,EAE5H,CAAE,KAAM,eAAgB,KAAM,CAAC,UAAW,EAAE,EAAG,QAAS,EAAK,EAC7D,CAAE,KAAM,cAAe,KAAM,MAAO,QAAS,EAAK,EAElD,CAAE,KAAM,gBAAiB,KAAM,CAAC,UAAW,CAAC,EAAG,QAAS,GAAM,MAAO,CAAE,GAAI,CAAC,gBAAiB,CAAE,MAAO,QAAS,EAAG,CAAE,MAAO,UAAW,CAAC,CAAE,CAAE,EAC3I,CAAE,KAAM,cAAe,KAAM,CAAC,YAAa,CAAC,EAAG,QAAS,EAAK,EAC7D,CAAE,KAAM,cAAe,KAAM,CAAC,UAAW,GAAG,CAAE,EAC9C,CAAE,KAAM,mBAAoB,KAAM,CAAC,UAAW,GAAG,CAAE,EACnD,CAAE,KAAM,oBAAqB,KAAM,CAAC,UAAW,EAAE,CAAE,EACnD,CAAE,KAAM,gBAAiB,KAAM,CAAC,YAAa,CAAC,CAAE,EAChD,CAAE,KAAM,gBAAiB,KAAM,CAAC,UAAW,GAAG,CAAE,EAChD,CAAE,KAAM,qBAAsB,KAAM,CAAC,UAAW,GAAG,CAAE,EACrD,CAAE,KAAM,sBAAuB,KAAM,CAAC,UAAW,EAAE,CAAE,CACzD,CACJ,EAAG,CACC,KAAM,SACN,QAAS,CACL,CAAE,KAAM,KAAM,GAAI,KAAK,OAAO,UAAY,QAAU,CAAE,KAAM,MAAO,cAAe,EAAK,EAAI,CAAE,KAAM,MAAO,SAAU,EAAK,EAAI,WAAY,EAAK,EAC9I,CAAE,KAAM,OAAQ,KAAM,CAAC,UAAW,GAAG,EAAG,QAAS,GAAM,UAAW,EAAK,EACvE,CAAE,KAAM,QAAS,KAAM,CAAC,UAAW,GAAG,CAAE,CAC5C,CACJ,CAAC,CACL,CAAC,CAAC,EACE,KAAK,OAAO,UAAY,YACxB,MAAM,KAAK,OAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAqBkCA,CAAM;AAAA;AAAA,mEAEjBA,CAAM;AAAA;AAAA,0EAECA,CAAM;AAAA;AAAA,mEAEbA,CAAM;AAAA;AAAA,qBAEpD,CAET,CACJ,EAEMqF,EAAcD,EAAW,OACzBE,EAAYC,GAAM,aAAeA,GAAK,KAAKA,CAAC,IAAM,IAClDC,EAAW,KAAK,SAASF,EAASD,CAAW,CAAC,EA8CpD,GA7CA,OAAO,eAAeG,EAAU,YAAa,CACzC,MAAO,MAAOC,GAAY,CACtB,IAAMvH,EAAc,MAAM,KAAK,SAAS,YAAa,IAAM,KAAK,aAAasH,EAAS,KAAM,CAAE,QAAAC,CAAQ,CAAC,CAAC,EACxG,YAAK,UAAY,GACVvH,CACX,CACJ,CAAC,EACD,OAAO,eAAesH,EAAU,SAAU,CACtC,MAAO,SAAU3H,IAAS,CACtB,GAAIA,EAAK,OAAS,GAAKE,EAAUF,EAAK,CAAC,CAAC,EAAG,CACvC,IAAM6H,EAAO3H,EAAUF,EAAK,CAAC,CAAC,EACxB,OAAO,KAAKA,EAAK,CAAC,CAAC,EAAE,IAAK4C,IAAU,CAAE,KAAAA,EAAM,MAAO5C,EAAK,CAAC,EAAE4C,CAAI,CAAE,EAAE,EACnE,CAAE,KAAM5C,EAAK,CAAC,EAAG,MAAOA,EAAK,CAAC,CAAE,EAChC8H,EAAW7B,GAAY4B,EAAK,IAAK7C,GAAMA,EAAE,IAAI,EAAG,CAAC,kBAAmB,qBAAsB,uBAAwB,eAAe,CAAC,EACxI,GAAI8C,EAAS,OAAQ,MAAM,IAAI,MAAM,oBAAoBA,EAAS,KAAK,IAAI,CAAC,EAAE,EAC9E,GAAI,KAAKR,GACL,QAAW9F,IAAK,CAAC,EAAE,OAAOqG,CAAI,EAC1B,KAAKP,GAAgB,IAAI9F,EAAE,KAAMA,EAAE,KAAK,EAGhD,OAAO,KAAK,WAAW,CAAE,MAAO,EAAG,SAAU,YAAa,EAAG,SAClD,MAAMmG,EAAS,MAAM,QAAQ,EAAE,OAAO,CAAE,KAAME,CAAK,CAAC,CAC9D,CACL,CACA,GAAI,CAAC,KAAKP,GACN,GAAI,CACA,IAAMS,EAAU,MAAMJ,EAAS,MAAM,QAAQ,EAAE,OAAO,EACtD,KAAKL,GAAkB,IAAI,IAAIS,EAAQ,IAAKvG,GAAM,CAACA,EAAE,KAAMA,EAAE,KAAK,CAAC,CAAC,EACpE,KAAK,OAAO,SAAWA,GAAM,CACzB,IAAMC,EAAU,KAAK,MAAMD,EAAE,OAAO,EAChCC,EAAQ,SAAW,SACnB,KAAK6F,GAAgB,OAAO7F,EAAQ,KAAK,IAAI,EAE7C,KAAK6F,GAAgB,IAAI7F,EAAQ,KAAK,KAAMA,EAAQ,KAAK,KAAK,CAEtE,CAAC,CACL,MAAY,CACR,KAAK6F,GAAkB,IAAI,GAC/B,CAEJ,OAAKtH,EAAK,OACN,MAAM,QAAQA,EAAK,CAAC,CAAC,EAAU,OAAO,YAAYA,EAAK,CAAC,EAAE,IAAKgI,GAAM,CAACA,EAAG,KAAKV,GAAgB,IAAIU,CAAC,CAAC,CAAC,CAAC,EACnG,KAAKV,GAAgB,IAAItH,EAAK,CAAC,CAAC,EAFd,OAAO,YAAY,KAAKsH,EAAe,CAGpE,CACJ,CAAC,EACG,KAAK,UAAW,OAAOK,EAC3B,KAAK,UAAY,GAGjB,IAAMM,GADa,MAAM,KAAK,OAAO,CAAE,MAAO,EAAG,SAAU,YAAa,CAAC,GAC5C,UAAU,EAAK,EAAE,KAAK9F,GAAUA,EAAO,WAAWsF,EAAS,CAAC,GAAKtF,IAAW,wBAAwB,EAC3H+F,EAAeD,GAAa,eAAe,KAAKA,CAAS,IAAI,CAAC,GAAK,GAEzE,GADIA,GAAaC,IAAiB,IAAI,QAAQ,KAAK,+OAA+O,EAC9RV,EAAcU,EAAc,MAAM,IAAI,MAAM,oDAAoDA,CAAY,oDAAoDV,CAAW,sDAAsD,EACrO,QAASW,EAAI,EAAGA,GAAKZ,EAAW,OAAQY,IAAK,CACzC,GAAIA,GAAKD,EAAc,SACvB,IAAM5E,EAAWmE,EAASU,EAAI,CAAC,EAAG5E,EAASkE,EAASU,CAAC,EACrD,GAAI,CACIA,EAAI,GAAG,MAAM,KAAK,SAAS,UAAW,IAAM,KAAK,cAAc7E,EAAUf,GAAYA,EAAS,KAAKgB,CAAM,CAAC,CAAC,EAC/G,MAAMgE,EAAWY,EAAI,CAAC,EAAE5E,CAAM,CAClC,OAAS/B,EAAG,CACR,MAA2B,QAAQ,IAA/B,CAACyG,GAAaE,IAAM,EAAe,oBAAoB5E,CAAM,IAChD,+CAA+CD,CAAQ,OAAOC,CAAM,uCADjB,EAE9D/B,CACV,CACJ,CACA,OAAOmG,CACX,CACJ,EC7kBO,IAAMS,GAAN,KAAoB,CAE1B,YAAYC,EAAUC,EAASC,EAAS,CAAC,EAAG,CAC3C,KAAK,EAAI,CAAE,SAAAF,EAAU,KAAMC,EAAS,OAAAC,CAAO,CAC5C,CAEA,IAAI,UAAW,CAAE,OAAO,KAAK,EAAE,QAAU,CAEzC,IAAI,MAAO,CAAE,OAAO,KAAK,EAAE,IAAM,CAEjC,IAAI,OAAQ,CAAE,OAAOC,EAAe,SAAS,KAAM,CAAC,KAAK,SAAS,KAAM,KAAK,IAAI,CAAC,CAAG,CAErF,IAAI,QAAS,CAAE,OAAO,OAAO,OAAO,CAAC,EAAG,KAAK,SAAS,OAAQ,KAAK,EAAE,MAAM,CAAG,CAE9E,MAAM,QAAS,CAAE,OAAQ,MAAM,KAAK,SAAS,OAAO,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,CAAG,CAEnF,MAAM,MAAMC,EAAMC,EAAU,CAAC,EAAG,CAC/B,IAAMC,EAAS,MAAM,KAAK,OAAO,CAAE,GAAGD,EAAS,WAAY,GAAO,OAAQ,CAAC,CAAE,KAAM,CAAE,MAAO,CAACD,CAAI,CAAE,EAAG,GAAI,GAAI,CAAC,CAAE,CAAC,EAClH,OAAQ,MAAM,QAAQE,CAAM,EAAkDA,EAAO,CAAC,EAAE,EAArBA,EAAO,CAC3E,CAEA,MAAM,UAAUC,EAAM,CACrB,IAAMF,EAAW,OAAOE,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,CAAC,EAC9DC,EAAiB,OAAOD,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,KACnEE,EAAW,CAAC,SAAU,QAAQ,EAAE,SAAS,OAAOJ,EAAQ,KAAK,EACnE,OAAO,KAAK,SAAS,OAAO,WAAW,SAAY,CAClD,GAAM,CAAE,WAAYK,EAAI,GAAGC,CAAS,EAAI,CAAE,OAAQ,IAAK,KAAM,CAAC,CAAC,KAAK,SAAS,KAAM,KAAK,IAAI,CAAC,EAAG,GAAGN,CAAQ,EACvGA,EAAQ,aACXM,EAAS,OAAS,MAAM,KAAK,eAAeA,EAAS,OAAQ,QAAQ,GAEtE,IAAMC,EAAO,MAAM,KAAK,mBAAmBD,CAAQ,EAC7CE,EAAQ,KAAK,YAAYD,EAAME,GAAiB,gBAAgB,EACtEN,IAAgBK,CAAK,EACrB,IAAMP,EAAS,MAAM,KAAK,SAAS,OAAO,UAAUO,CAAK,EACzD,OAAIJ,EAAiBH,EAAO,CAAC,EACtBA,CACR,CAAC,CACF,CAEA,MAAM,UAAUC,EAAM,CACrB,IAAIQ,EAAUN,EAAW,GACrB,OAAOF,EAAK,CAAC,GAAM,YAAWQ,EAAWR,EAAK,MAAM,GACxD,IAAMF,EAAW,OAAOE,EAAK,CAAC,GAAM,YAAc,CAAC,GAAGA,EAAK,MAAM,CAAC,GAAM,CAAC,EACnEC,EAAiB,OAAOD,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,KACzE,OAAO,KAAK,SAAS,OAAO,WAAW,SAAY,CAC9CF,EAAQ,SACPA,EAAQ,aACXA,EAAQ,QAAU,MAAM,KAAK,eAAeA,EAAQ,QAAS,SAAS,GAEvEA,EAAQ,OAASA,EAAQ,OAAO,IAAKW,IAAS,CAAE,IAAK,KAAK,iBAAiBA,EAAKX,EAAQ,QAAS,cAAc,CAAE,EAAE,GACzGA,EAAQ,OAClBI,EAAWQ,EAAUZ,EAAQ,IAAI,GAAKA,EAAQ,UAC9C,CAACA,EAAQ,QAASA,EAAQ,MAAM,EAAI,MAAM,KAAK,eAAe,CAAC,EAAE,OAAOA,EAAQ,IAAI,EAAG,SAAS,GAEjG,GAAM,CAAE,KAAMa,EAAG,WAAYR,EAAI,GAAGC,CAAS,EAAI,CAAE,GAAGN,EAAS,KAAM,CAAC,CAAC,KAAK,SAAS,KAAM,KAAK,IAAI,CAAC,CAAE,EACjGQ,EAAQ,KAAK,YAAYF,EAAUI,EAAWI,GAAkBC,GAAiB,SAASL,EAAW,SAAW,QAAQ,IAAI,EAClIP,IAAgBK,CAAK,EACrB,IAAMP,EAAS,MAAM,KAAK,SAAS,OAAO,UAAUO,CAAK,EACzD,OAAIJ,EAAiBH,EAAO,CAAC,EACtBA,CACR,CAAC,CACF,CAEA,MAAM,UAAUC,EAAM,CAAE,OAAO,MAAM,KAAK,OAAO,GAAM,GAAGA,CAAI,CAAG,CAEjE,MAAM,UAAUA,EAAM,CACrB,IAAMF,EAAW,OAAOE,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,CAAC,EAC9DC,EAAiB,OAAOD,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,KACnEE,EAAW,CAAC,SAAU,QAAQ,EAAE,SAAS,OAAOJ,EAAQ,KAAK,GAAKA,EAAQ,UAChF,OAAO,KAAK,SAAS,OAAO,WAAW,SAAY,CAClD,IAAMgB,EAAU,CAAChB,EAAQ,KAAOA,EAAQ,IAAI,EACtC,CAACiB,EAAS,CAAC,CAAE,IAAKC,CAAO,CAAC,CAAC,EAAI,MAAM,KAAK,eAAeF,EAAShB,EAAQ,IAAM,gBAAkB,SAAS,EAC3G,CAAE,KAAMa,EAAG,WAAYR,EAAI,GAAGC,CAAS,EAAI,CAAE,GAAI,MAAM,KAAK,mBAAmBN,CAAO,EAAI,MAAO,CAAC,CAAC,KAAK,SAAS,KAAM,KAAK,IAAI,CAAC,EAAG,IAAKiB,EAAQ,IAAI,CAACE,EAAGC,IAAM,CAACD,EAAGD,EAAOE,CAAC,CAAC,CAAC,CAAE,EAC/KZ,EAAQ,KAAK,YAAYF,EAAUe,GAAiB,gBAAgB,EAC1ElB,IAAgBK,CAAK,EACrB,IAAMP,EAAS,MAAM,KAAK,SAAS,OAAO,UAAUO,CAAK,EACzD,OAAIJ,EAAiBH,EAAO,CAAC,EACtBA,CACR,CAAC,CACF,CAEA,MAAM,UAAUC,EAAM,CACrB,GAAI,CAACA,EAAK,OAAQ,MAAM,IAAI,MAAM,6CAA6C,EAC/E,IAAMF,EAAW,OAAOE,EAAK,CAAC,GAAM,YAAc,CAAC,GAAGA,EAAK,MAAM,CAAC,GAAM,CAAC,EACnEC,EAAiB,OAAOD,EAAK,CAAC,GAAM,YAAcA,EAAK,MAAM,GAAM,KACnEE,EAAW,CAAC,SAAU,QAAQ,EAAE,SAAS,OAAOJ,EAAQ,KAAK,GAAKA,EAAQ,UAChF,OAAO,KAAK,SAAS,OAAO,WAAW,SAAY,CAElD,IAAMM,EAAW,CAAE,GAAI,MAAM,KAAK,mBAAmBN,CAAO,EAAI,KAAM,CAAC,CAAC,KAAK,SAAS,KAAM,KAAK,IAAI,CAAC,CAAE,EAClGQ,EAAQ,KAAK,YAAYF,EAAUgB,GAAiB,gBAAgB,EAC1EnB,IAAgBK,CAAK,EACrB,IAAMP,EAAS,MAAM,KAAK,SAAS,OAAO,UAAUO,CAAK,EACzD,OAAIJ,EAAiBH,EAAO,CAAC,EACtBA,CACR,CAAC,CACF,CAMA,YAAYM,EAAMgB,EAAOC,EAAI,CAC5B,OAAOD,EAAM,UAAU,YAAY,KAAK,KAAK,SAAS,OAAQ,CAAChB,CAAI,EAAGgB,EAAO,KAAMC,CAAE,CACtF,CAEA,MAAM,mBAAmBxB,EAAS,CACjC,GAAI,CAAC,SAAU,QAAQ,EAAE,SAAS,OAAOA,EAAQ,KAAK,EAAG,CAExD,IAAMyB,GADY,MAAM,KAAK,OAAO,GACP,WAAW,GAAG,QAAQ,EAAE,CAAC,EACtD,GAAI,CAACA,EAAY,MAAM,IAAI,MAAM,qDAAqD,EACtF,MAAO,CAAE,GAAGzB,EAAS,MAAO,CAAE,GAAI,CAACyB,EAAYzB,EAAQ,KAAK,CAAE,CAAE,CACjE,CACA,OAAOA,CACR,CAEA,MAAM,eAAegB,EAASU,EAAa,CAC1C,GAAIA,IAAgB,iBACnB,GAAI,CAAC,MAAM,QAAQV,CAAO,GAAK,CAAC,MAAM,QAAQA,EAAQ,CAAC,CAAC,EAAG,MAAM,IAAI,UAAU,yBAAyB,UAEpG,CAACJ,EAAUI,EAAQ,CAAC,CAAC,EAAG,MAAM,IAAI,UAAU,yBAAyB,EAE1E,IAAMC,EAAU,MAAM,KAAK,eAAeD,EAAQ,CAAC,EAAGU,CAAW,EAC3DC,EAAcX,EAAQ,IAAKY,IAAU,CAAE,IAAK,KAAK,iBAAiBA,EAAMX,EAASS,CAAW,CAAE,EAAE,EACtG,MAAO,CAACT,EAASU,CAAW,CAC7B,CAEA,MAAM,eAAeE,EAAOC,EAAW,CACtC,IAAMC,EAAY,MAAM,KAAK,OAAO,EACpC,GAAI,CAACA,EAAW,MAAM,IAAI,MAAM,SAAS,KAAK,KAAK,kBAAkB,EACrE,IAAMC,EAAgBF,IAAc,SAAW,SAAW,UACpDG,EAAY,CAAC,UAAW,eAAe,EAAE,SAASH,CAAS,EAC3DI,EAAqB,MAAOC,EAAMN,EAAOO,EAAS,OAAS,CAChE,GAAIA,EAAQ,CAEX,GAAI,EADQ,MAAMD,EAAK,OAAO,IAAI,OAAOC,CAAM,GAAG,WAAW,GACpD,YAAY,EAAE,aAAa,KAAK,KAAK,EAAG,MAAM,IAAI,MAAM,GAAGD,EAAK,KAAK,IAAIC,CAAM,yBAAyB,KAAK,KAAK,EAAE,EAC7H,OAAO,MAAMD,EAAK,eAAeN,EAAOC,CAAS,CAClD,CACA,IAAMO,GAAO,MAAMF,EAAK,OAAO,GAAG,YAAY,EAAE,OAAQG,GAAOA,EAAG,YAAY,EAAE,aAAa,KAAK,KAAK,CAAC,EACxG,GAAID,EAAI,SAAW,EAAG,MAAM,IAAI,MAAM,GAAGA,EAAI,MAAM,+BAA+B,KAAK,KAAK,QAAQF,EAAK,KAAK,EAAE,EAChH,MAAO,CAACE,EAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAG,MAAMF,EAAK,eAAeN,EAAOC,CAAS,CAAC,CACzE,EACMS,EAAa,MAAOC,EAAKC,IAAU,CACxC,IAAMC,EAAYX,EAAU,OAAOS,CAAG,EAChCF,EAAKI,GAAW,WAAW,EACjC,GAAIJ,GAAM,CAACL,GAAa,OAAOQ,GAAU,SACxC,MAAO,CAAE,MAAO,CAACD,EAAKC,CAAK,CAAE,EAE9B,GAAIH,IAAO1B,EAAU6B,CAAK,GAAK,MAAM,QAAQA,CAAK,GAAI,CACrD,IAAME,EAAc,KAAK,SAAS,OAAO,SAASL,EAAG,YAAY,EAAE,OAAO,EAAI,EAAE,KAAK,CAAC,EAAE,MAAMA,EAAG,YAAY,EAAE,KAAK,CAAC,EACrH,MAAO,CAAE,MAAO,CAACE,EAAK,CAAE,CAACR,CAAa,EAAG,MAAMW,EAAY,eAAeF,EAAOX,CAAS,CAAE,CAAC,CAAE,CAChG,CACA,GAAI,CAACY,EAAW,CACf,GAAIT,GACH,GAAI,CAAC,MAAM,QAAQQ,CAAK,EAAG,MAAM,IAAI,MAAM,mBAAmBD,CAAG,EAAE,OACzD,MAAM,QAAQC,CAAK,IAAMA,EAAM,KAAMG,GAAM,OAAOA,GAAM,QAAQ,GAAKH,EAAM,OAAS,GAC9FA,EAAQ,CAACA,CAAK,EACJ7B,EAAU6B,CAAK,EACzBA,EAAQ,CAACA,CAAK,EACJ,OAAOA,GAAU,WAC3BA,EAAQ,CAAC,CAACA,CAAK,CAAC,GAEjB,IAAMN,EAAO,KAAK,SAAS,MAAMK,CAAG,EAC9B,CAACJ,EAAQnB,CAAO,EAAI,MAAMiB,EAAmBC,EAAMM,EAAM,CAAC,CAAC,EAC3DI,EAAY,CAAE,CAACb,CAAa,EAAGf,CAAQ,EAC7C,MAAO,CAAE,MAAO,CAAC,CAAE,MAAO,CAACmB,EAAQ,CAAC,KAAK,SAAS,KAAMI,CAAG,CAAC,CAAE,EAAGV,IAAc,SAAW,CAAE,KAAMe,CAAU,EAAcA,CAAS,CAAE,CACtI,CACA,OAAOL,CACR,EACMvB,EAAU,CAAC,EACjB,GAAIL,EAAUiB,CAAK,EAAG,CACrB,QAAWW,KAAOX,EACb,CAACI,GAAaJ,EAAMW,CAAG,IAAM,IACjCvB,EAAQ,KAAK,MAAMsB,EAAWC,EAAKX,EAAMW,CAAG,CAAC,CAAC,EAE/C,OAAOvB,CACR,CACA,QAAWuB,KAAOX,EACjB,GAAIC,IAAc,gBACjB,GAAIlB,EAAU4B,EAAI,CAAC,CAAC,EAAG,CACtB,GAAI,CAACA,EAAI,CAAC,EAAE,MAAO,MAAM,IAAI,MAAM,qBAAqB,KAAK,UAAUA,EAAI,CAAC,CAAC,CAAC,EAAE,EAChF,IAAMM,EAAY,CAAC,EAAE,OAAON,EAAI,CAAC,EAAE,MAAM,CAAC,CAAC,EAErCL,GADMW,EAAU,SAAW,EAAI,KAAK,SAAS,OAAO,SAASA,EAAU,MAAM,CAAC,EAAI,KAAK,UAC5E,MAAMA,EAAU,MAAM,CAAC,EACxC7B,EAAQ,KAAK,CAAE,MAAO,CAACuB,EAAI,CAAC,EAAG,CAAE,QAAS,MAAMN,EAAmBC,EAAMK,EAAI,CAAC,EAAE,CAAC,EAAGA,EAAI,CAAC,EAAE,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAC1G,MACCvB,EAAQ,KAAK,MAAMsB,EAAWC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CAAC,OAEpC5B,EAAU4B,CAAG,EACvBvB,EAAQ,KAAK,MAAMsB,EAAW,OAAO,KAAKC,CAAG,EAAE,CAAC,EAAG,OAAO,OAAOA,CAAG,EAAE,CAAC,CAAC,CAAC,EACnEvB,EAAQ,KAAKuB,CAAG,EAExB,OAAOvB,CACR,CAEA,iBAAiBW,EAAMX,EAASS,EAAa,CAC5C,IAAMqB,EAAW,CAACC,EAAMR,EAAKpB,IACxBM,IAAgB,UAAkBsB,EAAKR,CAAG,EAC1Cd,IAAgB,gBAAwBsB,EAAK5B,CAAC,EAAE,CAAC,EAC9C4B,EAAK5B,CAAC,EAER6B,EAAQvB,IAAgB,UAC9B,GAAKuB,GAAS,CAACrC,EAAUgB,CAAI,GAAO,CAACqB,GAAS,CAAC,MAAM,QAAQrB,CAAI,EAAI,MAAM,IAAI,MAAM,4DAA4D,KAAK,UAAUX,CAAO,CAAC,aAAaW,CAAI,EAAE,EAC3L,IAAMD,EAAc,CAAC,EAAGuB,EAAajC,EAAQ,OAC7C,QAASG,EAAI,EAAGA,EAAI8B,EAAY9B,IAAM,CACrC,IAAM+B,EAASlC,EAAQG,CAAC,EACxB,GAAI+B,EAAO,MAAO,CACjB,IAAMX,EAAMW,EAAO,MAAM,CAAC,EACpBlC,EAAUkC,EAAO,MAAM,CAAC,EAAE,SAAW,CAACA,EAAO,MAAM,CAAC,CAAC,EAC3D,GAAIX,EAAI,MAAO,CACd,GAAM,CAAC,CAAE,CAAC,CAAEY,CAAK,CAAC,EAAIZ,EAAI,MACpBtB,EAAS6B,EAASnB,EAAMwB,EAAOhC,CAAC,EACtC,GAAI,CAAC,MAAM,QAAQF,CAAM,EAAG,MAAM,IAAI,MAAM,qDAAqDkC,CAAK,aAAa,KAAK,UAAUnC,CAAO,CAAC,aAAaC,CAAM,EAAE,EAC/JS,EAAY,KAAK,CAAE,OAAQT,EAAO,IAAKU,IAAU,CAAE,IAAK,KAAK,iBAAiBA,EAAMX,EAASS,CAAW,CAAE,EAAE,CAAE,CAAC,CAChH,KAAO,CACN,IAAMf,EAAMoC,EAASnB,EAAMY,EAAKpB,CAAC,EACjCO,EAAY,KAAK,CAAE,IAAK,KAAK,iBAAiBhB,EAAKM,EAASS,CAAW,CAAE,CAAC,CAC3E,CACD,KAAO,CACN,IAAMe,EAAQM,EAASnB,EAAMuB,EAAQ/B,CAAC,EACtCO,EAAY,KAAK0B,GAAQZ,CAAK,CAAC,CAChC,CACD,CACA,OAAOd,CACR,CAEA,SAAS2B,EAAaC,EAAe,CACpC,OAAO,KAAK,SAAS,SAASD,EAAaC,CAAa,CACzD,CACD,EAEMF,GAAWG,GACZ,OAAOA,GAAM,WAAmBA,EAChCA,aAAa,KAAcC,GAAMA,EAAE,MAAMD,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EACtE,MAAM,QAAQA,CAAC,GAAK5C,EAAU4C,CAAC,EAAWC,GAAMA,EAAE,KAAKD,CAAC,EACxD,CAAC,KAAM,MAAS,EAAE,SAASA,CAAC,EAAWC,GAAMA,EAAE,QAAQ,IAAI,EACvDA,GAAMA,EAAE,MAAMD,CAAC,EClPjB,IAAME,GAAN,KAAqB,CAE3B,KAAO,EACP,KAAO,GACP,UAAY,CAAC,EAKb,YAAYC,EAAM,CACjB,KAAK,OAASA,CACf,CAEA,IAAI,KAAM,CAAE,MAAO,CAAC,KAAK,OAAO,QAAU,KAAK,OAAS,KAAK,OAAO,OAAS,CAAG,CAEhF,SAASC,EAAU,CAAE,KAAK,UAAU,KAAKA,CAAQ,CAAG,CAEpD,MAAO,CACN,GAAI,KAAK,IAAK,CACb,KAAK,UAAU,QAAQA,GAAYA,EAAS,CAAC,EAC7C,KAAK,KAAO,EACZ,MACD,CACM,KAAK,MACZ,CAEA,MAAM,OAAQ,CACb,GAAI,MAAK,IACT,OAAO,KAAK,OAAO,KAAK,IAAI,CAC7B,CACD,EC9BO,IAAMC,GAAN,cAAwBC,EAAe,CAE7C,YAAYC,EAAO,CAClB,MAAM,CAAC,CAAC,EAER,KAAK,OAASA,EAEd,KAAK,YAAc,IAAI,QAAQ,MAAMC,GAAW,CAC/C,KAAK,MAAQ,MAAM,KAAK,OAAO,OAAO,EACtCA,EAAQ,CACT,CAAC,CACF,CAEA,MAAM,OAAQ,CACb,aAAM,KAAK,YACJ,MAAM,MAAM,CACpB,CACD,EChBO,IAAMC,GAAN,cAAuBC,EAAc,CAE3C,WAAY,CAAE,OAAO,IAAIC,GAAU,IAAI,CAAG,CAC3C,ECAO,IAAMC,GAAN,KAAuB,CAE1B,YAAYC,EAAQC,EAAQC,EAAS,CAAC,EAAG,CACrC,OAAO,eAAe,KAAM,IAAK,CAAE,MAAO,CAAE,OAAAF,EAAQ,KAAMC,EAAQ,OAAAC,CAAO,CAAE,CAAC,CAChF,CAEA,IAAI,QAAS,CAAE,OAAO,KAAK,EAAE,MAAQ,CAErC,IAAI,MAAO,CAAE,OAAO,KAAK,EAAE,IAAM,CAEjC,IAAI,OAAQ,CAAE,OAAOC,EAAkB,SAAS,KAAM,KAAK,IAAI,CAAG,CAElE,IAAI,QAAS,CAAE,OAAO,OAAO,OAAO,CAAC,EAAG,KAAK,OAAO,OAAQ,KAAK,EAAE,MAAM,CAAG,CAE5E,MAAM,UAAUD,EAAS,CAAC,EAAG,CAAE,OAAQ,MAAM,KAAK,OAAO,cAAc,CAAE,GAAGA,EAAQ,SAAU,GAAM,SAAU,KAAK,IAAK,CAAC,GAAG,CAAC,CAAG,CAEhI,MAAM,SAAU,CAAE,OAAQ,MAAM,KAAK,UAAU,IAAI,WAAW,GAAK,CAAG,CAEtE,MAAM,OAAOE,EAAc,IAAK,CAAE,OAAQ,MAAM,KAAK,OAAO,OAAO,CAAC,CAAE,KAAM,KAAK,KAAM,OAAQ,CAAC,EAAE,OAAOA,CAAW,CAAE,CAAC,CAAC,GAAG,SAAS,KAAK,IAAI,CAAG,CAEhJ,MAAM,YAAYC,EAAYH,EAAS,CAAC,EAAG,CACnC,OAAOG,GAAe,WAAYA,EAAa,CAAE,KAAMA,EAAY,QAAS,CAAC,CAAE,GACnF,IAAMC,EAAQC,GAAY,SAAS,KAAM,CAAE,KAAML,EAAO,KAAM,SAAUG,CAAW,CAAC,EACpFC,EAAM,SAAS,EAAE,OAAO,KAAK,IAAI,EAC7BJ,EAAO,aAAaI,EAAM,SAAS,eAAe,EAClDJ,EAAO,WAAWI,EAAM,UAAUJ,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,OAAO,UAAUF,EAAOJ,CAAM,EAC7D,OAAIM,IAAgB,GAAa,KAAK,MAAMF,EAAM,SAAS,EAAE,KAAK,CAAC,EAC5DE,CACX,CAEA,MAAM,YAAYC,EAASC,EAAWR,EAAS,CAAC,EAAG,CAC/C,IAAMI,EAAQK,GAAY,SAAS,KAAM,CAAE,KAAMT,EAAO,KAAM,UAAWO,EAAS,SAAUC,CAAU,CAAC,EACvG,GAAI,CAACJ,EAAO,MAAM,IAAI,MAAM,8CAA8C,EAC1EA,EAAM,UAAU,EAAE,OAAO,KAAK,IAAI,EAC9BJ,EAAO,WAAWI,EAAM,UAAUJ,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,OAAO,UAAUF,EAAOJ,CAAM,EAC7D,OAAIM,IAAgB,GAAa,KAAK,MAAME,CAAS,EAC9CF,CACX,CAEA,MAAM,WAAWC,EAASG,EAAUV,EAAS,CAAC,EAAG,CAC7C,GAAI,OAAOU,GAAa,WAAY,MAAM,IAAI,MAAM,6CAA6C,EACjG,OAAO,MAAM,KAAK,OAAO,WAAW,SAAY,CAE5C,IAAMC,EAAY,MAAM,KAAK,MAAMJ,CAAO,EAAE,OAAO,EACnD,GAAI,CAACI,EAAW,MAAM,IAAI,MAAM,UAAUJ,CAAO,mBAAmB,EACpE,IAAMK,EAAoBD,EAAU,MAAM,EAC1C,MAAMD,EAASE,EAAkB,UAAU,EAAI,CAAC,EAChD,IAAMC,EAAWF,EAAU,SAASC,CAAiB,EAAE,YAAY,CAAE,YAAaZ,EAAO,YAAa,aAAcA,EAAO,YAAa,CAAC,EACzI,GAAI,CAACa,EAAS,OAAQ,OACtB,IAAMT,EAAQU,GAAW,SAAS,KAAM,CAAE,KAAMd,EAAO,KAAM,UAAWW,EAAU,KAAK,EAAG,SAAUE,CAAS,CAAC,EAC9GT,EAAM,UAAU,EAAE,OAAO,KAAK,IAAI,EAC9BJ,EAAO,UAAUI,EAAM,SAAS,WAAW,EAC3CJ,EAAO,WAAWI,EAAM,UAAUJ,EAAO,SAAS,EACtD,IAAMM,EAAc,MAAM,KAAK,OAAO,UAAUF,EAAOJ,CAAM,EAC7D,OAAIM,IAAgB,GAAa,KAAK,MAAM,KAAK,OAAO,oBAAoBF,CAAK,CAAC,EAC3EE,CACX,CAAC,CACL,CAEA,MAAM,UAAUC,EAASP,EAAS,CAAC,EAAG,CAClC,IAAMI,EAAQW,GAAU,SAAS,KAAM,CAAE,KAAMf,EAAO,KAAM,UAAWO,CAAQ,CAAC,EAChF,GAAI,CAACH,EAAO,MAAM,IAAI,MAAM,4CAA4C,EACxE,OAAAA,EAAM,UAAU,EAAE,OAAO,KAAK,IAAI,EAC9BJ,EAAO,UAAUI,EAAM,SAAS,WAAW,EAC3CJ,EAAO,SAAUI,EAAM,SAAS,UAAU,EACrCJ,EAAO,SAASI,EAAM,SAAS,SAAS,EAC7CJ,EAAO,WAAWI,EAAM,UAAUJ,EAAO,SAAS,EAC/C,KAAK,OAAO,UAAUI,EAAOJ,CAAM,CAC9C,CAEA,MAAM,SAASgB,EAAM,CACjB,OAAQ,MAAM,KAAK,OAAO,GAAG,SAASA,CAAI,CAC9C,CAEA,MAAM,QAAS,CACX,OAAQ,MAAM,KAAK,OAAO,GAAG,OAAO,EAAK,CAC7C,CAEA,MAAMA,EAAMhB,EAAS,CAAC,EAAG,CAAE,OAAO,IAAI,KAAK,YAAY,MAAM,KAAM,GAAG,SAAS,CAAG,CAElF,SAASiB,EAAaC,EAAe,CACjC,OAAO,KAAK,OAAO,SAASD,EAAaC,CAAa,CAC1D,CACJ,ECxFO,IAAMC,GAAN,cAA0BC,EAAiB,CAE9C,OAAO,MAAQC,EACnB,ECGO,IAAMC,GAAN,cAAwBC,EAAe,CAE1C,YAAYC,EAAQC,EAAS,CAAC,EAAG,CAC7B,GAAI,OAAOD,GAAW,SAAU,MAAM,IAAI,MAAM,iEAAiE,EACjH,GAAI,OAAOA,EAAO,OAAU,WAAY,MAAM,IAAI,MAAM,sDAAsD,EAC9G,MAAMC,CAAM,EACZ,KAAK,EAAE,OAASD,CACpB,CAEA,IAAI,QAAS,CAAE,OAAO,KAAK,EAAE,MAAQ,CAErC,OAAO,KAAO,MAEd,OAAO,SAAWE,GAElB,MAAM,OAAOD,EAAQ,CACjB,OAAO,MAAM,OAAO,MAAOA,GAAW,CAClC,IAAME,EAAM,KAAKC,GAAkBH,CAAM,EACnCI,EAAS,MAAM,KAAK,OAAO,MAAMF,CAAG,EAC1C,OAAO,KAAKG,GAAsBD,EAAO,MAAQA,CAAO,CAC5D,EAAG,GAAG,SAAS,CACnB,CAEA,MAAM,WAAWE,EAAa,CAAC,EAAG,CAC9B,GAAI,UAAU,OAAQ,CAClBA,EAAa,CAAC,EAAE,OAAOA,CAAU,EAAE,IAAIC,GAAQC,EAAW,SAAS,KAAMD,CAAI,CAAC,EAC9E,IAAML,EAAM,KAAK,OAAO,UAAY,QAAU,OAAOI,EAAW,CAAC,CAAC,GAAK,sBAAsBA,EAAW,KAAK,GAAG,CAAC,GACjH,OAAO,MAAM,KAAK,OAAO,MAAMJ,CAAG,CACtC,CACA,IAAIA,EAAKO,EACL,KAAK,OAAO,UAAY,SACxBP,EAAM,kCAAmCO,EAAM,eAE/CP,EAAM,mBAAoBO,EAAM,cAChCP,EAAM,wCAAyCO,EAAM,mBAEzD,IAAML,EAAS,MAAM,KAAK,OAAO,MAAMF,CAAG,EACpCQ,IAAUN,EAAO,MAAQA,GAAQ,CAAC,GAAK,CAAC,GAAGK,CAAG,EACpD,OAAOE,EAAM,MAAMD,EAAO,CAAC,GAAG,CAAC,EAAE,IAAIE,GAAKJ,EAAW,WAAW,KAAMI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CACtF,CAEA,MAAM,QAAQC,EAAOC,EAAgB,CAAC,EAAGd,EAAS,CAAC,EAAG,CAClD,OAAO,MAAM,KAAK,QAAQa,EAAOC,EAAed,CAAM,CAC1D,CAEA,MAAM,QAAQa,EAAOC,EAAgB,CAAC,EAAG,CACrC,IAAMC,EAAO,CAAE,cAAe,CAAC,CAACF,EAAM,UAAU,CAAE,EASlD,OAR8B,KAAK,OAAO,UAAY,SAAWE,EAAK,gBAElE,CAACF,EAAOE,EAAK,aAAa,EAAI,MAAM,KAAKC,GAAqBH,CAAK,GAEvEE,EAAK,YAAc,MAAM,KAAK,OAAO,MAAMF,EAAM,SAAS,EAAGC,CAAa,EACtEC,EAAK,gBACLA,EAAK,YAAc,MAAMA,EAAK,cAAcA,EAAK,WAAW,GAE5DA,EAAK,cAAsBA,EAAK,YAAY,MAAQA,EAAK,YACtD,aAAcA,EAAK,YAAcA,EAAK,YAAY,SAAWA,EAAK,YAAY,YACzF,CAEA,MAAM,QAAQF,EAAOI,EAAYjB,EAAS,CAAC,EAAG,CAC1C,OAAO,MAAM,MAAM,QAAQ,MAAOa,GACvB,MAAM,KAAK,OAAO,MAAMA,EAAM,SAAS,CAAC,EAChD,GAAG,SAAS,CACnB,CAEA,MAAM,QAAQA,EAAOC,EAAgB,CAAC,EAAG,CACrC,IAAMI,EAAc,MAAM,KAAK,OAAO,MAAML,EAAM,SAAS,EAAGC,CAAa,EAC3E,OAAOI,EAAY,MAAQA,CAC/B,CAMA,MAAM,QAAS,CACX,OAAO,MAAM,OAAO,SAAY,CAC5B,IAAMd,EAAS,MAAM,KAAK,OAAO,MAAM,UAAW,KAAK,OAAO,UAAY,QAAU,kBAAoB,kBAAmB,SAAS,EACpI,OAAQA,EAAO,MAAQA,GAAQ,CAAC,GAAG,GACvC,CAAC,CACL,CAEA,OAAOe,EAASC,EAAUC,EAAY,GAAO,CACzC,OAAO,MAAM,OAAO,CAACF,EAASG,IAAW,CACrC,KAAK,OAAO,MAAM,UAAUH,CAAO,EAAE,EACrC,KAAK,OAAO,GAAG,eAAgB,MAAOI,GAAM,CACpCA,EAAE,UAAYJ,GAASG,EAAOC,CAAC,CACvC,CAAC,CACL,EAAG,GAAG,SAAS,CACnB,CAMA,KAAMP,GAAqBH,EAAO,CAC9B,GAAIA,EAAM,OAAO,EAAE,OAAS,EACxB,MAAM,IAAI,MAAM,4FAA4F,EAEhHA,EAAQA,EAAM,MAAM,EACpB,IAAMW,EAAWX,EAAM,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAC1CY,EAAkBZ,EAAM,UAAU,EAKxC,GAHAA,EAAM,UAAU,MAAS,EAGrBA,aAAiBa,GAAiB,CAClC,IAAMtB,EAAS,MAAM,KAAK,OAAO,MAAM,UAAUqB,CAAe,SAASD,CAAQ,GAAGX,EAAM,MAAM,GAAK,EAAE,EAAE,EACzG,MAAO,CAACA,EAAO,IAAMT,CAAM,CAC/B,CAGA,IAAMuB,EAAU,0CACVC,EAAcpB,EAAW,SAAS,KAAMmB,CAAO,EACnCH,EAAS,OAAO,EACnB,OAAOG,CAAO,GAAG,MAAM,KAAK,OAAO,MAAM,eAAeH,CAAQ,eAAeI,CAAW,qBAAqB,EAC9H,IAAMC,GAAc,EAAI,KAAK,OAAO,EAAI,KAAK,SAAS,EAAE,EAExD,GAAIhB,EAAM,IAAI,EACVA,EAAM,IAAI,EAAE,WAAWc,EAASG,GAAKA,EAAE,MAAMD,CAAU,CAAC,UACjDhB,aAAiBkB,GAAiB,CAEzC,GAAI,CAAClB,EAAM,QAAQ,IAAMA,EAAM,OAAO,GAAKA,EAAM,OAAO,GAAG,QAEvD,MAAM,IAAI,MAAM,8GAA8G,EAIlI,GAFAA,EAAM,QAAQ,EAAE,IAAIc,CAAO,EAEvBd,EAAM,OAAO,EACbA,EAAM,OAAO,EAAE,OAAO,EAAE,IAAIiB,GAAKA,EAAE,MAAMD,CAAU,CAAC,UAC7ChB,EAAM,OAAO,GAAG,OACvB,QAAWmB,KAAcnB,EAAM,OAAO,EAAGmB,EAAW,IAAIF,GAAKA,EAAE,MAAMD,CAAU,CAAC,OAC7EhB,EAAM,OAAOgB,CAAU,CAClC,CACA,OAAIhB,aAAiBkB,IAAmBlB,EAAM,WAAW,GACrDA,EAAM,WAAW,EAAE,WAAWc,EAASG,GAAKA,EAAE,MAAMD,CAAU,CAAC,EAE5D,CAAChB,EAAO,SAAY,CAEvB,IAAMT,EAAS,MAAM,KAAK,OAAO,MAAM,UAAUqB,CAAe,SAAS,MAAM,UAAUG,CAAW,OAAOC,CAAU,GAAG,EACxH,OAAI,KAAK,OAAO,uBAAyB,qBAAqB,MAAM,KAAK,OAAO,MAAM,eAAe,MAAM,gBAAgBD,CAAW,EAAE,EAEjIxB,CACX,CAAC,CACL,CAEAD,GAAkBH,EAAS,CAAC,EAAG,CAE3B,IAAMiC,EAAQ,KAAK,qBAAqB,EAElCC,EAAS,CACX,OAAQ,CAAC,EACT,QAAS,GACT,SAAU,GACV,QAAS,GACT,MAAO,CACX,EACA,GAAI,MAAM,QAAQlC,CAAM,EAAG,CACvBkC,EAAO,QAAU;AAAA,4BAA+BlC,EAAO,IAAIY,GAAKA,EAAE,IAAI,EAAE,KAAK,MAAM,CAAC,KACpF,IAAMuB,EAAYnC,EAAO,OAAO,CAACoC,EAAOxB,IAAM,CAC1C,IAAMyB,EAAO,CAAC,EAAE,OAAOzB,EAAE,QAAU,CAAC,CAAC,EACrC,MAAI,CAACyB,EAAK,QAAUA,EAAK,SAAS,GAAG,EAAUD,EACxCA,EAAM,OAAO,SAASxB,EAAE,IAAI,UAAUqB,EAAM,cAAc,iBAAkBI,CAAI,CAAC,EAAE,CAC9F,EAAG,CAAC,CAAC,EACLH,EAAO,SAAWC,EAAU,OAAS,4BAA4BA,EAAU,KAAK,GAAG,CAAC,OAAS,GAC7FD,EAAO,MAAQ,CACnB,KAAO,CACH,IAAMI,EAAiB,CAAC,EAAE,OAAOtC,EAAO,UAAY,CAAC,CAAC,EACtD,GAAIsC,EAAe,OAAQ,CACvB,IAAMC,EAAWN,EAAM,cAAc,iBAAkBK,CAAc,EACrEJ,EAAO,QAAUK,EAAW;AAAA,QAAWA,CAAQ,GAAK,EACxD,CACAL,EAAO,QAAU;AAAA,iEACjBA,EAAO,MAAQlC,EAAO,OAAS,CACnC,CAEA,IAAMwC,EAAe,IAAM,CAEvB,IAAMC,EAAS,CACX,aAAc,oBACd,WAAY,kBACZ,YAAa,mBACb,iBAAkB,wBAClB,eAAgB,sBAChB,YAAa,mBACb,UAAW,iBACX,yBAA0B,gCAC1B,GAAI,KAAK,OAAO,UAAY,QAAU,CAClC,MAAO,YACX,EAAI,CACA,YAAa,mBACb,oBAAqB,2BACrB,eAAgB,sBAChB,mBAAoB,0BACpB,iBAAkB,wBAClB,iBAAkB,wBAClB,eAAgB,qBACpB,EACA,aAAc,oBACd,sBAAuB,4BAC3B,EACMC,EAAY;AAAA,yBACL,OAAO,QAAQD,CAAM,EAAE,IAAI,CAAC,CAACE,EAAGC,CAAC,IAAM,GAAGA,CAAC,OAAOD,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA,cAM9E,MAAO,UAAUV,EAAM,QACnBA,EAAM,gBAAgB,OAAO,KAAKQ,CAAM,EAAE,OAAO,CAACI,EAASC,IAAMD,EAAQ,OAAO,IAAIC,CAAC,IAAK,QAAQA,CAAC,EAAE,EAAG,CAAC,CAAC,CAAC,CAC/G,CAAC,UAAUJ,CAAS,WACxB,EAEMK,EAAmB,IAAM,CAE3B,IAAMN,EAAS,CACX,aAAcR,EAAM,SAAS,wBAAwB,EACrD,WAAYA,EAAM,SAAS,iBAAiB,EAC5C,YAAaA,EAAM,YAAY,2BAA4B,+BAA+B,EAC1F,gBAAiB,uBACjB,gBAAiBA,EAAM,SAAS,sBAAsB,EACtD,aAAcA,EAAM,SAAS,wCAAwC,EACrE,GAAI,KAAK,OAAO,UAAY,QAAU,CAClC,uBAAwBA,EAAM,SAAS,iCAAiC,EACxE,uBAAwBA,EAAM,YAAY,qCAAqC,EAC/E,sBAAuBA,EAAM,SAAS,oCAAoC,EAC1E,wBAAyBA,EAAM,SAAS,sCAAsC,CAClF,EAAI,CACA,uBAAwBA,EAAM,YAAY,8BAA8B,EACxE,sBAAuBA,EAAM,SAAS,6BAA6B,EACnE,wBAAyBA,EAAM,SAAS,+BAA+B,CAC3E,EACA,2BAA4BA,EAAM,YAAY,iCAAiC,EAC/E,WAAYA,EAAM,SAAS,uBAAuB,EAClD,YAAaA,EAAM,SAAS,sBAAsB,EAClD,YAAaA,EAAM,SAAS,sBAAsB,CACtD,EACMS,EAAY;AAAA,yBACL,OAAO,QAAQD,CAAM,EAAE,IAAI,CAAC,CAACE,EAAGC,CAAC,IAAM,GAAGA,CAAC,OAAOD,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAexE,KAAK,OAAO,UAAY,QAAU,GAAK;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKnC;AAAA;AAAA;AAAA,cAKV,MAAO,UAAUV,EAAM,QACnBA,EAAM,gBAAgB,OAAO,KAAKQ,CAAM,EAAE,OAAO,CAACI,EAASC,IAAMD,EAAQ,OAAO,IAAIC,CAAC,IAAK,QAAQA,CAAC,EAAE,EAAG,CAAC,CAAC,CAAC,CAC/G,CAAC,UAAUJ,CAAS,WACxB,EAEMM,EAAa,CAACC,EAAW,KAAU,CAErC,IAAMR,EAAS,CAAE,WAAY,iBAAkB,aAAc,kBAAmB,EAC1EC,EAAY;AAAA,yBACL,OAAO,QAAQD,CAAM,EAAE,IAAI,CAAC,CAACE,EAAGC,CAAC,IAAM,GAAGA,CAAC,OAAOD,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA,2FAECT,EAAO,QAAQ;AAAA,cAGxFgB,EAAWD,EAAW,CAAC,YAAa,IAAIT,EAAa,CAAC,IAAK,gBAAiB,IAAIO,EAAiB,CAAC,GAAG,EAAI,CAAC,EAChH,MAAO,UAAUd,EAAM,QACnBA,EAAM,gBAAgB,OAAO,KAAKQ,CAAM,EAAE,OAAO,CAACI,EAASC,IAAMD,EAAQ,OAAO,IAAIC,CAAC,IAAK,OAAOA,CAAC,EAAE,EAAG,CAAC,CAAC,EAAE,OAAOI,CAAQ,CAAC,CAC/H,CAAC,UAAUR,CAAS,UACxB,EACA,OAAAR,EAAO,OAAO,KAAK,gBAAgB,EAC/BA,EAAO,OAAOA,EAAO,OAAO,KAAK,IAAIc,EAAWd,EAAO,MAAQ,CAAC,CAAC,aAAa,EACtE,UAAUA,EAAO,OAAO,KAAK,IAAI,CAAC;AAAA;AAAA,UAE5CA,EAAO,OAAO,GAAGA,EAAO,OAAO,GAErC,CAEA7B,GAAqBD,EAAQ,CAEzB,IAAM+C,EAAWC,GAAOA,IAAQ,oBAAsB,UAAaA,IAAQ,UAAY,MAAQA,EACzFC,EAAiB,CAAC5C,EAAK6C,EAAa,MAAW,CACjD,GAAKA,EAA6C,CAAC,EAAjC,CAAE,KAAM7C,EAAI,eAAgB,EAC9C,YAAa,CAACA,EAAI,wBAAyBA,EAAI,qBAAqB,EACpE,cAAe,CAAC,GAAG,IAAI,IAAIA,EAAI,uBAAuB,MAAM,GAAG,CAAC,CAAC,EAAE,IAAIG,GAAKA,EAAE,KAAK,CAAC,EACpF,GAAIH,EAAI,aAAe,OAAS,CAAE,UAAWA,EAAI,UAAW,EAAI,CAAC,EACjE,WAAYA,EAAI,YAChB,WAAYA,EAAI,WACpB,GACM8C,EAAkB,CAACC,EAAMC,EAAc,KAAU,CACnD,IAAMC,EAAU,IAAI,IACdC,EAAOC,GAAO,MAAM,CAAE,OAASH,EAA4B,CAAE,GAAG,KAAK,OAAQ,aAAeE,GAASA,EAAK,YAAc,aAAeD,EAAQ,IAAIC,EAAK,KAAK,EAAE,YAAY,CAAC,EAAI,IAAK,EAAxI,KAAK,MAAoI,EAAGH,EAAM,KAAM,CAAE,QAAS,EAAM,CAAC,EACvNK,EAAOF,EAAK,YAAc,SAAWA,EAAK,cAAc,EAAE,OAAO,CAAE,UAAW,EAAM,CAAC,EAAIA,EAAK,OAAO,CAAE,UAAW,EAAM,CAAC,EAC/H,OAAOF,EAAc,CAAE,QAAS,CAAC,GAAGC,CAAO,EAAG,KAAAG,CAAK,EAAIA,CAC3D,EACA,OAAOzD,EAAO,IAAI0D,IACS,CACnB,KAAMA,EAAG,YACT,QAASA,EAAG,QAAU,CAAC,GAAG,IAAIC,GAAO,CAEjC,IAAMC,EAA2BvD,IACxBA,EAAI,eAAcA,EAAI,aAAe,IACnC,CAAC,GAAGA,EAAK,GAAG8C,EAAgB9C,EAAI,aAAc,EAAI,CAAC,GAE1D,CAACwD,EAAYC,EAAYC,EAAaC,CAAM,GAAKL,EAAI,aAAe,CAAC,GAAG,OAAO,CAAC,CAACM,EAAUC,EAASC,EAAUH,CAAM,EAAG3D,IACnHA,EAAI,kBAAoB,cAAsB,CAAC4D,EAAS,OAAO5D,CAAG,EAAG6D,EAASC,EAAUH,CAAM,EAC9F3D,EAAI,kBAAoB,SAAiB,CAAC4D,EAAUC,EAAQ,OAAO7D,CAAG,EAAG8D,EAAUH,CAAM,EACzF3D,EAAI,kBAAoB,cAAsB,CAAC4D,EAAUC,EAASC,EAAS,OAAO9D,CAAG,EAAG2D,CAAM,EAC9F3D,EAAI,kBAAoB,SAAW,EAAE,KAAK,OAAO,UAAY,YAAc,kBAAkB,KAAKA,EAAI,eAAe,GAAW,CAAC4D,EAAUC,EAASC,EAAUH,EAAO,OAAOJ,EAAyBvD,CAAG,CAAC,CAAC,EACvM,CAAC4D,EAAUC,EAASC,EAAUH,CAAM,EAC5C,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,EAwBbI,EAAO,CAAC,EAAGC,EAAc,CAC3B,KAAMV,EAAI,WACV,SAAUA,EAAI,SAAW,CAAC,GAAG,OAAO,CAACW,EAAMC,IAAQ,CAC/C,IAAMC,EAASD,EAAI,OAAgB,MAAM,GAAG,EAAE,IAAI/D,GAAKA,EAAE,KAAK,CAAC,GAAK,CAAC,EACrE,OAAO8D,EAAK,OAAO,CACf,KAAMC,EAAI,YACV,KAAMA,EAAI,yBAA2B,CAACxB,EAASwB,EAAI,SAAS,EAAGA,EAAI,wBAAwB,EAAIxB,EAASwB,EAAI,SAAS,EACrH,GAAIV,EAAW,SAAW,GAAKA,EAAW,CAAC,EAAE,cAAgBU,EAAI,cAAgBH,EAAK,MAAQP,EAAW,IAAI,GAAK,CAC9G,WAAY,CAAE,KAAMO,EAAK,MAAM,eAAgB,CACnD,EAAI,CAAC,EACL,IAAKA,EAAK,MAAQN,EAAW,OAAOzD,GAAOA,EAAI,cAAgBkE,EAAI,WAAW,GAAG,SAAW,IAAMT,EAAaA,EAAW,OAAOzD,GAAOA,IAAQ+D,EAAK,MAAM,CAAC,CAAC,GAAK,CAC9J,UAAW,CAAE,KAAMA,EAAK,MAAM,CAAC,EAAE,eAAgB,CACrD,EAAI,CAAC,EACL,IAAKA,EAAK,MAAQL,EAAY,OAAO1D,GAAOA,EAAI,YAAY,MAAM,GAAG,EAAE,IAAKG,GAAMA,EAAE,KAAK,CAAC,EAAE,IAAI,IAAM+D,EAAI,WAAW,GAAG,SAAWR,EAAcA,EAAY,OAAO1D,GAAOA,IAAQ+D,EAAK,MAAM,CAAC,CAAC,GAAK,CACjM,WAAYnB,EAAemB,EAAK,MAAM,CAAC,CAAC,CAC5C,EAAI,CAAC,EACL,IAAKA,EAAK,MAAQJ,EAAO,OAAO3D,GAAOA,EAAI,yBAA2B,SAAWA,EAAI,QAAQ,SAAW,GAAKA,EAAI,QAAQ,CAAC,IAAMkE,EAAI,WAAW,GAAG,SAAW,IAAMP,EAASA,EAAO,OAAO3D,GAAOA,IAAQ+D,EAAK,MAAM,CAAC,CAAC,GAAK,CACvN,MAAO,CAAE,KAAMA,EAAK,MAAM,CAAC,EAAE,gBAAiB,KAAMA,EAAK,MAAM,CAAC,EAAE,IAAK,CAC3E,EAAI,CAAC,EACL,GAAIG,EAAI,cAA4B,MAAQ,CACxC,SAAU,CAAE,OAAQA,EAAI,sBAAwB,QAAS,CAC7D,EAAI,CAAC,EACL,GAAIA,EAAI,eAAiB,QAAU,CAC/B,WAAY,CAAE,OAAQA,EAAI,eAAiB,SAAU,KAAMpB,EAAgBoB,EAAI,qBAAqB,CAAE,CAC1G,EAAI,CAAC,EACL,GAAIC,EAAO,SAAS,gBAAgB,EAAa,CAC7C,cAAe,EACnB,EAAI,CAAC,EACL,GAAID,EAAI,cAAgB,KAAO,CAC3B,QAAS,EACb,EAAI,CAAC,EACL,GAAIA,EAAI,gBAAkBA,EAAI,iBAAmB,OAAS,CACtD,QAAS,CAAE,KAAMpB,EAAgBoB,EAAI,cAAc,CAAE,CACzD,EAAI,CAAC,EACL,GAAIC,EAAO,SAAS,WAAW,EAAI,CAC/B,MAAO,CAAC,WAAW,CACvB,EAAI,CAAC,CACT,CAAC,CACL,EAAG,CAAC,CAAC,EACL,YAAa,CAAC,EACd,QAAS,CAAC,CACd,EACA,OAAAH,EAAY,YAAY,KAAK,GAAG,CAAC,GAAGR,EAAY,GAAGC,EAAY,GAAGC,CAAW,EAAE,IAAI1D,IAAQ,CACvF,KAAMA,EAAI,gBACV,KAAMA,EAAI,kBAAoB,SAAW,aAAeA,EAAI,gBAAgB,QAAQ,IAAK,GAAG,EAC5F,QAAS,CAAC,GAAG,IAAI,IAAIA,EAAI,YAAY,MAAM,GAAG,EAAE,IAAKkE,GAAQA,EAAI,KAAK,CAAC,CAAC,CAAC,EACzE,GAAIlE,EAAI,kBAAoB,cAAgB4C,EAAe5C,EAAK,EAAI,EAAI,CAAC,CAC7E,EAAE,CAAC,EACHgE,EAAY,YAAY,KAAK,GAAGL,EAAO,IAAI3D,IAAQ,CAC/C,KAAMA,EAAI,gBACV,KAAMA,EAAI,gBACV,QAASA,EAAI,QACb,KAAMA,EAAI,IACd,EAAE,CAAC,EACIgE,CACX,CAAC,CACL,EAEH,CACL,CACJ",
  "names": ["isString_default", "val", "isUndefined_default", "val", "isTypeFunction_default", "val", "isFunction_default", "val", "isTypeFunction_default", "isArray_default", "val", "isTypeArray_default", "val", "isString_default", "isUndefined_default", "isNull_default", "val", "isTypeObject_default", "val", "isTypeFunction_default", "isEmpty_default", "val", "isNull_default", "isUndefined_default", "isTypeObject_default", "isObject_default", "val", "from_default", "val", "castObject", "isArray_default", "isObject_default", "isEmpty_default", "isTypeArray_default", "isNumber_default", "val", "isNumeric_default", "val", "isNumber_default", "_flatten", "arr", "depth", "withObjects", "isNumeric_default", "isArray_default", "isObject_default", "acc", "val", "flatten_default", "first_default", "arr", "amount", "count", "itm", "firsts", "last_default", "arr", "amount", "first_default", "pushUnique_default", "arr", "items", "itm", "getPrototypeChain_default", "obj", "until", "isArray_default", "prototypalChain", "getAllPropertyNames_default", "obj", "until", "keysAll", "getPrototypeChain_default", "pushUnique_default", "mergeCallback", "objs", "callback", "deepProps", "isReplace", "withSymbols", "depth", "obj1", "isNumeric_default", "obj2", "i", "isTypeObject_default", "isFunction_default", "getAllPropertyNames_default", "key", "valAtObj1", "valAtObj2", "isArray_default", "isObject_default", "merge_default", "objs", "mergeCallback", "k", "obj1", "obj2", "isPlainObject_default", "obj", "isObject_default", "isBoolean_default", "val", "each_default", "obj", "callback", "returnValue", "isTypeObject_default", "k", "i", "isNumeric_default", "compareCallback_default", "obj1", "obj2", "assertion", "netComparison", "contrast", "returnOnFirstFalse", "isArray_default", "result", "contn", "v1", "testPass", "each_default", "k", "v2", "isTypeObject_default", "isObject_default", "isBoolean_default", "_even", "obj1", "obj2", "assertion", "depth", "isArray_default", "isObject_default", "obj1Keys", "obj2Keys", "isPlainObject_default", "result", "compareCallback_default", "v1", "v2", "isFunction_default", "isNumber_default", "even_default", "copyPlain_default", "obj", "filter", "mergeCallback", "key", "obj1", "obj2", "isFunction_default", "isArray_default", "intersect_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "Lexer", "_Lexer", "str", "delims", "options", "isString_default", "copyResult", "result", "copyPlain_default", "cached", "even_default", "instance", "runtime", "from_default", "merge_default", "cursor", "flatten_default", "i", "charWidth", "commentTest", "quoteTest", "nestingTest", "chars", "stopChar", "matchedDelim", "nextIndex", "quote", "block", "last_default", "ending", "starting", "first_default", "matchedStarting", "matchedEnding", "testList", "k", "testArg", "isObject_default", "isFunction_default", "ret", "regexFlags", "m", "match", "base", "text", "target", "isNewSeries", "splitSeries", "isUndefined_default", "splitSeries2", "comments", "Lexer", "after_default", "subject", "search", "afterLast", "pos", "before_default", "subject", "search", "beforeLast", "pos", "difference_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "beforeLast_default", "subject", "search", "before_default", "fromCamel_default", "str", "delimiter", "toTitle_default", "str", "strict", "txt", "toCamel_default", "str", "fromStart", "toTitle_default", "unwrap_default", "subject", "openingTag", "closingTag", "beforeLast_default", "after_default", "wrapped_default", "subject", "openingTag", "closingTag", "AbstractNode", "_AbstractNode", "#contextNode", "#flags", "#additionalDetails", "contextNode", "fromCamel_default", "requestName", "eventType", "requestSource", "eventSource", "args", "Type", "slot", "slotName", "delegatesTo", "dedupeCallback", "Types", "$", "fromInstanceOrJson", "arg", "instance", "prev", "createFactoryMethodHandler", "returnPairs", "autoThrow", "fromFactoryMethod", "methodName", "$methodName", "k", "t", "resultPair", "adoptNode", "duplicate", "node", "delegatables", "i", "$$", "isObject_default", "proxy", "baseMethodName", "$nextMethodName", "chainTarget", "nextMethod", "content", "asInputDialect", "escChar", "expr", "quote", "unquote", "parts", "Lexer", "parses", "s", "ident_s", "esc", "ident", "quoteChars", "str", "key", "value", "flags", "f", "$flags", "$flag", "a", "flag", "b", "caseMatch", "x", "temp", "possibleChild", "json", "callback", "options", "jsonIn", "parseCallback", "keyHint", "C", "Identifier", "AbstractNode", "#name", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "name", "AbstractNodeList", "AbstractNode", "#entries", "args", "ref", "context", "json", "callback", "instance", "entry", "options", "jsonIn", "reducer", "aggr", "i", "result", "expr", "parseCallback", "clauseMatch", "spec", "wrapped_default", "Lexer", "unwrap_default", "$entries", "entries", "s", "str", "RefErrorAmbiguous", "RefErrorUnknown", "AbstractRef", "_AbstractRef", "Identifier", "#prefix", "#autoPrefixed", "#schema", "value", "filter", "resultSchema", "schema", "name", "KIND", "kind", "superSchemas", "subSchemas", "$getTarget", "superSchema", "subSchema", "subSchemas_filtered", "RefErrorAmbiguous", "toTitle_default", "s", "RefErrorUnknown", "context", "json", "callback", "instance", "options", "jsonIn", "prefix", "expr", "parseCallback", "AbstractAliasableExpr", "AbstractNode", "#expr", "#alias", "#claused", "expr", "value", "claused", "args", "schema", "context", "json", "callback", "instance", "AbstractRef", "c", "options", "jsonIn", "alias", "parseCallback", "$$expr", "$$alias", "Lexer", "s", "tokens", "AbstractDiffableNode", "AbstractNode", "#status", "#CDLIgnoreList", "nodeCDL", "options", "nodeB", "deeply", "props", "p", "jsonA", "jsonB", "k", "treeA", "treeB", "existingCallback", "node", "dropped", "existing", "added", "name", "jsons", "subDiff", "#$diffTagHydrate", "args", "settingBefore", "value", "context", "json", "callback", "instance", "jsonIn", "AbstractNameableNode", "AbstractDiffableNode", "#name", "#$name", "value", "deeply", "nodeB", "options", "#$nameLock", "set", "settingBefore", "context", "json", "callback", "instance", "$name", "jsonIn", "AbstractPrefixableNameableNode", "_AbstractPrefixableNameableNode", "AbstractNameableNode", "#prefix", "#$prefix", "value", "prefix", "RefClass", "$$prefix", "args", "deeply", "nodeB", "options", "context", "json", "callback", "instance", "$prefix", "jsonIn", "DatabaseRef", "AbstractRef", "value", "GlobalDatabaseRef", "DatabaseRef", "TableRef", "AbstractRef", "DatabaseRef", "GlobalTableRef", "TableRef", "GlobalDatabaseRef", "AbstractCDL", "AbstractNode", "#actions", "args", "clause", "callback", "Type", "t", "action", "context", "json", "instance", "options", "jsonIn", "expr", "parseCallback", "Lexer", "actionExpr", "AbstractAction", "AbstractNode", "#KIND", "#$KIND", "contextNode", "kind", "$kind", "context", "json", "callback", "instance", "options", "jsonIn", "Flag", "AbstractAction", "#value", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "ConstraintCDL", "AbstractCDL", "Flag", "AbstractConstraint", "AbstractNameableNode", "columnCDL", "options", "ConstraintCDL", "nodeB", "context", "json", "callback", "jsonIn", "expr", "name", "$expr", "asInputDialect", "escChar", "nameRegex", "nameUnscaped", "nameEscaped", "rest", "AbstractLevel2Constraint", "AbstractConstraint", "contextNode", "context", "json", "callback", "options", "jsonIn", "$json", "AbstractColumnsMixin", "Class", "#columns", "#$columns", "columns", "deeply", "nodeB", "options", "cols", "actions", "requireCascadeDirective", "cc", "c", "transforms", "a", "aa", "context", "json", "callback", "instance", "$columns", "jsonIn", "intersect_default", "columnsExpr", "asInputDialect", "Lexer", "unwrap_default", "columnExpr", "PrimaryKeyConstraint", "AbstractColumnsMixin", "AbstractLevel2Constraint", "context", "expr", "parseCallback", "name", "$expr", "instance", "columnsExpr", "Lexer", "AbstractReferenceMixin", "Class", "#reference", "reference", "context", "json", "callback", "instance", "options", "jsonIn", "AbstractArgumentMixin", "Class", "#argument", "argument", "context", "json", "callback", "instance", "options", "jsonIn", "AbstractAlterAction", "AbstractReferenceMixin", "AbstractArgumentMixin", "AbstractAction", "context", "expr", "parseCallback", "kindExpr", "referenceExpr", "argumentExpr", "instance", "AbstractStatementNode", "Class", "#querySugars", "eventType", "eventSource", "AbstractSugar", "Class", "AbstractDDLStatement", "Class", "AbstractStatementNode", "AbstractSugar", "#returningClause", "value", "context", "json", "callback", "kind", "instance", "options", "jsonInCallback", "expr", "parseCallback", "returningClause", "Lexer", "s", "str", "UniqueKeyConstraint", "AbstractColumnsMixin", "AbstractLevel2Constraint", "context", "expr", "parseCallback", "name", "$expr", "instance", "columnsExpr", "Lexer", "ColumnRef", "AbstractRef", "TableRef", "#prettyName", "value", "context", "json", "callback", "instance", "options", "jsonIn", "Literal", "AbstractNode", "#value", "value", "context", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "AbstractExprMixin", "Class", "#expr", "#$expr", "#columns", "eventType", "eventSource", "ColumnRef", "value", "expr", "Literal", "Exprs", "args", "deeply", "nodeB", "options", "context", "json", "callback", "instance", "$expr", "jsonIn", "parseCallback", "name", "CheckConstraint", "AbstractExprMixin", "AbstractLevel2Constraint", "AbstractLevel1Constraint", "AbstractConstraint", "IdentityConstraint", "AbstractLevel1Constraint", "#always", "#$always", "value", "deeply", "nodeB", "options", "context", "json", "callback", "instance", "$always", "jsonIn", "expr", "name", "$expr", "AutoIncrementConstraint", "AutoIncrementConstraint", "AbstractLevel1Constraint", "IdentityConstraint", "ExpressionConstraint", "AbstractExprMixin", "AbstractLevel1Constraint", "#stored", "#$stored", "value", "deeply", "nodeB", "options", "context", "json", "callback", "instance", "$stored", "jsonIn", "expr", "parseCallback", "stored", "name", "$expr", "DefaultConstraint", "AbstractExprMixin", "AbstractLevel1Constraint", "NotNullConstraint", "AbstractLevel1Constraint", "OnUpdateClause", "AbstractExprMixin", "AbstractLevel1Constraint", "NullConstraint", "AbstractLevel1Constraint", "Add", "AbstractArgumentMixin", "AbstractAction", "IdentityConstraint", "context", "expr", "parseCallback", "argumentExpr", "instance", "Drop", "AbstractAction", "context", "expr", "kindExpr", "DataType", "AbstractNode", "#value", "context", "spec", "json", "name", "precision", "flags", "parse", "nornalizeSpec", "expr", "d", "f", "x", "s", "key", "Set", "AbstractArgumentMixin", "AbstractAction", "Literal", "DataType", "IdentityConstraint", "ExpressionConstraint", "DefaultConstraint", "NotNullConstraint", "context", "expr", "parseCallback", "clauseMatch", "restExpr", "subMatch", "$KIND", "argumentExpr", "name", "value", "q", "instance", "kindExpr", "ColumnCDL", "AbstractCDL", "Add", "Drop", "Set", "ColumnSchema", "AbstractPrefixableNameableNode", "AutoIncrementConstraint", "IdentityConstraint", "ExpressionConstraint", "DefaultConstraint", "NotNullConstraint", "NullConstraint", "OnUpdateClause", "PrimaryKeyConstraint", "ForeignKeyConstraint", "UniqueKeyConstraint", "CheckConstraint", "GlobalTableRef", "#type", "#$type", "#constraints", "value", "DataType", "args", "arg1", "existing", "cons", "c", "isObject_default", "asInstances", "level", "constraints", "node", "AbstractLevel2Constraint", "deeply", "dirtyCheck", "key", "columnCDL", "options", "json", "cd", "argumentJson", "argumentJsonNew", "attrName", "toCamel_default", "ColumnCDL", "nodeB", "attributesDiff", "constraintsDiff", "a", "b", "type", "rest", "k", "body", "$throw", "subKey", "fromCamel_default", "context", "callback", "nodeName", "name", "$name", "prefix", "$prefix", "$type", "status", "CDLIgnoreList", "instance", "jsonIn", "reducer", "aggr", "entry", "i", "result", "AbstractNode", "expr", "parseCallback", "namePart", "bodyPart", "Lexer", "qualifier", "regexes", "columnType", "tokens", "constraint", "Flag", "AbstractAction", "#value", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "IndexCDL", "AbstractCDL", "Flag", "IndexSchema", "AbstractColumnsMixin", "AbstractNameableNode", "#type", "#$type", "value", "deeply", "columnCDL", "options", "IndexCDL", "nodeB", "context", "json", "callback", "instance", "$type", "jsonIn", "contextNode", "expr", "match", "type", "rest", "nameExpr", "columnsExpr", "Lexer", "name", "Add", "AbstractArgumentMixin", "AbstractAction", "ColumnSchema", "PrimaryKeyConstraint", "ForeignKeyConstraint", "UniqueKeyConstraint", "CheckConstraint", "IndexSchema", "ColumnRef", "Identifier", "#first", "#after", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "parseCallback", "argParseCallback", "autoFiguredKind", "kindExpr", "argumentExpr", "afterRef", "first", "ifNotExists", "$argumentExpr", "argument", "sql", "Modify", "Add", "Change", "AbstractReferenceMixin", "Modify", "context", "expr", "parseCallback", "instance", "argumentExpr", "Types", "$referenceExpr", "$argumentExpr", "Drop", "AbstractReferenceMixin", "AbstractAction", "ColumnRef", "Identifier", "context", "expr", "parseCallback", "KINDS", "$KINDS", "kinds", "k", "wholeMatch", "kindExp", "ifExists", "referenceExpr", "restrictCascadeForce", "s", "$KIND", "KIND", "instance", "sql", "Set", "AbstractArgumentMixin", "AbstractAction", "DatabaseRef", "context", "expr", "parseCallback", "kindExpr", "argumentExpr", "k", "instance", "Alter", "AbstractReferenceMixin", "AbstractArgumentMixin", "AbstractAction", "ColumnCDL", "ConstraintCDL", "IndexCDL", "ColumnRef", "Identifier", "context", "expr", "parseCallback", "kindExpr", "restExpr", "referenceExpr", "argumentExpr", "Lexer", "s", "instance", "action", "Rename", "AbstractReferenceMixin", "AbstractArgumentMixin", "AbstractAction", "ColumnRef", "Identifier", "GlobalTableRef", "context", "expr", "parseCallback", "kindExpr", "referenceExpr", "argumentExpr", "instance", "s", "TableCDL", "AbstractCDL", "Add", "Modify", "Change", "Drop", "Set", "Alter", "Rename", "AlterTable", "AbstractDDLStatement", "AbstractAlterAction", "TableCDL", "GlobalTableRef", "moveAction", "ownRename", "renames", "actions", "a", "b", "c", "d", "action", "sql", "stmt_", "rename", "AbstractCreateAction", "AbstractArgumentMixin", "AbstractAction", "context", "expr", "parseCallback", "kindExpr", "ifNotExists", "argumentExpr", "instance", "argument", "sql", "CreateTable", "AbstractDDLStatement", "AbstractCreateAction", "TableSchema", "AbstractDropAction", "AbstractReferenceMixin", "AbstractAction", "context", "expr", "parseCallback", "KINDS", "kindExp", "ifExists", "referenceExpr", "restrictCascadeForce", "s", "instance", "sql", "DropTable", "AbstractDDLStatement", "AbstractDropAction", "GlobalTableRef", "AbstractRenameAction", "AbstractReferenceMixin", "AbstractArgumentMixin", "AbstractAction", "context", "expr", "parseCallback", "kindExpr", "referenceExpr", "argumentExpr", "instance", "s", "Rename", "AbstractRenameAction", "GlobalTableRef", "GlobalDatabaseRef", "Set", "AbstractArgumentMixin", "AbstractAction", "Identifier", "context", "expr", "parseCallback", "kindExpr", "argumentExpr", "k", "instance", "DatabaseCDL", "AbstractCDL", "AlterTable", "CreateTable", "DropTable", "Rename", "Set", "AlterDatabase", "AbstractDDLStatement", "AbstractAlterAction", "DatabaseCDL", "GlobalDatabaseRef", "ownRename", "renames", "sets", "actions", "a", "b", "c", "d", "action", "sql", "set", "CreateDatabase", "AbstractDDLStatement", "AbstractCreateAction", "DatabaseSchema", "sql", "tblSchema", "createTbl", "CreateTable", "DropDatabase", "AbstractDDLStatement", "AbstractDropAction", "GlobalDatabaseRef", "RenameDatabase", "AbstractDDLStatement", "AbstractRenameAction", "GlobalDatabaseRef", "RootCDL", "AbstractCDL", "AlterDatabase", "CreateDatabase", "DropDatabase", "RenameDatabase", "ForeignKeyConstraint", "AbstractColumnsMixin", "AbstractLevel2Constraint", "#targetTable", "#$targetTable", "#targetColumns", "#$targetColumns", "#matchRule", "#$matchRule", "#updateRule", "#$updateRule", "#deleteRule", "#$deleteRule", "table", "GlobalTableRef", "columns", "rule", "deeply", "nodeB", "options", "context", "json", "callback", "instance", "$targetTable", "$targetColumns", "$matchRule", "$updateRule", "$deleteRule", "jsonIn", "RootCDL", "temp", "handleDrop", "cd", "updateTargetPrefix", "argument", "$argument", "updateTargetName", "updateTargetColumns", "targetColumns", "intersect_default", "matchPrefix", "reference", "matchName", "scanTableCDL", "tableCDL", "scanDatabaseCDL", "databaseCDL", "rootCDL", "expr", "parseCallback", "name", "$expr", "columnsExpr", "rest", "Lexer", "table_maybeQualified", "cols", "opts", "targetTable", "unwrap_default", "col", "matchReferentialRule", "str", "type", "referentialActionRe", "keyword1", "keyword2", "keyword2Columns", "s", "sql", "c", "serializeReferentialRule", "TableSchema", "AbstractPrefixableNameableNode", "PrimaryKeyConstraint", "ForeignKeyConstraint", "UniqueKeyConstraint", "CheckConstraint", "GlobalDatabaseRef", "#columns", "#constraints", "#indexes", "#nodes", "requestName", "requestSource", "eventType", "eventSource", "ColumnSchema", "AbstractLevel2Constraint", "IndexSchema", "x", "arg1", "args", "existing", "col", "c", "instance", "cons", "idx", "i", "asInstances", "columns", "deeply", "constraints", "node", "indexes", "pk", "fks", "fk", "uks", "uk", "cks", "ck", "dirtyCheck", "key", "tableCDL", "options", "rootCDL", "$options", "$$transforms", "$$additions", "findNode", "kind", "name", "assertExists", "autoRehydrate", "$$kind", "Type", "handlePutCD", "cd", "placement", "refNode", "$refNode", "$argument", "$$argument", "handleDropCD", "handleSetCD", "handleRenameCD", "handleAlterCD", "$json", "renderNode", "rejsonfyColumn", "$col", "rejsonfyNode", "renderSubtree", "nodes", "jsons", "outputJson", "ensurePrefix", "columnTransforms", "constraintTransforms", "indexTransforms", "TableCDL", "tblDirtyCheck", "$kind", "nodeDirtyCheck", "difference_default", "nodeCDL", "s", "nodeB", "modifiedColumns", "constraintsA", "constraintsB", "instance2", "refColumn", "$refColumn", "columnsDiff", "a", "b", "constraintsDiff", "indexesDiff", "context", "json", "callback", "jsonIn", "expr", "parseCallback", "namePart", "bodyPart", "rest", "Lexer", "wrapped_default", "prefix", "defs", "unwrap_default", "def", "constraint", "cnst", "ndx", "GlobalTableRef", "DatabaseSchema", "AbstractNameableNode", "#version", "#tables", "requestName", "requestSource", "arg1", "args", "existing", "tbl", "t", "TableSchema", "asInstances", "tbls", "cols", "name", "deeply", "expr", "dirtyCheck", "key", "node", "databaseCDL", "options", "rootCDL", "$options", "$$hasSeenRootCDL", "$$transforms", "$$additions", "findTable", "assertExists", "autoRehydrate", "getOptionsFor", "$$options", "handleCreateCD", "cd", "$argument", "handleDropCD", "refNode", "$refNode", "handleSetCD", "handleRenameCD", "handleAlterCD", "$json", "renderNode", "renderSubtree", "nodes", "jsons", "outputJson", "kind", "DatabaseCDL", "tblCDL", "nodeB", "tablesDiff", "a", "b", "context", "json", "callback", "instance", "jsonIn", "table", "parseCallback", "AbstractOperator2Expr", "AbstractNode", "#operator", "#lhs", "#rhs", "value", "testOperator", "lhs", "rhs", "operator", "isObject_default", "context", "json", "callback", "instance", "options", "jsonIn", "list", "op", "re", "Assertion", "AbstractOperator2Expr", "Exprs", "context", "lhs", "rhs", "expr", "parseCallback", "operator", "Lexer", "instance", "OrderCriteria", "AbstractNode", "#expr", "#direction", "expr", "Exprs", "value", "context", "json", "callback", "k", "instance", "options", "jsonIn", "parseCallback", "$expr", "flag", "s", "OrderByClause", "AbstractNodeList", "OrderCriteria", "context", "expr", "parseCallback", "clauseMatch", "columnsSpec", "withRollup", "instance", "LimitClause", "AbstractNode", "#expr", "expr", "Exprs", "context", "json", "callback", "k", "instance", "options", "jsonIn", "parseCallback", "clauseMatch", "$expr", "AbstractOperator1Expr", "AbstractNodeList", "Exprs", "#operator", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "parseCallback", "clauseMatch", "spec", "operator", "tokens", "Lexer", "_operator", "s", "token", "str", "Condition", "AbstractOperator1Expr", "args", "context", "entries", "WhereClause", "Condition", "Table", "AbstractAliasableExpr", "GlobalTableRef", "SubQuery", "OnClause", "Condition", "JoinClause", "Table", "#type", "#usingClause", "#onClause", "value", "args", "OnClause", "correlation", "Identifier", "context", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "parseCallback", "joinMatch", "type", "joinSpec", "$table", "$correlation", "Lexer", "s", "AbstractPath", "AbstractSugar", "AbstractOperator2Expr", "fullyQualified", "targetSchema", "keyLhs_ident", "keyRhs_ident", "PathJunction", "lhsEndpoint", "lhsFk", "lhsEndpointTable", "querySchema", "$col", "$keyLhs_ident", "ColumnRef", "keyRhs", "PathLeft", "targetTableIdent", "GlobalTableRef", "options", "jsonIn", "PathLeft", "_PathLeft", "AbstractPath", "ColumnRef", "PathRight", "requestName", "requestSource", "context", "lhs", "operator", "rhs", "fk", "options", "jsonIn", "expr", "parseCallback", "tokens", "Lexer", "instance", "PathJunction", "PathLeft", "GlobalTableRef", "requestName", "requestSource", "Property", "AbstractAliasableExpr", "Exprs", "Str", "AbstractNode", "#value", "#quote", "value", "context", "quote", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "text", "Fn", "AbstractNode", "#name", "#args", "value", "args", "Exprs", "context", "name", "json", "callback", "instance", "arg", "options", "jsonIn", "o", "expr", "parseCallback", "Lexer", "$args", "JsonObjectSpec", "AbstractSugar", "AbstractNodeList", "Property", "Fn", "context", "entries", "options", "jsonIn", "reducer", "args", "property", "key", "Str", "value", "JsonArraySpec", "AbstractSugar", "AbstractNodeList", "Exprs", "Fn", "context", "entries", "options", "jsonIn", "reducer", "e", "ColumnsSpec", "AbstractNodeList", "PathRight", "ColumnRef", "context", "entries", "RowSpec", "AbstractNodeList", "Exprs", "context", "entries", "PartitionByClause", "AbstractNodeList", "Exprs", "context", "expr", "parseCallback", "clauseMatch", "columnsSpec", "Window", "AbstractNode", "#name", "#windowRef", "#partitionByClause", "#orderByClause", "value", "args", "PartitionByClause", "OrderByClause", "context", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "parseCallback", "parseEnclosure", "enclosure", "definedRef", "clauses", "clauseTypes", "Lexer", "unwrap_default", "clauseType", "hasEnclosure", "name", "sql", "x", "Aggr", "Fn", "#overClause", "#orderByClause", "value", "Window", "args", "OrderByClause", "context", "name", "FN", "toCamel_default", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "parseCallback", "func", "overClause", "Lexer", "s", "aggrFlag", "$args", "orderByClause", "JsonAgg", "AbstractSugar", "AbstractNode", "Aggr", "Exprs", "e", "RowSpec", "ColumnsSpec", "#expr", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "parseCallback", "TypeCast", "AbstractNode", "#value", "#type", "#compact", "value", "Exprs", "context", "type", "compact", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "parseCallback", "parens", "Lexer", "Json", "Str", "context", "value", "isObject_default", "json", "callback", "k", "instance", "expr", "braces", "$", "text", "quote", "b", "wrapped_default", "Lexer", "Num", "AbstractNode", "#value", "value", "context", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "JsonPath", "AbstractOperator2Expr", "Json", "ColumnRef", "TypeCast", "Num", "Str", "context", "lhs", "operator", "rhs", "expr", "parseCallback", "Lexer", "instance", "PathRight", "_PathRight", "AbstractPath", "PathJunction", "ColumnRef", "JsonPath", "JsonAgg", "JsonObjectSpec", "JsonArraySpec", "ColumnsSpec", "requestName", "requestSource", "context", "lhs", "operator", "rhs", "fk", "options", "jsonIn", "c", "expr", "parseCallback", "Lexer", "instance", "AbstractQueryStatement", "Class", "#joinClauses", "#whereClause", "#orderByClause", "#limitClause", "args", "JoinClause", "table", "WhereClause", "OrderByClause", "value", "LimitClause", "derivationLevel", "dbSchema", "DatabaseSchema", "selectAll_list", "selectListOnly_directive", "field", "fieldSchema", "$tblName", "tblSchema_json", "tblSchema", "tbl", "colSchema_json", "#schemaCaptureCache", "requestName", "requestSource", "#generatedJoins", "path", "options", "PathRight", "keyLhs_ident", "targetTableIdent", "keyRhs_ident", "relationID", "JsonAgg", "keyRhsMask", "clause", "q", "on", "pathID", "detailQ", "ColumnRef", "context", "json", "callback", "instance", "jsonInCallback", "j", "rand", "pgGeneratedFromEntries", "rederiveGeneratedJoinRefForPgUpdate", "columnRef", "prev", "tblRefOriginal", "tblAliasOriginal", "colRefOriginal", "tblAliasRewrite", "colRefRewrite", "join", "joinJson", "c", "derivation", "Table", "Assertion", "whereClauseOriginal", "pk", "RootSchema", "AbstractDiffableNode", "#databases", "requestName", "requestSource", "arg1", "args", "existing", "db", "d", "DatabaseSchema", "asInstances", "tbls", "tbl", "cols", "col", "deeply", "fks", "pk", "fk", "uk", "ck", "rootCDL", "options", "$options", "$$hasSeenRootCDL", "$$transforms", "$$additions", "findDatabase", "name", "assertExists", "autoRehydrate", "node", "getOptionsFor", "$$options", "handleCreateCD", "cd", "$argument", "handleDropCD", "refNode", "$refNode", "handleRenameCD", "handleAlterCD", "$json", "renderNode", "dbs", "renderCallback", "forceNormalize", "$matches", "dbName", "prefix", "$$jsons", "$$relocatingTables", "$jsons", "$relocatingTables", "_", "targetDB", "dbJson", "$tbls", "entry", "$tbl", "kind", "RootCDL", "dbCDL", "nodeB", "a", "b", "defaultToFirst", "path", "context", "json", "callback", "instance", "jsonIn", "Binding", "AbstractNode", "#offset", "#value", "value", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "notation", "match", "offset", "AbstractNonDDLStatement", "Class", "AbstractStatementNode", "#uuid", "#queryBindings", "a", "b", "s", "eventType", "eventSource", "Binding", "x", "requestName", "requestSource", "result", "RootSchema", "values", "queryBindings", "i", "bindings", "dedupe", "redundants", "$offset", "newOffset", "context", "expr", "Lexer", "chunk", "json", "callback", "instance", "options", "jsonInCallback", "OffsetClause", "LimitClause", "GroupByClause", "AbstractNodeList", "Exprs", "context", "expr", "parseCallback", "clauseMatch", "columnsSpec", "withRollup", "instance", "HavingClause", "Condition", "WindowClause", "AbstractNodeList", "Window", "SelectStatement", "AbstractQueryStatement", "AbstractNonDDLStatement", "AbstractNode", "#fieldsSpec", "#fromList", "#groupByClause", "#havingClause", "#windowClause", "#offsetClause", "#unionClause", "args", "FieldsSpec", "Table", "GroupByClause", "HavingClause", "WindowClause", "value", "OffsetClause", "context", "json", "callback", "instance", "tbl", "options", "jsonIn", "t", "expr", "parseCallback", "match", "allOrDistinct", "body", "$body", "clauses", "JoinClause", "WhereClause", "OrderByClause", "LimitClause", "fieldsSpec", "tokens", "Lexer", "x", "main", "token", "tbls", "offset", "limit", "verb", "node", "sql", "s", "Parens", "_Parens", "AbstractNode", "Exprs", "#expr", "args", "context", "expr", "json", "callback", "instance", "options", "jsonIn", "parseCallback", "wrapped_default", "Lexer", "$expr", "unwrap_default", "SubQuery", "Parens", "SelectStatement", "fieldsSpec", "tblSchema", "TableSchema", "columnSchemas", "colSchema", "context", "json", "callback", "expr", "parseCallback", "WhenClause", "AbstractNode", "#when", "#then", "value", "Exprs", "context", "when", "json", "callback", "instance", "options", "jsonIn", "expr", "parseCallback", "clauseMatch", "$expr", "tokens", "Lexer", "then", "CaseConstruct", "AbstractNode", "#switchExpr", "#cases", "#defaultExpr", "switchExpr", "Exprs", "args", "WhenClause", "defaultExpr", "context", "cases", "json", "callback", "k", "instance", "options", "jsonIn", "c", "expr", "parseCallback", "caseMatch", "caseConstruct", "assertions", "clauses", "Lexer", "clause", "assertStmt", "sql", "Array", "AbstractNodeList", "Exprs", "context", "entries", "StrJoin", "AbstractOperator1Expr", "context", "entries", "Math", "AbstractOperator1Expr", "context", "entries", "Bool", "AbstractNode", "#value", "value", "context", "json", "callback", "k", "instance", "options", "jsonIn", "expr", "ValuesClause", "AbstractNodeList", "RowSpec", "context", "entries", "RowSpecClause", "RowSpec", "str", "ValuesClause", "ValuesSubClause", "ValuesClause", "ForeignBinding", "Binding", "#resolutionPath", "sourceQuery", "resultData", "isObject_default", "value", "context", "json", "callback", "instance", "options", "jsonIn", "Exprs", "SubQuery", "CaseConstruct", "StrJoin", "Condition", "Assertion", "PathRight", "JsonPath", "Math", "RowSpec", "Array", "Parens", "RowSpecClause", "ValuesSubClause", "JsonAgg", "TypeCast", "Aggr", "Fn", "Bool", "Json", "Num", "Str", "JsonArraySpec", "JsonObjectSpec", "Binding", "ForeignBinding", "ColumnRef", "Literal", "Field", "AbstractAliasableExpr", "Exprs", "FieldsSpec", "AbstractNodeList", "Field", "ReturningClause", "FieldsSpec", "AbstractDMLStatement", "AbstractNonDDLStatement", "AbstractNode", "#returningClause", "args", "ReturningClause", "context", "json", "callback", "instance", "options", "jsonInCallback", "DeleteStatement", "AbstractQueryStatement", "AbstractDMLStatement", "#mysqlDeleteList", "#table", "#postgresUsingList", "tables", "Identifier", "table", "Table", "t", "context", "json", "callback", "instance", "options", "jsonIn", "expr", "parseCallback", "match", "mysqlIgnore", "body", "$body", "dialect", "clauses", "JoinClause", "WhereClause", "OrderByClause", "LimitClause", "ReturningClause", "mysqlDeleteList", "tokens", "Lexer", "x", "main", "token", "verb", "node", "sql", "s", "Assignment", "AbstractOperator2Expr", "ColumnsSpec", "PathRight", "ColumnRef", "RowSpec", "Exprs", "context", "expr", "parseCallback", "lhs", "rhs", "Lexer", "instance", "SetClause", "AbstractNodeList", "Assignment", "cols", "assignment", "ColumnsSpec", "vals", "RowSpec", "args", "arg", "options", "jsonIn", "reducer", "PathRight", "dimension", "resolvedFk", "fKBinding", "$options", "reducedColumsSpec", "reducedRowSpec", "AbstractPayloadStatement", "Class", "#dependencies", "#dependents", "#setClause", "b", "args", "SetClause", "sourceQuery", "resultData", "binding", "recursionCallback", "dependencyQuery", "dependencyData", "resultRow", "dependentData", "dependentQuery", "columnsSpec", "rowSetEntries", "options", "dimensions", "reducedColumsSpec", "columnNode", "columnOffset", "PathRight", "dimension", "resolvedFk", "reducedRowSpecs", "valuesSpec", "rowOffset", "valueNode", "#generatedDependencies", "#generatedDependents", "#generatedReturning", "ReturningClause", "dimensionSpec", "ColumnsSpec", "ColumnRef", "c", "$options", "keyLhs_bareIdent", "targetTableIdent", "keyRhs_bareIdent", "query", "resolvePayload", "payload", "inMultiRowStructure", "Parens", "ValuesSubClause", "validateRowLength", "row", "adjustmentForAddedKeyColumn", "rowLength", "RowSpec", "PathJunction", "queryPK", "fKBinding", "ForeignBinding", "$row", "context", "json", "callback", "instance", "jsonInCallback", "jsonOut", "entries", "d", "OnConflictClause", "SetClause", "#whereClause", "#columnsSpec", "args", "ColumnsSpec", "WhereClause", "context", "json", "callback", "instance", "options", "jsonIn", "reducer", "expr", "parseCallback", "onConflictMatch", "columnsSpec", "action", "updateSpec", "assignmentList", "whereSpec", "Lexer", "sql", "InsertStatement", "_InsertStatement", "AbstractPayloadStatement", "AbstractDMLStatement", "#table", "#columnsSpec", "#valuesClause", "#selectClause", "#onConflictClause", "table", "GlobalTableRef", "args", "ColumnsSpec", "ValuesClause", "query", "SelectStatement", "OnConflictClause", "dbSchema", "DatabaseSchema", "#schemaCaptureCache", "requestName", "requestSource", "context", "json", "callback", "instance", "options", "jsonIn", "columnsSpec", "valuesClause", "selectClause", "reducedColumsSpec", "reducedRowSpecs", "onConflictClause", "expr", "parseCallback", "match", "mysqlIgnore", "body", "$body", "dialect", "clauses", "SetClause", "ReturningClause", "tableAndColumnsSpec", "tokens", "Lexer", "x", "tableSpec", "main", "token", "verb", "node", "sql", "s", "Savepoint", "_Savepoint", "client", "json", "postRestore", "name", "$name", "tables", "status", "DatabaseSchema", "cascade", "prev", "v", "$outcome", "c", "context", "reversed", "rootSchema", "RootSchema", "$reversed", "rollbackParams", "commitParams", "restoreParams", "query", "linkedDB", "versionState", "updatedRecord", "q", "RenameTable", "AbstractDDLStatement", "Rename", "UpsertStatement", "_UpsertStatement", "AbstractSugar", "InsertStatement", "options", "jsonIn", "_", "flags", "superJson", "columns", "c", "refFn", "col", "q", "onConflictClause", "OnConflictClause", "tblSchema", "uniqueKeys", "uk", "conflictTarget", "keyComp", "intersect_default", "UpdateStatement", "AbstractPayloadStatement", "AbstractQueryStatement", "AbstractDMLStatement", "UpsertStatement", "#tables", "#postgresFromList", "tables", "Table", "context", "json", "callback", "instance", "options", "jsonIn", "t", "expr", "parseCallback", "match", "mysqlIgnore", "body", "$body", "dialect", "clauses", "SetClause", "JoinClause", "WhereClause", "LimitClause", "ReturningClause", "tableSpec", "tokens", "Lexer", "x", "main", "token", "verb", "node", "sql", "s", "grammar_default", "AlterDatabase", "CreateDatabase", "DropDatabase", "RenameDatabase", "AlterTable", "CreateTable", "DropTable", "RenameTable", "SelectStatement", "InsertStatement", "UpsertStatement", "UpdateStatement", "DeleteStatement", "Exprs", "Parser", "grammar_default", "context", "expr", "grammar", "params", "$grammar", "Node", "node", "$context", "$expr", "$params", "AbstractClient", "params", "args", "callback", "isObject_default", "#modeStack", "mode", "returnValue", "$execFetchSchema", "rest", "exactMatching", "result", "cacheInvalidation", "isNew", "entry", "#matchSchemaRequest", "schemaPromise", "schemaJson", "dbs", "db", "ss", "tablesList", "tbl", "RootSchema", "#schemaRequestStack", "resolvedSchema", "e", "payload", "savepoint", "Savepoint", "rootCDL", "RootCDL", "query", "AbstractNode", "Parser", "createSpec", "CreateDatabase", "dbName", "dbToName", "RenameDatabase", "alterSpec", "dbSchema", "dbSchemaEditable", "databaseCDL", "AlterDatabase", "DropDatabase", "name", "willNeedSchema", "rootSchema", "vars", "$query", "$queryBindings", "b", "value", "$execDDL", "linkedDB", "fromName", "toName", "AlterTable", "cd", "$rootSchema", "main", "cascades", "cascadeSavepointData", "resultDbSchema", "details", "savepointsTable", "$name", "_", "savepointJson", "q", "currentSavepoint", "insertResult", "tableIdent", "utils", "fieldsLite", "fieldsStd", "versionTagsField", "cascadesFields", "$fields", "f", "normalizeJson", "c", "fields", "schemaSelector", "#pid", "$execGetPID", "#listeners", "$execListen", "channel", "ownEvents", "ownPid", "key", "a", "path2", "path1", "tbls2", "tbls1", "intersect_default", "difference_default", "from_default", "req", "requestName", "requestSource", "Identifier", "Str", "exprs", "expr", "col", "orderBy", "ident", "enums", "names", "_names", "patterns", "$names", "$_names", "$patterns", "p", "s", "#linkedDBConfig", "migrations", "peakVersion", "baseName", "v", "instance", "cascade", "hash", "invalids", "entries", "k", "foundName", "foundVersion", "i", "AbstractTable", "database", "tblName", "params", "GlobalTableRef", "expr", "clauses", "result", "args", "buildCallback", "singular", "__", "$clauses", "json", "query", "SelectStatement", "isUpsert", "row", "isObject_default", "_", "UpsertStatement", "InsertStatement", "payload", "columns", "values", "c", "i", "UpdateStatement", "DeleteStatement", "Class", "id", "primaryKey", "payloadType", "valueMatrix", "data", "shape", "shapeType", "tblSchema", "dimensionType", "isPayload", "tbl2BuildShapePath", "tbl2", "fkName", "fks", "fk", "resolveKey", "key", "value", "colSchema", "targetTable", "e", "dimension", "tableSpec", "getValue", "from", "asMap", "colsLength", "column", "table", "toValue", "requestName", "requestSource", "v", "q", "AbstractCursor", "rows", "callback", "SQLCursor", "AbstractCursor", "store", "resolve", "SQLTable", "AbstractTable", "SQLCursor", "AbstractDatabase", "client", "dbName", "params", "GlobalDatabaseRef", "tblSelector", "createSpec", "query", "CreateTable", "returnValue", "tblName", "tblToName", "RenameTable", "callback", "tblSchema", "tblSchemaEditable", "tableCDL", "AlterTable", "DropTable", "name", "requestName", "requestSource", "SQLDatabase", "AbstractDatabase", "SQLTable", "SQLClient", "AbstractClient", "driver", "params", "SQLDatabase", "sql", "#composeSchemaSQL", "result", "#formatSchemasResult", "searchPath", "name", "Identifier", "key", "value", "Lexer", "s", "query", "queryBindings", "vars", "#mysqlReturningMagic", "rootSchema", "returnValue", "channel", "callback", "ownEvents", "handle", "e", "tableRef", "returningClause", "DeleteStatement", "colName", "columnIdent", "insertUuid", "q", "InsertStatement", "valuesSpec", "utils", "$parts", "$tblWhere", "cases", "tbls", "schemaSelector", "$dbWhere", "buildColumns", "fields", "baseQuery", "k", "v", "$fields", "f", "buildConstraints", "buildTable", "detailed", "branches", "dataType", "val", "formatRelation", "tableScope", "parseJsonfyExpr", "expr", "withColumns", "columns", "node", "Parser", "json", "db", "tbl", "normalizeCheckConstraint", "primaryKey", "uniqueKeys", "foreignKeys", "checks", "primarys", "uniques", "foreigns", "temp", "tableSchema", "cols", "col", "extras"]
}
