{
  "version": 3,
  "sources": ["../node_modules/@webqit/util/js/isString.js", "../node_modules/@webqit/util/js/isUndefined.js", "../node_modules/@webqit/util/js/isTypeFunction.js", "../node_modules/@webqit/util/js/isFunction.js", "../node_modules/@webqit/util/js/isArray.js", "../node_modules/@webqit/util/js/isTypeArray.js", "../node_modules/@webqit/util/js/isNull.js", "../node_modules/@webqit/util/js/isTypeObject.js", "../node_modules/@webqit/util/js/isEmpty.js", "../node_modules/@webqit/util/js/isObject.js", "../node_modules/@webqit/util/arr/from.js", "../node_modules/@webqit/util/js/isNumber.js", "../node_modules/@webqit/util/js/isNumeric.js", "../node_modules/@webqit/util/arr/flatten.js", "../node_modules/@webqit/util/arr/first.js", "../node_modules/@webqit/util/arr/last.js", "../node_modules/@webqit/util/arr/pushUnique.js", "../node_modules/@webqit/util/obj/getPrototypeChain.js", "../node_modules/@webqit/util/obj/getAllPropertyNames.js", "../node_modules/@webqit/util/obj/mergeCallback.js", "../node_modules/@webqit/util/obj/merge.js", "../node_modules/@webqit/util/js/isPlainObject.js", "../node_modules/@webqit/util/js/isBoolean.js", "../node_modules/@webqit/util/obj/each.js", "../node_modules/@webqit/util/obj/compareCallback.js", "../node_modules/@webqit/util/obj/even.js", "../node_modules/@webqit/util/obj/copyPlain.js", "../node_modules/@webqit/util/arr/intersect.js", "../node_modules/@webqit/util/str/Lexer.js", "../src/query/Lexer.js", "../src/query/abstracts/Node.js", "../src/query/select/Identifier.js", "../node_modules/@webqit/util/str/after.js", "../node_modules/@webqit/util/str/before.js", "../node_modules/@webqit/util/str/beforeLast.js", "../node_modules/@webqit/util/str/fromCamel.js", "../node_modules/@webqit/util/str/toTitle.js", "../node_modules/@webqit/util/str/toCamel.js", "../node_modules/@webqit/util/str/unwrap.js", "../node_modules/@webqit/util/str/wrapped.js", "../src/query/create/DataType.js", "../src/query/create/abstracts/AbstractNode.js", "../src/query/create/constraints/AbstractConstraint.js", "../src/query/create/constraints/Identity.js", "../src/query/create/constraints/AutoIncrement.js", "../src/query/create/constraints/AbstractExpr.js", "../src/query/create/constraints/Expression.js", "../src/query/create/constraints/Default.js", "../src/query/create/constraints/NotNull.js", "../src/query/create/constraints/PrimaryKey1.js", "../src/query/create/constraints/ForeignKey1.js", "../src/query/create/constraints/UniqueKey1.js", "../src/query/create/constraints/Check.js", "../src/query/create/Column.js", "../src/query/create/Index.js", "../src/query/alter/Action.js", "../src/query/abstracts/StatementNode.js", "../src/query/alter/abstracts/AbstractStatementNode.js", "../src/query/alter/AlterTable.js", "../src/query/create/abstracts/AbstractStatementNode.js", "../src/query/create/constraints/PrimaryKey2.js", "../src/query/create/constraints/ForeignKey2.js", "../src/query/create/constraints/UniqueKey2.js", "../src/query/create/CreateTable.js", "../src/query/alter/AlterDatabase.js", "../src/query/create/CreateDatabase.js", "../src/query/drop/DropTable.js", "../src/query/drop/DropDatabase.js", "../src/query/select/case/WhenClause.js", "../src/query/select/case/CaseConstruct.js", "../src/query/select/TypeCast.js", "../src/query/select/Placeholder.js", "../src/query/select/str/Str.js", "../src/query/select/json/Json.js", "../src/query/select/Num.js", "../src/query/select/json/JsonPath.js", "../src/query/select/Path.js", "../src/query/select/abstracts/AbstractGroupBy.js", "../src/query/select/GroupByClause.js", "../src/query/select/abstracts/AbstractOrderBy.js", "../src/query/select/OrderByClause.js", "../src/query/select/PartitionByClause.js", "../src/query/select/window/WindowSpec.js", "../src/query/select/window/WindowClause.js", "../src/query/select/abstracts/AbstractAliasableExpr.js", "../src/query/select/Func.js", "../src/query/select/Aggr.js", "../src/query/select/Field.js", "../src/query/select/Table.js", "../src/query/select/Select.js", "../src/query/select/Parens.js", "../src/query/select/Math.js", "../src/query/select/str/StrJoin.js", "../src/query/select/Literal.js", "../src/query/select/abstracts/Expr.js", "../src/query/select/Assertion.js", "../src/query/select/Condition.js", "../src/query/select/JoinClause.js", "../src/query/delete/Delete.js", "../src/query/insert/ColumnsList.js", "../src/query/insert/ValuesList.js", "../src/query/insert/AssignmentList.js", "../src/query/insert/OnConflictClause.js", "../src/query/insert/Insert.js", "../src/query/update/Update.js", "../src/query/grammar.js", "../src/query/Parser.js", "../src/api/abstracts/Savepoint.js", "../src/api/abstracts/AbstractClient.js", "../src/api/abstracts/AbstractDatabase.js", "../src/api/abstracts/AbstractTable.js", "../src/api/abstracts/AbstractCursor.js", "../src/api/sql/SQLCursor.js", "../src/api/sql/SQLTable.js", "../src/api/sql/SQLDatabase.js", "../src/api/sql/SQLClient.js"],
  "sourcesContent": ["\n/**\n * Tells if val is of type \"string\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof String || (typeof val === 'string' && val !== null);\n};\n", "\n/**\n * Tells if val is undefined or is of type \"undefined\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn arguments.length && (val === undefined || typeof val === 'undefined');\n};\n", "\n/**\n * Tells if val is of type \"function\".\n * This holds true for both regular functions and classes.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn typeof val === 'function';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"function\".\n *\n * @param object \t\tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isTypeFunction(val) || (val && {}.toString.call(val) === '[object function]');\n};\n", "\n/**\n * Tells if val is of type \"array\".\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val);\n};\n", "\n/**\n * @imports\n */\nimport _isString from './isString.js';\nimport _isUndefined from './isUndefined.js';\n\n/**\n * Tells if val is \"array-like\".\n * This holds true for anything that has a length property.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !_isString(val) && !_isUndefined(val.length);\n};\n", "\n/**\n * Tells if val is undefined or is null.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === null || val === '';\n};\n", "\n/**\n * @imports\n */\nimport _isTypeFunction from './isTypeFunction.js';\n\n/**\n * Tells if val is of type \"object\".\n * This holds true for anything object, including built-ins.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn Array.isArray(val) || (typeof val === 'object' && val) || _isTypeFunction(val);\n};\n", "\n/**\n * @imports\n */\nimport _isNull from './isNull.js';\nimport _isUndefined from './isUndefined.js';\nimport _isTypeObject from './isTypeObject.js';\n\n/**\n * Tells if val is empty in its own type.\n * This holds true for NULLs, UNDEFINED, FALSE, 0,\n * objects without keys, empty arrays.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNull(val) || _isUndefined(val) || val === false || val === 0 \n\t\t|| (_isTypeObject(val) && !Object.keys(val).length);\n};\n", "\n/**\n * Tells if val is pure object.\n *\n * @param object\t \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn !Array.isArray(val) && typeof val === 'object' && val;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isTypeArray from '../js/isTypeArray.js';\nimport _isEmpty from '../js/isEmpty.js';\nimport _isObject from '../js/isObject.js';\n\n/**\n * Casts an array-like object to an array.\n *\n * @param mixed \tval\n * @param bool\t \tcastObject\n *\n * @return array\n */\nexport default function(val, castObject = true) {\n\tif (_isArray(val)) {\n\t\treturn val;\n\t};\n\tif (!castObject && _isObject(val)) {\n\t\treturn [val];\n\t};\n\tif (val !== false && val !== 0 && _isEmpty(val)) {\n\t\treturn [];\n\t};\n\tif (_isTypeArray(val)) {\n\t\treturn Array.prototype.slice.call(val);\n\t};\n\tif (_isObject(val)) {\n\t\treturn Object.values(val);\n\t};\n\treturn [val];\n};\n", "\n/**\n * Tells if val is of type \"number\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val instanceof Number || (typeof val === 'number');\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from './isNumber.js';\n/**\n * Tells if val is of type \"string\" or a numeric string.\n * This holds true for both numbers and numeric strings.\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn _isNumber(val) || (val !== true && val !== false && val !== null && val !== '' && !isNaN(val * 1));\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Flattens a nested array to the given depth.\n *\n * @param array \tarr\n * @param int \t \tdepth\n * @param bool \t \twithObjects\n *\n * @return array\n */\nconst _flatten = function(arr, depth = 1, withObjects = true) {\n\tif (!_isNumeric(depth) || depth <= 0) {\n\t\treturn arr;\n\t};\n\tif (!_isArray(arr) && _isObject(arr) && withObjects) {\n\t\tarr = Object.values(arr);\n\t};\n\tif (!_isArray(arr)) {\n\t\treturn arr;\n\t};\n\treturn arr.reduce((acc, val) => _isArray(val) || (_isObject(val) && withObjects) \n\t\t? acc.concat(_flatten(!_isArray(val) ? Object.values(val) : val, depth - 1, withObjects)) \n\t\t: acc.concat(val), []);\n};\n\n/**\n * @exports\n */\nexport default _flatten;", "\n/**\n * Returns THE FIRST ENTRY OR A NUMBER OF ENTRIES counting forward from the begining.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\tvar count = 0;\n\tarr.forEach(itm => {\n\t\tcount ++;\n\t});\n\tvar firsts = arr.slice(arr.length - count, amount);\n\treturn arguments.length > 1 ? firsts : firsts[0];\n};\n", "\n/**\n * @imports\n */\nimport _first from './first.js';\n\n/**\n * Returns THE LAST ENTRY OR A NUMBER OF ENTRIES counting forward to the end.\n *\n * @param array \tarr\n * @param int\t \tamount\n *\n * @return mixed|array\n */\nexport default function(arr, amount = 1) {\n\treturn arguments.length > 1\n\t\t? _first(arr.slice().reverse(), amount).reverse()\n\t\t: _first(arr.slice().reverse());\n};\n", "\n/**\n * Adds an item if not already exist.\n *\n * @param array \tarr\n * @param array\t \t...itms\n *\n * @return array\n */\nexport default function(arr, ...items) {\n\titems.forEach(itm => {\n\t\tif (arr.indexOf(itm) < 0) {\n\t\t\tarr.push(itm);\n\t\t}\n\t});\n\treturn arr;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the prototype chain.\n *\n * @param object \t\tobj\n * @param object\t \tuntil\n *\n * @return bool\n */\nexport default function(obj, until) {\n\tuntil = until || Object.prototype;\n\tuntil = until && !_isArray(until) ? [until] : until;\n\t// We get the chain of inheritance\n\tvar prototypalChain = [];\n\tvar obj = obj;\n\twhile((obj && (!until || until.indexOf(obj) < 0) && obj.name !== 'default')) {\n\t\tprototypalChain.push(obj);\n\t\tobj = obj ? Object.getPrototypeOf(obj) : null;\n\t}\n\treturn prototypalChain;\n};\n", "\n/**\n * @imports\n */\nimport _pushUnique from '../arr/pushUnique.js';\nimport _getPrototypeChain from './getPrototypeChain.js';\n\n/**\n * Eagerly retrieves object members all down the prototype chain.\n *\n * @param object\t \tobj\n * @param object\t \tuntil\n *\n * @return array\n */\nexport default function(obj, until) {\n\tvar keysAll = [];\n\t_getPrototypeChain(obj, until).forEach(obj => {\n\t\t_pushUnique(keysAll, ...Object.getOwnPropertyNames(obj));\n\t});\n\treturn keysAll;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\nimport _getAllPropertyNames from './getAllPropertyNames.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function mergeCallback(objs, callback, deepProps = false, isReplace = false, withSymbols = false) {\n\tvar depth = 0;\n\tvar obj1 = objs.shift();\n\tif (_isNumeric(obj1) || obj1 === true || obj1 === false) {\n\t\tdepth = obj1;\n\t\tobj1 = objs.shift();\n\t}\n\tif (!objs.length) {\n\t\tthrow new Error('_merge() requires two or more array/objects.');\n\t}\n\tobjs.forEach((obj2, i) => {\n\t\tif (!_isTypeObject(obj2) && !_isFunction(obj2)) {\n\t\t\treturn;\n\t\t}\n\t\t(deepProps ? _getAllPropertyNames(obj2) : Object.keys(obj2)).forEach(key => {\n\t\t\tif (!callback(key, obj1, obj2, i)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valAtObj1 = obj1[key];\n\t\t\tvar valAtObj2 = obj2[key];\n\t\t\tif (((_isArray(valAtObj1) && _isArray(valAtObj2)) || (_isObject(valAtObj1) && _isObject(valAtObj2))) \n\t\t\t&& (depth === true || depth > 0)) {\n\t\t\t\t// RECURSE...\n\t\t\t\tobj1[key] = _isArray(valAtObj1) && _isArray(valAtObj2) ? [] : {};\n\t\t\t\tmergeCallback([_isNumeric(depth) ? depth - 1 : depth, obj1[key], valAtObj1, valAtObj2], callback, deepProps, isReplace, withSymbols);\n\t\t\t} else {\n\t\t\t\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\t\t\t\tif (isReplace) {\n\t\t\t\t\t\tobj1[key] = valAtObj2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj1.push(valAtObj2);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// In case we're setting a read-only property\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (withSymbols) {\n\t\t\t\t\t\t\tObject.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj2, key));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj1[key] = obj2[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\treturn obj1;\n};\n", "\n/**\n * @imports\n */\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n  * Merges values from subsequent arrays/objects first array/object;\n  * optionally recursive\n  *\n  * @param array ...objs\n  *\n  * @return void\n  */\nexport default function(...objs) {\n\treturn _mergeCallback(objs, (k, obj1, obj2) => {\n\t\treturn true;\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isObject from './isObject.js';\n\n/**\n * Tells if an object is direct instance of Object.prototype.\n * Quite useful in differentiating native objects and class instances from plain objects ({}).\n *\n * @param object \tobj\n *\n * @return bool\n */\nexport default function(obj) {\n\treturn _isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n};\n", "\n/**\n * Tells if val is undefined or is of type \"boolean\".\n *\n * @param string \tval\n *\n * @return bool\n */\nexport default function(val) {\n\treturn val === true || val === false;\n};\n", "\n/**\n * @imports\n */\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isNumeric from '../js/isNumeric.js';\n\n/**\n * Loops thru obj flatly with a callback function.\n * Stops when callback returns a non-undefined value.\n *\n * @param array|object \t\t\tobj \t\t\tThe array or object to iterate.\n * @param function \t\t\t\tcallback \t\tThe callback function.\n *\n * @return mixed|null\t\t\tAny non-null return from callback\n */\nexport default function(obj, callback) {\n\tvar returnValue = undefined;\n\tif (_isTypeObject(obj)) {\n\t\tObject.keys(obj).forEach((k, i) => {\n\t\t\tif (returnValue !== false) {\n\t\t\t\treturnValue = callback(_isNumeric(k) ? parseFloat(k) : k, obj[k], i);\n\t\t\t}\n\t\t});\n\t}\n\treturn returnValue;\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isBoolean from '../js/isBoolean.js';\nimport _each from './each.js';\n\n/**\n * Gets the match(es) between (members of) two values;\n * assertion optionally custom.\n *\n * @param mixed \t\t\tob1\n * @param mixed \t\t\tobj2\n * @param string|function\tassertion\n * @param bool\t\t\t\tnetComparison\n * @param bool\t\t\t\tcontrast\n * @param bool\t\t\t\treturnOnFirstFalse\n *\n * @return bool|array|object\n */\nexport default function(obj1, obj2, assertion = true, netComparison = true, contrast = false, returnOnFirstFalse = false) {\n\tif (_isArray(obj1) && _isArray(obj2)) {\n\t\tvar result = [];\n\t\tvar contn = true;\n\t\tobj1.forEach(v1 => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = false;\n\t\t\t_each(obj2, (k, v2) => {\n\t\t\t\tif (!testPass || (netComparison && _isTypeObject(v1))) {\n\t\t\t\t\ttestPass = assertion(v1, v2);\n\t\t\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\t\t\ttestPass = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (_isTypeObject(testPass) && netComparison) {\n\t\t\t\t\t\t// Further recursions should use this testPass as v1\n\t\t\t\t\t\tv1 = testPass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult.push(netComparison ? testPass : v1);\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult.push(testPass);\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult.push(v1);\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\t\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar result = {};\n\t\tvar contn = true;\n\t\tObject.keys(obj1).forEach(k => {\n\t\t\tif (!contn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar testPass = assertion(obj1[k], obj2[k]);\n\t\t\tif ((_isArray(testPass) && !testPass.length) || (_isObject(testPass) && !Object.keys(testPass).length)) {\n\t\t\t\ttestPass = false;\n\t\t\t}\n\t\t\tif (_isTypeObject(testPass)) {\n\t\t\t\tresult[k] = netComparison ? testPass : obj1[k];\n\t\t\t} else if (!_isBoolean(testPass)) {\n\t\t\t\tresult[k] = testPass;\n\t\t\t} else if ((contrast && !testPass) || (!contrast && testPass)) {\n\t\t\t\tresult[k] = obj1[k];\n\t\t\t} else if (returnOnFirstFalse) {\n\t\t\t\tcontn = false;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n};\n", "\n/**\n * @imports\n */\nimport _isNumber from '../js/isNumber.js';\nimport _isArray from '../js/isArray.js';\nimport _isObject from '../js/isObject.js';\nimport _isTypeObject from '../js/isTypeObject.js';\nimport _isFunction from '../js/isFunction.js';\nimport _isPlainObject from '../js/isPlainObject.js';\nimport _compareCallback from './compareCallback.js';\n\n/**\n * Asserts (members of) the first value against (members of) subsequent values.\n * Assertion could be TRUE, FALSE, or custom.\n *\n * @param mixed \t\t\tobj1\n * @param mixed \t\t\tobj2\n * @param bool|function\t\tassertion\n * @param int\t\t\t\tdepth\n *\n * @return bool\n */\nconst _even = function(obj1, obj2, assertion = true, depth = 1) {\n\tif (_isArray(obj1) && _isArray(obj2) && obj1.length !== obj2.length) {\n\t\treturn !assertion;\n\t}\n\tif (_isObject(obj1) && _isObject(obj2)) {\n\t\tvar obj1Keys = Object.keys(obj1);\n\t\tvar obj2Keys = Object.keys(obj2);\n\t\tif (!obj1Keys.length && !obj2Keys.length) {\n\t\t\t// Objects that won't show keys must be compared by instance\n\t\t\t// Many native objects won't. So we can't judge by keys alone.\n\t\t\treturn _isPlainObject(obj1) && _isPlainObject(obj2) \n\t\t\t\t? assertion\n\t\t\t\t: (obj1 === obj2) === assertion;\n\t\t}\n\t\tif (!_even(obj1Keys, obj2Keys)) {\n\t\t\treturn !assertion;\n\t\t}\n\t}\n\tif (depth > 0 && ((_isArray(obj1) && _isArray(obj2)) || (_isObject(obj1) && _isObject(obj2)))) {\n\t\tvar result = _compareCallback(obj1, obj2, (v1, v2) => {\n\t\t\treturn _even(v1, v2, assertion, depth - 1);\n\t\t}, false/*netComparison*/, false/*contrast*/, true/*returnOnFirstFalse*/);\n\t\treturn _isArray(result) \n\t\t\t? result.length === obj1.length && result.length === obj2.length \n\t\t\t: (_isObject(result) && _isObject(obj1) \n\t\t\t\t? Object.keys(result).length === Object.keys(obj1).length && Object.keys(result).length ===  Object.keys(obj2).length \n\t\t\t\t: result);\n\t}\n\treturn _isFunction(assertion) ? assertion(obj1, obj2) : (\n\t\t_isNumber(obj1) && _isNumber(obj2) && isNaN(obj1) && isNaN(obj2) \n\t\t\t? assertion \n\t\t\t: (obj1 === obj2) === assertion\n\t);\n};\n\n/**\n * @exports\n */\nexport default _even;\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\nimport _isFunction from '../js/isFunction.js';\nimport _mergeCallback from './mergeCallback.js';\n\n/**\n * Copies only properties of an object.\n *\n * @param object\t \tobj\n * @param array\t\t \tonly\n * @param array\t\t \texcept\n *\n * @return object\n */\nexport default function(obj, filter = []) {\n\treturn _mergeCallback([{}, obj], (key, obj1, obj2) => {\n\t\tif (!_isFunction(obj2[key])) {\n\t\t\treturn _isFunction(filter) ? filter(key) \n\t\t\t\t: (_isArray(filter) && filter.length ? filter.indexOf(key) > -1 : true);\n\t\t}\n\t}, false/*deepProps*/, false/*isReplace*/, false/*withSymbols*/);\n};\n", "\n/**\n * @imports\n */\nimport _isArray from '../js/isArray.js';\n\n/**\n * Returns the intersection of two arrays;\n * optionally using a custom matching function.\n *\n * @param array \tarr\n * @param array\t \tarr2\n * @param function \tcallback\n *\n * @return array\n */\nexport default function(arr, arr2, callback = null) {\n\treturn !_isArray(arr2) ? [] : arr.filter(val1 => callback \n\t\t? arr2.filter(val2 => callback(val1, val2)).length \n\t\t: arr2.indexOf(val1) !== -1\n\t);\n};\n", "\n/**\n * @imports\n */\nimport _isString from '../js/isString.js';\nimport _isUndefined from '../js/isUndefined.js';\nimport _isFunction from '../js/isFunction.js';\nimport _arrFrom from '../arr/from.js';\nimport _flatten from '../arr/flatten.js';\nimport _first from '../arr/first.js';\nimport _last from '../arr/last.js';\nimport _merge from '../obj/merge.js';\nimport _even from '../obj/even.js';\nimport _copyPlain from '../obj/copyPlain.js';\nimport { _isObject } from '../js/index.js';\n\n/**\n * --------------------------\n * TOKENIZER\n * --------------------------\n */\n\nexport default class Lexer {\n\n\t/**\n\t * Factory method.\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic lex(str, delims, options = {}) {\n\t\tif (!_isString(str = str + '')) {\n\t\t\tthrow new Error('Argument1 must be a string!');\n\t\t}\n\t\tvar copyResult = result => {\n\t\t\treturn {\n\t\t\t\tdelims: result.delims.slice(),\n\t\t\t\toptions: _copyPlain(result.options),\n\t\t\t\tnesting: result.nesting.slice(),\n\t\t\t\tmaxDepth: result.maxDepth,\n\t\t\t\tcomments: result.comments.slice(),\n\t\t\t\ttokens: result.tokens.slice(),\n\t\t\t\tmatches: result.matches.slice(),\n\t\t\t\tmatchesi: _copyPlain(result.matchesi),\n\t\t\t};\n\t\t};\n\t\t// ASK CACHE ---------------------------\n\t\tif (Lexer.$cache[str] && options.cache !== false) {\n\t\t\tfor (var i = 0; i < Lexer.$cache[str].length; i ++) {\n\t\t\t\tvar cached = Lexer.$cache[str][i];\n\t\t\t\tif (_even(cached.delims, delims)) {\n\t\t\t\t\treturn copyResult(cached);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// FRESH PARSE\t -------------------------------\n\t\tvar instance = new Lexer(str, options);\n\t\tvar result = instance.lex(delims);\n\t\t// SAVE TO CACHE -------------------------------\n\t\tif (options.cache !== false) {\n\t\t\tLexer.$cache[str] = Lexer.$cache[str] || [];\n\t\t\tLexer.$cache[str].push(result);\n\t\t}\n\t\treturn copyResult(result);\n\t\t\n\t}\n\n\t/**\n\t * Factory method for .split().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic split(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).tokens;\n\t}\n\n\t/**\n\t * Factory method for .match().\n\t *\n\t * Handles caching.\n\t *\n\t * @see constructor()\n\t */\n\tstatic match(str, delims, options) {\n\t\treturn Lexer.lex(str, delims, options).matches;\n\t}\n\n\t/**\n\t * Creates a lexer instance on a string with the given options.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t * @param string \t\tblocks\t\t\t\tThe strings that begin and end a nested structure\n\t * @param number \t\tlimit\t\t\t\tMax results to return\n\t * @param string \t\tbackreference\t\tA character like (\\) that prefixes non-delim characters\n\t *\n\t * @return array\n\t */\n\tconstructor(str, options) {\n\t\tif (!_isString(str)) {\n\t\t\tthrow new Error('Lexer requires the first argument to be a string.');\n\t\t}\n\t\tthis.$str = str;\n\t\tthis.$options = options || {};\n\t\tif (!this.$options.blocks) {\n\t\t\tthis.$options.blocks = Lexer.$blocks;\n\t\t}\n\t\tif (!this.$options.quotes) {\n\t\t\tthis.$options.quotes = Lexer.$quotes;\n\t\t}\n\t\tif (!this.$options.comments) {\n\t\t\tthis.$options.comments = Lexer.$comments;\n\t\t}\n\t}\n\n\t/**\n\t * Parses the instance string on the given delimeters.\n\t *\n\t * This method supports static calling,\n\t * in which case a string is required as the first argument.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tlex(delims, options) {\n\t\tvar runtime = {\n\t\t\tdelims: _arrFrom(delims),\n\t\t\toptions: _merge(true, {}, this.$options, options || {}),\n\t\t\tnesting: [],\n\t\t\tmaxDepth: 0,\n\t\t\tcomments: [],\n\t\t\ttokens: [],\n\t\t\tmatches: [],\n\t\t\tmatchesi: {},\n\t\t};\n\t\t// Iterate over each character, keep track of current row and column (of the returned array)\n\t\tvar cursor = 0;\n\t\twhile(typeof cursor === 'number') {\n\t\t\tcursor = this._evalCharsAt(runtime, cursor);\n\t\t}\n\t\tif (runtime.nesting.length) {\n\t\t\tthrow new Error('Error parsing the string: ' + this.$str + '. Unterminated blocks: ' + _flatten(runtime.nesting).join(', ') + '');\n\t\t}\n\t\t// RETURN NEW ----------------------------------\n\t\treturn runtime;\n\t}\n\n\t/**\n\t * Expr helper: evaluates and handles the character on the current cursor.\n\t * Advances the cursor.\n\t *\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return void\n\t */\n\t_evalCharsAt(runtime, i) {\n\t\tif (i >= this.$str.length) {\n\t\t\treturn;\n\t\t}\n\t\tvar charWidth = 1;\n\t\tvar commentTest = {}, quoteTest = {}, nestingTest = {};\n\t\t// Quotes inside comments must be ignored\n\t\tif (!runtime.openComment) {\n\t\t\tquoteTest = this._testQuotes(runtime, i);\n\t\t}\n\t\t// Comments inside quotes must be ignored\n\t\tif (!runtime.openQuote) {\n\t\t\tcommentTest = this._testComments(runtime, i);\n\t\t}\n\t\t// Save comments\n\t\tif (runtime.openComment || commentTest.ending) {\n\t\t\t// Save only outer comments\n\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\tvar chars = commentTest.starting || commentTest.ending || this.$str[i];\n\t\t\t\tcharWidth = chars.length;\n\t\t\t\tthis._push(runtime, chars, 'comments', commentTest.starting);\n\t\t\t} else {\n\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t}\n\t\t} else if (runtime.openQuote || quoteTest.ending) {\n\t\t\t// Yes add quotes\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t} else if (runtime.options.limit && runtime.matches.length === runtime.options.limit) {\n\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\treturn i + 1;\n\t\t} else {\n\t\t\t// Nesting tags inside comments and quotes have been ignored\n\t\t\tnestingTest = this._testNesting(runtime, i);\n\t\t\t// ---------------------\n\t\t\t// STOP ON THIS CHARACTER...?\n\t\t\t// ---------------------\n\t\t\tvar nestingTest = this._testNesting(runtime, i);\n\t\t\t// STOP CHAR(S)? at top level?\n\t\t\tvar stopChar = this._testChars(runtime.options.stopChars || [], runtime, i);\n\t\t\tif (!runtime.nesting.length && stopChar !== false) {\n\t\t\t\truntime.options.stopChar = stopChar;\n\t\t\t\truntime.options.stopCharForward = this.$str.substr(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// ---------------------\n\t\t\t// Match and split now...\n\t\t\t// ---------------------\n\t\t\tif (!runtime.delims.length) {\n\t\t\t\t// BLOCK-BASED SPLITTING...\n\t\t\t\tif (runtime.nesting.length === 2 && nestingTest.starting) {\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t\tthis._push(runtime, nestingTest.starting);\n\t\t\t\t\tcharWidth = nestingTest.starting.length;\n\t\t\t\t} else if (!runtime.nesting.length && nestingTest.ending) {\n\t\t\t\t\tthis._push(runtime, nestingTest.ending);\n\t\t\t\t\tcharWidth = nestingTest.ending.length;\n\t\t\t\t\truntime.matches.push(null);\n\t\t\t\t} else/*no-nesting flag*/ {\n\t\t\t\t\tthis._push(runtime, this.$str[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// ---------------------\n\t\t\t\t// DELIMS-BASED SPLITTING\n\t\t\t\t// ---------------------\n\t\t\t\tif (!runtime.nesting.length && !nestingTest.ending) {\n\t\t\t\t\t// In case the chars at index 0 is a delim,\n\t\t\t\t\t// the resulting split should first have an empty string, instead of undefined\n\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\tvar matchedDelim = this._testChars(runtime.delims, runtime, i);\n\t\t\t\t\tif (matchedDelim !== false) {\n\t\t\t\t\t\truntime.matches.push(matchedDelim);\n\t\t\t\t\t\truntime.matchesi[i] = matchedDelim;\n\t\t\t\t\t\tcharWidth = matchedDelim.length || 1;\n\t\t\t\t\t\tif (!runtime.options.preserveDelims) {\n\t\t\t\t\t\t\t// The current character is a delimiter...\n\t\t\t\t\t\t\t// and should not get to appending to the split series down the line\n\t\t\t\t\t\t\tvar nextIndex = i + (matchedDelim.length || 1);\n\t\t\t\t\t\t\tif (nextIndex === this.$str.length) {\n\t\t\t\t\t\t\t\t// In case the chars at last index is a delim,\n\t\t\t\t\t\t\t\t// the resulting split should last have an empty string\n\t\t\t\t\t\t\t\tthis._push(runtime, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn nextIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._push(runtime, matchedDelim || this.$str[i]);\n\t\t\t\t} else {\n\t\t\t\t\tvar chars = nestingTest.starting || nestingTest.ending || this.$str[i];\n\t\t\t\t\tcharWidth = chars.length;\n\t\t\t\t\tthis._push(runtime, chars);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn i + charWidth;\n\t}\n\n\t/**\n\t * Expr helper: tests for a quote start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testQuotes(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.quotes || []).forEach(quote => {\n\t\t\tif (this.$str.substr(i, 1) === quote) {\n\t\t\t\tif (!runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = quote;\n\t\t\t\t\tresult.starting = quote;\n\t\t\t\t} else if (quote === runtime.openQuote) {\n\t\t\t\t\truntime.openQuote = false;\n\t\t\t\t\tresult.ending = quote;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a comment start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testComments(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.comments || []).forEach(block => {\n\t\t\tif (!runtime.openComment) {\n\t\t\t\tvar starting = _first(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\t\truntime.openComment = block;\n\t\t\t\t\tresult.starting = starting;\n\t\t\t\t}\n\t\t\t} else if (_last(block) === _last(runtime.openComment)) {\n\t\t\t\tvar ending = _last(block);\n\t\t\t\tif (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\truntime.openComment = false;\n\t\t\t\t\tresult.ending = ending;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a nesting start/end character on the current cursor.\n\t *\n\t * @param object\truntime\n\t * @param int\t\ti\n\t *\n\t * @return object\n\t */\n\t_testNesting(runtime, i) {\n\t\tvar result = {};\n\t\t(runtime.options.blocks || []).forEach(block => {\n\t\t\tlet starting = _first(block), matchedStarting;\n\t\t\tif (starting instanceof RegExp) {\n\t\t\t\t[matchedStarting] = starting.exec(this.$str.substr(i)) || [];\n\t\t\t} else if (this.$str.substr(i).startsWith(starting)) {\n\t\t\t\tmatchedStarting = starting;\n\t\t\t}\n\t\t\tif (matchedStarting) {\n\t\t\t\truntime.nesting = runtime.nesting.concat([block]);\n\t\t\t\tresult.starting = matchedStarting;\n\t\t\t} else if (runtime.nesting.length && _last(block) === _last(_last(runtime.nesting))) {\n\t\t\t\tvar ending = _last(block), matchedEnding;\n\t\t\t\tif (ending instanceof RegExp) {\n\t\t\t\t\t[matchedEnding] = ending.exec(this.$str.substr(i)) || [];\n\t\t\t\t} else if (this.$str.substr(i).startsWith(ending)) {\n\t\t\t\t\tmatchedEnding = ending;\n\t\t\t\t}\n\t\t\t\tif (matchedEnding) {\n\t\t\t\t\truntime.nesting = runtime.nesting.slice(0, -1);\n\t\t\t\t\tresult.ending = matchedEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\truntime.maxDepth = Math.max(runtime.maxDepth, runtime.nesting.length);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Expr helper: tests for a delimiter or stop character on the current cursor.\n\t *\n\t * @param array\t\ttestList\n\t * @param object \truntime\n\t * @param int\t\ti\n\t *\n\t * @return mixed\n\t */\n\t_testChars(testList, runtime, i) {\n\t\tfor (var k = 0; k < testList.length; k ++) {\n\t\t\tconst testArg = {\n\t\t\t\tuseRegex: runtime.options.useRegex,\n\t\t\t\tci: runtime.options.ci,\n\t\t\t\t...(_isObject(testList[k]) ? testList[k] : { test: testList[k] })\n\t\t\t};\n\t\t\tif (_isFunction(testArg.test)) {\n\t\t\t\tvar ret = testArg.test(this.$str.substr(0, i), this.$str.substr(i), runtime.tokens.slice());\n\t\t\t\tif (ret !== false) return ret;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (testArg.useRegex) {\n\t\t\t\tconst regexFlags = testArg.useRegex !== true ? testArg.useRegex : '';\n\t\t\t\tvar m = this.$str.substr(i).match(new RegExp('^' + testArg.test, regexFlags));\n\t\t\t\tif (m && (!testArg.backtest || this.$str.substr(0, i).match(new RegExp(testArg.backtest, regexFlags)))) {\n\t\t\t\t\treturn m[0];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst match = (base, text) => testArg.ci ? base.toLowerCase() === text.toLowerCase() : base === text;\n\t\t\tif (match(this.$str.substr(i, testArg.test.length), testArg.test)) {\n\t\t\t\tif (!testArg.backtest || match(this.$str.substr(i - testArg.backtest.length, i), testArg.backtest)) {\n\t\t\t\t\treturn testArg.test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Expr helper: pushes a character or set of characters into the current split series.\n\t *\n\t * @param object \truntime\n\t * @param string\tchars\n\t * @param string\ttarget\n\t * @param bool\t\tisNewSeries\n\t *\n\t * @return void\n\t */\n\t_push(runtime, chars, target = 'tokens', isNewSeries = false) {\n\t\tvar splitSeries = runtime.matches.length;\n\t\tif (_isUndefined(runtime.tokens[splitSeries])) {\n\t\t\truntime.tokens[splitSeries] = '';\n\t\t}\n\n\t\tif (target === 'comments') {\n\t\t\tif (!runtime.tokens[splitSeries].comments) {\n\t\t\t\truntime.tokens[splitSeries] = new String(runtime.tokens[splitSeries]);\n\t\t\t\truntime.tokens[splitSeries].comments = [];\n\t\t\t}\n\t\t\tvar splitSeries2 = runtime.tokens[splitSeries].comments.length - (!runtime.tokens[splitSeries].comments.length || isNewSeries ? 0 : 1);\n\t\t\truntime.tokens[splitSeries].comments[splitSeries2] = (runtime.tokens[splitSeries].comments[splitSeries2] || '') + chars;\n\t\t} else {\n\t\t\tvar comments = runtime.tokens[splitSeries].comments;\n\t\t\truntime.tokens[splitSeries] = runtime.tokens[splitSeries] + chars;\n\t\t\t//runtime.tokens[splitSeries].comments = comments;\n\t\t}\n\t}\n\n\t/**\n\t * Splits the instance string on the given delimeters and returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tsplit(str, delims, options) {\n\t\treturn this.lex(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters and returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions:\n\t *\n\t * @return array\n\t */\n\tmatch(str, delims, options) {\n\t\treturn this.lex(delims, options).matches;\n\t}\n\t\n\t/**\n\t * Parses the instance string on the given delimeters using regex.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return object\n\t */\n\tregParse(delims, options) {\n\t\treturn this.lex(delims, _merge({useRegex: true}, options || {}));\n\t}\n\t\n\t/**\n\t * Splits the instance string on the given delimeters using regex; returns the tokens.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregSplit(delims, options) {\n\t\treturn this.regParse(delims, options).tokens;\n\t}\n\t\n\t/**\n\t * Matches the instance string on the given delimeters using regex; returns the matches.\n\t *\n\t * @param string \tstr\n\t * @param object\toptions\n\t *\n\t * @return array\n\t */\n\tregMatch(delims, options) {\n\t\treturn this.regParse(delims, options).matches;\n\t}\n};\n\n/**\n * @var array\n */\nLexer.$blocks = [['(', ')'], ['[', ']'], ['{', '}'],];\n\n/**\n * @var array\n */\nLexer.$quotes = ['\"', \"'\", '`',];\n\n/**\n * @var array\n */\nLexer.$comments = [['/*', '*/'], ['//', \"\\n\"],];\n\n/**\n * @var object\n */\nLexer.$cache = Object.create(null);", "\nimport $Lexer from '@webqit/util/str/Lexer.js';\n\nexport default class Lexer extends $Lexer {\n    static $blocks = [...$Lexer.$blocks, [new RegExp(`^CASE `, 'i'), new RegExp(`^ END`, 'i')]];\n}", "import Lexer from '../Lexer.js';\r\n\r\nexport default class Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONTEXT;\r\n\tFLAGS = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(context) {\r\n\t\tthis.CONTEXT = context;\r\n\t\tlet statementNode = this.statementNode;\r\n\t\tif (statementNode === this) {\r\n\t\t\t// Subquery case\r\n\t\t\tstatementNode = statementNode.CONTEXT?.statementNode;\r\n\t\t}\r\n\t\tstatementNode?.connectedNodeCallback?.(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Recursively accesses @params.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tget params() { return this.CONTEXT?.params || {}; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * NODE TREE\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget rootNode() { return this.CONTEXT instanceof Node ? this.CONTEXT.rootNode : this; }\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget statementNode() { return this.CONTEXT instanceof Node ? this.CONTEXT.statementNode : null; }\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUOTES and ESCAPING\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tget quoteChars() { return this.constructor.getQuoteChars(this); }\r\n\t\r\n\t/**\r\n\t * Determines the proper quote characters for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param Node|AbstractClient context \r\n\t * \r\n\t * @returns Array\r\n\t */\r\n\tstatic getQuoteChars(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? [\"'\", '\"'] : [\"'\"];\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget escChar() { return this.constructor.getEscChar(this); }\r\n\r\n\t/**\r\n\t * An Escape helper\r\n\t * \r\n\t * @param String|Array string_s \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tautoEsc(string_s) {\r\n\t\tconst $strings = (Array.isArray(string_s) ? string_s : [string_s]).map(s => s && !/^(\\*|[\\w]+)$/.test(s) ? `${ this.escChar }${ s.replace(new RegExp(this.escChar, 'g'), this.escChar.repeat(2)) }${ this.escChar }` : s );\r\n\t\treturn Array.isArray(string_s) ? $strings : $strings[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic autoUnesc(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\treturn (expr || '').replace(new RegExp(escChar + escChar, 'g'), escChar);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines the proper escape character for the active SQL dialect ascertained from context.\r\n\t * \r\n\t * @param Node|AbstractClient context \r\n\t * \r\n\t * @returns String\r\n\t */\r\n\tstatic getEscChar(context, asInputDialect = false) {\r\n\t\tconst dialect = (asInputDialect && context?.params?.inputDialect) || context?.params?.dialect;\r\n\t\treturn dialect === 'mysql' && !context.params.ansiQuotes ? '`' : '\"';\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parseIdent(context, expr, asInputDialect = false) {\r\n\t\tconst escChar = this.getEscChar(context, asInputDialect);\r\n\t\tconst parts = Lexer.split(expr, ['.']);\r\n\t\tconst parses = parts.map(s => (new RegExp(`^(?:(\\\\*|[\\\\w]+)|(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2)$`)).exec(s.trim())).filter(s => s);\r\n\t\tif (parses.length !== parts.length) return;\r\n\t\tconst get = x => x?.[1] || this.autoUnesc(context, x?.[3]);\r\n\t\treturn [get(parses.pop()), get(parses.pop())];\r\n\t}\r\n\r\n\t/**\r\n\t * -----------\r\n\t * QUERY BUILDER\r\n\t * -----------\r\n\t */\r\n\r\n\t/**\r\n\t * Helper for adding additional attributes to the instance.\r\n\t * \r\n\t * @params Object meta\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twith(meta) {\r\n\t\tfor (const attr in meta) { this[attr] = meta[attr]; }\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for adding flags to the instance.\r\n\t * \r\n\t * @params Array flags\r\n\t * \r\n\t * @return this\r\n\t */\r\n\twithFlag(...flags) {\r\n\t\tflags = new Set(flags.filter(f => f));\r\n\t\tthis.FLAGS = this.FLAGS.reduce(($flags, $flag) => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\tfor (const flag of flags) {\r\n\t\t\t\tconst b = flag.split(':');\r\n\t\t\t\tif (b[0] === a[0]) {\r\n\t\t\t\t\t$flag = [...(new Set([...a, ...b]))].join(':');\r\n\t\t\t\t\tflags.delete(flag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $flags.concat($flag);\r\n\t\t}, []).concat(...flags);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for inspecting flags on the instance.\r\n\t * \r\n\t * @params String flag\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tgetFlag(flag) {\r\n\t\tconst b = flag.toUpperCase().split(':');\r\n\t\treturn this.FLAGS.find($flag => {\r\n\t\t\tconst a = $flag.split(':');\r\n\t\t\treturn b[0] === a[0] && b.every(f => a.includes(f));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Helper for inspecting flags on the instance.\r\n\t * \r\n\t * @params String flag\r\n\t * \r\n\t * @return Bool\r\n\t */\r\n\thasFlag(flag) { return !!this.getFlag(flag); }\r\n\r\n\t/**\r\n\t * Helper for adding clauses to the instance.\r\n\t * \r\n\t * @params String LIST\r\n\t * @params Array args\r\n\t * @params Node|Array Type\r\n\t * @params String delegate\r\n\t * \r\n\t * @return this\r\n\t */\r\n\tbuild(attrName, args, Type, delegate) {\r\n\t\tconst Types = Array.isArray(Type) ? Type : (Type ? [Type] : []);\r\n\t\tif (!Types.length) throw new Error(`At least one node type must be defined.`);\r\n\t\t// ---------\r\n\t\tconst cast = arg => Types.reduce((prev, Type) => prev || (arg instanceof Type ? arg : Type.fromJson(this, arg)), null);\r\n\t\tconst set = (...args) => {\r\n\t\t\tfor (const arg of args) {\r\n\t\t\t\tif (Array.isArray(this[attrName])) this[attrName].push(arg);\r\n\t\t\t\telse this[attrName] = arg;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// ---------\r\n\t\t// Handle direct child node and json cases\r\n\t\tif (args.length === 1 && typeof args[0] !== 'function') {\r\n\t\t\tconst instance = cast(args[0]);\r\n\t\t\tif (instance) return set(instance);\r\n\t\t}\r\n\t\t// Handle delegation cases\r\n\t\tif (delegate) {\r\n\t\t\tif (Types.length !== 1) throw new Error(`To support argument delegation, number of node types must be 1.`);\r\n\t\t\tconst instance = this[attrName] && !Array.isArray(this[attrName]) ? this[attrName] : new Types[0](this);\r\n\t\t\tset(instance);\r\n\t\t\treturn instance[delegate](...args);\r\n\t\t}\r\n\t\t// Handle direct child callback cases\r\n\t\tfor (let arg of args) {\r\n\t\t\t// Pass an instance into provided callback for manipulation\r\n\t\t\tif (typeof arg === 'function') {\r\n\t\t\t\t// Singleton and already instantiated?\r\n\t\t\t\tif (this[attrName] && !Array.isArray(this[attrName])) {\r\n\t\t\t\t\targ(this[attrName]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// New instance and may be or not be singleton\r\n\t\t\t\tif (Types.length === 1) {\r\n\t\t\t\t\tconst instance = new Types[0](this);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\targ(instance);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t// Any!!!\r\n\t\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\t\tconst instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (typeof Type.factoryMethods[methodName] === 'function' && Type.factoryMethods[methodName](this, ...args)) : (typeof Type.prototype[methodName] === 'function' && new Type(this))), null);\r\n\t\t\t\t\tif (!instance) throw new Error(`Unknow method: ${ methodName }()`);\r\n\t\t\t\t\tset(instance);\r\n\t\t\t\t\tif (instance[methodName]) return instance[methodName](...args); // Foward the call\r\n\t\t\t\t\tfor (const f of args) f(instance); // It's just magic method mode\r\n\t\t\t\t};\r\n\t\t\t\targ(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Attempt to cast to type\r\n\t\t\tconst instance = cast(arg);\r\n\t\t\tif (instance) {\r\n\t\t\t\tset(instance);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tthrow new Error(`Arguments must be of type ${ Types.map(Type => Type.name).join(', ') } or a JSON equivalent. Recieved: ${ typeof arg === 'object' && arg ? arg.constructor.name : typeof arg }`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the instance.\r\n\t */\r\n\tclone() { return this.constructor.fromJson(this.CONTEXT, this.toJson()); }\r\n\t\r\n\t/**\r\n\t * -----------\r\n\t * PARSING CONVERSIONS\r\n\t * -----------\r\n\t */\r\n\t\r\n\t/**\r\n\t * SAttempts to parse a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param String expr\r\n\t * @param Function parseCallback\r\n\t *\r\n\t * @return Node\r\n\t */\r\n\tstatic parse(context, expr, parseCallback = null) {}\r\n\r\n\t/**\r\n\t * Serializes the instance.\r\n\t * \r\n\t * @returns String\r\n\t */\r\n\ttoString() { return this.stringify(); }\r\n\t\r\n\t/**\r\n\t * Attempts to cast a string into the class instance.\r\n\t *\r\n\t * @param Any context\r\n\t * @param Object json\r\n\t *\r\n\t * @return Node\r\n\t */\r\n\tstatic fromJson(context, json) {}\r\n\r\n\t/**\r\n\t * Cast the instance to a plain object.\r\n\t * \r\n\t * @returns Object\r\n\t */\r\n\ttoJson() { return {}; }\r\n}\r\n", "\nimport Node from '../abstracts/Node.js';\n\nexport default class Identifier extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tBASENAME;\n\tNAME;\n\n\t/**\n\t * Sets the name.\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tconst nameParts = Array.isArray(name) ? [...name] : [name];\n\t\tthis.NAME = nameParts.pop();\n\t\tthis.BASENAME = nameParts.pop();\n\t\tif (nameParts.length) throw new Error(`Idents can be maximum of two parts. Recieved: ${ nameParts.reverse().join('.') }.${ this.BASENAME }.${ this.NAME }`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\tconst name = this.BASENAME ? [this.BASENAME,this.NAME] : this.NAME;\n\t\treturn this.FLAGS.length ? { name, flags: this.FLAGS } : name;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif ((typeof json === 'string') || (Array.isArray(json) && json.every(s => typeof s === 'string'))) json = { name: json };\n\t\telse if (typeof json?.name !== 'string' && !Array.isArray(json?.name)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json?.flags || []));\n\t\tinstance.name(json.name);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\treturn this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') + (\n\t\t\t''//this.FLAGS.length ? ` ${ this.FLAGS.map(s => s.replace(/_/g, ' ')).join(' ') }` : ''\n\t\t);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [name, basename] = this.parseIdent(context, expr, true) || [];\n\t\tif (!name) return;\n\t\tconst instance = new this(context);\n\t\tinstance.name(basename ? [basename,name] : name);\n\t\treturn instance;\n\t}\n}", "\n/**\n * Return the remainder of a string after a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   afterLast\n *\n * @return string\n */\nexport default function(subject, search, afterLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = afterLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn '';\n\t}\n\treturn subject.substr(pos + search.length);\n};\n", "\n/**\n * Return the part of a string before a given value.\n *\n * @param  string  subject\n * @param  string  search\n * @param  bool\t   beforeLast\n *\n * @return string\n */\nexport default function(subject, search, beforeLast = false) {\n\tif (search == '') {\n\t\treturn subject;\n\t}\n\tvar pos = beforeLast ? subject.lastIndexOf(search) : subject.indexOf(search);\n\tif (pos === -1) {\n\t\treturn subject;\n\t}\n\treturn subject.substr(0, pos);\n};\n", "\n/**\n * @imports\n */\nimport _before from './before.js';\n\n/**\n * Return the part of a string before last occurence of a given value.\n *\n * @param  string  subject\n * @param  string  search\n *\n * @return string\n */\nexport default function(subject, search) {\n\treturn _before(subject, search, true);\n};\n", "\n/**\n * Splits a camel-cased string.\n *\n * @param string \tstr\n * @param string \tdelimiter\n *\n * @return string\n */\nexport default function(str, delimiter) {\n\treturn str === undefined ? '' : str.split(/(?=[A-Z])/).join(delimiter ? delimiter : ' '); // positive lookahead to keep the capital letters\n};\n", "\n/**\n * Converts a string to title case.\n *\n * @param string \tstr\n * @param bool \t\tstrict\n *\n * @return string\n */\nexport default function(str, strict) {\n\tif (typeof str !== 'string') {\n\t\treturn str;\n\t}\n\treturn str.replace(/\\w\\S*/g,  function(txt) { return txt.charAt(0).toUpperCase() + ((typeof strict !== undefined && strict) ? txt.substr(1).toLowerCase() : txt.substr(1)); })\n};\n", "\n/**\n * @imports\n */\nimport _toTitle from './toTitle.js';\n\n/**\n * Makes a string camel-cased.\n *\n * @param string \tstr\n * @param bool\t \tfromStart\n *\n * @return string\n */\nexport default function(str, fromStart) {\n\t// Make disting words\n\tstr = _toTitle(str.replace(/-/g, ' ')).replace(/ /g, '');\n\treturn fromStart ? str : str[0].toLowerCase() + str.substr(1);\n};\n", "\n/**\n * @imports\n */\nimport _after from './after.js';\nimport _beforeLast from './beforeLast.js';\n\n/**\n * Returns the string without the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return string\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn _beforeLast(_after(subject, openingTag), closingTag);\n};\n", "\n/**\n * Tells if the string is warapped with the given opening and closing tags.\n *\n * @param  string  subject\n * @param  string  openingTag\n * @param  string  closingTag\n *\n * @return bool\n */\nexport default function(subject, openingTag, closingTag) {\n\treturn subject.startsWith(openingTag) && subject.endsWith(closingTag);\n};\n", "\nimport { _after, _before } from '@webqit/util/str/index.js';\nimport Node from '../abstracts/Node.js';\t\t\n\nexport default class DataType extends Node {\n\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tPRECISION;\n\tTZ;\n\n    /**\n\t * @constructor\n\t */\n    constructor(context, name, precision, tz) {\n        super(context);\n        this.NAME = name;\n        this.PRECISION = precision;\n        this.TZ = tz;\n    }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\tif (!this.PRECISION) return this.NAME;\n\t\treturn { name: this.NAME, precision: this.PRECISION, ...(this.TZ ? { tz: this.TZ } : {}) };\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json === 'string') { json = { name: json }; }\n\t\tif (!(typeof json === 'object' && json) || typeof json.name !== 'string') return;\n\t\tconst expr = json.name + (json.precision ? `(${ json.precision })` : '');\n\t\tconst [name, precision] = parse(expr);\n\t\tif (!name) return;\n\t\treturn new this(context, name, precision);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `${ this.NAME }${ this.PRECISION ? `(${ this.PRECISION })` : `` }${ this.TZ ? ` ${ this.TZ }` : '' }`; }\n    \n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [name, precision, tz = ''] = parse(expr);\n\t\tif (!name) return;\n        return new this(context, name.toUpperCase(), precision, tz.trim().replace(/\\s+/, ' ').toUpperCase());\n    }\n\n\tstatic pgFixedTypesRe = /(bigint|int8|bigserial|serial8|boolean|bool|box|bytea|cidr|circle|date|double\\s+precision|float8|inet|integer|int|int4|jsonb|json|line|lseg|macaddr8|macaddr|money|path|pg_lsn|pg_snapshot|point|polygon|real|float4|smallint|int2|smallserial|serial2|serial4|serial|text|timetz|timestamptz|tsquery|tsvector|txid_snapshot|uuid|xml)/;\n\tstatic pgVariableTypesRe = /(bit\\s+varying|bit|varbit|character\\s+varying|character|char|varchar|interval|numeric|timestamp|time)(?:\\s+)?(?:\\(([\\d, ]+)\\))?(\\s+(?:with|without)\\s+time\\s+zone)?/;\n\tstatic myFixedTypesRe = /(tinyint|smallint|mediumint|enum|set|tinyblob|mediumblob|longblob|geometry|longstring|geometrycollection|multilinestring|multipoint|multipolygon)/;\n\tstatic myVariableTypesRe = /(float|decimal|double|tinytext|mediumtext|longtext|binary|varbinary|blob)(?:\\s+)?(?:\\(([\\d, ]+)\\))?/;\n}\n\nconst parse = expr => {\n\tlet name, precision, tz;\n\tfor (const key of ['pgFixedTypesRe', 'pgVariableTypesRe', 'myFixedTypesRe', 'myVariableTypesRe']) {\n\t\t[ , name, precision, tz ] = expr.match(new RegExp(DataType[key].source, 'i')) || [];\n\t\tif (name) break;\n\t}\n\treturn [name, precision, tz];\n};", "\nimport Node from '../../abstracts/Node.js';\nimport { _fromCamel } from '@webqit/util/str/index.js';\n\nexport default class AbstractNode extends Node {\n\n    /**\n\t * Instance properties\n\t */\n\tNAME;\n\t$NAME;\n\tSTATUS;\n\n    /**\n\t * @var String\n\t */\n    static get TYPE() { return _fromCamel(this.name.replace(/\\d/g, ''), '_').toUpperCase(); }\n\n    /**\n\t * @var String\n\t */\n\tget TYPE() { return this.constructor.TYPE; }\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['NAME']; }\n    static get SUBTREE_PROPS() { return []; }\n\n\t/**\n\t * @var Array\n\t */\n\tget WRITABLE_PROPS() { return this.constructor.WRITABLE_PROPS; }\n\tget SUBTREE_PROPS() { return this.constructor.SUBTREE_PROPS; }\n\n\t/**\n\t * Returns name or sets name\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this[this.smartKey('NAME')];\n        return (this[this.smartKey('NAME', true)] = name, this);\n\t}\n\n\t/**\n\t * Returns the right prop name depending on status.\n\t * \n\t * @param String key\n\t * @param Bool isWrite\n\t * \n\t * @returns String\n\t */\n\tsmartKey(key, isWrite = false) {\n\t\tif (this.status() === 'UP') return isWrite || isDirty(this[`$${ key }`]) ? `$${ key }` : key;\n\t\tif (this.status() === 'DOWN') {\n\t\t\tconst type = this.TYPE instanceof Node ? this.constructor.TYPE : this.TYPE;\n\t\t\tif (isWrite) throw new Error(`Cannot alter ${ type } after having been dropped.`);\n\t\t\treturn key;\n\t\t}\n\t\treturn key;\n\t}\n\n\t/**\n\t * Invokes a callback that sets a prop while properly managing status.\n\t * \n\t * @param Function callback\n\t * \n\t * OR\n     * \n\t * @param Any value\n\t * @param Function callback\n\t * \n\t * @return this\n\t */\n\thardSet(...args) {\n\t\tconst callback = args.pop();\n\t\tif (args.length) {\n\t\t\tconst value = args[0];\n\t\t\tconst pass = () => {\n\t\t\t\tif (this.status() === 'DOWN') {\n\t\t\t\t\tconst type = this.TYPE instanceof Node ? this.constructor.TYPE : this.TYPE;\n\t\t\t\t\tthrow new Error(`Diffing cannot be done on a node ${ type } after having been dropped.`)\n\t\t\t\t} else if (!this.status()) this.status('UP');\n\t\t\t\treturn callback(value);\n\t\t\t};\n\t\t\t// Start from up the context?\n\t\t\tif (typeof this.CONTEXT?.hardSet === 'function') {\n\t\t\t\treturn this.CONTEXT.hardSet(value, pass);\n\t\t\t}\n\t\t\tif (isDirty(value)) return pass();\n\t\t\treturn;\n\t\t}\n\t\tconst statusBefore = this.STATUS;\n\t\tthis.STATUS = null;\n\t\tconst returnValue = callback();\n\t\tthis.STATUS = statusBefore;\n\t\treturn returnValue;\n\t}\n    \n\t/**\n\t * Gets/sets the status.\n     * \n\t * @param String value\n\t * \n\t * @return this\n\t */\n\tstatus(value, recursively = false) {\n        if (!arguments.length) return this.STATUS;\n        if (value && !['UP','DOWN'].includes(value)) throw new Error(`Status can only be \"UP\" or \"DOWN\". Received: ${ value }`);\n        this.STATUS = value;\n\t\tif (recursively) {\n            for (const node of this.SUBTREE_PROPS.reduce((entries, key) => [...entries, ...this[key]], [])) {\n                if (value !== 'UP') node.status(undefined, true); // A DOWN or (NEW) status means nested nodes should be undefined\n                else node.status(node.status() || (typeof recursively === 'string' ?/* means: force to state; typical UP and for describes */ recursively : undefined), recursively);\n            }\n        }\n        return this;\n    }\n\n\t/**\n\t * @returns this\n\t */\n\tdrop() { return this.status('DOWN'); }\n\n\t/**\n\t * @returns Boolean\n\t */\n\tdropped() { return this.status() === 'DOWN' || this.CONTEXT?.dropped?.(); }\n\n\t/**\n\t * Rollback status\n\t */\n\treverseAlt(recursively = false) {\n\t\tif (this.status() === 'UP') {\n\t\t\tfor (const prop of this.WRITABLE_PROPS) {\n\t\t\t\tif (isDirty(this[`$${ prop }`])) {\n\t\t\t\t\tconst normalValue = this[prop];\n\t\t\t\t\tthis[prop] = this[`$${ prop }`];\n\t\t\t\t\tthis[`$${ prop }`] = normalValue;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.status() === 'DOWN') this.status(undefined);\n\t\telse if (!this.status()) this.status('DOWN');\n\t\tif (recursively) {\n\t\t\tfor (const node of this.SUBTREE_PROPS.reduce((entries, key) => [...entries, ...this[key]], [])) {\n\t\t\t\tnode.reverseAlt(recursively);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...(this.NAME ? { name: this.NAME } : {}),\n\t\t\t...(this.$NAME ? { $name: this.$NAME } : {}),\n\t\t\t...(this.STATUS ? { status: this.STATUS } : {}),\n\t\t\t...(this.FLAGS.length ? { flags: [ ...this.FLAGS ] } : {}),\n\t\t};\n\t}\n\n    /**\n\t * @inheritdoc\n\t */\n    static fromJson(context, json, callback = null) {\n        if ((json?.name && typeof json.name !== 'string') || (json.$name && typeof json.$name !== 'string')) return;\n        const instance = callback ? callback() : new this(context);\n        instance.hardSet(() => instance.name(json.name));\n\t\tinstance.hardSet(json.$name, val => instance.name(val));\n        if (json.status) instance.status(json.status);\n        if (json.flags) instance.withFlag(...json.flags);\n        return instance;\n    }\n}\n\n// Has any value? Arrays and objects (not empty), number (including 0), string (not empty), boolean (true/false)\nconst isDirty = value => Array.isArray(value) ? value.length : (typeof value === 'object' && value ? Object.keys(value).length : ![undefined, null, ''].includes(value));", "\nimport Lexer from '../../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractNode from '../abstracts/AbstractNode.js';\n\nexport default class AbstractConstraint extends AbstractNode {\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['TYPE'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        let json = { type: this.TYPE, ...super.toJson(), };\n        if (!('name' in json) && ['PRIMARY_KEY','FOREIGN_KEY','UNIQUE_KEY','CHECK'].includes(json.type)) {\n            // Key needs to be present\n            json = { ...json, name: undefined };\n        }\n\t\treturn json;\n\t}\n\n    /**\n\t * @inheritdoc\n\t */\n    static fromJson(context, json, callback = null) {\n        if (json?.type !== this.TYPE) return;\n        if (!('name' in json) && ['PRIMARY_KEY','FOREIGN_KEY','UNIQUE_KEY','CHECK'].includes(json.type)) {\n            // Automatically generate a default name for PRIMARY_KEY,FOREIGN_KEY,UNIQUE_KEY,CHECK\n            json = { ...json, name: `auto_name_${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }` };\n        }\n        return super.fromJson(context, json, callback);\n    }\n\n    /**\n     * @returns String\n     */\n    stringify() { return this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : `${ this.stringifyName() }${ this.TYPE.replace('_', ' ') }`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !(new RegExp(`^${ this.TYPE === 'AUTO_INCREMENT' ? this.TYPE : this.TYPE.replace('_', '\\\\s+') }$`, 'i')).test($expr)) return;\n        return (new this(context)).name(name);\n    }\n\n    /**\n     * @returns Object\n     */\n    stringifyName() { return this.name() ? `CONSTRAINT ${ this.autoEsc(this.name()) } ` : ''; }\n\n    /**\n     * @returns Object\n     */\n    static parseName(context, expr, asInputDialect = false) {\n        const escChar = this.getEscChar(context, asInputDialect);\n        const nameRegex = `(?:CONSTRAINT(?:` + `\\\\s+(\\\\w+)` + `|` + `\\\\s+(${ escChar })((?:\\\\2\\\\2|[^\\\\2])+)\\\\2` + `)\\\\s+)?`;\n        const [ , nameUnscaped, /*esc*/, nameEscaped, rest = '' ] = expr.match(new RegExp(`^${ nameRegex }([\\\\s\\\\S]+)$`, 'i')) || [];\n        return { name: nameUnscaped || this.autoUnesc(context, nameEscaped), expr: rest.trim() };\n    }\n\n    static parseColumns(context, columnsExpr, asInputDialect = false)  {\n        return Lexer.split(_unwrap(columnsExpr, '(', ')'), [',']).map(columnExpr => {\n            return this.parseIdent(context, columnExpr.trim(), asInputDialect)[0];\n        });\n    }\n}", "\nimport AbstractConstraint from './AbstractConstraint.js';\nimport AutoIncrement from './AutoIncrement.js';\n\nexport default class Identity extends AbstractConstraint {\n\n    /**\n\t * Instance properties\n\t */\n\tALWAYS;\n\t$ALWAYS;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['ALWAYS'].concat(super.WRITABLE_PROPS); }\n    \n\t/**\n\t * Gets/sets the expr.\n     * \n\t * @param Bool val\n\t * \n\t * @return this\n\t */\n\talways(val) {\n\t\tif (!arguments.length) return this[this.smartKey('ALWAYS')];\n\t\treturn (this[this.smartKey('ALWAYS', true)] = !!val, this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n            always: !!this.ALWAYS,\n\t\t\t...(typeof this.$ALWAYS === 'boolean' ? { $always: this.$ALWAYS } : {}),\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = (new this(context)).always(json.always);\n\t\t\tinstance.hardSet(json.$always, val => instance.always(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tif (this.params.dialect === 'mysql') return (new AutoIncrement(this.CONTEXT)).stringify();\n\t\treturn `GENERATED ${ this.always() ? 'ALWAYS' : 'BY DEFAULT' } AS IDENTITY`;\n\t}\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !($expr = $expr.match(new RegExp(`^GENERATED\\\\s+` + `(ALWAYS|BY[ ]+DEFAULT)` + `(?:\\\\s+AS\\\\s+IDENTITY)?$`, 'i'))?.[1])) return;\n\t\treturn (new this(context)).name(name).always(/^ALWAYS$/i.test($expr));\n    }\n}", "\nimport AbstractConstraint from './AbstractConstraint.js';\nimport Identity from './Identity.js';\n\nexport default class AutoIncrement extends AbstractConstraint {\n\n\t/**\n\t * @var String\n\t */\n\tstatic get TYPE() { return 'AUTO_INCREMENT'; }\n\n    /**\n     * @returns String\n     */\n    stringify() { return this.params.dialect !== 'mysql' ? (new Identity(this.CONTEXT)).stringify() : `AUTO_INCREMENT`; }\n}", "\nimport { _unwrap, _wrapped } from '@webqit/util/str/index.js';\nimport AbstractConstraint from './AbstractConstraint.js';\n\nexport default class AbstractExpr extends AbstractConstraint {\n\n    /**\n\t * Instance properties\n\t */\n\tEXPR;\n\t$EXPR;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['EXPR'].concat(super.WRITABLE_PROPS); }\n    \n\t/**\n\t * Gets/sets the expr.\n     * \n\t * @param String expr\n\t * \n\t * @return this\n\t */\n\texpr(expr) {\n        if (!arguments.length) return this[this.smartKey('EXPR')];\n        return (this[this.smartKey('EXPR', true)] = expr, this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n            expr: this.EXPR,\n\t\t\t...(![undefined, null].includes(this.$EXPR) ? { $expr: this.$EXPR } : {}),\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n        if ([undefined, null].includes(json?.expr)) return;\n        return super.fromJson(context, json, () => {\n            const instance = (new this(context)).expr(json.expr);\n            instance.hardSet(json.$expr, val => instance.expr(val));\n            return instance;\n        });\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ super.stringify() } (${ this.expr() })`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !($expr = $expr.match(new RegExp(`^${ this.TYPE }\\\\s+([\\\\s\\\\S]+)$`, 'i'))?.[1])) return;\n        const instance = (new this(context))\n            .expr(_wrapped($expr.trim(), '(', ')') ? _unwrap($expr.trim(), '(', ')') : $expr)\n            .name(name);\n        return instance;\n    }\n}", "\nimport AbstractExpr from './AbstractExpr.js';\n\nexport default class Expression extends AbstractExpr {\n\n    /**\n     * @returns String\n     */\n    stringify() { return `GENERATED ALWAYS AS (${ this.expr() })${ this.params.dialect !== 'mysql' ? ` STORED` : '' }`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !($expr = $expr.match(new RegExp(`^GENERATED\\\\s+ALWAYS\\\\s+AS\\\\s+\\\\(` + `([\\\\s\\\\S]+)` + `\\\\)(?:\\\\s+STORED)?$`, 'i'))?.[1])) return;\n\t\treturn (new this(context)).name(name).expr($expr);\n    }\n}", "\nimport AbstractExpr from './AbstractExpr.js';\n\nexport default class Default extends AbstractExpr {}", "\nimport AbstractConstraint from './AbstractConstraint.js';\n\nexport default class NotNull extends AbstractConstraint {}", "\nimport AbstractConstraint from './AbstractConstraint.js';\n\nexport default class PrimaryKey1 extends AbstractConstraint {}", "\nimport Lexer from '../../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractConstraint from './AbstractConstraint.js';\nimport Identifier from '../../select/Identifier.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class ForeignKey1 extends AbstractConstraint {\n\n    /**\n\t * Instance properties\n\t */\n\tTARGET_TABLE;\n\t$TARGET_TABLE;\n    TARGET_COLUMNS = [];\n\t$TARGET_COLUMNS = [];\n    MATCH_RULE;\n    $MATCH_RULE;\n    UPDATE_RULE;\n    $UPDATE_RULE;\n    DELETE_RULE;\n    $DELETE_RULE;\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() {\n\t\treturn [\n\t\t\t'TARGET_TABLE',\n\t\t\t'TARGET_COLUMNS',\n\t\t\t'MATCH_RULE',\n\t\t\t'UPDATE_RULE',\n\t\t\t'DELETE_RULE',\n\t\t].concat(super.WRITABLE_PROPS);\n\t}\n    \n\t/**\n\t * Builds the statement's FROM_LIST\n     * \n\t * .targetTable('tbl');\n\t * .targetTable(['base', 'tbl']);\n\t * \n\t * .targetTable( t => t.name('tbl') );\n\t * .targetTable( t => t.name(['base', 'tbl']) );\n\t * \n\t * @return this\n\t */\n\ttargetTable(table) {\n\t\tif (!arguments.length) return this[this.smartKey('TARGET_TABLE')];\n        return (this.build(this.smartKey('TARGET_TABLE', true), [table], Identifier, 'name'), this);\n    }\n\n\t/**\n\t * Sets/gets the constraint name,\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\ttargetColumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('TARGET_COLUMNS')];\n\t\treturn (this[this.smartKey('TARGET_COLUMNS', true)] = [].concat(columns), this);\n\t}\n\n\t/**\n\t * Sets/gets the matchRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tmatchRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('MATCH_RULE')];\n        return (this[this.smartKey('MATCH_RULE', true)] = rule, this);\n\t}\n\n\t/**\n\t * Sets/gets the updateRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tupdateRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('UPDATE_RULE')];\n        return (this[this.smartKey('UPDATE_RULE', true)] = rule, this);\n\t}\n\n\t/**\n\t * Sets/gets the deleteRule,\n\t * \n\t * @param Void|String rule\n\t * \n\t * @returns String\n\t */\n\tdeleteRule(rule) {\n\t\tif (!arguments.length) return this[this.smartKey('DELETE_RULE')];\n        return (this[this.smartKey('DELETE_RULE', true)] = rule, this);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n            // Requireds\n            targetTable: this.TARGET_TABLE.toJson(),\n\t\t\t...(this.$TARGET_TABLE ? { $targetTable: this.$TARGET_TABLE.toJson() } : {}),\n            targetColumns: this.TARGET_COLUMNS,\n\t\t\t...(this.$TARGET_COLUMNS.length ? { $targetColumns: this.$TARGET_COLUMNS } : {}),\n            // Optionals\n\t\t\t...(this.MATCH_RULE ? { matchRule: this.MATCH_RULE } : {}),\n\t\t\t...(this.$MATCH_RULE ? { $matchRule: this.$MATCH_RULE } : {}),\n            ...(this.UPDATE_RULE ? { updateRule: this.UPDATE_RULE } : {}),\n\t\t\t...(this.$UPDATE_RULE ? { $updateRule: this.$UPDATE_RULE } : {}),\n            ...(this.DELETE_RULE ? { deleteRule: this.DELETE_RULE } : {}),\n\t\t\t...(this.$DELETE_RULE ? { $deleteRule: this.$DELETE_RULE } : {}),\n            // Name & status\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json, callback = null) {\n\t\tif (!json?.targetTable || !json.targetColumns?.length) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = callback ? callback() : new this(context);\n\t\t\tinstance.hardSet(() => instance.targetTable(json.targetTable));\n\t\t\tinstance.hardSet(() => instance.targetColumns(json.targetColumns));\n\t\t\tinstance.hardSet(() => instance.matchRule(json.matchRule));\n\t\t\tinstance.hardSet(() => instance.updateRule(json.updateRule));\n\t\t\tinstance.hardSet(() => instance.deleteRule(json.deleteRule));\n\t\t\tinstance.hardSet(json.$targetTable, val => instance.targetTable(val));\n\t\t\tinstance.hardSet(json.$targetColumns, val => instance.targetColumns(val));\n\t\t\tinstance.hardSet(json.$matchRule, val => instance.matchRule(val));\n\t\t\tinstance.hardSet(json.$updateRule, val => instance.updateRule(val));\n\t\t\tinstance.hardSet(json.$deleteRule, val => instance.deleteRule(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tlet targetTable = this.targetTable();\n\t\tif (!targetTable.BASENAME) {\n\t\t\tconst basename = this.statementNode.basename() || (this.statementNode.CONTEXT instanceof Node ? this.statementNode.CONTEXT.name() : this.statementNode.CONTEXT?.name);\n\t\t\ttargetTable = targetTable.clone().name([basename,targetTable.NAME]);\n\t\t}\n        let sql = `${ this.stringifyName() }REFERENCES ${ targetTable } (${ this.autoEsc(this.targetColumns()).join(', ') })`;\n        const serializeReferentialRule = rule => typeof rule === 'object' && rule ? `${ rule.rule } (${ rule.columns.join(', ') })` : rule;\n        if (this.matchRule()) { sql += ` MATCH ${ this.matchRule() }`; }\n        if (this.updateRule()) { sql += ` ON UPDATE ${ serializeReferentialRule(this.updateRule()) }`; }\n        if (this.deleteRule()) { sql += ` ON DELETE ${ serializeReferentialRule(this.deleteRule()) }`; }\n        return sql;\n    }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        let { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !($expr = $expr.match(/^REFERENCES\\s+([\\s\\S]+)$/i)?.[1])) return;\n        const [ table_maybeQualified, cols, opts = '' ] = Lexer.split($expr, []);\n        const [table, basename] = this.parseIdent(context, table_maybeQualified.trim(), true);\n        const targetColumns = Lexer.split(_unwrap(cols, '(', ')'), [',']).map(col => this.parseIdent(context, col.trim(), true)[0]);\n        const matchReferentialRule = (str, type) => {\n            if (type === 'MATCH') return str.match(/MATCH\\s+(\\w+)/i)?.[1];\n            const referentialActionRe = /(NO\\s+ACTION|RESTRICT|CASCADE|(SET\\s+NULL|SET\\s+DEFAULT)(?:\\s+\\(([^\\)]+)\\))?)/;\n            const [ , keyword1, keyword2, keyword2Columns ] = str.match(new RegExp(`ON\\\\s+${ type }\\\\s+${ referentialActionRe.source }`, 'i')) || [];\n            return keyword2 ? (!keyword2Columns ? keyword2 : { rule: keyword2, columns: keyword2Columns.split(',').map(s => s.trim()) }) : keyword1;\n        };\n        return (new this(context))\n\t\t\t.name(name)\n            .targetTable(basename ? [basename, table] : table)\n            .targetColumns(targetColumns)\n            .matchRule(matchReferentialRule(opts, 'MATCH'))\n            .updateRule(matchReferentialRule(opts, 'UPDATE'))\n            .deleteRule(matchReferentialRule(opts, 'DELETE'));\n    }\n}", "\nimport AbstractConstraint from './AbstractConstraint.js';\n\nexport default class UniqueKey1 extends AbstractConstraint {\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ this.stringifyName() }UNIQUE`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr) {\n        const { name, expr: $expr } = this.parseName(context, expr, true);\n        if (!$expr || !/^UNIQUE(\\s+KEY)?$/i.test($expr)) return;\n\t\treturn (new this(context)).name(name);\n    }\n}", "\nimport AbstractExpr from './AbstractExpr.js';\n\nexport default class Check extends AbstractExpr {}", "\nimport Lexer from '../Lexer.js';\nimport { _toCamel, _fromCamel } from '@webqit/util/str/index.js';\nimport AbstractNode from './abstracts/AbstractNode.js';\nimport AutoIncrement from './constraints/AutoIncrement.js';\nimport Identity from './constraints/Identity.js';\nimport Expression from './constraints/Expression.js';\nimport Default from './constraints/Default.js';\nimport NotNull from './constraints/NotNull.js';\nimport PrimaryKey1 from './constraints/PrimaryKey1.js';\nimport ForeignKey1 from './constraints/ForeignKey1.js';\nimport UniqueKey1 from './constraints/UniqueKey1.js';\nimport Check from './constraints/Check.js';\nimport DataType from './DataType.js';\t\t\n\nexport default class Column extends AbstractNode {\n\n    /**\n\t * Instance properties\n\t */\n\tTYPE;\n\t$TYPE;\n\tCONSTRAINTS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['TYPE'].concat(super.WRITABLE_PROPS); }\n\tstatic get SUBTREE_PROPS() { return ['CONSTRAINTS']; }\n\n    /**\n     * @var Array\n     */\n    static CONSTRAINT_TYPES = [AutoIncrement,Identity,Expression,Default,NotNull,PrimaryKey1,ForeignKey1,UniqueKey1,Check];\n\n\t/**\n\t * Sets the column type,\n\t * \n\t * @param DataType|Object value\n\t * \n\t * @returns this\n\t */\n\ttype(value) {\n        if (!arguments.length) return this[this.smartKey('TYPE')];\n        return (this.build(this.smartKey('TYPE', true), [value], DataType), this);\n    }\n\n    /**\n     * AUTO_INCREMENT\n     */\n    autoIncrement(trueFalse = null) { return this.constraint('AUTO_INCREMENT', ...arguments); }\n\n    /**\n     * IDENTITY\n     */\n    identity(trueFalse = null) { return this.constraint('IDENTITY', ...arguments); }\n\n    /**\n     * EXPRESSION\n     */\n    expression(trueFalse = null) { return this.constraint('EXPRESSION', ...arguments); }\n\n    /**\n     * DEFAULT\n     */\n    default(trueFalse = null) { return this.constraint('DEFAULT', ...arguments); }\n\n    /**\n     * NOT_NULL\n     */\n    notNull(trueFalse = null) { return this.constraint('NOT_NULL', ...arguments); }\n\n    /**\n     * PRIMARY_KEY\n     */\n    primaryKey(trueFalse = null) { return this.constraint('PRIMARY_KEY', ...arguments); }\n\n    /**\n     * FOREIGN_KEY\n     */\n    foreignKey(trueFalse = null) { return this.constraint('FOREIGN_KEY', ...arguments); }\n\n    /**\n     * UNIQUE_KEY\n     */\n    uniqueKey(trueFalse = null) { return this.constraint('UNIQUE_KEY', ...arguments); }\n\n    /**\n     * CHECK\n     */\n    check(trueFalse = null) { return this.constraint('CHECK', ...arguments); }\n\n\t/**\n\t * Adds a column-level constraint to the column,\n\t * \n\t * @param String type\n\t * @param Bool setting\n\t * \n\t * @returns this\n\t */\n\tconstraint(type, setting = null) {\n        const existing = this.CONSTRAINTS.find(cons => cons.TYPE === type);\n        if (arguments.length === 1) return existing;\n        if (setting) {\n            if (existing) {\n                if (setting === true || !Object.keys(setting).length) return;\n                throw new Error(`${ type } already exists in column. Granular modification of a constraint must be done on an instance of the contraint itself.`);\n            }\n            this.build('CONSTRAINTS', [{ type, ...(typeof setting === 'object' ? setting : {})  }], this.constructor.CONSTRAINT_TYPES);\n            return this.constraint(type);\n        }\n        if (existing) existing.status('DOWN');\n        return this;\n    }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        let json = {\n            type: this.TYPE.toJson(),\n            ...(this.$TYPE ? { $type: this.$TYPE.toJson() } : {}),\n        };\n        for (const cons of this.CONSTRAINTS) {\n            const { type, ...constraintDef } = cons.toJson();\n            const propName = type === 'FOREIGN_KEY' ? 'references' : _toCamel(type.toLowerCase().replace('_', ' '));\n            const props = Object.keys(constraintDef);\n            const lonePropValue = props.length === 1 ? constraintDef[props[0]] : null;\n            const propValue = !props.length ? true : (lonePropValue === 'DOWN' ? false : (props.length === 1 && props[0] === 'expr' ? lonePropValue : constraintDef));\n            json = { ...json, [ propName ]: propValue };\n        }\n        return { ...json, ...super.toJson()/** Status */ };\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n        const { type, $type, name: _, $name: __, status: ___, ...constraints } = json;\n        if (!DataType.fromJson({}, type)) return;\n        return super.fromJson(context, json, () => {\n\t\t\tconst instance = new this(context);\n            instance.type(DataType.fromJson(instance, type));\n            instance.hardSet($type, val => instance.type(DataType.fromJson(instance, val)));\n            const constraintsNormalized = Object.entries(constraints).reduce((normalized, [name, value]) => {\n                if (!['boolean','number','string'].includes(typeof value) && !(typeof value === 'object' && value)) {\n                    throw new Error(`Invalid value for constraint \"${ name }\"`);\n                }\n                let cons = { ...(value === false ? { status: 'DOWN' } : (value === true ? {} : (['number','string'].includes(typeof value) ? { expr: value } : value))) };\n                if (name.startsWith('$')) {\n                    cons = Object.fromEntries(Object.entries(cons).map(([name, val]) => [`$${ name }`, val]));\n                    name = name.slice(1);\n                }\n                if (name === 'references') name = 'foreignKey';\n                if (name in normalized) Object.assign(normalized[name], cons);\n                else normalized[name] = cons;\n                return normalized;\n            }, {});\n            // Constraints\n            for (const name in constraintsNormalized) {\n                instance.constraint(_fromCamel(name, '_').toUpperCase(), constraintsNormalized[name]);\n            }\n            return instance;\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n        let constraints = this.CONSTRAINTS;\n        if (this.params.dialect === 'mysql') { constraints = constraints.filter(c => c.TYPE !== 'FOREIGN_KEY'); }\n        return `${ this.autoEsc(this.name()) } ${ this.type() }${ constraints.length ? ` ${ constraints.join(' ') }` : '' }`;\n    }\n    \n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ namePart, bodyPart ] = Lexer.split(expr, ['\\\\s+'], { useRegex: true, limit: 1 });\n        const [name] = this.parseIdent(context, namePart.trim(), true) || [];\n        if (!name) return;\n        const instance = (new this(context)).name(name);\n        // Parse into \"type\" and constraints\n        const qualifier = '(CONSTRAINT\\\\s+.+?\\\\s+)?';\n        const regexes = [\n            { test: `${ qualifier }(PRIMARY[ ]+KEY|NOT[ ]+NULL|GENERATED|REFERENCES|UNIQUE(?:[ ]+KEY)?|CHECK|AUTO_INCREMENT)` },\n            { backtest: '^(?!.*\\\\s+(NOT|SET)\\\\s+$)', test: `${ qualifier }NULL` },\n            { backtest: '^(?!.*\\\\s+BY\\\\s+$)', test: `${ qualifier }DEFAULT` },\n        ];\n        const [ columnType, ...tokens ] = Lexer.split(bodyPart, regexes, { useRegex:'i', preserveDelims: true });\n        // Type\n        instance.type(parseCallback(instance, columnType.trim(), [DataType]));\n        // Constraints\n        for (const constraint of tokens) {\n            const cons = parseCallback(instance, constraint, this.CONSTRAINT_TYPES);\n            instance.build('CONSTRAINTS', [cons], this.CONSTRAINT_TYPES);\n        }\n        return instance;\n    }\n}", "import Lexer from '../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AbstractNode from './abstracts/AbstractNode.js';\n\nexport default class Index extends AbstractNode {\n\n\tTYPE;\n\t$TYPE;\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get WRITABLE_PROPS() { return ['TYPE', 'COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the index type,\n\t * \n\t * @param Void|String value\n\t * \n\t * @returns this\n\t */\n\ttype(value) {\n\t\tif (!arguments.length) return this[this.smartKey('TYPE')];\n        return (this[this.smartKey('TYPE', true)] = value, this);\n    }\n\n\t/**\n\t * Sets/gets the index columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttype: this.TYPE,\n\t\t\t...(this.$TYPE ? { $type: this.$TYPE } : {}),\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n\t\t\t...super.toJson(), // Status\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.type !== 'string' || !/^(INDEX|KEY|FULLTEXT)$/i.test(json.type) || !json.columns?.length) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = (new this(context))\n\t\t\t\t.columns(json.columns)\n\t\t\t\t.type(json.type);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\tinstance.hardSet(json.$type, val => instance.type(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `${ this.type() }${ this.name() ? ` ${ this.name() }` : '' } (${ this.columns().join(', ') })`; }\n\n    /**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, type, rest ] = /^((?:(?:FULLTEXT|SPATIAL)(?:\\s+INDEX|\\s+KEY)?)|(?:INDEX|KEY))([\\s\\S]+)$/i.exec(expr) || [];\n        if (!match) return;\n\t\tconst [ namePart, columnsPart ] = Lexer.split(rest, []);\n\t\tconst [name] = this.parseIdent(context, namePart.trim(), true);\n\t\tconst columns = Lexer.split(_unwrap(columnsPart, '(', ')'), [',']).map(columnExpr => {\n\t\t\treturn this.parseIdent(context, columnExpr.trim(), true)[0];\n\t\t});\n        return (new this(context))\n\t\t\t.type(type.replace(/\\s+(INDEX|KEY)/i, '').toUpperCase())\n\t\t\t.columns(columns)\n\t\t\t.name(name);\n    }\n}", "\nimport Node from '../abstracts/Node.js';\nimport CreateTable from '../create/CreateTable.js';\nimport DataType from '../create/DataType.js';\nimport Column from '../create/Column.js';\nimport Index from '../create/Index.js';\n\nexport default class Action extends Node {\n\n    /**\n     * Instance properties\n     */\n    TYPE = '';\n    REFERENCE = null;\n    ARGUMENT = null;\n\n\t/**\n\t * Adds a \"RENAME\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns this\n\t */\n\trename(newName) {\n        this.TYPE = 'RENAME';\n        this.ARGUMENT = newName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"MOVE\" action to the instance,\n\t * \n\t * @param String newName\n\t * \n\t * @returns this\n\t */\n\tmove(newDb) {\n        this.TYPE = 'MOVE';\n        this.ARGUMENT = newDb;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"DROP\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\tdrop(argument) {\n        this.TYPE = 'DROP';\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"ADD\" action to the instance,\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\tnew(argument) {\n        this.TYPE = 'NEW';\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"SET\" action to the instance,\n\t * \n\t * @param Object reference\n\t * \n\t * @returns this\n\t */\n\tset(argumentNew) {\n        this.TYPE = 'SET';\n        this.ARGUMENT = argumentNew;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"ALTER\" action to the instance,\n\t * \n\t * @param Object reference\n\t * @param Any argument\n\t * \n\t * @returns this\n\t */\n\talter(reference, argument) {\n        this.TYPE = 'ALTER';\n        this.REFERENCE = reference;\n        this.build('ARGUMENT', [argument], Action);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"CHANGE\" action to the instance,\n\t * \n\t * @param Object argument\n\t * @param Column argument\n\t * \n\t * @returns this\n\t */\n\tchange(reference, argument) {\n        this.TYPE = 'CHANGE';\n        this.REFERENCE = reference;\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a \"OWNER\" action to the instance,\n\t * \n\t * @param Column argument\n\t * \n\t * @returns this\n\t */\n\towner(argument) {\n        this.TYPE = 'OWNER';\n        this.ARGUMENT = argument;\n\t\treturn this;\n\t}\n\n    /**\n     * @inheritdoc\n     */\n    toJson() {\n        return {\n            type: this.TYPE,\n            ...(this.REFERENCE ? { reference: this.REFERENCE } : {}),\n            argument: typeof this.ARGUMENT?.toJson === 'function' ? this.ARGUMENT.toJson() : this.ARGUMENT,\n\t\t\t...(this.FLAGS.length ? { flags: this.FLAGS } : {}),\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    static fromJson(context, json) {\n        if (typeof json?.type !== 'string' || !json.argument) return;\n        const instance = (new this(context)).withFlag(...(json.flags || []));\n        // RENAME/MOVE\n        if (['RENAME','MOVE'].includes(json.type)) {\n            instance[json.type === 'RENAME' ? 'rename' : 'move'](json.argument);\n            return instance;\n        }\n        // DROP/ADD\n        if (['DROP','NEW','SET'].includes(json.type)) {\n            let Classes = [];\n            if (['NEW','SET'].includes(json.type)) Classes = [...Column.CONSTRAINT_TYPES,DataType];\n            if (json.type === 'NEW') Classes = [...CreateTable.CONSTRAINT_TYPES.concat(Classes),Index,Column];\n            const argument = Classes.reduce((prev, Class) => prev || Class.fromJson(context, json.argument), null) || json.argument;\n            instance[json.type.toLowerCase()](argument);\n            return instance;\n        }\n        // ALTER\n        if (json.type === 'ALTER') {\n            // Handle columns specially\n            const { reference, argument: subAction } = json;\n            instance.alter(reference, this.fromJson(instance, subAction));\n            return instance;;\n        }\n\t\t// ALTER\n        if (json.type === 'CHANGE') {\n            // Handle columns specially\n            const { reference, argument } = json;\n            instance.change(reference, Column.fromJson(instance, argument));\n            return instance;;\n        }\n    }\n}", "\r\nimport Node from \"./Node.js\";\r\nimport Lexer from \"../Lexer.js\";\r\n\r\nexport default class StatementNode extends Node {\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(context) {\r\n        super(context);\r\n        this._BINDINGS = [];\r\n    }\r\n\r\n    /**\r\n     * @returns String\r\n     */\r\n    get type() { return this.constructor.name.toUpperCase(); }\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n\tget statementNode() { return this; }\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n\tget BINDINGS() { return this._BINDINGS; }\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n    connectedNodeCallback(node) {}\r\n\r\n    /**\r\n\t * @inheritdoc\r\n\t */\r\n    clone() {\r\n        const clone = super.clone();\r\n        if (this._BINDINGS.length) clone._BINDINGS = this._BINDINGS.slice(0);\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * @returns String\r\n     */\r\n    static mySubstitutePlaceholders(context, expr) {\r\n        if ((context?.params?.inputDialect || context?.params?.dialect) !== 'mysql' || expr.indexOf('?') === -1) return expr;\r\n\t\treturn Lexer.split(expr, ['?'], { blocks:[] }).reduce((expr, chunk, i) => !expr ? chunk : expr + '?' + i + chunk, null);\r\n    }\r\n\r\n    /**\r\n     * @returns Bool\r\n     */\r\n    get expandable() { return false; }\r\n\r\n    /**\r\n     * @returns Node\r\n     */\r\n    async expand(inPlace = false) { return !inPlace ? this.clone() : this; }\r\n}\r\n", "\nimport Node from '../../abstracts/Node.js';\nimport StatementNode from '../../abstracts/StatementNode.js';\nimport Action from '../Action.js';\n\nexport default class AbstractStatementNode extends StatementNode {\n\t\n\tstatic Node = Node;\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tBASENAME;\n\n\t/**\n\t * @var Array\n\t */\n\tACTIONS = [];\n\n\t/**\n\t * Returns name or sets name.\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this.NAME;\n\t\treturn (this.NAME = name, this);\n\t}\n\n\t/**\n\t * Returns basename or sets basename.\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tbasename(basename) {\n\t\tif (!arguments.length) return this.BASENAME;\n\t\treturn (this.BASENAME = basename, this);\n\t}\n\n\t/**\n\t * Adds a \"RENAME\" action to the instance.\n\t * \n\t * @param String newName\n\t * \n\t * @returns Action\n\t */\n\taddRename(newName) { return this.build('ACTIONS', [newName], Action, 'rename'); }\n\n\t/**\n\t * Adds a \"MOVE\" action to the instance.\n\t * \n\t * @param String newName\n\t * \n\t * @returns Action\n\t */\n\taddMove(newDb) { return this.build('ACTIONS', [newDb], Action, 'move'); }\n\n\t/**\n\t * Adds a \"DROP\" action to the instance.\n\t * \n\t * @param Object argument\n\t * \n\t * @returns Action\n\t */\n\taddDrop(argument) { return this.build('ACTIONS', [argument], Action, 'drop'); }\n\n\t/**\n\t * Adds a \"ADD\" action to the instance.\n\t * \n\t * @param Object argument\n\t * \n\t * @returns this\n\t */\n\taddNew(argument) { return this.build('ACTIONS', [argument], Action, 'new'); }\n\n\t/**\n\t * Adds a \"ALTER\" action to the instance.\n\t * \n\t * @param Object reference\n\t * @param Any argument\n\t * \n\t * @returns Action\n\t */\n\taddAlt(reference, argument) { return this.build('ACTIONS', [reference, argument], Action, 'alter'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tname: this.NAME,\n\t\t\t...(this.BASENAME ? { basename: this.BASENAME } : {}),\n\t\t\tactions: this.ACTIONS.map(action => action.toJson()),\n\t\t\t...(this.FLAGS.length ? { flags: this.FLAGS } : {}),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.actions)) return;\n\t\tconst instance = (new this(context))\n\t\t\t.name(json.name)\n\t\t\t.basename(json.basename)\n\t\t\t.withFlag(...(json.flags || []));\n\t\tfor (const action of json.actions) {\n\t\t\tinstance.ACTIONS.push(Action.fromJson(instance, action));\n\t\t}\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../Lexer.js';\nimport Action from './Action.js';\nimport AbstractStatementNode from './abstracts/AbstractStatementNode.js';\nimport CreateTable from '../create/CreateTable.js';\nimport DataType from '../create/DataType.js';\nimport Column from '../create/Column.js';\nimport Index from '../create/Index.js';\n\nexport default class AlterTable extends AbstractStatementNode {\n\n\t/**\n\t * Adds a \"CHANGE\" action to the instance.\n\t * \n\t * @param Object reference\n\t * @param Column argument\n\t * \n\t * @returns Action\n\t */\n\taddChange(reference, argument) { return this.build('ACTIONS', [reference, argument], Action, 'change'); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tif (!this.ACTIONS.length) return '';\n\t\tlet stmts = [], rename0, move0;\n\t\tfor (const action of this.ACTIONS) {\n\t\t\t// RENAME TO...\n\t\t\tif (action.TYPE === 'RENAME') {\n\t\t\t\trename0 = `RENAME TO ${ this.autoEsc(action.ARGUMENT) }`;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// MOVE TO...\n\t\t\tif (action.TYPE === 'MOVE') {\n\t\t\t\tmove0 = `SET SCHEMA ${ this.autoEsc(action.ARGUMENT) }`;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP\n\t\t\tif (action.TYPE === 'DROP') {\n\t\t\t\t// All flags are postgres'\n\t\t\t\tconst ifExists = action.hasFlag('IF_EXISTS');\n\t\t\t\tconst restrictOrCascadeFlag = action.getFlag('RESTRICT') || action.getFlag('CASCADE');\n\t\t\t\tif (this.params.dialect === 'mysql' && ['PRIMARY_KEY', 'FOREIGN_KEY'].includes(action.ARGUMENT.kind)) {\n\t\t\t\t\tif (action.ARGUMENT.kind === 'PRIMARY_KEY') stmts.push(`DROP PRIMARY KEY`);\n\t\t\t\t\telse stmts.push(`DROP FOREIGN KEY ${ this.autoEsc(action.ARGUMENT.name) }`);\n\t\t\t\t} else stmts.push(`DROP ${ action.ARGUMENT.kind === 'COLUMN' ? 'COLUMN' : 'CONSTRAINT' }${ ifExists ? ' IF EXISTS' : '' } ${ this.autoEsc(action.ARGUMENT.name) }${ restrictOrCascadeFlag ? ` ${ restrictOrCascadeFlag }` : '' }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD\n\t\t\tif (action.TYPE === 'NEW') {\n\t\t\t\tconst ifNotExists = action.hasFlag('IF_NOT_EXISTS');\n\t\t\t\tconst firstFlag = action.hasFlag('FIRST');\n\t\t\t\tconst afterFlag = action.getFlag('AFTER')?.replace('AFTER:', '');\n\t\t\t\tstmts.push(`ADD ${ action.ARGUMENT instanceof Column ? `COLUMN ` : '' }${ ifNotExists ? `IF NOT EXISTS ` : '' }${ action.ARGUMENT }${ firstFlag ? ` FIRST` : (afterFlag ? ` AFTER ${ this.autoEsc([afterFlag]) }` : '') }`);\n\t\t\t\tif (this.params.dialect === 'mysql' && action.ARGUMENT instanceof Column) {\n\t\t\t\t\tconst constraint = action.ARGUMENT.foreignKey();\n\t\t\t\t\tif (constraint) stmts.push(`ADD ${ ForeignKey2.fromJson(instance, constraint.toJson()).columns([action.ARGUMENT.name()]) }`);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// CHANGE\n\t\t\tif (action.TYPE === 'CHANGE') {\n\t\t\t\tconst firstFlag = action.hasFlag('FIRST');\n\t\t\t\tconst afterFlag = action.getFlag('AFTER')?.replace('AFTER:', '');\n\t\t\t\tstmts.push(`CHANGE COLUMN ${ this.autoEsc(action.REFERENCE.name) } ${ action.ARGUMENT }${ firstFlag ? ` FIRST` : (afterFlag ? ` AFTER ${ this.autoEsc([afterFlag]) }` : '') }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER\n\t\t\tif (action.TYPE === 'ALTER') {\n\t\t\t\tconst { REFERENCE: reference, ARGUMENT: subAction } = action;\n\t\t\t\t// RENAME\n\t\t\t\tif (subAction.TYPE === 'RENAME') {\n\t\t\t\t\tstmts.push(`RENAME ${ reference.kind } ${ this.autoEsc(reference.name) } TO ${ this.autoEsc(subAction.ARGUMENT) }`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Typically: SET TYPE // SET|DROP IDENTITY|EXPRESSION|DEFAULT|NOT_NULL\n\t\t\t\tif (subAction.TYPE === 'SET' && subAction.ARGUMENT instanceof DataType) {\n\t\t\t\t\tstmts.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } SET DATA TYPE ${ subAction.ARGUMENT }`);\n\t\t\t\t} else if (subAction.TYPE === 'DROP') {\n\t\t\t\t\tconst ifExists = ['IDENTITY', 'EXPRESSION'].includes(subAction.ARGUMENT) && action.hasFlag('IF_EXISTS');\n\t\t\t\t\tstmts.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } DROP ${ subAction.ARGUMENT.replace(/_/, ' ') }${ ifExists ? ` IF EXISTS` : '' }`);\n\t\t\t\t} else if (reference.kind === 'COLUMN') {\n\t\t\t\t\tconst verb = subAction.ARGUMENT.TYPE === 'IDENTITY' ? 'ADD' : 'SET';\n\t\t\t\t\tstmts.push(`ALTER COLUMN ${ this.autoEsc(reference.name) } ${ verb } ${ subAction.ARGUMENT }`);\n\t\t\t\t}\n\t\t\t\t// Constraints section\n\t\t\t\tif (['CONSTRAINT','INDEX'].includes(reference.kind)) {\n\t\t\t\t\tstmts.push(`ALTER ${ reference.kind } ${ this.autoEsc(reference.name) } ${ subAction.ARGUMENT }`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet renames = [];\n\t\tif (this.params.dialect !== 'mysql') {\n\t\t\t[ stmts, renames ] = stmts.reduce(([stmts, renames], stmt) => {\n\t\t\t\tif (stmt.startsWith('RENAME')) return [stmts, renames.concat(stmt)];\n\t\t\t\treturn [stmts.concat(stmt), renames];\n\t\t\t}, [[], []]);\n\t\t}\n\t\tconst sql = [];\n\t\tconst basename = this.BASENAME || (this.CONTEXT instanceof this.constructor.Node ? this.CONTEXT.NAME/* DB won't have actually been renamed */ : this.CONTEXT?.name);\n\t\tif (stmts.length) sql.push(`ALTER TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([basename, this.NAME].filter(s => s)).join('.') }\\n\\t${ stmts.join(',\\n\\t') }`);\n\t\tfor (const stmt of renames) sql.push(`ALTER TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([basename, this.NAME].filter(s => s)).join('.') }\\n\\t${ stmt }`);\n\t\tif (rename0) sql.push(`ALTER TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([basename, this.NAME].filter(s => s)).join('.') }\\n\\t${ rename0 }`);\n\t\tif (move0) sql.push(`ALTER TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([basename, rename0 ? this.ACTIONS.find(action => action.TYPE === 'RENAME').ARGUMENT : this.NAME].filter(s => s)).join('.') }\\n\\t${ move0 }`);\n\t\treturn sql.join(';\\n');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, ifExists, rest ] = /^ALTER\\s+TABLE\\s+(IF\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [ namePart, bodyPart ] = Lexer.split(rest, ['\\\\s+'], { useRegex: true, limit: 1 });\n\t\tconst [ tblName, dbName ] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = (new this(context))\n\t\t\t.name(tblName)\n\t\t\t.basename(dbName);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\t// ----------\n\t\tconst regex = name => new RegExp(`${ this[ name ].source }`, 'i');\n\t\tconst stmts = Lexer.split(bodyPart, [',']).map(s => s.trim());\n\t\tfor (const stmt of stmts) {\n\t\t\t// RENAME ... TO ...\n\t\t\tconst [ renameMatch, nodeKind_a, nodeNameUnescaped_a, /*esc*/, nodeNameEscaped_a, newNodeNameUnescaped_a, /*esc*/, newNodeNameEscaped_a ] = regex('renameRe').exec(stmt) || [];\n\t\t\tif (renameMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_a || this.autoUnesc(instance, nodeNameEscaped_a);\n\t\t\t\tconst newNodeName = newNodeNameUnescaped_a || this.autoUnesc(instance, newNodeNameEscaped_a);\n\t\t\t\tif (nodeName) {\n\t\t\t\t\tconst nodeKind = /KEY|INDEX/i.test(nodeKind_a) ? 'INDEX' : nodeKind_a.toUpperCase();\n\t\t\t\t\tconst reference = { kind: nodeKind, name: nodeName };\n\t\t\t\t\tinstance.addAlt(reference, a => a.rename(newNodeName));\n\t\t\t\t} else {\n\t\t\t\t\tinstance.addRename(newNodeName);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// MOVE ... TO ...\n\t\t\tconst [ moveMatch, newSchemaUnescaped, /*esc*/, newSchemaEscaped ] = regex('moveRe').exec(stmt) || [];\n\t\t\tif (moveMatch) {\n\t\t\t\tinstance.addMove(newSchemaUnescaped || this.autoUnesc(instance, newSchemaEscaped));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP\n\t\t\tconst [ dropMatch, nodeKind_b = 'COLUMN', ifExists_b/* postgresql-specific */, nodeNameUnescaped_b, /*esc*/, nodeNameEscaped_b, flags_b/* postgresql-specific */ ] = regex('dropRe').exec(stmt) || [];\n\t\t\tif (dropMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_b || this.autoUnesc(instance, nodeNameEscaped_b) || nodeKind_b.trim().replace(/\\s+KEY/i, '').toUpperCase()/* when, in mysql, it's just: drop PRIMARY KEY */;\n\t\t\t\tconst flags = [ifExists_b, flags_b].filter(s => s).map(s => s.trim().replace(/\\s+/g, '_').toUpperCase());\n\t\t\t\tinstance.addDrop({ kind: nodeKind_b.trim().replace(/\\s+/g, '_').toUpperCase(), name: nodeName }).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD\n\t\t\tconst [ addMatch, columnKeyword_c, ifColumnNotExists_c, spec_c ] = regex('addRe').exec(stmt) || [];\n\t\t\tif (addMatch) {\n\t\t\t\tconst [ , $spec, $first, $afterRef ] = spec_c.match(/([\\s\\S]+)\\s+(?:(FIRST)|AFTER\\s+(.+))$/i) || [ , spec_c ];\n\t\t\t\tconst argument = parseCallback(instance, $spec.trim(), columnKeyword_c ? [Column] : [...CreateTable.CONSTRAINT_TYPES,Index,Column]); // Note that Column must come last\n\t\t\t\tconst flags = [ifColumnNotExists_c, $first].filter(s => s).map(s => s.trim().replace(/\\s+/g, '_').toUpperCase()).concat($afterRef ? `AFTER:${ $afterRef }` : []);\n\t\t\t\tinstance.addNew(argument).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// CHANGE\n\t\t\tconst [ changeMatch, verb_d, nodeNameUnescaped_d, /*esc*/, nodeNameEscaped_d, spec_d ] = regex('changeRe').exec(stmt) || [];\n\t\t\tif (changeMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_d || this.autoUnesc(instance, nodeNameEscaped_d);\n\t\t\t\tconst [ , $spec, $first, $afterRef ] = spec_d.match(/([\\s\\S]+)\\s+(?:(FIRST)|AFTER\\s+(.+))$/i) || [ , spec_d ];\n\t\t\t\tconst argument = parseCallback(instance, /MODIFY/i.test(verb_d) ? `${ nodeName } ${ $spec }` : $spec, [Column]);\n\t\t\t\tconst flags = [ifColumnNotExists_c, $first].filter(s => s).map(s => s.trim().replace(/\\s+/g, '_').toUpperCase()).concat($afterRef ? `AFTER:${ $afterRef }` : []);\n\t\t\t\tinstance.addChange({ kind: 'COLUMN', name: nodeName }, argument).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER\n\t\t\tconst [ alterMatch, nodeKind_e, nodeNameUnescaped_e, /*esc*/, nodeNameEscaped_e, subAction_e = '', argument_e = '', ifNodeExits_e, constraintOrIndexAttr_e ] = regex('alterRe').exec(stmt) || [];\n\t\t\tif (alterMatch) {\n\t\t\t\tconst nodeName = nodeNameUnescaped_e || this.autoUnesc(instance, nodeNameEscaped_e);\n\t\t\t\tconst nodeKind = /CONSTRAINT|CHECK/i.test(nodeKind_e) ? 'CONSTRAINT' : (/INDEX|KEY/i.test(nodeKind_e) ? 'INDEX' : 'COLUMN');\n\t\t\t\tlet argumentNew, subAction = subAction_e.toUpperCase() || 'SET', flags = ifNodeExits_e ? ['IF_EXISTS'] : [], $ = {};\n\t\t\t\tif (subAction === 'DROP') {\n\t\t\t\t\targumentNew = argument_e;\n\t\t\t\t} else if (subAction.endsWith('TYPE')) {\n\t\t\t\t\targumentNew = parseCallback(instance, argument_e, [DataType]);\n\t\t\t\t\tsubAction = 'SET';\n\t\t\t\t} else if ($.argument = parseCallback(instance, argument_e, Column.CONSTRAINT_TYPES, { assert: false })) {\n\t\t\t\t\targumentNew = $.argument;\n\t\t\t\t} else if (subAction_e/*NOTE: original*/) {\n\t\t\t\t\targumentNew = argument_e;\n\t\t\t\t} else {\n\t\t\t\t\targumentNew = constraintOrIndexAttr_e;\n\t\t\t\t}\n\t\t\t\tconst reference = { kind: nodeKind, name: nodeName };\n\t\t\t\tinstance.addAlt(reference, a => a[subAction.toLowerCase()](argumentNew)).withFlag(...flags);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthrow new SyntaxError(stmt);\n\t\t}\n\t\treturn instance;\n\t}\n\n    /**\n\t * @property RegExp\n\t */\n\tstatic renameRe = /^RENAME\\s+(?:(?:(COLUMN|CONSTRAINT|INDEX|KEY)\\s+)?(?:(\\w+)|([`\"])((?:\\3\\3|[^\\3])+)\\3)\\s+)?(?:TO|AS)\\s+(?:(\\w+)|([`\"])((?:\\6\\6|[^\\6])+)\\6)$/;\n\tstatic moveRe = /^SET\\s+SCHEMA\\s+(?:(\\w+)|([`\"])((?:\\2\\2|[^\\2])+)\\2)$/;\n\tstatic dropRe = /^DROP\\s+(COLUMN\\s+|CONSTRAINT\\s+|PRIMARY\\s+KEY|FOREIGN\\s+KEY\\s+|CHECK\\s+|INDEX\\s+|KEY\\s+)?(IF\\s+EXISTS\\s+)?(?:(\\w+)|([`\"])((?:\\4\\4|[^\\3])+)\\4)?(?:\\s+(RESTRICT|CASCADE))?$/;\n\tstatic addRe = /^ADD\\s+(COLUMN\\s+)?(IF\\s+NOT\\s+EXISTS\\s+)?([\\s\\S]+)$/;\n\tstatic changeRe = /^(CHANGE|MODIFY)\\s+COLUMN\\s+(?:(\\w+)|([`\"])((?:\\3\\3|[^\\3])+?)\\3)\\s+([\\s\\S]+)$/;\n\tstatic alterRe = /^ALTER\\s+(?:(COLUMN|CONSTRAINT|CHECK|INDEX|KEY)\\s+)?(?:(\\w+)|([`\"])((?:\\3\\3|[^\\3])+?)\\3)\\s+(?:(ADD|DROP|(?:SET\\s+DATA\\s+)?TYPE|SET)\\s+(.+)(IF\\s+EXISTS)?$|(VISIBLE|(?:NOT\\s+)?INVISIBLE|NOT\\s+ENFORCED|ENFORCED|DEFERRABLE|NOT\\s+DEFERRABLE|INITIALLY\\s+DEFERRED|INITIALLY\\s+IMMEDIATE))/;\n}", "\nimport Node from \"../../abstracts/Node.js\";\nimport AbstractNode from \"./AbstractNode.js\";\n\nexport default class AbstractStatementNode extends AbstractNode {\n\n\tstatic Node = Node;\n\n\t/**\n\t * Instance properties\n\t */\n\tBASENAME;\n\t$BASENAME;\n\n    /**\n\t * @inheritdoc\n\t */\n\tget statementNode() { return this }\n\n    /**\n\t * @inheritdoc\n\t */\n    connectedNodeCallback(node) {}\n\n\t/**\n\t * Returns name or sets basename\n\t * \n\t * @param Void|String basename\n\t * \n\t * @returns String\n\t */\n\tbasename(basename) {\n\t\tif (!arguments.length) return this[this.smartKey('BASENAME')];\n        return (this[this.smartKey('BASENAME', true)] = basename, this);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...(this.BASENAME ? { basename: this.BASENAME } : {}),\n\t\t\t...(this.$BASENAME ? { $basename: this.$BASENAME } : {}),\n\t\t\t...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json, callback = null) {\n\t\tif ((json?.basename && typeof json.basename !== 'string') || (json.$basename && typeof json.$basename !== 'string')) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = callback ? callback() : new this(context);\n\t\t\tinstance.hardSet(() => instance.basename(json.basename));\n\t\t\tinstance.hardSet(json.$basename, val => instance.basename(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport PrimaryKey1 from \"./PrimaryKey1.js\";\n\nexport default class PrimaryKey2 extends PrimaryKey1 {\n\n    /**\n\t * Instance properties\n\t */\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the constraint columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n        if (!json?.columns?.length) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = (new this(context)).columns(json.columns);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ super.stringify() } (${ this.autoEsc(this.columns()).join(', ') })`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr, parseCallback) {\n\t\tconst [ $expr, columnsExpr ] = Lexer.split(expr, []);\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\treturn instance.columns(this.parseColumns(context, columnsExpr));\n    }\n}", "\nimport Lexer from '../../Lexer.js';\nimport ForeignKey1 from './ForeignKey1.js';\n\nexport default class ForeignKey2 extends ForeignKey1 {\n\n    /**\n\t * Instance properties\n\t */\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the constraint columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n        if (!json?.columns?.length) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = (new this(context)).columns(json.columns);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() {\n\t\tconst namePart = this.stringifyName();\n\t\t// ---------- So that super.stringify() does not process that\n\t\tconst name = this.NAME;\n\t\tconst $name = this.$NAME;\n\t\tthis.NAME = null;\n\t\tthis.$NAME = null;\n\t\t// ----------\n\t\tconst sql = `${ namePart }FOREIGN KEY (${ this.autoEsc(this.columns()).join(', ') }) ${ super.stringify() }`;\n\t\t// ---------- Restoration\n\t\tthis.NAME = name;\n\t\tthis.$NAME = $name;\n\t\t// ----------\n\t\treturn sql;\n\t}\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr, parseCallback) {\n\t\tconst { name = '', expr: $expr } = this.parseName(context, expr, true);\n\t\tif (!$expr || !/^FOREIGN\\s+KEY/i.test($expr)) return; // Not a constraint\n\t\tconst [ , columnsExpr, ...rest ] = Lexer.split($expr, []);\n\t\tconst instance = super.parse(context, rest.join('').trim(), parseCallback);\n\t\treturn instance.name(name).columns(this.parseColumns(context, columnsExpr));\n    }\n}", "\nimport Lexer from '../../Lexer.js';\nimport UniqueKey1 from \"./UniqueKey1.js\";\n\nexport default class UniqueKey2 extends UniqueKey1 {\n\n    /**\n\t * Instance properties\n\t */\n\tCOLUMNS = [];\n\t$COLUMNS = [];\n\n    /**\n     * @var Array\n     */\n    static get WRITABLE_PROPS() { return ['COLUMNS'].concat(super.WRITABLE_PROPS); }\n\n\t/**\n\t * Sets/gets the constraint columns,\n\t * \n\t * @param Void|Array columns\n\t * \n\t * @returns this\n\t */\n\tcolumns(columns) {\n\t\tif (!arguments.length) return this[this.smartKey('COLUMNS')];\n\t\treturn (this[this.smartKey('COLUMNS', true)] = [].concat(columns), this);\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tcolumns: this.COLUMNS,\n\t\t\t...(this.$COLUMNS.length ? { $columns: this.$COLUMNS } : {}),\n            ...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!json?.columns?.length) return;\n        return super.fromJson(context, json, () => {\n\t\t\tconst instance = (new this(context)).columns(json.columns);\n\t\t\tinstance.hardSet(json.$columns, val => instance.columns(val));\n\t\t\treturn instance;\n\t\t});\n\t}\n\n    /**\n     * @returns String\n     */\n    stringify() { return `${ super.stringify() } (${ this.autoEsc(this.columns()).join(', ') })`; }\n\n    /**\n     * @returns Object\n     */\n    static parse(context, expr, parseCallback) {\n\t\tconst [ $expr, columnsExpr ] = Lexer.split(expr, []);\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\treturn instance.columns(this.parseColumns(context, columnsExpr));\n    }\n}", "\nimport Lexer from '../Lexer.js';\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport AlterTable from '../alter/AlterTable.js';\nimport AbstractStatementNode from './abstracts/AbstractStatementNode.js';\nimport AbstractConstraint from './constraints/AbstractConstraint.js';\nimport ForeignKey1 from './constraints/ForeignKey1.js';\nimport PrimaryKey2 from './constraints/PrimaryKey2.js';\nimport ForeignKey2 from './constraints/ForeignKey2.js';\nimport UniqueKey2 from './constraints/UniqueKey2.js';\nimport Check from './constraints/Check.js';\nimport Column from './Column.js';\nimport Index from './Index.js';\t\t\n\nexport default class CreateTable extends AbstractStatementNode {\n\n\t/**\n\t * Instance props.\n\t */\n\tCOLUMNS = [];\n\tCONSTRAINTS = [];\n\tINDEXES = [];\n\n\t/**\n\t * Other props\n\t */\n\tNODES = new Set;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get WRITABLE_PROPS() { return ['BASENAME'].concat(super.WRITABLE_PROPS); }\n\tstatic get SUBTREE_PROPS() { return ['COLUMNS', 'CONSTRAINTS', 'INDEXES']; }\n\n\t/**\n\t * @var Array\n\t */\n\tstatic CONSTRAINT_TYPES = [PrimaryKey2,ForeignKey2,UniqueKey2,Check];\n\n    /**\n\t * @inheritdoc\n\t */\n    connectedNodeCallback(node) {\n\t\tif ([Column, AbstractConstraint, Index].some(x => node instanceof x)) this.NODES.add(node);\n\t}\n\n    /**\n     * PRIMARY_KEY\n     */\n    primaryKey() {\n\t\treturn this.CONSTRAINTS.find(cons => cons.TYPE === 'PRIMARY_KEY') \n\t\t|| this.COLUMNS.reduce((pk, col) => pk || col.primaryKey(), null);\n \t}\n\n\t/**\n\t * Returns a column or adds a column to the schema,\n\t * \n\t * @param String|Column column\n\t * \n\t * @returns Any\n\t */\n\tcolumn(column) {\n\t\tif (typeof column === 'string') return this.COLUMNS.find(col => col.name() === column);\n\t\treturn (this.build('COLUMNS', [column], Column), this);\n\t}\n\n\t/**\n\t * Returns a constraint or adds a constraint to the schema,\n\t * \n\t * @param String|PrimaryKey2,ForeignKey2,UniqueKey2,Check constraint\n\t * \n\t * @returns Any\n\t */\n\tconstraint(constraint) {\n\t\tif (typeof constraint === 'string') return this.CONSTRAINTS.find(cons => cons.name() === constraint);\n\t\treturn (this.build('CONSTRAINTS', [constraint], this.constructor.CONSTRAINT_TYPES), this);\n\t}\n\n\t/**\n\t * Returns a constraint or adds a constraint to the schema,\n\t * \n\t * @param String|Index index\n\t * \n\t * @returns Any\n\t */\n\tindex(index) {\n\t\tif (typeof index === 'string') return this.INDEXES.find(idx => idx.name() === index);\n\t\treturn (this.build('INDEXES', [index], Index), this);\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param AlterTable altInstance\n\t * \n\t * @returns this\n\t */\n\talterWith(altInstance) {\n\t\t// -----\n\t\tconst getNode = (reference, ifExists = false) => {\n\t\t\tconst node = this.NODES.find(node => {\n\t\t\t\treturn (reference.kind === 'COLUMN' ? node instanceof Column : (reference.kind === 'CONSTRAINT' ? node instanceof AbstractConstraint : node.TYPE === reference.kind/* constraint or index */))\n\t\t\t\t&& (!reference.name ? reference.kind === 'PRIMARY_KEY'/* mysql only */ : node.NAME === reference.name)\n\t\t\t});\n\t\t\tif (!node && !ifExists) throw new Error(`${ reference.kind }${ reference.name ? ` \"${ reference.name }\"` : '' } does not exist.`);\n\t\t\treturn node;\n\t\t}\n\t\t// -----\n\t\tfor (const action of altInstance.ACTIONS) {\n\t\t\tif (action.TYPE === 'RENAME') {\n\t\t\t\tthis.name(action.ARGUMENT);\n\t\t\t} else if (action.TYPE === 'MOVE') {\n\t\t\t\tthis.basename(action.ARGUMENT);\n\t\t\t} else if (action.TYPE === 'DROP') {\n\t\t\t\tconst node = getNode(action.ARGUMENT, action.hasFlag('IF_EXISTS'));\n\t\t\t\tnode?.status('DOWN');\n\t\t\t} else if (action.TYPE === 'NEW') {\n\t\t\t\tif (action.ARGUMENT instanceof AbstractConstraint) {\n\t\t\t\t\tif (action.ARGUMENT.COLUMNS.length === 1) {\n\t\t\t\t\t\tgetNode({ kind: 'COLUMN', name: action.ARGUMENT.COLUMNS[0] }).constraint(action.ARGUMENT.TYPE, action.ARGUMENT.toJson());\n\t\t\t\t\t} else this.constraint(action.ARGUMENT.toJson());\n\t\t\t\t} else if (action.ARGUMENT instanceof Index) {\n\t\t\t\t\tthis.index(action.ARGUMENT.toJson());\n\t\t\t\t} else if (!action.hasFlag('IF_NOT_EXISTS') || !getNode({ kind: 'COLUMN', name: action.ARGUMENT.NAME }, true)) {\n\t\t\t\t\tthis.column(action.ARGUMENT.toJson());\n\t\t\t\t}\n\t\t\t} else if (action.TYPE === 'CHANGE') {\n\t\t\t\tconst node = getNode(action.REFERENCE);\n\t\t\t\tnode.status('UP', () => {\n\t\t\t\t\tif (action.ARGUMENT.name() !== node.name()) node.name(action.ARGUMENT.name());\n\t\t\t\t\tnode.type(action.ARGUMENT.type().toJson());\n\t\t\t\t});\n\t\t\t\tfor (const cons of action.ARGUMENT.CONSTRAINTS.filter(cons => !['PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE_KEY', 'CHECK'].includes(cons.TYPE))) {\n\t\t\t\t\tconst existing = node.constraint(cons.TYPE);\n\t\t\t\t\tif (existing) {\n\t\t\t\t\t\texisting.detail(cons.DETAIL);\n\t\t\t\t\t} else node.constraint(cons.toJson());\n\t\t\t\t}\n\t\t\t} else if (action.TYPE === 'ALTER') {\n\t\t\t\tconst { REFERENCE: reference, ARGUMENT: subAction } = action;\n\t\t\t\tconst node = getNode(reference, action.hasFlag('IF_EXISTS'));\n\t\t\t\tif (!node) continue;\n\t\t\t\tif (subAction.TYPE === 'RENAME') {\n\t\t\t\t\tnode.name(subAction.ARGUMENT);\n\t\t\t\t} else if (subAction.TYPE === 'SET' && subAction.ARGUMENT instanceof DataType) {\n\t\t\t\t\tnode.type(subAction.ARGUMENT.toJson());\n\t\t\t\t} else if (Column.CONSTRAINT_TYPES.some(Type => subAction.ARGUMENT instanceof Type)) {\n\t\t\t\t\tconst existing = node.constraint(subAction.ARGUMENT.TYPE);\n\t\t\t\t\tif (subAction.ARGUMENT.TYPE === 'IDENTITY') {\n\t\t\t\t\t\tif (subAction.TYPE === 'SET' && !existing) throw new Error(`IDENTITY constraint has not been created in ${ node.NAME }`);\n\t\t\t\t\t\tif (subAction.TYPE === 'NEW' && existing) throw new Error(`IDENTITY constraint already exists in ${ node.NAME }`);\n\t\t\t\t\t} else if (subAction.ARGUMENT.TYPE === 'EXPRESSION' && subAction.TYPE !== 'DROP') {\n\t\t\t\t\t\tthrow new Error(`Cannot add EXPRESSION constraint after column creation`);\n\t\t\t\t\t}\n\t\t\t\t\tif (existing) {\n\t\t\t\t\t\texisting.detail(subAction.ARGUMENT.DETAIL);\n\t\t\t\t\t} else node.constraint(subAction.ARGUMENT.toJson());\n\t\t\t\t} else if (subAction.TYPE === 'DROP' && ['IDENTITY', 'EXPRESSION', 'DEFAULT', 'NOT_NULL'].includes(subAction.ARGUMENT)) {\n\t\t\t\t\tconst existing = node.constraint(subAction.ARGUMENT);\n\t\t\t\t\tif (existing) existing.status('DOWN');\n\t\t\t\t\telse if(!action.hasFlag('IF_EXISTS')/* Postgres IDENTITY|EXPRESSION */) throw new Error(`Cannot drop ${ subAction.ARGUMENT }; does not exist.`);\n\t\t\t\t} else if (['CONSTRAINT','INDEX'].includes(reference.kind)) ;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tgetAlt() {\n\t\tconst instance = (new AlterTable(this.CONTEXT)).name(this.NAME).basename(this.BASENAME);\n\t\tif (this.$NAME && this.NAME && this.$NAME !== this.NAME) {\n\t\t\tinstance.addRename(this.$NAME);\n\t\t}\n\t\tif (this.$BASENAME && this.BASENAME && this.$BASENAME !== this.BASENAME) {\n\t\t\tinstance.addMove(this.$BASENAME);\n\t\t}\n\t\tconst constraintDirty = (cons, includingName = false) => (cons.status() !== 'UP' || ['$EXPR','$ALWAYS','$TARGET_TABLE','$TARGET_COLUMNS','$MATCH_RULE','$UPDATE_RULE','$DELETE_RULE'].concat(includingName ? '$NAME' : []).some(k => /*exists*/k in cons && /*not empty*/(Array.isArray(cons[k]) ? cons[k].length : ![undefined, null].includes(cons[k])) && /*different*/!isSame(cons[k.slice(1)], cons[k])));\n\t\tfor (const col of this.COLUMNS) {\n\t\t\tconst columnRef = { kind: 'COLUMN', name: col.NAME };\n\t\t\tif (col.status() === 'UP') {\n\t\t\t\tif (this.params.dialect === 'mysql') {\n\t\t\t\t\t// // Column name or type changed, or these attrs changed? Use MySQL CHANGE clause?\n\t\t\t\t\tif ((col.$TYPE && !isSame(col.$TYPE.toJson(), col.TYPE.toJson()))\n\t\t\t\t\t|| (col.CONSTRAINTS.some(cons => ['AUTO_INCREMENT', 'EXPRESSION', 'NOT_NULL'].includes(cons.TYPE) && constraintDirty(cons, true)))) {\n\t\t\t\t\t\tconst columnClone = col.clone();\n\t\t\t\t\t\tcolumnClone.CONSTRAINTS = columnClone.CONSTRAINTS.filter(cons => ['AUTO_INCREMENT', 'EXPRESSION', 'NOT_NULL', 'DEFAULT'].includes(cons.TYPE));\n\t\t\t\t\t\tinstance.addChange(columnRef, columnClone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst consDefault = col.CONSTRAINTS.find(cons => cons.TYPE === 'DEFAULT' && constraintDirty(cons, true));\n\t\t\t\t\t\tif (consDefault) instance.addAlt(columnRef, a => consDefault.status() === 'DOWN' ? a.drop(consDefault.TYPE) : a.set(consDefault));\n\t\t\t\t\t\t// Column rename? Must come last!!!\n\t\t\t\t\t\tif (col.$NAME && col.$NAME !== col.NAME) {\n\t\t\t\t\t\t\tinstance.addAlt({ kind: 'COLUMN', name: col.NAME }, a => a.rename(col.$NAME) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Column type change?\n\t\t\t\t\tif (col.$TYPE && !isSame(col.$TYPE.toJson(), col.TYPE.toJson())) {\n\t\t\t\t\t\tinstance.addAlt(columnRef, a => a.set(col.$TYPE) );\n\t\t\t\t\t}\n\t\t\t\t\t// Constraints level1 changed?\n\t\t\t\t\tconst constraints1 = col.CONSTRAINTS.filter(cons => ['IDENTITY', 'EXPRESSION', 'NOT_NULL', 'DEFAULT'].includes(cons.TYPE) && constraintDirty(cons, true));\n\t\t\t\t\tfor (const cons of constraints1) {\n\t\t\t\t\t\tif (cons.status() === 'UP' && cons.TYPE === 'IDENTITY') instance.addAlt(columnRef, a => a.drop('IDENTITY'));\n\t\t\t\t\t\tif (cons.status() !== 'DOWN' && cons.TYPE === 'EXPRESSION') throw new Error('EXPRESSION constraints cannot be added or modified after column creation.');\n\t\t\t\t\t\tinstance.addAlt(columnRef, a => cons.status() === 'DOWN' ? a.drop(cons.TYPE) : a[cons.TYPE === 'IDENTITY' ? 'new' : 'set'](cons));\n\t\t\t\t\t}\n\t\t\t\t\t// Column rename? Must come last!!!\n\t\t\t\t\tif (col.$NAME && col.$NAME !== col.NAME) {\n\t\t\t\t\t\tinstance.addAlt({ kind: 'COLUMN', name: col.NAME }, a => a.rename(col.$NAME) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Constraints level2 changed?\n\t\t\t\tconst constraints2 = col.CONSTRAINTS.filter(cons => ['PRIMARY_KEY', 'FOREIGN_KEY', 'UNIQUE_KEY', 'CHECK'].includes(cons.TYPE));\n\t\t\t\tfor (const cons of constraints2) {\n\t\t\t\t\tif (constraintDirty(cons)) {\n\t\t\t\t\t\tif (['UP', 'DOWN'].includes(cons.status())) instance.addDrop({ kind: cons.TYPE, name: cons.NAME });\n\t\t\t\t\t\tif (cons.status() !== 'DOWN') instance.addNew(CreateTable.CONSTRAINT_TYPES.find(Type => Type.TYPE === cons.TYPE).fromJson(instance, { ...cons.toJson(), columns: [col.statementNode.altsCascaded ? col.name() : col.NAME] }));\n\t\t\t\t\t} else if (cons.status() === 'UP' && cons.$NAME && cons.$NAME !== cons.NAME) {\n\t\t\t\t\t\tinstance.addAlt({ kind: 'CONSTRAINT', name: cons.NAME }, a => a.rename(cons.$NAME) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP COLUMN?\n\t\t\tif (col.status() === 'DOWN') {\n\t\t\t\tinstance.addDrop(columnRef);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD COLUMN\n\t\t\tinstance.addNew(Column.fromJson(instance, col.toJson()));\n\t\t}\n\t\tconst tableLevlConstraintDirty = cons => constraintDirty(cons) || (cons.$COLUMNS?.length && !isSame(cons.$COLUMNS, cons.COLUMNS));\n\t\tfor (const cons of this.CONSTRAINTS) {\n\t\t\tif (tableLevlConstraintDirty(cons)) {\n\t\t\t\tif (['UP', 'DOWN'].includes(cons.status())) instance.addDrop({ kind: cons.TYPE, name: cons.NAME });\n\t\t\t\tif (cons.status() !== 'DOWN') instance.addNew(CreateTable.CONSTRAINT_TYPES.find(Type => Type.TYPE === cons.TYPE).fromJson(instance, cons.toJson()));\n\t\t\t} else if (cons.status() === 'UP' && cons.$NAME && cons.$NAME !== cons.NAME) {\n\t\t\t\tinstance.addAlt({ kind: 'CONSTRAINT', name: cons.NAME }, a => a.rename(cons.$NAME) );\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tcascadeAlt() {\n\t\t// Normalize subtree statuses\n\t\tthis.status(this.status(), true);\n\t\tconst getAltType = node => node.dropped() ? 'DOWN' : (node.$NAME && node.$NAME !== node.NAME ? 'RENAME' : null);\n\t\t// We've been dropped or renamed?\n\t\tconst altType = getAltType(this);\n\t\tif (altType) {\n\t\t\t// TODO: Check with all tables and call updateTableReferences() on them\n\t\t}\n\t\t// A column in here was dropped or renamed?\n\t\tfor (const col of this.COLUMNS) {\n\t\t\tconst altType = getAltType(col);\n\t\t\tif (!altType) continue;\n\t\t\t// Check with our own references to columns\n\t\t\tfor (const cons of this.CONSTRAINTS) {\n\t\t\t\tif (cons instanceof Check) continue;\n\t\t\t\tconst targetList = cons.$COLUMNS.length ? cons.$COLUMNS : cons.COLUMNS;\n\t\t\t\tconst index = targetList.indexOf(col.NAME);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tif (altType === 'DOWN') targetList.splice(index, 1);\n\t\t\t\t\telse if (altType === 'RENAME') targetList[index] = col.$NAME;\n\t\t\t\t};\n\t\t\t}\n\t\t\t// TODO: Check with all tables and call updateColumnReferences() on them\n\t\t}\n\t\tthis.altsCascaded = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tupdateDatabaseReferences(db, altType) {\n\t\t// A database was dropped or renamed. We check with our own references to databases\n\t\tfor (const node of this.NODES) {\n\t\t\tif (!(node instanceof ForeignKey1)) continue;\n\t\t\tif (node.targetTable().basename() !== db.NAME) continue;\n\t\t\tif (altType === 'DOWN') node.status('DOWN');\n\t\t\telse if (altType === 'RENAME') node.targetTable().basename(db.$NAME);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tupdateTableReferences(tbl, altType) {\n\t\t// A table was dropped or renamed. We check with our own references to tables\n\t\tfor (const node of this.NODES) {\n\t\t\tif (!(node instanceof ForeignKey1)) continue;\n\t\t\tif (node.targetTable().basename() && tbl.basename() && node.targetTable().basename() !== tbl.basename()) continue;\n\t\t\tif (node.targetTable().name() === tbl.NAME) {\n\t\t\t\tif (altType === 'DOWN') node.status('DOWN');\n\t\t\t\telse if (altType === 'RENAME') node.targetTable().name(tbl.$NAME);\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tupdateColumnReferences(col, altType) {\n\t\t// A column somewhere was dropped or renamed. We check with our own references to columns\n\t\tfor (const node of this.NODES) {\n\t\t\tif (!(node instanceof ForeignKey1)) continue;\n\t\t\tif (node.targetTable().basename() && col.statementNode/* tbl */.basename() && node.targetTable().basename() !== col.statementNode/* tbl */.basename()) continue;\n\t\t\tif (node.targetTable().name() !== col.statementNode/* tbl */.name()) continue;\n\t\t\tconst targetList = cons.$TARGET_COLUMNS.length ? cons.$TARGET_COLUMNS : cons.TARGET_COLUMNS;\n\t\t\tconst index = targetList.indexOf(col.NAME);\n\t\t\tif (index > -1) {\n\t\t\t\tif (altType === 'DOWN') targetList.splice(index, 1);\n\t\t\t\telse if (altType === 'RENAME') targetList[index] = col.$NAME;\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        return {\n            columns: this.COLUMNS.map(column => column.toJson()),\n            constraints: this.CONSTRAINTS.map(constraint => constraint.toJson()),\n            indexes: this.INDEXES.map(index => index.toJson()),\n\t\t\t...super.toJson(),\n        }\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.columns) || ['constraints', 'indexes'].some(key => key in json && !Array.isArray(json[key]))) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = new this(context);\n\t\t\tfor (const col of json.columns) instance.column(col);\n\t\t\tfor (const cons of (json.constraints || [])) instance.constraint(cons);\n\t\t\tfor (const idx of (json.indexes || [])) instance.index(idx);\n\t\t\treturn instance;\n\t\t});\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst defs = [ this.COLUMNS.map(col => col.stringify()).join(',\\n\\t') ];\n\t\tconst constraints = this.CONSTRAINTS.slice(0);\n\t\tconst indexes = this.INDEXES.slice(0);\n\t\tif (this.params.dialect === 'mysql') {\n\t\t\tconstraints.push(...this.COLUMNS.reduce((constraints, col) => {\n\t\t\t\tconst constraint = col.foreignKey();\n\t\t\t\tif (constraint) return constraints.concat(ForeignKey2.fromJson(this, constraint.toJson()).columns([col.name()]));\n\t\t\t\treturn constraints;\n\t\t\t}, []));\n\t\t}\n\t\tif (constraints.length) { defs.push(constraints.map(cnst => cnst.stringify()).join(',\\n\\t')); }\n\t\tif (indexes.length) { defs.push(indexes.map(ndx => ndx.stringify()).join(',\\n\\t')); }\n\t\tconst basename = this.basename() || (this.CONTEXT instanceof this.constructor.Node ? this.CONTEXT.NAME/* DB won't have actually been renamed */ : this.CONTEXT?.name);\n\t\treturn `CREATE TABLE${ this.hasFlag('IF_NOT_EXISTS') ? ' IF NOT EXISTS' : '' } ${ this.autoEsc([basename, this.name()].filter(s => s)).join('.') } (\\n\\t${ defs.join(',\\n\\t') }\\n)`;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, ifNotExists, rest ] = /^CREATE\\s+TABLE\\s+(IF\\s+NOT\\s+EXISTS\\s+)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [ namePart, bodyPart ] = Lexer.split(rest, [], { limit: 2 });\n\t\tconst [tblName, dbName] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = (new this(context))\n\t\t\t.name(tblName)\n\t\t\t.basename(dbName);\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\tconst defs = Lexer.split(_unwrap(bodyPart, '(', ')'), [',']).map(def => {\n\t\t\treturn parseCallback(instance, def.trim(), [PrimaryKey2,ForeignKey2,UniqueKey2,Check,Index,Column]); // Note that Column must come last\n\t\t});\n\t\tfor (const def of defs) {\n\t\t\tif (def instanceof Column) instance.column(def);\n\t\t\telse if (def instanceof Index) instance.index(def);\n\t\t\telse instance.constraint(def);\n\t\t}\n\t\treturn instance;\n\t}\n}\n\n/**\n * \n * @param Any a \n * @param Any b \n * @returns \n */\nfunction isSame(a, b) {\n\tif (a === b) return true;\n\tif (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n\t\tconst $b = b.slice(0).sort();\n\t\treturn a.slice(0).sort().every((x, i) => isSame(x, $b[i]));\n\t}\n\tconst temp = {};\n\tif (typeof a === 'object' && a && typeof b === 'object' && b && (temp.keys_a = Object.keys(a)).length === (temp.keys_b = Object.keys(b)).length) {\n\t\treturn temp.keys_a.reduce((prev, k) => prev && isSame(a[k], b[k]), true);\n\t}\n\treturn false;\n}", "\nimport Lexer from '../Lexer.js';\nimport AbstractStatementNode from './abstracts/AbstractStatementNode.js';\nimport Action from './Action.js';\n\nexport default class AlterDatabase extends AbstractStatementNode {\n\n\t/**\n\t * Adds a \"OWNER TO\" action to the instance.\n\t * \n\t * @param String newOwner\n\t * \n\t * @returns Action\n\t */\n\taddOwner(newOwner) { return this.build('ACTIONS', [newOwner], Action, 'owner'); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tif (!this.ACTIONS.length) return '';\n\t\tlet stmts = [], rename0, move0;\n\t\tfor (const action of this.ACTIONS) {\n\t\t\t// RENAME TO...\n\t\t\tif (action.TYPE === 'RENAME') {\n\t\t\t\trename0 = `RENAME TO ${ this.autoEsc(action.ARGUMENT) }`;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// MOVE TO...\n\t\t\tif (action.TYPE === 'MOVE') {\n\t\t\t\tmove0 = `SET TABLESPACE ${ this.autoEsc(action.ARGUMENT) }`;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// DROP\n\t\t\tif (action.TYPE === 'DROP') {\n\t\t\t\t// All flags are postgres'\n\t\t\t\tconst ifExists = action.hasFlag('IF_EXISTS');\n\t\t\t\tconst restrictOrCascadeFlag = action.getFlag('RESTRICT') || action.getFlag('CASCADE');\n\t\t\t\tstmts.push(`DROP TABLE${ ifExists ? ' IF EXISTS' : '' } ${ this.autoEsc([].concat(action.ARGUMENT.name)).join('.') }${ restrictOrCascadeFlag ? ` ${ restrictOrCascadeFlag }` : '' }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ADD\n\t\t\tif (action.TYPE === 'NEW') {\n\t\t\t\tstmts.push(action.ARGUMENT+'');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// ALTER\n\t\t\tif (action.TYPE === 'ALTER') {\n\t\t\t\tconst { REFERENCE: reference, ARGUMENT: subAction } = action;\n\t\t\t\tstmts.push(subAction.ARGUMENT+'');\n\t\t\t}\n\t\t}\n\t\tconst sql = [ ...stmts ];\n\t\tif (rename0) sql.push(`ALTER SCHEMA ${ this.autoEsc(this.NAME) }\\n\\t${ rename0 }`);\n\t\tif (move0) sql.push(`ALTER SCHEMA ${ this.autoEsc(rename0 ? this.ACTIONS.find(action => action.TYPE === 'RENAME').ARGUMENT : this.NAME) }\\n\\t${ move0 }`);\n\t\treturn sql.join(';\\n');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, rest ] = /^ALTER\\s+DATABASE\\s+([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [ namePart, bodyPart ] = Lexer.split(rest, ['\\\\s+'], { useRegex: true, limit: 1 });\n\t\tconst [ dbName ] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!dbName) return;\n\t\tconst instance = (new this(context)).name(dbName);\n\t\t// ----------\n\t\tconst regex = name => new RegExp(`${ this[ name ].source }`, 'i');\n\t\t// RENAME ... TO ...\n\t\tconst [ renameMatch, newNodeNameUnescaped_a, /*esc*/, newNodeNameEscaped_a ] = regex('renameRe').exec(bodyPart) || [];\n\t\tif (renameMatch) {\n\t\t\tconst newNodeName = newNodeNameUnescaped_a || this.autoUnesc(instance, newNodeNameEscaped_a);\n\t\t\tinstance.addRename(newNodeName);\n\t\t\treturn instance;\n\t\t}\n\t\t// MOVE ... TO ...\n\t\tconst [ moveMatch, newSchemaUnescaped, /*esc*/, newSchemaEscaped ] = regex('moveRe').exec(bodyPart) || [];\n\t\tif (moveMatch) {\n\t\t\tinstance.addMove(newSchemaUnescaped || this.autoUnesc(instance, newSchemaEscaped));\n\t\t\treturn instance;\n\t\t}\n\t\t// OWNER ... TO ...\n\t\tconst [ ownerMatch, newOwnerUnescaped, /*esc*/, newOwnerEscaped ] = regex('ownerRe').exec(bodyPart) || [];\n\t\tif (ownerMatch) {\n\t\t\tinstance.addOwner(newOwnerUnescaped || this.autoUnesc(instance, newOwnerEscaped));\n\t\t\treturn instance;\n\t\t}\n\t\treturn instance;\n\t}\n\n    /**\n\t * @property RegExp\n\t */\n\tstatic renameRe = /^RENAME\\s+TO\\s+(?:(\\w+)|([`\"])((?:\\2\\2|[^\\2])+)\\2)$/;\n\tstatic moveRe = /^SET\\s+TABLESPACE\\s+(?:(\\w+)|([`\"])((?:\\2\\2|[^\\2])+)\\2)$/;\n\tstatic ownerRe = /^OWNER\\s+TO\\s+(?:(\\w+)|([`\"])((?:\\2\\2|[^\\2])+)\\2)$/;\n\n}", "\nimport AlterDatabase from '../alter/AlterDatabase.js';\nimport AbstractStatementNode from './abstracts/AbstractStatementNode.js';\nimport CreateTable from './CreateTable.js';\n\nexport default class CreateDatabase extends AbstractStatementNode {\n\n\t/**\n\t * Lists\n\t */\n\tTABLES = [];\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get SUBTREE_PROPS() { return ['TABLES']; }\n\n\t/**\n\t * Returns a table or adds a table to the schema,\n\t * \n\t * @param String|CreateTable table\n\t * \n\t * @returns Any\n\t */\n\ttable(table) {\n\t\tif (typeof table === 'string') return this.TABLES.find(tbl => tbl.name() === table);\n\t\treturn (this.build('TABLES', [table], CreateTable), this);\n\t}\n\n\t/**\n\t * Apply changes to this schema.\n\t * \n\t * @param AlterDatabase altInstance\n\t * \n\t * @returns this\n\t */\n\talterWith(altInstance) {\n\t\t// -----\n\t\tconst getTable = (name, ifExists = false) => {\n\t\t\tconst node = this.table(name);\n\t\t\tif (!node && !ifExists) throw new Error(`TABLE ${ name } does not exist.`);\n\t\t\treturn node;\n\t\t}\n\t\t// -----\n\t\tfor (const action of altInstance.ACTIONS) {\n\t\t\tif (action.TYPE === 'RENAME') {\n\t\t\t\tthis.name(action.ARGUMENT);\n\t\t\t} else if (action.TYPE === 'MOVE') {\n\t\t\t\tthis.basename(action.ARGUMENT);\n\t\t\t} else if (action.TYPE === 'DROP') {\n\t\t\t\tconst node = getTable(action.ARGUMENT, action.hasFlag('IF_EXISTS'));\n\t\t\t\tnode?.status('DOWN');\n\t\t\t} else if (action.TYPE === 'NEW') {\n\t\t\t\tif (!action.hasFlag('IF_NOT_EXISTS') || !getTable(action.ARGUMENT.name(), true)) {\n\t\t\t\t\tthis.table(action.ARGUMENT.toJson());\n\t\t\t\t}\n\t\t\t} else if (action.TYPE === 'ALTER') {\n\t\t\t\tconst node = getTable(action.REFERENCE, action.hasFlag('IF_EXISTS'));\n\t\t\t\tif (!node) continue;\n\t\t\t\tnode.alter(action.ARGUMENT);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tgetAlt() {\n\t\tconst instance = (new AlterDatabase(this.CONTEXT)).name(this.NAME).basename(this.BASENAME);\n\t\tif (this.$NAME && this.NAME && this.$NAME !== this.NAME) {\n\t\t\tinstance.addRename(this.$NAME);\n\t\t}\n\t\tif (this.$BASENAME && this.BASENAME && this.$BASENAME !== this.BASENAME) {\n\t\t\tinstance.addMove(this.$BASENAME);\n\t\t}\n\t\tfor (const tbl of this.TABLES) {\n\t\t\tif (tbl.status() === 'UP') {\n\t\t\t\tconst alt = tbl.getAlt();\n\t\t\t\tif (alt.ACTIONS.length) instance.addAlt({ name: tbl.NAME, kind: 'TABLE' }, a => a.set(alt));\n\t\t\t} else if (tbl.status() === 'DOWN') {\n\t\t\t\tinstance.addDrop({ name: [tbl.BASENAME || this.NAME, tbl.NAME], kind: 'TABLE' });\n\t\t\t} else {\n\t\t\t\tinstance.addNew(tbl.clone());\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tcascadeAlt() {\n\t\t// Normalize subtree statuses\n\t\tthis.status(this.status(), true);\n\t\t// We've been dropped or renamed?\n\t\tconst altType = this.dropped() ? 'DOWN' : (this.$NAME && this.$NAME !== this.NAME ? 'RENAME' : null);\n\t\tif (altType) {\n\t\t\t// TODO: Check with all tables and call updateDatabaseReferences() on them\n\t\t}\n\t\t// Ask tables to also cascadeAlt()\n\t\tfor (const tbl of this.TABLES) tbl.cascadeAlt();\n\t\tthis.altsCascaded = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n        return {\n\t\t\t...super.toJson(),\n            tables: this.TABLES.map(table => table.toJson()),\n        }\n    }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (['tables'].some(key => key in json && !Array.isArray(json[key]))) return;\n\t\treturn super.fromJson(context, json, () => {\n\t\t\tconst instance = new this(context);\n\t\t\tfor (const tbl of json.tables || []) instance.table(tbl);\n\t\t\treturn instance;\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = [`CREATE SCHEMA${ this.hasFlag('IF_NOT_EXISTS') ? ' IF NOT EXISTS' : '' } ${ this.autoEsc(this.name()) }`];\n\t\treturn [ ...sql, ...this.TABLES ].join(';\\n');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, ifNotExists, namePart ] = /^CREATE\\s+DATABASE\\s+(IF\\s+NOT\\s+EXISTS\\s+)?(.+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [name] = this.parseIdent(context, namePart.trim(), true) || [];\n\t\tif (!name) return;\n\t\tconst instance = (new this(context)).name(name);\n\t\tif (ifNotExists) instance.withFlag('IF_NOT_EXISTS');\n\t\treturn instance;\n\t}\n}", "\nimport StatementNode from '../abstracts/StatementNode.js';\n\nexport default class DropTable extends StatementNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tBASENAME;\n\n\t/**\n\t * Returns name or sets name.\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this.NAME;\n\t\treturn (this.NAME = name, this);\n\t}\n\n\t/**\n\t * Returns basename or sets basename.\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tbasename(basename) {\n\t\tif (!arguments.length) return this.BASENAME;\n\t\treturn (this.BASENAME = basename, this);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.NAME, basename: this.BASENAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\treturn (new this(context)).name(json.name).basename(json.basename).withFlag(...(json.flags || []));\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `DROP TABLE${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc([this.BASENAME, this.NAME].filter(s => s)).join('.') }${ this.hasFlag('CASCADE') ? ' CASCADE' : '' }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifExists, namePart, cascade, namePartAlt ] = /^DROP\\s+TABLE\\s+(IF\\s+EXISTS\\s+)?(?:(.+)\\s+(CASCADE)$|(.+)$)/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [tblName, dbName] = this.parseIdent(context, (namePart || namePartAlt).trim(), true) || [];\n\t\tif (!tblName) return;\n\t\tconst instance = (new this(context)).name(tblName).basename(dbName);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tif (cascade) instance.withFlag('CASCADE');\n\t\treturn instance;\n\t}\n\n}", "\nimport StatementNode from '../abstracts/StatementNode.js';\n\nexport default class DropDatabase extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\n\t/**\n\t * Returns name or sets name.\n\t * \n\t * @param Void|String name\n\t * \n\t * @returns String\n\t */\n\tname(name) {\n\t\tif (!arguments.length) return this.NAME;\n\t\treturn (this.NAME = name, this);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { name: this.NAME, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.name !== 'string') return;\n\t\treturn (new this(context)).name(json.name).withFlag(...(json.flags || []));;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `DROP SCHEMA${ this.hasFlag('IF_EXISTS') ? ' IF EXISTS' : '' } ${ this.autoEsc(this.NAME) }${ this.hasFlag('CASCADE') ? ' CASCADE' : '' }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst [ match, ifExists, namePart, cascade, namePartAlt ] = /^DROP\\s+DATABASE\\s+(IF\\s+EXISTS\\s+)?(?:(.+)\\s+(CASCADE)$|(.+)$)/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst [dbName] = this.parseIdent(context, (namePart || namePartAlt).trim(), true) || [];\n\t\tif (!dbName) return;\n\t\tconst instance = (new this(context)).name(dbName);\n\t\tif (ifExists) instance.withFlag('IF_EXISTS');\n\t\tif (cascade) instance.withFlag('CASCADE');\n\t\treturn instance;\n\t}\n\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class WhenClause extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tCONDITION = null;\r\n\tCONSEQUENCE = null;\r\n\r\n\t/**\r\n\t * Sets the condition.\r\n\t * \r\n\t * @param Any condition\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcondition(condition) { return (this.build('CONDITION', [condition], Expr.Types), this); }\r\n\r\n\t/**\r\n\t * Sets the consequence.\r\n\t * \r\n\t * @param Any consequence\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tthen_(consequence) { return this.build('CONSEQUENCE', [consequence], Expr.Types); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tcondition: this.CONDITION?.toJson(),\r\n\t\t\tconsequence: this.CONSEQUENCE?.toJson(),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\t// json could be undefined or null, or json.condition could be set but 9\r\n\t\tif (!(typeof json === 'object' && json && 'condition' in json)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.condition(json.condition);\r\n\t\tinstance.then_(json.consequence);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.CONDITION } THEN ${ this.CONSEQUENCE }`; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst tokens = Lexer.split(expr, [`\\\\s+THEN\\\\s+`], { useRegex: 'i' });\r\n\t\tif (tokens.length !== 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst [condition, consequence] = tokens.map($expr => parseCallback(instance, $expr.trim()));\r\n\t\tinstance.condition(condition).then_(consequence);\r\n\t\treturn instance;\r\n\t}\r\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport WhenClause from './WhenClause.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class CaseConstruct extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tBASE_VALUE;\r\n\tWHEN_CLAUSES = [];\r\n\tELSE_CLAUSE;\r\n\r\n\t/**\r\n\t * Sets a given value for the cases.\r\n\t * \r\n\t * @param Any baseValue\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcompare(baseValue) {\r\n\t\tif (this.WHEN_CLAUSES.length || this.ELSE_CLAUSE) throw new Error(`A \"case\" clause must come before any \"when\" or \"else\" clauses.`);\r\n\t\treturn this.build('BASE_VALUE', [baseValue], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a \"when\" expression\r\n\t * \r\n\t * @param Any whenExpr\r\n\t * \r\n\t * @returns WhenClause\r\n\t */\r\n\twhen(whenExpr) {\r\n\t\tif (this.ELSE_CLAUSE) throw new Error(`A \"when\" clause cannot come after an \"else\" clause.`);\r\n\t\tthis.build('WHEN_CLAUSES', [whenExpr], WhenClause, 'condition');\r\n\t\treturn this.WHEN_CLAUSES[this.WHEN_CLAUSES.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an ELSE clause to the cases.\r\n\t * \r\n\t * @param Any elseClause\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\telse(elseClause) {\r\n\t\tif (!this.WHEN_CLAUSES.length) throw new Error(`An \"else\" clause cannot come before \"when\" clauses.`);\r\n\t\treturn this.build('ELSE_CLAUSE', [elseClause], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tbase_value: this.BASE_VALUE?.toJson(),\r\n\t\t\twhen_clauses: this.WHEN_CLAUSES.map(c => c.toJson()),\r\n\t\t\telse_clause: this.ELSE_CLAUSE?.toJson(),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.when_clauses)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tif (json.base_value) instance.compare(json.base_value);\r\n\t\tfor (const whenClause of json.when_clauses) instance.when(whenClause);\r\n\t\tif (json.else_clause) instance.else(json.else_clause);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst sql = [];\r\n\t\tif (this.BASE_VALUE) sql.push(this.BASE_VALUE);\r\n\t\tsql.push(`WHEN ${ this.WHEN_CLAUSES.join(' WHEN ') }`);\r\n\t\tif (this.ELSE_CLAUSE) sql.push('ELSE', this.ELSE_CLAUSE);\r\n\t\treturn `CASE ${ sql.join(' ') } END${ this.params.dialect === 'mysql' ? ' CASE' : '' }`;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst [caseMatch,caseConstruct] = expr.match(/^CASE\\s+([\\s\\S]*)\\s+END(\\s+CASE)?$/i) || [];\r\n\t\tif (!caseMatch) return;\r\n\t\tconst { tokens: [ baseValue, ...assertions ], matches: clauses } = Lexer.lex(caseConstruct, ['WHEN','ELSE'], { useRegex: 'i' });\r\n\t\tconst instance = new this(context);\r\n\t\t// Has given value?\r\n\t\tif (baseValue.trim()) instance.compare(parseCallback(instance, baseValue.trim()));\r\n\t\t// On to the cases\r\n\t\tfor (const clause of clauses) {\r\n\t\t\tconst assertStmt = assertions.shift();\r\n\t\t\tif (/ELSE/i.test(clause)) {\r\n\t\t\t\tinstance.else(parseCallback(instance, assertStmt.trim()));\r\n\t\t\t} else if (/WHEN/i.test(clause)) {\r\n\t\t\t\tinstance.when(parseCallback(instance, assertStmt.trim(), [WhenClause]));\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Can't have multiple \"${ clause }\" clauses in a CASE construct.`);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdocs\r\n\t */\r\n\tstatic factoryMethods = { case: context => new this(context) };\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Expr from './abstracts/Expr.js';\r\n\r\nexport default class TypeCast extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERAND = null;\r\n\tTYPE = '';\r\n\tSYNTAX2 = false;\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tcast(operand, type, syntax2 = false) {\r\n\t\tthis.TYPE = type;\r\n\t\tthis.SYNTAX2 = syntax2;\r\n\t\treturn this.build('OPERAND', [operand], Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperand: this.OPERAND?.toJson(),\r\n\t\t\ttype: this.TYPE,\r\n\t\t\tsyntax2: this.SYNTAX2,\r\n\t\t\tflags: this.FLAGS\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!json?.operand || !json?.type) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.cast(json.operand, json.type, json.syntax2);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tif (this.SYNTAX2) return `${ this.OPERAND }::${ this.TYPE }`;\r\n\t\treturn `CAST(${ this.OPERAND } AS ${ this.TYPE })`;\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tlet operand, type, syntax2 = false;\r\n\t\tif (/^CAST(?:\\s+)?\\([\\s\\S]+\\)$/i.test(expr)) {\r\n\t\t\tconst [ , parens ] = Lexer.split(expr, []);\r\n\t\t\t[operand, type] = Lexer.split(parens.slice(1, -1), [`AS`], { useRegex: 'i' });\r\n\t\t} else {\r\n\t\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\t\t[operand, type] = Lexer.split(expr, [`::`]);\r\n\t\t\tif (!type) return;\r\n\t\t\tsyntax2 = true;\r\n\t\t}\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.cast(parseCallback(instance, operand.trim()), type.trim(), syntax2);\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "\nimport { _isNumeric } from '@webqit/util/js/index.js';\nimport Node from '../abstracts/Node.js';\n\t\t\nexport default class Placeholder extends Node {\n\n\t/**\n\t * Instance properties\n\t */\n\tOFFSET;\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(context, offset) {\n\t\tsuper(context);\n\t\tthis.OFFSET = parseInt(offset);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$var(offset) { this.OFFSET = offset; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$bind(offset, value) {\n\t\tthis.OFFSET = offset;\n\t\tthis.statementNode.BINDINGS.push(value);\n\t\tif (this.OFFSET === 0) this.OFFSET = this.statementNode.BINDINGS.length;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { offset: this.OFFSET }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json?.offset !== 'number') return;\n\t\treturn new this(context, json.offset);\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.params.dialect === 'mysql' ? '?' : '$' + this.OFFSET; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr) {\n\t\tconst notation = (context?.params?.inputDialect || context?.params?.dialect) === 'mysql' ? '?' : '$';\n\t\tconst [ match, offset ] = (new RegExp(`^\\\\${ notation }(\\\\d)$`)).exec(expr) || [];\n\t\tif (!match) return;\n\t\treturn new this(context, parseInt(offset));\n\t}\n}\n", "\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\n\r\nexport default class Str extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE = '';\r\n\tQUOTE = '';\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, expr, quote = \"'\") {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = expr;\r\n\t\tthis.QUOTE = quote;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value\r\n\t * \r\n\t * @param String expr \r\n\t */\r\n\tvalue(expr) { this.VALUE = expr; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst quote = this.QUOTE || this.quoteChars[0];\r\n\t\treturn `${ quote }${ (this.VALUE + '').replace(new RegExp(quote, 'g'), quote.repeat(2)) }${ quote }`;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { value: this.VALUE }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.value !== 'string') return;\r\n\t\treturn new this(context, json.value, json.quote);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tconst [text, quote] = this.parseText(context, expr, true) || [];\r\n\t\tif (!quote) return;\r\n\t\treturn new this(\r\n\t\t\tcontext,\r\n\t\t\ttext,\r\n\t\t\tquote\r\n\t\t);\r\n\t}\r\n\r\n\tstatic parseText(context, expr, asInputDialect = false) {\r\n\t\tconst quoteChars = this.getQuoteChars(context, asInputDialect), $ = {};\r\n\t\tif (!($.quote = quoteChars.find(q => _wrapped(expr, q, q))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn [\r\n\t\t\t_unwrap(expr, $.quote, $.quote).replace(new RegExp($.quote + $.quote, 'g'), $.quote),\r\n\t\t\t$.quote\r\n\t\t];\r\n\t}\r\n}\r\n", "\r\n/**\r\n * @imports\r\n */\r\nimport { _wrapped } from '@webqit/util/str/index.js';\r\nimport { _isObject } from '@webqit/util/js/index.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Str from '../str/Str.js';\r\n\r\nexport default class Json extends Str {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tTYPE;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value, type, quote) {\r\n\t\tsuper(context, value, quote);\r\n\t\tthis.TYPE = type;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to an array\r\n\t * \r\n\t * @param Object value\r\n\t */\r\n\tarray(value) {\r\n\t\tthis.VALUE = Array.isArray(value) ? JSON.stringify(value) : value;\r\n\t\tthis.TYPE = 'ARRAY';\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to an object\r\n\t * \r\n\t * @param Object value\r\n\t */\r\n\tobject(value) {\r\n\t\tthis.VALUE = _isObject(value) ? JSON.stringify(value) : value;\r\n\t\tthis.TYPE = 'OBJECT';\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\ttype: this.TYPE,\r\n\t\t\t...super.toJson(),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.type !== 'string' || !/OBJECT|ARRAY/i.test(json.type) || !json.value) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance[json.type.toLowerCase()](json.value);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ super.stringify() }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tconst braces = [['{','}'], ['[',']']], $ = {};\r\n\t\tconst [text, quote] = this.parseText(context, expr) || [];\r\n\t\tif (!quote) return;\r\n\t\tif (!($.braces = braces.find(b => _wrapped(expr, b[0], b[1]))) || Lexer.match(expr, [' ']).length) return;\r\n\t\treturn new this(context, text, $.braces[0] === '{' ? 'OBJECT' : 'ARRAY', quote);\r\n\t}\r\n\r\n\tstatic factoryMethods = { array: (context, value) => Array.isArray(value) && new this(context), object: (context, value) => _isObject(value) && new this(context) };\r\n}", "\r\nimport Node from \"../abstracts/Node.js\";\r\n\r\nexport default class Num extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE = 0;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value) {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value\r\n\t * \r\n\t * @param String expr \r\n\t */\r\n\tvalue(value) { this.VALUE = value; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { value: this.VALUE, flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json === 'number' || (typeof json === 'string' && /^[.\\d]+$/.test(json) && (json = parseFloat(json)))) {\r\n\t\t\tjson = { value: json };\r\n\t\t} else if (typeof json?.value !== 'number') return;\r\n\t\treturn (new this(context, json.value)).withFlag(...(json.flags || []));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.VALUE }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tif (/^\\d+$/.test(expr)) return new this(context, parseFloat(expr));\r\n\t}\r\n\r\n\tstatic factoryMethods = { value: (context, value) => /^\\d+$/.test(value) && new this(context) };\r\n}", "\r\nimport Node from '../../abstracts/Node.js';\r\nimport Lexer from '../../Lexer.js';\r\nimport Identifier from '../Identifier.js';\r\nimport Json from './Json.js';\r\nimport Num from '../Num.js';\r\nimport Str from '../str/Str.js';\r\n\r\nexport default class JsonPath extends Node {\r\n\t\r\n\t/**\r\n\t * Static properties\r\n\t */\r\n\tstatic OPERATORS = [`->`, '->>', '#>', '#>>'];\r\n\r\n\t/**\r\n\t * Instance propeties\r\n\t */\r\n\tOPERATOR = '';\r\n\tLHS = null;\r\n\tRHS = null;\r\n\r\n\t/**\r\n\t * Builds the operands.\r\n\t * \r\n\t * @param Identifier lhs \r\n\t * @param String operator\r\n\t * @param Identifier,Path rhs \r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tpath(lhs, operator, rhs) {\r\n\t\tconst $static = this.constructor;\r\n\t\tif (!$static.OPERATORS.includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\r\n\t\tthis.build('LHS', [lhs], [Json,Identifier]);\r\n\t\tthis.build('RHS', [rhs], [Json,Num,Str]);\r\n\t\tthis.OPERATOR = operator;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tlhs: this.LHS?.toJson(),\r\n\t\t\trhs: this.RHS?.toJson(),\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!this.OPERATORS.includes(json?.operator)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`; }\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tlet { tokens, matches } = Lexer.lex(expr, this.OPERATORS, { limit: 1 });\r\n\t\tif (!matches.length) return;\r\n\t\tconst instance = new this(context);\r\n\t\tconst lhs = parseCallback(instance, tokens[0], [Json,Identifier]);\r\n\t\tconst rhs = parseCallback(instance, tokens[1].trim(), [Json,Num,Str]);\r\n\t\tinstance.path(lhs, matches[0], rhs);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => this.OPERATORS.includes(operator) && new this(context) };\r\n}\r\n", "\nimport Lexer from '../Lexer.js';\nimport Identifier from './Identifier.js';\nimport CreateTable from '../create/CreateTable.js';\nimport JsonPath from './json/JsonPath.js';\nimport Node from '../abstracts/Node.js';\n\nexport default class Path extends Node {\n\n\t/**\n\t * Static properties\n\t */\n\tstatic ARR_RIGHT = '~>';\n \tstatic ARR_LEFT = '<~';\n\n\t/**\n\t * Instance propeties\n\t */\n\tOPERATOR = '';\n\tLHS = null;\n\tRHS = null;\n\tUUID = null;\n\n\t/**\n\t * @property Bool\n\t */\n\tget isOutgoing() { return this.OPERATOR === this.constructor.ARR_RIGHT; }\n\n\t/**\n\t * @property Bool\n\t */\n\tget isIncoming() { return this.OPERATOR === this.constructor.ARR_LEFT; }\n\n\t/**\n\t * @property String\n\t */\n\tget uuid() {\n\t\tif (!this.UUID) { this.UUID = `$path:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`; }\n\t\treturn this.UUID;\n\t}\n\n\t/**\n\t * Builds the operands.\n\t * \n\t * @param Identifier lhs \n\t * @param String operator\n\t * @param Identifier,Path rhs \n\t * \n\t * @returns Void\n\t */\n\tpath(lhs, operator, rhs) {\n\t\tconst $static = this.constructor;\n\t\tif (![$static.ARR_LEFT, $static.ARR_RIGHT].includes(operator)) throw new Error(`Unknown operator: \"${ operator }\".`);\n\t\tthis.build('LHS', [lhs], Identifier);\n\t\tthis.build('RHS', [rhs], [$static,JsonPath,Identifier]);\n\t\tthis.OPERATOR = operator;\n\t}\n\n\t/**\n\t * Evaluates the relationship \n\t * and returns the parameters for plotting the join.\n\t * \n\t * @returns Object\n\t */\n\tasync eval() {\n\t\tconst getPrimaryKey = schema => schema.columns.find(col => col.primaryKey)?.name || schema.constraints.find(cons => cons.type === 'PRIMARY_KEY')?.targetColumns[0];\n\t\tconst getKeyDef = (schema, foreignKey) => schema.columns.find(col => col.name === foreignKey.NAME)?.references || schema.constraints.find(cons => cons.type === 'FOREIGN_KEY' && cons.targetColumns.includes(foreignKey.NAME));\n\t\tconst getSchema = async (tblName, dbName) => {\n\t\t\tconst clientApi = this.rootNode.CONTEXT;\n\t\t\tconst basename = dbName || await clientApi.basenameGet(tblName);\n\t\t\tconst dbApi = clientApi.database(basename);\n\t\t\tif (!(await dbApi.hasTable(tblName))) return;\n\t\t\treturn await dbApi.describeTable(tblName);\n\t\t};\n\t\tif (!this.rootNode.CONTEXT) throw new Error(`No client API in context.`);\n\t\tif (this.isIncoming) {\n\t\t\tif (!(this.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS }`);\n\t\t\t// --------------------------\n\t\t\t// === {foreignKey}LHS<-RHS{table...}\n\t\t\tlet foreignKey_rhs, table_rhs, schema_rhs, path;\n\t\t\tif (this.RHS.isIncoming) {\n\t\t\t\tif (!(this.RHS.RHS instanceof Path)) throw new Error(`Unterminated path: ${ this.RHS.RHS }`);\n\t\t\t\t// === {foreignKey}LHS<-RHS{foreignKey_rhs<-table->?...}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: path } = this);\n\t\t\t\tschema_rhs = (await path.eval()).lhs.schema;\n\t\t\t\ttable_rhs = Identifier.fromJson(this, schema_rhs);\n\t\t\t} else {\n\t\t\t\t// === {foreignKey}LHS<-RHS{table->path}\n\t\t\t\t({ LHS: foreignKey_rhs/*Identifier*/, RHS/*Path*/: { LHS: table_rhs/*Identifier*/, RHS: path/*Identifier|Path*/ } } = this);\n\t\t\t\tschema_rhs = await getSchema(table_rhs.NAME, table_rhs.BASENAME);\n\t\t\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t\t}\n\t\t\tconst keyDef_rhs = getKeyDef(schema_rhs, foreignKey_rhs);\n\t\t\t// Validate that schema_rhs has the implied foreign key (actingKey)\n\t\t\tif (!keyDef_rhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define the implied foreign key: ${ foreignKey_rhs }.`);\n\t\t\t// -------------\n\t\t\t// Get schema_lhs from keyDef\n\t\t\tconst table_lhs = Identifier.fromJson(this, keyDef_rhs.basename ? [keyDef_rhs.basename,keyDef_rhs.targetTable] : keyDef_rhs.targetTable);\n\t\t\tconst schema_lhs = await getSchema(table_lhs.NAME, table_lhs.BASENAME);\n\t\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\t\tconst primaryKey_lhs = getPrimaryKey(schema_lhs);\n\t\t\tif (!primaryKey_lhs) throw new Error(`[${ this }]: Table ${ schema_lhs.name } does not define a primary key.`);\n\t\t\t// -------------\n\t\t\t// Put together\n\t\t\treturn {\n\t\t\t\tlhs: { schema: schema_lhs, primaryKey: primaryKey_lhs, },\n\t\t\t\trhs: { schema: schema_rhs, foreignKey: foreignKey_rhs, path, },\n\t\t\t};\n\t\t}\n\t\t// -------------\n\t\t// reference === {foreignKey}LHS->RHS{path}\n\t\tconst table_lhs = this.statementNode.TABLES[0]?.EXPR/*Identifier*/;\n\t\tif (!table_lhs) throw new Error(`No tables in query.`);\n\t\tif (!(table_lhs instanceof Identifier)) throw new Error(`[${ this }]: Base query must not be derived.`);\n\t\t// Get lhs schema\n\t\tconst schema_lhs = await getSchema(table_lhs.NAME, table_lhs.BASENAME);\n\t\tif (!schema_lhs) throw new Error(`[${ this }]: The implied table ${ table_lhs } does not exist.`);\n\t\tconst { LHS: foreignKey_lhs/*Identifier*/, RHS: path/*Identifier|Path*/ } = this;\n\t\t// We get schema2 from schema_lhs\n\t\tconst keyDef_lhs = getKeyDef(schema_lhs, foreignKey_lhs);\n\t\t// Validate that schema_lhs has the implied foreign key (foreignKey)\n\t\tif (!keyDef_lhs) throw new Error(`[${ this }]: Table ${ table_lhs } does not define the implied foreign key: ${ foreignKey_lhs }.`);\n\t\t// -------------\n\t\t// Get schema_rhs from keyDef!\n\t\tconst table_rhs = Identifier.fromJson(this, keyDef_lhs.basename ? [keyDef_lhs.basename,keyDef_lhs.targetTable] : keyDef_lhs.targetTable);\n\t\tconst schema_rhs = await getSchema(table_rhs.NAME, table_rhs.BASENAME || table_lhs.BASENAME);\n\t\tif (!schema_rhs) throw new Error(`[${ this }]: The implied table ${ table_rhs } does not exist.`);\n\t\t// Get shcema_lhs's acting key (primary key) and validate\n\t\tconst primaryKey_rhs = getPrimaryKey(schema_rhs);\n\t\tif (!primaryKey_rhs) throw new Error(`[${ this }]: Table ${ table_rhs } does not define a primary key.`);\n\t\t// -------------\n\t\t// Put together\n\t\treturn {\n\t\t\tlhs: { schema: schema_lhs, foreignKey: foreignKey_lhs, },\n\t\t\trhs: { schema: schema_rhs, primaryKey: primaryKey_rhs, path, },\n\t\t};\n\t}\n\n\t/**\n\t * Plots the relationship.\n\t * \n\t * @returns Void\n\t */\n\tasync plot() {\n\t\tif (this.JOINT) return;\n\t\t// Resolve relation and validate\n\t\tconst stmt = this.statementNode;\n\t\tconst baseTable = stmt.TABLES[0];\n\t\tif (!baseTable) throw new Error(`No tables in query.`);\n\t\tif (!(baseTable.EXPR instanceof Identifier)) throw new Error(`[${ this }]: Base query must not be derived.`);\n\t\t// Do plotting\n\t\tconst { lhs, rhs } = await this.eval();\n\t\tconst baseKey = lhs.foreignKey || lhs.primaryKey;\n\t\tconst joinKey = rhs.primaryKey || rhs.foreignKey;\n\t\tif (lhs.primaryKey/*then incoming reference*/ && lhs.schema.name.toLowerCase() !== baseTable.EXPR.NAME.toLowerCase()) throw new Error(`[${ this }]: Cannot resolve incoming path to base table ${ baseTable.EXPR }.`);\n\t\tconst joinAlias = `$view:${ [baseKey, rhs.schema.basename, rhs.schema.name, joinKey].join(':') }`;\n\t\tconst joint = () => this.JOINT = stmt.JOIN_LIST.find(joint => joint.ALIAS.NAME === joinAlias);\n\t\tif (!joint()) {\n\t\t\t// Implement the join for the first time\n\t\t\tconst baseAlias = ['ALIAS','EXPR'].reduce((prev, key) => prev || baseTable[key]?.NAME, null);\n\t\t\tconst joinKeyAlias = `${ joinKey }:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`;\n\t\t\tstmt.leftJoin( j => j.query( q => q.select( field => field.name( joinKey ).as( joinKeyAlias ) ), q => q.from([rhs.schema.basename,rhs.schema.name].filter(s => s)) ) )\n\t\t\t\t.with({ IS_SMART_JOIN: true }).as(joinAlias)\n\t\t\t\t.on( on => on.equals([joinAlias,joinKeyAlias], [baseAlias,baseKey]) );\n\t\t\tjoint();\n\t\t}\n\t\t// For something like: author~>name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"->\"name\"\n\t\t// For something like: author~>country->name, select \"$view:fk_name:tbl_name:db_name:pk_name\".\"country\"->\"name\" as \"$path:unxnj\"\n\t\t// Now on outer query, that would resolve to selecting \"$view:fk_name:tbl_name:db_name:pk_name\".\"$path:unxnj\" as \"author\"~>\"country\"->\"name\"\n\t\tthis.JOINT.EXPR/*Query*/.select( field => field.expr(rhs.path.toJson()).as(this.uuid) );\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tlhs: this.LHS?.toJson(),\n\t\t\trhs: this.RHS?.toJson(),\n\t\t\toperator: this.OPERATOR,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (![this.ARR_LEFT, this.ARR_RIGHT].includes(json?.operator)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.path(json.lhs, json.operator, json.rhs);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tif (this.JOINT) return this.autoEsc([this.JOINT.ALIAS.NAME,this.uuid]).join('.');\n\t\treturn `${ this.LHS } ${ this.OPERATOR } ${ this.RHS }`;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens, matches } = Lexer.lex(expr, [this.ARR_LEFT, this.ARR_RIGHT], { limit: 1 });\n\t\tif (!matches.length) return;\n\t\tconst instance = new this(context);\n\t\tconst lhs = parseCallback(instance, tokens[0], [Identifier]);\n\t\tconst rhs = parseCallback(instance, tokens[1], matches[0] === this.ARR_LEFT ? [this] : [this,JsonPath,Identifier]);\n\t\tinstance.path(lhs, matches[0], rhs);\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { path: (context, lhs, operator, rhs) => [this.ARR_LEFT,this.ARR_RIGHT].includes(operator) && new this(context) };\n}", "\nimport Lexer from '../../Lexer.js';\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\n\nexport default class AbstractGroupBy extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.CRITERIA.map(criterion => criterion.stringify()).join(','); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { criteria: this.CRITERIA.map(c => c.toJson()), flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ groupByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!groupByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tinstance.criterion(parseCallback(instance, criterionExpr));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'GROUP\\\\s+BY';\n}", "\nimport AbstractGroupBy from './abstracts/AbstractGroupBy.js';\nimport Lexer from '../Lexer.js';\n\nexport default class GroupByClause extends AbstractGroupBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['GROUP BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr, parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../../Lexer.js';\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\n\nexport default class AbstractOrderBy extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tCRITERIA = [];\n\n\t/**\n\t * Adds a criterion.\n\t * \n\t * @param Array ...args\n\t * \n\t * @returns this\n\t */\n\tcriterion(...args) { return this.build('CRITERIA', args, Expr.Types); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { criteria: this.CRITERIA.map(c => c.toJson()), flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.criteria)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.criterion(...json.criteria);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return this.CRITERIA.map(criterion => [criterion, ...criterion.FLAGS].join(' ')).join(','); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ orderByMatch, criteriaExpr ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!orderByMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const criterionExpr of Lexer.split(criteriaExpr.trim(), [','])) {\n\t\t\tconst [ , expr, sort ] = /([\\s\\S]+)\\s+(ASC|DESC)$/i.exec(criterionExpr) || [ , criterionExpr ];\n\t\t\tinstance.criterion((parseCallback(instance, expr)).withFlag(sort));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ORDER\\\\s+BY';\n}", "\nimport Lexer from '../Lexer.js';\nimport AbstractOrderBy from './abstracts/AbstractOrderBy.js';\n\nexport default class OrderByClause extends AbstractOrderBy {\n\n\t/**\n\t * Sets the WITH_ROLLUP flag.\n\t * \n\t * @returns this\n\t */\n\twithRollup() { return this.withFlag('WITH_ROLLUP'); }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['ORDER BY', super.stringify(), ...this.FLAGS.map(s => s.replace(/_/g, ' '))].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst { tokens: [$expr], matches } = Lexer.lex(expr, ['\\\\s+WITH\\\\s+ROLLUP$'], { useRegex: 'i' });\n\t\tconst instance = super.parse(context, $expr.trim(), parseCallback);\n\t\tif (!instance) return;\n\t\tif (matches.length) instance.withFlag('WITH_ROLLUP');\n\t\treturn instance;\n\t}\n}", "\nimport AbstractGroupBy from './abstracts/AbstractGroupBy.js';\n\nexport default class PartitionByClause extends AbstractGroupBy {\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return ['PARTITION BY', super.stringify()].join(' '); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic regex = 'PARTITION\\\\s+BY';\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../../Lexer.js';\nimport PartitionByClause from '../PartitionByClause.js';\nimport OrderByClause from '../OrderByClause.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class WindowSpec extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tNAME;\n\tWINDOW_REF;\n\tPARTITION_BY_CLAUSE;\n\tORDER_BY_CLAUSE;\n\n\t/**\n\t * Sets the name.\n\t * \n\t * @param String name\n\t * \n\t * @returns this\n\t */\n\tname(name) {\n\t\tthis.NAME = name;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\texisting(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a base window.\n\t * \n\t * @param String windowRef\n\t * \n\t * @returns this\n\t */\n\textends(windowRef) {\n\t\tthis.WINDOW_REF = windowRef;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a PARTITION BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\tpartitionBy(...partitionBys) {\n\t\tif (this.WINDOW_REF) throw new Error(`The PARTITION BY clause is not allowed when inheriting from a base window.`);\n\t\treturn this.build('PARTITION_BY_CLAUSE', partitionBys, PartitionByClause, 'criterion');\n\t}\n\n\t/**\n\t * Adds an ORDER BY clause.\n\t * \n\t * @param Array orderBys\n\t * \n\t * @returns this\n\t */\n\torderBy(...orderBys) { return this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tname: this.NAME, \n\t\t\twindow_ref: this.WINDOW_REF, \n\t\t\tpartition_by_clause: this.PARTITION_BY_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (typeof json === 'string') json = { window_ref: json };\n\t\telse if (!(typeof json === 'object' && json) || !['name', 'window_ref', 'partition_by_clause', 'order_by_clause'].some(k => k in json)) return;\n\t\tconst instance = new this(context);\n\t\tif (json.name) instance.name(json.name);\n\t\tif (json.window_ref) instance.extends(json.window_ref);\n\t\tif (json.partition_by_clause) instance.partitionBy(json.partition_by_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = [];\n\t\tif (!this.NAME && this.WINDOW_REF && !this.PARTITION_BY_CLAUSE && !this.ORDER_BY_CLAUSE) {\n\t\t\t// It's an \"over w\" clause\n\t\t\tsql.push(this.WINDOW_REF);\n\t\t} else {\n\t\t\t// Might be an \"over (definedRef? ...)\" clause or a named window \"w AS ()\"\n\t\t\t// But certainly an enclosure\n\t\t\tif (this.NAME) sql.push(`${ this.NAME } AS `);\n\t\t\tsql.push(`(${ [\n\t\t\t\tthis.WINDOW_REF,\n\t\t\t\tthis.PARTITION_BY_CLAUSE,\n\t\t\t\tthis.ORDER_BY_CLAUSE\n\t\t\t].filter(x => x).join(' ') })`);\n\t\t}\n\t\treturn sql.join('');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst parseEnclosure = async enclosure => {\n\t\t\tconst { tokens: [ definedRef, ...clauses ], matches: clauseTypes } = Lexer.lex(_unwrap(enclosure.trim(), '(', ')'), ['PARTITION\\\\s+BY', 'ORDER\\\\s+BY'], { useRegex:'i', preserveDelims: true });\n\t\t\tif (definedRef.trim()) instance.extends(definedRef.trim());\n\t\t\tfor (const clauseType of clauseTypes) {\n\t\t\t\t// PARTITION BY\n\t\t\t\tif (/PARTITION\\s+BY/i.test(clauseType)) {\n\t\t\t\t\tinstance.partitionBy(parseCallback(instance, clauses.shift().trim(), [PartitionByClause]));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ORDER BY\n\t\t\t\tinstance.orderBy(parseCallback(instance, clauses.shift().trim(), [OrderByClause]));\n\t\t\t}\n\t\t};\n\t\tconst hasEnclosure = expr.endsWith(')');\n\t\tconst isNamedWindow = hasEnclosure && !expr.startsWith('(');\n\t\tif (isNamedWindow) {\n\t\t\t// WINDOW w AS (PARTITION BY country ORDER BY city ASC, state DESC), u AS (...)\n\t\t\t// NOTICE below the space around \"AS\", important in view of \"city ASC\"\n\t\t\tconst [ name, enclosure ] = spec.split(new RegExp(' AS ', 'i'));\n\t\t\tinstance.name(name.trim());\n\t\t\tparseEnclosure(enclosure);\n\t\t} else if (hasEnclosure) {\n\t\t\tparseEnclosure(expr);\n\t\t} else {\n\t\t\t// FUNC OVER w\n\t\t\tinstance.existing(expr);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW|OVER';\n}", "\nimport Lexer from '../../Lexer.js';\nimport WindowSpec from './WindowSpec.js';\nimport Node from '../../abstracts/Node.js';\n\nexport default class WindowClause extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tWINDOWS_LIST = [];\n\n\t/**\n\t * Adds a window spec.\n\t * \n\t * @param Array windows\n\t * \n\t * @returns this\n\t */\n\tdefine(...windows) { return this.build('WINDOWS_LIST', windows, WindowSpec); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { window_list: this.WINDOWS_LIST.map(w => w.toJson()) }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.window_list)) return;\n\t\tconst instance = new this(context);\n\t\tinstance.define(...json.window_list);\n\t\treturn instance;\n\t}\n\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() { return `WINDOW ${ this.WINDOWS_LIST.join(',') }`; }\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ windowMatch, windowSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!windowMatch) return;\n\t\tconst instance = new this(context);\n\t\tfor (const spec of Lexer.split(windowSpec, [','])) {\n\t\t\tinstance.define(parseCallback(instance, spec.trim(), [Window]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'WINDOW';\n}", "\nimport Node from '../../abstracts/Node.js';\nimport Expr from './Expr.js';\nimport Identifier from '../Identifier.js';\nimport Parens from '../Parens.js';\nimport Path from '../Path.js';\n\nexport default class AbstractAliasableExpr extends Node {\n\t\n\t/**\n\t * Instance properties\n\t */\n\t$EXPR;\n\tALIAS;\n\tCLAUSED;\n\t\n\t/**\n\t * @property String\n\t */\n\tget NAME() { return this.$EXPR?.NAME; }\n\n\t/**\n\t * @property String\n\t */\n\tget BASENAME() { return this.$EXPR?.BASENAME; }\n\n\t/**\n\t * @property Node\n\t */\n\tget EXPR() { return this.$EXPR?.EXPR || this.$EXPR; }\n\n\t/**\n\t * Sets the name\n\t * \n\t * @param Array|String name\n\t * \n\t * @returns this\n\t */\n\tname(name) { return (this.build('$EXPR', [name], Identifier, 'name'), this); }\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tquery(...fns) { return (this.build('$EXPR', fns, Parens, 'query'), this); }\n\n\t/**\n\t * Sets the expr\n\t * \n\t * @param Any expr\n\t * \n\t * @returns this\n\t */\n\texpr(expr) { return (this.build('$EXPR', [expr], this.constructor.exprTypes), this); }\n\t\n\t/**\n\t * Sets the alias\n\t * \n\t * @param String alias\n\t * \n\t * @returns this\n\t */\n\tas(alias, claused = true) {\n\t\tthis.build('ALIAS', [alias], Identifier);\n\t\tthis.CLAUSED = claused;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { expr: this.$EXPR?.toJson(), alias: this.ALIAS?.toJson(), claused: this.CLAUSED, flags: this.FLAGS }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json?.expr) {\n\t\t\tinstance.expr(json.expr);\n\t\t\tif (json.alias) instance.as(json.alias, json.claused);\n\t\t} else if (json) instance.expr(json);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst alias = this.ALIAS || this.$EXPR instanceof Path && this.$EXPR.JOINT && this.autoEsc(this.$EXPR.clone().stringify());\n\t\treturn [this.$EXPR, this.CLAUSED ? 'AS' : '', alias].filter(s => s).join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst instance = new this(context);\n\t\tconst escChar = this.getEscChar(context, true);\n\t\t// With an \"AS\" clause, its easy to obtain the alias...\n\t\t// E.g: SELECT first_name AS fname, 4 + 5 AS result, 5 + 5\n\t\t// Without an \"AS\" clause, its hard to determine if an expression is actually aliased...\n\t\t// E.g: In the statement SELECT first_name fname, 4 + 5 result, 5 + 5, (SELECT ...) alias FROM ...,\n\t\tlet [ , $expr, $separator, aliasUnescaped, /*esc*/, aliasEscaped ] = (new RegExp(`^([\\\\s\\\\S]+?)` + `(?:` + `(\\\\s+AS\\\\s+|(?<!(?:~>|<~))\\\\s+)` + `(?:([\\\\w]+)|(${ escChar })((?:\\\\4\\\\4|[^\\\\4])+)\\\\4)` + `)?$`, 'i')).exec(expr.trim()) || [];\n\t\tlet exprNode, $alias = aliasUnescaped || aliasEscaped;\n\t\tif ($alias && !$separator?.trim() && !$expr.trim().endsWith(')')) {\n\t\t\ttry {\n\t\t\t\texprNode = parseCallback(instance, $expr, this.exprTypes);\n\t\t\t} catch(e) {}\n\t\t\tif (!exprNode) {\n\t\t\t\t$alias = aliasUnescaped = aliasEscaped = null;\n\t\t\t\t$expr = expr; // IMPORTANT\n\t\t\t}\n\t\t}\n\t\tif (!exprNode) { exprNode = parseCallback(instance, $expr, this.exprTypes); }\n\t\tinstance.expr(exprNode);\n\t\tif ($alias) {\n\t\t\tconst alias = aliasUnescaped || this.autoUnesc(instance, aliasEscaped);\n\t\t\tconst claused = !!$separator?.trim();\n\t\t\tinstance.as(alias, claused);\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return Expr.Types; }\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Func extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tNAME = '';\r\n\tARGS = [];\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tfn(name, ...args) {\r\n\t\tthis.NAME = name;\r\n\t\treturn this.build('ARGS', args, Expr.Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tname: this.NAME,\r\n\t\t\targs: this.ARGS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.name !== 'string' || !Array.isArray(json.args)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.fn(json.name, ...json.args);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.NAME.toUpperCase() }(${ this.ARGS.join(', ') })`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!expr.endsWith(')') || Lexer.match(expr, [' ']).length) return;\r\n\t\tconst [ , name, args = '' ] = /^(\\w+)\\(([\\s\\S]+)?\\)$/i.exec(expr);\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.fn(name, ...Lexer.split(args, [',']).map(arg => parseCallback(instance, arg.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../Lexer.js';\nimport WindowSpec from './window/WindowSpec.js';\nimport OrderByClause from './OrderByClause.js';\nimport Func from './Func.js';\n\nexport default class Aggr extends Func {\n\n\t/**\n\t * Instance properties\n\t */\n\tORDER_BY_CLAUSE;\n\tOVER_CLAUSE;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tfn(...args) { return (super.fn(...args), this); }\n\t\n\t/**\n\t * Adds an OVER clause\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this); }\n\n\t/**\n\t * Adds an OVER clause\n\t */\n\tover(window) {\n\t\t// For expressions like SUM OVER ()\n\t\tif (!window) window = { name: '' }; // At least an empty string to help pass the WindowSpec.fromJson() validation\n\t\treturn (this.build('OVER_CLAUSE', [window], WindowSpec), this.OVER_CLAUSE);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\t...super.toJson(), \n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tover_clause: this.OVER_CLAUSE?.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance) return;\n\t\tif (!this.names.flat().includes(instance.NAME.toUpperCase())) return instance;\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.over_clause) instance.over(json.over_clause);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = `${ this.NAME.toUpperCase() }(${ [...this.FLAGS, this.ARGS.join(','), this.ORDER_BY_CLAUSE].filter(s => s).join(' ') })`;\n\t\treturn sql + (this.OVER_CLAUSE ? ` OVER ${ this.OVER_CLAUSE }` : '');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\t// Break off any OVER clause, then assert that it's a function\n\t\tconst [ func, over ] = Lexer.split(expr, ['OVER\\\\s+'], { useRegex: 'i' }).map(s => s.trim());\n\t\tif (!func.endsWith(')') || Lexer.match(func, [' ']).length) return;\n\t\t// Match any ALL|DISTINCT flags; also assert that it's an aggr function\n\t\tconst [ , name, allOrDistinct, args = '' ] = /^(\\w+)\\((?:\\s+)?(?:(ALL|DISTINCT)\\s+)?([\\s\\S]+)?\\)$/i.exec(func);\n\t\tif (!this.names.flat().includes(name.toUpperCase())) return;\n\t\t// Break off any ORDER BY clause, then render\n\t\tconst [ , $args, orderByClause ] = /^([\\s\\S]+)(?:\\s+(ORDER\\s+BY\\s+.+))$/i.exec(args) || [ , args ];\n\t\tconst instance = super.parse(context, `${ name }(${ $args })`, parseCallback);\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tif (orderByClause) instance.orderBy(parseCallback(instance, orderByClause, [OrderByClause]));\n\t\telse if (over) instance.over(parseCallback(instance, over, [WindowSpec]));\n\t\treturn instance;\n\t}\n\n\tstatic factoryMethods = { fn: (context, name, ...args) => this.names.flat().includes(name?.toUpperCase()) && new this(context) };\n\n\tstatic names = [\n\t\t[\n\t\t\t'AVG', \n\t\t\t'BIT_AND', \n\t\t\t'BIT_OR', \n\t\t\t'BIT_XOR', \n\t\t\t'COUNT', \n\t\t\t'JSON_ARRAYAGG', \n\t\t\t'JSON_OBJECTAGG', \n\t\t\t'MAX', \n\t\t\t'MIN',\n\t\t\t'STDDEV_POP',\n\t\t\t'STDDEV',\n\t\t\t'STD',\n\t\t\t'STDDEV_SAMP',\n\t\t\t'SUM',\n\t\t\t'VAR_POP',\n\t\t\t'VARIANCE',\n\t\t\t'VAR_SAMP',\n\t\t\t// May not apply to OVER()\n\t\t\t'GROUP_CONCAT',\n\t\t\t'GROUP_CONCAT_WS',\n\t\t],\n\t\t[\n\t\t\t'CUME_DIST', \n\t\t\t'DENSE_RANK', \n\t\t\t'FIRST_VALUE', \n\t\t\t'LAG', \n\t\t\t'LAST_VALUE', \n\t\t\t'LEAD', \n\t\t\t'NTH_VALUE', \n\t\t\t'NTLE',\n\t\t\t'PERCENT_RANK',\n\t\t\t'RANK',\n\t\t\t'ROW_NUMBER',\n\t\t],\n\t\t[\n\t\t\t'ANY_VALUE', \n\t\t\t'COLUMN', \n\t\t\t'COLUMNS', \n\t\t\t'GROUPING', \n\t\t]\n\t];\n}", "\nimport AbstractAliasableExpr from './abstracts/AbstractAliasableExpr.js';\nimport CaseConstruct from './case/CaseConstruct.js';\nimport JsonPath from './json/JsonPath.js';\nimport Path from './Path.js';\nimport Func from './Func.js';\nimport Aggr from './Aggr.js';\n\nexport default class Field extends AbstractAliasableExpr {\n\n\t/**\n\t * Plots a path\n\t * \n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tpath(lhs, operator, rhs) { return (this.build('$EXPR', [lhs, operator, rhs], JsonPath.OPERATORS.includes(operator) ? JsonPath : Path, 'path'), this); }\n\n\t/**\n\t * Function call\n\t * \n\t * @param String name\n\t * @param Array args\n\t * \n\t * @returns this\n\t */\n\tfn(name, ...args) { return (this.build('$EXPR', [name, ...args], Aggr.names.flat().includes(name.toUpperCase()) ? Aggr : Func, 'fn'), this); }\n\n\t/**\n\t * Case construct\n\t * \n\t * @param Array fns\n\t * \n\t * @returns this\n\t */\n\tcase(...fns) { return (this.build('$EXPR', fns, CaseConstruct), this); }\n\n}", "\nimport AbstractAliasableExpr from './abstracts/AbstractAliasableExpr.js';\nimport Identifier from './Identifier.js';\nimport Parens from './Parens.js';\n\nexport default class Table extends AbstractAliasableExpr {\n\n\t/**\n\t * @property Array\n\t */\n\tstatic get exprTypes() { return [Parens,Identifier]; }\n}", "\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport Placeholder from './Placeholder.js';\nimport Path from './Path.js';\nimport JoinClause from './JoinClause.js';\nimport GroupByClause from './GroupByClause.js';\nimport OrderByClause from './OrderByClause.js';\nimport WindowClause from './window/WindowClause.js';\nimport Condition from './Condition.js';\nimport Assertion from './Assertion.js';\nimport Field from './Field.js';\nimport Table from './Table.js';\nimport Aggr from './Aggr.js';\n\nexport default class Select extends StatementNode {\n\t\n\t/**\n\t * Instance properties\n\t */\n\tSELECT_LIST = [];\n\tFROM_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tGROUP_BY_CLAUSE = null;\n\tHAVING_CLAUSE = null;\n\tWINDOW_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tOFFSET_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.FROM_LIST; }\n\n\t/**\n\t * @properties Array\n\t */\n\tAGGRS = [];\n\tPATHS = [];\n\tVARS = [];\n\tSUBQUERIES = [];\n\n\t/**\n\t * Builds the statement's SELECT_LIST\n\t * \n\t * .select(\n\t * \t\t'col1',\n\t * \t\tf1 => f1.name('col2').as('alias1'),\n\t * \t\tf2 => f1.func('CONCAT_WS', i => i.name(...) ),\n\t * \t\tf3 => f1.aggr('SUM', 'col1'),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.existing('w1') ) ),\n\t * \t\tf3 => f1.aggr(aggr => aggr.name('RANK').over( w => w.partitionBy( p => p.name('col1') ) ) ),\n\t * \t\tf3 => f1.math('+', 'col1', 'col2'),\n\t * \t\tf3 => f1.math('/', i => i.name('col1'), i => i.func('AVG', ... ) ),\n\t * \t\tf3 => f1.case( c => c.given(2), c => c.when(2).then(4), c => c.else(4) ).as('alias3'),\n\t * \t\tf4 => f1.query(\n\t * \t\t\tq => q.select().from()...\n\t * \t\t).as('alias4'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tselect(...fields) { return this.build('SELECT_LIST', fields, Field); }\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tables) { return (this.build('FROM_LIST', tables, Table), this.FROM_LIST[this.FROM_LIST.length - 1]/* for: .as() */); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's GROUP_BY_CLAUSE\n\t * \n\t * .groupBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2'),\n\t * \t\tby => by.func('CONCAT_WS', ... ),\n\t * \t\tby => by.case(c => c.given(2), c => c.when(2).then(4), c => c.else(4) ),\n\t * ).withRollup()\n\t * \n\t * @return Void\n\t */\n\tgroupBy(...groupBys) { return (this.build('GROUP_BY_CLAUSE', groupBys, GroupByClause, 'criterion'), this.GROUP_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Builds the statement's HAVING_CLAUSE\n\t * \n\t * .having(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\thaving(...wheres) { return this.build('HAVING_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's WINDOW_CLAUSE\n\t * \n\t * .window(\n\t * \t\tw1 => w1.name('w1').partitionBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t).orderBy(\n\t * \t\t\tby => by.name(columnName)\n\t * \t\t),\n\t * \t\tw2 => w2.name('w2').extends('w1')\n\t * )\n\t * \n\t * @return Void\n\t */\n\twindow(...windows) { return this.build('WINDOW_CLAUSE', windows, WindowClause, 'define'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's OFFSET_CLAUSE\n\t * \n\t * .offset(3);\n\t * \n\t * @return string\n\t */\n\toffset(offset) {\n\t\tif (typeof offset !== 'number') throw new Error(`Offsets must be of type number.`);\n\t\tthis.OFFSET_CLAUSE = offset;\n\t}\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\n    /**\n\t * Catalog certain nodes\n\t * \n\t * @param Node node\n\t * \n\t * @returns Void\n\t */\n    connectedNodeCallback(node) {\n\t\tif (node instanceof Aggr) this.AGGRS.push(node);\n\t\tif (node instanceof Path && !(node.CONTEXT instanceof Path)) this.PATHS.push(node);\n\t\tif (node instanceof Placeholder) this.VARS.push(node);\n\t\tif (node instanceof Select) this.SUBQUERIES.push(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tget expandable() { return this.PATHS.length > 0 || this.SUBQUERIES.some(q => q.expandable); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tasync expand(inPlace = false) {\n\t\tconst instance = !inPlace ? this.clone() : this;\n\t\tif (!instance.expandable) return instance;\n\t\tfor (const path of instance.PATHS) await path.plot();\n\t\tfor (const query of instance.SUBQUERIES) await query.expand(true);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tselect_list: this.SELECT_LIST.map(s => s.toJson()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\tgroup_by_clause: this.GROUP_BY_CLAUSE?.toJson(),\n\t\t\thaving_clause: this.HAVING_CLAUSE?.toJson(),\n\t\t\twindow_clause: this.WINDOW_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\toffset_clause: this.OFFSET_CLAUSE,\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.select_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.select(...json.select_list);\n\t\tif (json.from_list?.length) instance.from(...json.from_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.group_by_clause) instance.groupBy(json.group_by_clause);\n\t\tif (json.having_clause) instance.having(json.having_clause);\n\t\tif (json.window_clause) instance.window(json.window_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.offset_clause) instance.offset(json.offset_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify(params = {}) {\n\t\tconst sql = ['SELECT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.SELECT_LIST.join(', '));\n\t\tif (this.FROM_LIST.length) sql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.GROUP_BY_CLAUSE) sql.push(this.GROUP_BY_CLAUSE);\n\t\tif (this.HAVING_CLAUSE) sql.push('HAVING', this.HAVING_CLAUSE);\n\t\tif (this.WINDOW_CLAUSE) sql.push(this.WINDOW_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.OFFSET_CLAUSE) sql.push('OFFSET', this.OFFSET_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', (Array.isArray(this.LIMIT_CLAUSE) ? this.LIMIT_CLAUSE : [this.LIMIT_CLAUSE]).join(','));\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, allOrDistinct, body ] = /^SELECT\\s+(?:(WITH\\s+UAC)\\s+)?(ALL|DISTINCT)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (allOrDistinct) instance.withFlag(allOrDistinct);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, join:JoinClause, where:'WHERE', groupBy:GroupByClause, having:'HAVING', window:WindowClause, orderBy:OrderByClause, offset:'OFFSET', limit:'LIMIT' };\n\t\tconst { tokens: [ fieldsSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// SELECT_LIST\n\t\tfor (const fieldExpr of Lexer.split(fieldsSpec, [','])) {\n\t\t\tconst field = parseCallback(instance, fieldExpr.trim(), [Field]);\n\t\t\tinstance.select(field);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// FROM_LIST\n\t\t\tif (clauseKey === 'from') {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\t\t\tinstance.from(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE|HAVING_CLAUSE\n\t\t\telse if (['where', 'having'].includes(clauseKey)) {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t\t// OFFSET|LIMIT\n\t\t\telse if (['offset', 'limit'].includes(clauseKey)) {\n\t\t\t\tconst args = tokens.shift().split(',').map(s => parseInt(s.trim()));\n\t\t\t\tinstance[clauseKey](...args);\n\t\t\t}\n\t\t\t// JOIN|GROUP_BY|WINDOW|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Select from './Select.js';\r\nimport Lexer from '../Lexer.js';\r\n\r\nexport default class Parens extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\t$EXPR;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, expr) {\r\n\t\tsuper(context);\r\n\t\tthis.$EXPR = expr;\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget NAME() { return this.$EXPR?.NAME; }\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tget BASENAME() { return this.$EXPR?.BASENAME; }\r\n\r\n\t/**\r\n\t * @property Node\r\n\t */\r\n\tget EXPR() { return this.$EXPR?.EXPR || this.$EXPR; }\r\n\r\n\t/**\r\n\t * Helper method to start a subquery.\r\n\t * \r\n\t * @param  Array fns\r\n\t * \r\n\t * @returns Void\r\n\t */\r\n\tquery(...fns) { return (this.build('$EXPR', fns, Select), this.$EXPR); }\r\n\r\n\t/**\r\n\t * Sets the expr\r\n\t * \r\n\t * @param Array fns\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\texpr(...fns) { return (this.build('$EXPR', fns, [Select, ...Expr.Types]), this.$EXPR); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { expr: this.$EXPR?.toJson(), flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!json?.expr || Object.keys(json).length !== (json.flags ? 2 : 1)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.expr(json.expr);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return '(' + this.$EXPR.stringify() + ')'; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')') || Lexer.match(expr, [' ']).length && Lexer.split(expr, []).length === 2/* recognizing the first empty slot */) return;\r\n\t\treturn new this(context, parseCallback(context, _unwrap(expr, '(', ')'), [Select, ...Expr.Types]));\r\n\t}\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Math extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic operations\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tcalc(operator, ...operands) {\r\n\t\tif (this.OPERATOR && this.OPERATOR !== operator) {\r\n\t\t\treturn (new this.constructor(this)).calc(operator, this, ...operands);\r\n\t\t}\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"+\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsum(...operands) { return this.calc('+', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"-\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tsub(...operands) { return this.calc('-', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"/\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tdiv(...operands) { return this.calc('/', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"*\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\ttimes(...operands) { return this.calc('*', ...operands); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.operator !== 'string' || !/\\+|\\-|\\*|\\//.test(json.operator) || !Array.isArray(json.operands)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.calc(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.OPERANDS.join(` ${ this.OPERATOR } `); }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const operator of ['\\\\*', '\\\\/','\\\\+', '\\\\-']) {\r\n\t\t\tlet { tokens, matches } = Lexer.lex(expr, [`(\\\\s+)?${ operator }(\\\\s+)?`], { useRegex: 'i' });\r\n\t\t\tif (tokens.filter(s => s.trim()).length < 2) continue; // Note that we're not simply asking matches.length; think SELECT * FROM\r\n\t\t\treturn new this(context, matches.pop().trim(), ...tokens.map(expr => parseCallback(context, expr.trim())));\r\n\t\t}\r\n\t}\r\n}", "\r\nimport Lexer from '../../Lexer.js';\r\nimport Node from '../../abstracts/Node.js';\r\nimport Expr from '../abstracts/Expr.js';\r\n\r\nexport default class StrJoin extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tSTRINGS = [];\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tjoin(...strings) { return this.build('STRINGS', strings, Expr.Types); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { strings: this.STRINGS.map(str => str.toJson()), flags: this.FLAGS, }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.strings)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.join(...json.strings);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.STRINGS.join(' || '); }\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif ((context?.params?.inputDialect || context?.params?.dialect) === 'mysql') return;\r\n\t\tconst tokens = Lexer.split(expr, [`||`]);\r\n\t\tif (tokens.length < 2) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.join(...tokens.map(expr => parseCallback(instance, expr.trim())));\r\n\t\treturn instance;\r\n\t}\r\n}\r\n", "\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Literal extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tVALUE;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, value) {\r\n\t\tsuper(context);\r\n\t\tthis.VALUE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value to a literal\r\n\t */\r\n\tliteral(value) { this.VALUE = value; }\r\n\r\n\t/**\r\n\t * Sets the value to true\r\n\t */\r\n\ttrue() { this.VALUE = true; }\r\n\r\n\t/**\r\n\t * Sets the value to false\r\n\t */\r\n\tfalse() { this.VALUE = false; }\r\n\r\n\t/**\r\n\t * Sets the value to null\r\n\t */\r\n\tnull() { this.VALUE = null; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return this.VALUE; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (![true,false,null].includes(json)) return;\r\n\t\treturn new this(context, json);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `${ this.VALUE }`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr) {\r\n\t\tif (!/^(TRUE|FALSE|NULL)$/i.test(expr)) return;\r\n\t\treturn new this(context, JSON.parse(expr.toLowerCase()));\r\n\t}\r\n}", "\r\nimport Identifier from '../Identifier.js';\r\nimport CaseConstruct from '../case/CaseConstruct.js';\r\nimport Condition from '../Condition.js';\r\nimport Assertion from '../Assertion.js';\r\nimport TypeCast from '../TypeCast.js';\r\nimport Parens from '../Parens.js';\r\nimport Path from '../Path.js';\r\nimport Math from '../Math.js';\r\nimport Aggr from '../Aggr.js';\r\nimport Func from '../Func.js';\r\nimport Json from '../json/Json.js';\r\nimport JsonPath from '../json/JsonPath.js';\r\nimport Str from '../str/Str.js';\r\nimport StrJoin from '../str/StrJoin.js';\r\nimport Num from '../Num.js';\r\nimport Literal from '../Literal.js';\r\nimport Placeholder from '../Placeholder.js';\r\n\r\nexport default class Expr {\r\n\r\n\t/**\r\n\t * Cast an input to a node\r\n\t */\r\n\tstatic cast(context, json, Types = this.Types) {\r\n\t\tif (typeof json === 'function') {\r\n\t\t\tif (Types.length === 1) {\r\n\t\t\t\tconst instance = new Types[0](context);\r\n\t\t\t\tjson(instance);\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t\tlet instance;\r\n\t\t\tconst router = methodName => (...args) => {\r\n\t\t\t\tconst $instance = Types.reduce((prev, Type) => prev || (Type.factoryMethods ? (typeof Type.factoryMethods[methodName] === 'function' && Type.factoryMethods[methodName](context, ...args)) : (typeof Type.prototype[methodName] === 'function' && new Type(context))), null);\r\n\t\t\t\tif (!$instance) throw new Error(`Unknown method: ${ methodName }()`);\r\n\t\t\t\tinstance = $instance;\r\n\t\t\t\tif ($instance[methodName]) return $instance[methodName](...args); // Foward the call\r\n\t\t\t\tfor (const f of args) f($instance); // It's just magic method mode\r\n\t\t\t};\r\n\t\t\tjson(new Proxy({}, { get: (t, name) => router(name) }));\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\treturn this.fromJson(context, json, Types);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, arg, Types = this.Types) {\r\n\t\tconst instance = Types.reduce((prev, Type) => prev || (arg instanceof Type ? arg : Type.fromJson(context, arg)), null);\r\n\t\tif (!instance) throw new Error(``);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) { return parseCallback(context, expr, this.Types); }\r\n\r\n\t/**\r\n\t * @property Array\r\n\t */\r\n\tstatic get Types() {\r\n\t\treturn [\r\n\t\t\tParens,\r\n\t\t\tCaseConstruct,\r\n\t\t\tStrJoin,\r\n\t\t\tCondition,\r\n\t\t\tPath, // Must come before Assertion; think: ~> vs >\r\n\t\t\tJsonPath, // ...\r\n\t\t\tAssertion,\r\n\t\t\tMath,\r\n\t\t\tTypeCast, // After anything with operators, but before function types; think CAST(c as text) vs CAST()\r\n\t\t\tAggr,\r\n\t\t\tFunc,\r\n\t\t\tJson,\r\n\t\t\tNum,\r\n\t\t\tStr,\r\n\t\t\tLiteral,\r\n\t\t\tPlaceholder,\r\n\t\t\tIdentifier,\r\n\t\t];\r\n\t}\r\n}", "\r\nimport { _unwrap } from '@webqit/util/str/index.js';\r\nimport Lexer from '../Lexer.js';\r\nimport Condition from './Condition.js';\r\nimport Expr from './abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Assertion extends Node {\r\n\t\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tOPERATOR = '';\r\n\tOPERANDS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, operator, ...operands) {\r\n\t\tsuper(context);\r\n\t\tthis.OPERATOR = operator;\r\n\t\tthis.OPERANDS = operands;\r\n\t}\r\n\r\n\t/**\r\n\t * API for generic asserts\r\n\t * \r\n\t * @param String operator \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tassert(operator, ...operands) {\r\n\t\tif (this.OPERATOR) this.OPERANDS.splice(0);\r\n\t\tthis.OPERATOR = operator;\r\n\t\treturn (this.build('OPERANDS', operands, Expr.Types), this);\r\n\t}\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tequals(...operands) { return this.assert('=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias equal\r\n\t */\r\n\teq(...operands) { return this.equal(...operands); }\r\n\r\n\t/**\r\n\t * API for \"=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tnotEqual(...operands) { return this.assert('<>', ...operands); }\r\n\r\n\t/**\r\n\t * @alias notEqual\r\n\t */\r\n\tnotEq(...operands) { return this.notEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlesserThan(...operands) { return this.assert('<', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lesserThan\r\n\t */\r\n\tlt(...operands) { return this.lesserThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \"<=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlessThanOrEqual(...operands) { return this.assert('<=', ...operands); }\r\n\r\n\t/**\r\n\t * @alias lessThanOrEqual\r\n\t */\r\n\tltOrEq(...operands) { return this.lessThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \">\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThan(...operands) { return this.assert('>', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThan\r\n\t */\r\n\tgt(...operands) { return this.greaterThan(...operands); }\r\n\r\n\t/**\r\n\t * API for \">=\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tgreaterThanOrEqual(...operands) { return this.assert('>=', ...operands); }\r\n\t\r\n\t/**\r\n\t * @alias greaterThanOrEqual\r\n\t */\r\n\tgtOrEq(...operands) { return this.greaterThanOrEqual(...operands); }\r\n\r\n\t/**\r\n\t * API for \"IN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tin(...operands) { return this.assert('IN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"ANY\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tany(...operands) { return this.assert('ANY', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"LIKE\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlike(...operands) { return this.assert('LIKE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNull(...operands) { return this.assert('IS NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT NULL\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotNull(...operands) { return this.assert('IS NOT NULL', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisTrue(...operands) { return this.assert('IS TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT TRUE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotTrue(...operands) { return this.assert('IS NOT TRUE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS FALSE\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisFalse(...operands) { return this.assert('IS FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT FALSE\"\r\n\t * \r\n\t * @param Any operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotFalse(...operands) { return this.assert('IS NOT FALSE', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisUnknow(...operands) { return this.assert('IS UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT UNKNOWN\"\r\n\t * \r\n\t * @param Any operand \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotUnknow(...operands) { return this.assert('IS NOT UNKNOWN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisDistinctFrom(...operands) { return this.assert('IS DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT DISTINCT FROM\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotDistinctFrom(...operands) { return this.assert('IS NOT DISTINCT FROM', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetween(...operands) { return this.assert('IS BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetween(...operands) { return this.assert('IS NOT BETWEEN', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisBetweenSymmetric(...operands) { return this.assert('IS BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * API for \"IS NOT BETWEEN SYMMETRIC\"\r\n\t * \r\n\t * @param Array operands \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tisNotBetweenSymmetric(...operands) { return this.assert('IS NOT BETWEEN SYMMETRIC', ...operands); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tand(...args) { return (new Condition(this, 'AND')).and(this, ...args); }\r\n\r\n\t/**\r\n\t * A shortcut method to Condition.\r\n\t * \r\n\t * @param Array args\r\n\t * \r\n\t * @returns Assertion\r\n\t */\r\n\tor(...args) { return (new Condition(this, 'OR')).or(this, ...args); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\toperator: this.OPERATOR,\r\n\t\t\toperands: this.OPERANDS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.operands) || typeof json?.operator !== 'string' || !this.regexes.some(re => (new RegExp(re.regex || re.test || re)).test(` ${ json.operator } `/*intentional space around*/))) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance.assert(json.operator, ...json.operands);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\tconst operands = this.OPERANDS.slice(0);\r\n\t\tconst sql = [\r\n\t\t\toperands.shift(), \r\n\t\t\tthis.OPERATOR.toUpperCase(),\r\n\t\t];\r\n\t\tconst rightHandSide = operands;\r\n\t\tif (this.OPERATOR === 'IN') sql.push(`(${ rightHandSide.join(',') })`);\r\n\t\telse if (/BETWEEN/i.test(this.OPERATOR)) sql.push(`(${ rightHandSide.join(' AND ') })`);\r\n\t\telse sql.push(`${ rightHandSide.join(' ') }`);\r\n\t\treturn sql.filter(s => s).join(' ');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst { tokens: [lhs, rhs = ''], matches: [operator] } = Lexer.lex(expr, this.regexes, { useRegex: 'i' });\r\n\t\tif (!operator) return;\r\n\t\tconst $operator = operator.trim().toUpperCase();\r\n\t\tconst $operands = [lhs];\r\n\t\tif ($operator === 'IN') {\r\n\t\t\t$operands.push(...Lexer.split(_unwrap(rhs.trim(), '(', ')'), [',']));\r\n\t\t} else if (/BETWEEN/.test($operator)) {\r\n\t\t\t$operands.push(...Lexer.split(rhs, [' AND ']));\r\n\t\t} else if (rhs) {\r\n\t\t\t$operands.push(rhs);\r\n\t\t}\r\n\t\treturn new this(context, $operator, ...$operands.map(opr => parseCallback(context, opr.trim())));\r\n\t}\r\n\r\n\t/**\r\n\t * @property String\r\n\t */\r\n\tstatic regexes = [\r\n\t\t{ test: '<(?!~)' },\r\n\t\t{ backtest: '^(?!.*~$)', test: '>', regex: '(?<!~)>' },\r\n\t\t'((\\\\s+(?:NOT\\\\s+)?IS\\\\s+(?:NOT\\\\s+)?(TRUE|FALSE|NULL|UNKNOWN|DISTINCT\\\\s+FROM\\\\s+))|\\\\s+(ISNULL|NOTNULL|IN|ANY|LIKE|(?:NOT\\\\s+)?BETWEEN(?:\\\\s+SYMMETRIC)?)\\\\s+|(?:\\\\s+)?(=|<=|>=|!=|<>)(?:\\\\s+)?)',\r\n\t];\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport Assertion from './Assertion.js';\r\nimport Parens from './Parens.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class Condition extends Node {\r\n\r\n\t/**\r\n\t * Instance properties\r\n\t */\r\n\tLOGIC = '';\r\n\tASSERTIONS = [];\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor(context, logic) {\r\n\t\tsuper(context);\r\n\t\tthis.LOGIC = logic;\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an AND logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tand(...assertions) {\r\n\t\tif (this.LOGIC === 'OR') return (new this.constructor(this)).and(this, ...assertions);\r\n\t\tthis.LOGIC = 'AND';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion,Parens]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * Establish an OR logic\r\n\t * \r\n\t * @param  Array ...assertions \r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tor(...assertions) {\r\n\t\tif (this.LOGIC === 'AND') return (new this.constructor(this)).or(this, ...assertions);\r\n\t\tthis.LOGIC = 'OR';\r\n\t\treturn (this.build('ASSERTIONS', assertions, [Condition,Assertion,Parens]), this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn {\r\n\t\t\tlogic: this.LOGIC,\r\n\t\t\tassertions: this.ASSERTIONS.map(o => o.toJson()),\r\n\t\t\tflags: this.FLAGS,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (typeof json?.logic !== 'string' || !/AND|OR/i.test(json.logic) || !Array.isArray(json.assertions)) return;\r\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\r\n\t\tinstance[json.logic.toLowerCase()](...json.assertions);\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return this.ASSERTIONS.map(expr => expr instanceof Condition ? `(${ expr.stringify() })` : expr.stringify()).join(' ' + this.LOGIC + ' '); }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tfor (const logic of ['AND', 'OR']) {\r\n\t\t\tconst tokens = Lexer.split(expr, [`\\\\s+${ logic }\\\\s+`], { useRegex: 'i' });\r\n\t\t\tif (tokens.length > 1) {\r\n\t\t\t\tconst instance = new this(context, logic);\r\n\t\t\t\tfor (const $expr of tokens) instance[logic.toLowerCase()](parseCallback(instance, $expr));\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "\nimport Lexer from '../Lexer.js';\nimport Identifier from './Identifier.js';\nimport Condition from './Condition.js';\nimport Assertion from './Assertion.js';\nimport Table from './Table.js';\n\nexport default class JoinClause extends Table {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTYPE = '';\n\tCORRELATION = null;\n\n\t/**\n\t * Creates a full join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tfull(table) {\n\t\tthis.TYPE = 'JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a left join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tleft(table) {\n\t\tthis.TYPE = 'LEFT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a right join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tright(table) {\n\t\tthis.TYPE = 'RIGHT_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates an inner join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tinner(table) {\n\t\tthis.TYPE = 'INNER_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Creates a cross join\n\t * \n\t * @param Any table\n\t * \n\t * @returns Void\n\t */\n\tcross(table) {\n\t\tthis.TYPE = 'CROSS_JOIN';\n\t\treturn (this.expr(table), this);\n\t}\n\n\t/**\n\t * Adds a condition\n\t * \n\t * @param Array assertions\n\t * \n\t * @returns this\n\t */\n\ton(...correlations) { return this.build('CORRELATION', correlations, Condition, 'and'); }\n\n\t/**\n\t * Sets the using clause\n\t * \n\t * @param String correlation\n\t * \n\t * @returns this\n\t */\n\tusing(correlation) { return this.build('CORRELATION', [correlation], Identifier); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttype: this.TYPE,\n\t\t\tcorrelation: this.CORRELATION?.toJson(),\n\t\t\t...super.toJson(),\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance || !json.type) return;\n\t\tif (json?.expr && json.type) instance.TYPE = json.type;\n\t\tif (json?.expr && json.correlation) instance.build('CORRELATION', [json.correlation], [Identifier,Condition]);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\treturn [\n\t\t\tthis.TYPE?.replace(/_/, ' ').toUpperCase() || 'JOIN',\n\t\t\tsuper.stringify(),\n\t\t\t...[ this.CORRELATION instanceof Identifier ? `USING ${ this.CORRELATION }` : `ON ${ this.CORRELATION }` ], \n\t\t].filter(s => s).join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ joinMatch, type, joinSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!joinMatch) return;\n\t\tconst { tokens: [ $table, $correlation ], matches } = Lexer.lex(joinSpec, ['\\\\s+(?:ON|USING)\\\\s+'], { useRegex:'i' });\n\t\tconst instance = super.parse(context, $table.trim(), parseCallback);\n\t\tinstance.TYPE = type.trim().toUpperCase() + '_JOIN';\n\t\tif (/USING/i.test(matches[0])) {\n\t\t\tinstance.using(parseCallback(instance, $correlation.trim(), [Identifier]));\n\t\t} else if (/ON/i.test(matches[0])) {\n\t\t\tinstance.on(parseCallback(instance, $correlation.trim(), [Condition,Assertion]));\n\t\t}\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = '(INNER\\\\s+|CROSS\\\\s+|(?:LEFT|RIGHT)(?:\\\\s+OUTER)?\\\\s+)?JOIN';\n}\n", "\nimport Lexer from '../Lexer.js';\nimport Identifier from '../select/Identifier.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport JoinClause from '../select/JoinClause.js';\nimport OrderByClause from '../select/OrderByClause.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\nimport Table from '../select/Table.js';\nimport Field from '../select/Field.js';\n\n/*\nSyntax: 1 (Both; Order By and Limit: MySQL)\nDELETE FROM somelog WHERE user = 'jcole'\n\tORDER BY timestamp_column LIMIT 1;\n*/\n/*\nSyntax 2: (MySQL)\nDELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n/*\nSyntax 3: (Both)\nDELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3\n\tWHERE t1.id=t2.id AND t2.id=t3.id;\n*/\n\nexport default class Delete extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tDELETE_LIST = [];\n\tFROM_LIST = [];\n\tUSING_LIST = [];\n\tJOIN_LIST = [];\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.USING_LIST.length ? this.USING_LIST : this.FROM_LIST; }\n\n\t/**\n\t * Builds an optional DELETE_LIST (for use with a FROM_LIST) (MySQL-specific)\n\t * \n\t * .delete('t11, 't2');\n\t * \n\t * @returns Void\n\t */\n\tdelete(...identifiers) { return this.build('DELETE_LIST', identifiers, Identifier); }\n\n\t/**\n\t * Builds the statement's FROM_LIST\n\t * - as either Table objects or Identifiers (in connection with a USING_LIST, in which case \"false\" should be first argument)\n\t * \n\t * .from(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tfrom(...tablesOrIdentifiers) { return this.build('FROM_LIST', tablesOrIdentifiers, [Identifier,Table]); }\n\n\t/**\n\t * Builds the statement's USING_LIST\n\t * \n\t * .using(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\tusing(...tables) { return this.build('USING_LIST', tables, Table); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\t\n\t/** \n\t* @return Void\n\t*/\n\treturning(...fields) { return this.build('RETURNING_LIST', fields, Field); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\tdelete_list: this.DELETE_LIST.map(t => t.toJson()),\n\t\t\tfrom_list: this.FROM_LIST.map(t => t.toJson()),\n\t\t\tusing_list: this.USING_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\treturning_list: this.RETURNING_LIST,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.from_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tif (json.delete_list?.length) instance.delete(...json.delete_list);\n\t\tinstance.from(...json.from_list);\n\t\tif (json.using_list?.length) instance.using(...json.using_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\tif (json.returning_list) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['DELETE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tif (this.DELETE_LIST.length) sql.push(this.DELETE_LIST.join(', '));\n\t\tsql.push('FROM', this.FROM_LIST.join(', '));\n\t\tif (this.USING_LIST.length) sql.push('USING', this.USING_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^DELETE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { from: { backtest: '^(?!.*\\\\s+DISTINCT\\\\s+$)', test: 'FROM' }, using: { backtest: '^(?!.*\\\\s+JOIN\\\\s+)', test: 'USING' }, join:JoinClause, where:'WHERE', orderBy:OrderByClause, limit:'LIMIT', returning:'RETURNING' };\n\t\tconst { tokens: [ maybeTablesSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// MAYBE_TABLES_SPEC (BEFORE A FROM CLAUSE) - MYSQL\n\t\tfor (const tblExpr of Lexer.split(maybeTablesSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Identifier]);\n\t\t\tinstance.delete(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (['from', 'using'].includes(clauseKey)) {\n\t\t\t\tfor (const tblExpr of Lexer.split(tokens.shift(), [','])) {\n\t\t\t\t\t// If we have both \"from\" and \"using\" clauses (Syntax 3 above), then \"using\" is the main table references\n\t\t\t\t\tconst asType = clauseKey === 'from' && clauses.some(s => s.toLowerCase() === 'using') ? Identifier : Table;\n\t\t\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [asType]);\n\t\t\t\t\tinstance[clauseKey](node);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// RETURNING\n\t\t\telse if (clauseKey === 'returning') {\n\t\t\t\tinstance.returning(...Lexer.split(tokens.shift(), [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Identifier from '../select/Identifier.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class ColumnsList extends Node {\r\n\r\n    /**\r\n\t * Instance properties\r\n\t */\r\n    LIST = [];\r\n\r\n\t/**\r\n\t * Adds a criterion.\r\n\t * \r\n\t * @param Array ...args\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlist(...args) { return this.build('LIST', args, Identifier); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { list: this.LIST.slice(0) }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.list)) return;\r\n\t\treturn (new this(context)).col(...json.list);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `(${ this.LIST.join(', ') })`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')')) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.list(...Lexer.split(_unwrap(expr, '(', ')'), [',']).map(arg => parseCallback(instance, arg.trim(), [Identifier])));\r\n\t\treturn instance;\r\n\t}\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport { _wrapped, _unwrap } from '@webqit/util/str/index.js';\r\nimport Expr from '../select/abstracts/Expr.js';\r\nimport Node from '../abstracts/Node.js';\r\n\r\nexport default class ValuesList extends Node {\r\n\r\n    /**\r\n\t * Instance properties\r\n\t */\r\n    LIST = [];\r\n\r\n\t/**\r\n\t * Adds a criterion.\r\n\t * \r\n\t * @param Array ...args\r\n\t * \r\n\t * @returns this\r\n\t */\r\n\tlist(...args) { return this.build('LIST', args, Expr.Types); }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() { return { list: this.LIST.slice(0) }; }\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.list)) return;\r\n\t\treturn (new this(context)).list(...json.list);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() { return `(${ this.LIST.join(', ') })`; }\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tif (!_wrapped(expr, '(', ')')) return;\r\n\t\tconst instance = new this(context);\r\n\t\tinstance.list(...Lexer.split(_unwrap(expr, '(', ')'), [',']).map(arg => parseCallback(instance, arg.trim(), Expr.Types)));\r\n\t\treturn instance;\r\n\t}\r\n}", "\r\nimport Lexer from '../Lexer.js';\r\nimport { _wrapped } from '@webqit/util/str/index.js';\r\nimport Node from '../abstracts/Node.js';\r\nimport Expr from '../select/abstracts/Expr.js';\r\nimport Identifier from '../select/Identifier.js';\r\nimport ColumnsList from './ColumnsList.js';\r\nimport ValuesList from './ValuesList.js';\r\n\r\nexport default class AssignmentList extends Node {\r\n\r\n    /**\r\n\t * Instance properties\r\n\t */\r\n    ENTRIES = [];\r\n    \r\n    /**\r\n\t * Builds the statement's ENTRIES\r\n\t * \r\n\t * .set(i => i.name('col1'), 3);\r\n\t * \r\n\t * @return this\r\n\t */\r\n    set(target_s, value_s) {\r\n\t\tif (Array.isArray(target_s)) {\r\n\t\t\ttarget_s = ColumnsList.fromJson(this, target_s);\r\n\t\t\tif (Array.isArray(value_s)) value_s = ValuesList.fromJson(this, value_s);\r\n\t\t\telse value_s = Expr.cast(this, value_s);\r\n\t\t} else if (!(target_s instanceof Node)) {\r\n\t\t\ttarget_s = Identifier.fromJson(this, target_s);\r\n\t\t\tvalue_s = Expr.cast(this, value_s);\r\n\t\t}\r\n\t\tthis.ENTRIES.push([target_s, value_s]);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\ttoJson() {\r\n\t\treturn { entries: this.ENTRIES.map(([target_s, value_s]) => [target_s.toJson(), value_s.toJson()]), };\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic fromJson(context, json) {\r\n\t\tif (!Array.isArray(json?.entries)) return;\r\n\t\tconst instance = new this(context);\r\n\t\tfor (let [target_s, value_s] of json.entries) {\r\n\t\t\tinstance.set(target_s, value_s);\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstringify() {\r\n\t\treturn `\\n\\t${ this.ENTRIES.map(([target_s, value_s]) => `${ target_s } = ${ value_s }`).join(',\\n\\t') }`;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, parseCallback) {\r\n\t\tconst instance = new this(context);\r\n\t\tfor (const assignmentExpr of Lexer.split(expr, [','])) {\r\n\t\t\tconst [target_s, value_s] = Lexer.split(assignmentExpr, ['=']).map(s => s.trim()).filter(s => s);\r\n\t\t\tif (!value_s) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\tif (_wrapped(target_s, '(', ')')) {\r\n\t\t\t\tconst targets = parseCallback(instance, value_s.trim(), [ColumnsList]);;\r\n\t\t\t\tif (!_wrapped(value_s, '(', ')')) return; // Abort... for this isn't the kind of expression we handle here\r\n\t\t\t\tconst values = /^\\((\\s+)?SELECT\\s+/i.test(value_s) \r\n\t\t\t\t\t? parseCallback(instance, value_s.trim()) \r\n\t\t\t\t\t: parseCallback(instance, value_s.trim(), [ValuesList]);\r\n\t\t\t\tinstance.set(targets, values);\r\n\t\t\t} else {\r\n\t\t\t\tconst target = parseCallback(instance, target_s);\r\n\t\t\t\tconst value = parseCallback(instance, value_s);\r\n\t\t\t\tinstance.set(target, value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n}", "\nimport Lexer from '../Lexer.js';\nimport AssignmentList from './AssignmentList.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\n\nexport default class OnConflictClause extends AssignmentList {\n\n    /**\n\t * Instance properties\n\t */\n    WHERE_CLAUSE = null;\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Void\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() { return { ...super.toJson(), where_clause: this.WHERE_CLAUSE?.toJson(), }; }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tconst instance = super.fromJson(context, json);\n\t\tif (!instance) return;\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\treturn instance;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = [];\n        if (this.params.dialect === 'mysql') sql.push('ON DUPLICATE KEY UPDATE');\n        else { sql.push(`ON CONFLICT ${ !this.ENTRIES.length ? 'DO NOTHING' : 'DO UPDATE SET' }`); }\n        sql.push(super.stringify());\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\treturn sql.join(' ');\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ onConflictMatch, conflictTarget/* TODO */, action, updateSpec ] = expr.match(new RegExp(`^${ this.regex }([\\\\s\\\\S]*)$`, 'i')) || [];\n\t\tif (!onConflictMatch) return;\n        if (/DO\\s+NOTHING/i.test(action)) return new this(context);\n        const [assignmentList, whereSpec] = Lexer.split(updateSpec, ['WHERE'], { ci: true });\n        const instance = super.parse(context, assignmentList, parseCallback);\n        if (whereSpec) instance.where(parseCallback(instance, whereSpec.trim(), [Condition,Assertion]));\n        return instance;\n    }\n\n\t/**\n\t * @property String\n\t */\n\tstatic regex = 'ON\\\\s+(?:DUPLICATE\\\\s+KEY|CONFLICT(?:\\\\s+([\\\\s\\\\S]+))?)\\\\s+(UPDATE|DO\\\\s+NOTHING|DO\\\\s+UPDATE\\\\s+SET\\\\s+)';\n}", "\nimport { _unwrap } from '@webqit/util/str/index.js';\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport AssignmentList from './AssignmentList.js';\nimport OnConflictClause from './OnConflictClause.js';\nimport Select from '../select/Select.js';\nimport Table from '../select/Table.js';\nimport ValuesList from './ValuesList.js';\nimport ColumnsList from './ColumnsList.js';\nimport Field from '../select/Field.js';\n\nexport default class Insert extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE = null;\n\tCOLUMNS_LIST = [];\n\tVALUES_LIST = [];\n\tSET_CLAUSE = null;\n\tSELECT_CLAUSE = null;\n\tON_CONFLICT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.TABLE ? [this.TABLE] : []; }\n\n\t/**\n\t * Builds the statement's TABLE\n\t * \n\t * .into(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * );\n\t * \n\t * @return Void\n\t */\n\tinto(table) { return this.build('TABLE', [table], Table); }\n\n\t/**\n\t * Builds the statement's COLUMNS_LIST\n\t * \n\t * .columns('col1', 'col2');\n\t * \n\t * @return Void\n\t */\n\tcolumns(...columns) { return this.build('COLUMNS_LIST', columns, ColumnsList, 'list'); }\n\n\t/**\n\t * Builds the statement's VALUES_LIST\n\t * \n\t * .values(100, 22);\n\t * \n\t * @return Void\n\t */\n\tvalues(...values) { return this.build('VALUES_LIST', values, ValuesList, 'list'); }\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) { return this.build('SET_CLAUSE', assignments, AssignmentList, 'set'); }\n\n\t/**\n\t * Builds the statement's SELECT_CLAUSE\n\t * \n\t * .select(...);\n\t * \n\t * @return Void\n\t */\n\tselect(query) { return this.build('SELECT_CLAUSE', [query], Select); }\n\n\t/**\n\t * Builds the statement's ON_CONFLICT_CLAUSE\n\t * \n\t * .onConflict(\n\t * \t\tc => c.set('col1', 100),\n\t * \t\tc => c.set('col2', 22)\n\t * \t\tc => c.where(\n\t * \t\t\tx => x.equals(...)\n\t * \t\t)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tonConflict(...onConflictSpecs) { return this.build('ON_CONFLICT_CLAUSE', onConflictSpecs, OnConflictClause); }\n\t\n\t/** \n\t* @return Void\n\t*/\n   returning(...fields) { return this.build('RETURNING_LIST', fields, Field); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttable: this.TABLE.toJson(),\n\t\t\tcolumns_list: this.COLUMNS_LIST.toJson(),\n\t\t\tvalues_list: this.VALUES_LIST.toJson(),\n\t\t\tset_clause: this.SET_CLAUSE?.toJson(),\n\t\t\tselect_clause: this.SELECT_CLAUSE?.toJson(),\n\t\t\ton_conflict_clause: this.ON_CONFLICT_CLAUSE?.toJson(),\n\t\t\treturning_list: this.RETURNING_LIST,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!json?.table) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.into(json.table);\n\t\tif (json.columns_list?.length) instance.columns(...json.columns_list);\n\t\tif (json.values_list?.length) instance.values(...json.values_list);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.select_clause) instance.select(json.select_clause);\n\t\tif (json.on_conflict_clause) instance.onConflict(json.on_conflict_clause);\n\t\tif (json.returning_list?.length) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['INSERT'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push('INTO', this.TABLE);\n\t\tif (this.SET_CLAUSE) sql.push('SET', this.SET_CLAUSE);\n\t\telse {\n\t\t\tif (this.COLUMNS_LIST) sql.push(this.COLUMNS_LIST);\n\t\t\tif (this.SELECT_CLAUSE) sql.push(this.SELECT_CLAUSE);\n\t\t\telse sql.push('VALUES', this.VALUES_LIST);\n\t\t}\n\t\tif (this.ON_CONFLICT_CLAUSE) sql.push(this.ON_CONFLICT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^INSERT(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?(?:\\s+INTO)?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match ) return;\n\t\tconst $body = this.mySubstitutePlaceholders(context, body.trim());\n\t\tconst { tokens: [ tableSpec, payloadSpec, onConflictSpec, returnList ], matches: [insertType, onConflictClause] } = Lexer.lex($body, ['(VALUES|VALUE|SET|SELECT)', 'ON\\\\s+(DUPLICATE\\\\s+KEY|CONFLICT)', 'RETURNING'], { useRegex:'i' });\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tif (/^SET$/i.test(insertType)) {\n\t\t\t// INSERT ... SET\n\t\t\tinstance.into(parseCallback(instance, tableSpec, [Table]));\n\t\t\tinstance.set(parseCallback(instance, payloadSpec.trim(), [AssignmentList]));\n\t\t} else {\n\t\t\tconst tableColumnSplit = Lexer.split(tableSpec, []);\n\t\t\tinstance.into(parseCallback(instance, tableColumnSplit.shift().trim(), [Table]));\n\t\t\tif (tableColumnSplit.length) {\n\t\t\t\tinstance.columns(parseCallback(instance, tableColumnSplit.shift().trim(), [ColumnsList]));\n\t\t\t}\n\t\t\tif (/^SELECT$/i.test(insertType)) {\n\t\t\t\t// INSERT ... SELECT\n\t\t\t\tinstance.select(parseCallback(instance, `SELECT ${ payloadSpec }`));\n\t\t\t} else {\n\t\t\t\t// INSERT ... VALUES|VALUE\n\t\t\t\tfor (const rowPayload of Lexer.split(payloadSpec, [','])) {\n\t\t\t\t\tinstance.values(parseCallback(instance, rowPayload.trim(), [ValuesList]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (onConflictClause) { instance.onConflict(parseCallback(instance, `${ onConflictClause } ${ onConflictSpec }`, [OnConflictClause])); }\n\t\tif (returnList) instance.returning(...Lexer.split(returnList, [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\treturn instance;\n\t}\n}", "\nimport Lexer from '../Lexer.js';\nimport StatementNode from '../abstracts/StatementNode.js';\nimport AssignmentList from '../insert/AssignmentList.js';\nimport JoinClause from '../select/JoinClause.js';\nimport OrderByClause from '../select/OrderByClause.js';\nimport Condition from '../select/Condition.js';\nimport Assertion from '../select/Assertion.js';\nimport Table from '../select/Table.js';\nimport Field from '../select/Field.js';\n\nexport default class Update extends StatementNode {\n\t \n\t/**\n\t * Instance properties\n\t */\n\tTABLE_LIST = [];\n\tJOIN_LIST = [];\n\tSET_CLAUSE = null;\n\tWHERE_CLAUSE = null;\n\tORDER_BY_CLAUSE = null;\n\tLIMIT_CLAUSE = null;\n\tRETURNING_LIST = [];\n\n\t/**\n\t * @returns Array\n\t */\n\tget TABLES() { return this.TABLE_LIST; }\n\n\t/**\n\t * Builds the statement's TABLE_LIST\n\t * \n\t * .table(\n\t * \t\tt1 => t1.name('tbl1').as('alias'),\n\t * \t\tt2 => t2.name('tbl2')\n\t * );\n\t * \n\t * @return Void\n\t */\n\ttable(...tables) { return this.build('TABLE_LIST', tables, Table); }\n\n\t/**\n\t * Builds the statement's JOIN_LIST (MySQL-specific)\n\t * \n\t * .join(\n\t * \t\tj1 => j1.name('tbl1').using('col').as('alias1'),\n\t * \t\tj2 => j2.query(\n\t * \t\t\tq => q.select().from()\n\t * \t\t).on(\n\t * \t\t\tc1 => c1.equals('a', 'b')\n\t * \t\t).as('alias2')\n\t * );\n\t * \n\t * @return array\n\t */\n\tjoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'full'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tleftJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'left'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\trightJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'right'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tinnerJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'inner'); }\n\n\t/**\n\t * A variant of the join()\n\t * \n\t * @param  String table\n\t * \n\t * @returns \n\t */\n\tcrossJoin(table) { return this.build('JOIN_LIST', [table], JoinClause, 'cross'); }\n\n\t/**\n\t * Builds the statement's SET_CLAUSE\n\t * \n\t * .set('col2', 22);\n\t * .set(\n\t * \t\tlist => list.set('col2', 22)\n\t * );\n\t * \n\t * @return Void\n\t */\n\tset(...assignments) { return this.build('SET_CLAUSE', assignments, AssignmentList, 'set'); }\n\n\t/**\n\t * Builds the statement's WHERE_CLAUSE\n\t * \n\t * .where(\n\t * \t\tc1 => c1.equals('a', 'b').and(\n\t * \t\t\tc2 => c2.isNull('a')\n\t * \t\t),\n\t * \t\tc3 => c3.lessThan(2, 4)\n\t * );\n\t * \n\t * @return Object\n\t */\n\twhere(...wheres) { return this.build('WHERE_CLAUSE', wheres, Condition, 'and'); }\n\n\t/**\n\t * Builds the statement's ORDER_BY_CLAUSE (MySQL-specific)\n\t * \n\t * .orderBy(\n\t * \t\t'col1',\n\t * \t\tby => by.name('col2').withFlag('ASC'),\n\t * \t\tby => by.func('CONCAT_WS', ... ).withFlag('ASC'),\n\t * \t\tby => by.case(c => c.given(), c => c.when(...).then(...), c.else() ).ASC(),\n\t * ).withRollup()\n\t * \n\t * @return this\n\t */\n\torderBy(...orderBys) { return (this.build('ORDER_BY_CLAUSE', orderBys, OrderByClause, 'criterion'), this.ORDER_BY_CLAUSE/* for: .withRollup() */); }\n\n\t/**\n\t * Sets the statement's LIMIT_CLAUSE (MySQL-specific)\n\t * \n\t * .limit([3, 5]);\n\t * \n\t * @return string\n\t */\n\tlimit(...limit) {\n\t\tif (!limit.every(l => typeof l === 'number')) throw new Error(`Limits must be of type number.`);\n\t\tthis.LIMIT_CLAUSE = limit;\n\t}\n\t\n\t/** \n\t* @return Void\n\t*/\n\treturning(...fields) { return this.build('RETURNING_LIST', fields, Field); }\n\n\t/**\n\t * @inheritdoc\n\t */\n\ttoJson() {\n\t\treturn {\n\t\t\ttable_list: this.TABLE_LIST.map(t => t.toJson()),\n\t\t\tjoin_list: this.JOIN_LIST.map(t => t.toJson()),\n\t\t\tset_clause: this.SET_CLAUSE?.toJson(),\n\t\t\twhere_clause: this.WHERE_CLAUSE?.toJson(),\n\t\t\torder_by_clause: this.ORDER_BY_CLAUSE?.toJson(),\n\t\t\tlimit_clause: this.LIMIT_CLAUSE,\n\t\t\treturning_list: this.RETURNING_LIST,\n\t\t\tflags: this.FLAGS,\n\t\t};\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic fromJson(context, json) {\n\t\tif (!Array.isArray(json?.table_list)) return;\n\t\tconst instance = (new this(context)).withFlag(...(json.flags || []));\n\t\tinstance.table(...json.table_list);\n\t\tif (json.join_list?.length) instance.join(...json.join_list);\n\t\tif (json.set_clause) instance.set(json.set_clause);\n\t\tif (json.where_clause) instance.where(json.where_clause);\n\t\tif (json.order_by_clause) instance.orderBy(json.order_by_clause);\n\t\tif (json.limit_clause) instance.limit(json.limit_clause);\n\t\tif (json.returning_list?.length) instance.returning(...json.returning_list);\n\t\treturn instance;\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstringify() {\n\t\tconst sql = ['UPDATE'];\n\t\tif (this.FLAGS.length) sql.push(this.FLAGS.map(s => s.replace(/_/g, ' ')));\n\t\tsql.push(this.TABLE_LIST.join(', '));\n\t\tif (this.JOIN_LIST.length) sql.push(...this.JOIN_LIST);\n\t\tsql.push('SET', this.SET_CLAUSE);\n\t\tif (this.WHERE_CLAUSE) sql.push('WHERE', this.WHERE_CLAUSE);\n\t\tif (this.ORDER_BY_CLAUSE) sql.push(this.ORDER_BY_CLAUSE);\n\t\tif (this.LIMIT_CLAUSE) sql.push('LIMIT', this.LIMIT_CLAUSE);\n\t\tif (this.RETURNING_LIST.length) sql.push('RETURNING', this.RETURNING_LIST.join(', '));\n\t\treturn sql.join(' ');\n\t}\n\t\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic parse(context, expr, parseCallback) {\n\t\tconst [ match, withUac, mysqlIgnore, body ] = /^UPDATE(\\s+WITH\\s+UAC)?(?:\\s+(IGNORE))?([\\s\\S]+)$/i.exec(expr.trim()) || [];\n\t\tif (!match) return;\n\t\tconst instance = new this(context);\n\t\tif (withUac) instance.withFlag('WITH_UAC');\n\t\tif (mysqlIgnore) instance.withFlag(mysqlIgnore);\n\t\tconst $body = this.mySubstitutePlaceholders(instance, body.trim());\n\t\tconst clausesMap = { join:JoinClause, set:'SET', where:'WHERE', orderBy:OrderByClause, limit:'LIMIT', returning:'RETURNING' };\n\t\tconst { tokens: [ tableSpec, ...tokens ], matches: clauses } = Lexer.lex($body, Object.values(clausesMap).map(x => typeof x === 'string' || x.test ? x : x.regex), { useRegex: 'i' });\n\t\t// TABLE_LIST\n\t\tfor (const tblExpr of Lexer.split(tableSpec, [','])) {\n\t\t\tconst node = parseCallback(instance, tblExpr.trim(), [Table]);\n\t\t\tinstance.table(node);\n\t\t}\n\t\t// CLAUSES\n\t\tfor (const clause of clauses) {\n\t\t\tconst $clause = clause.replace(/\\s+/g, '');\n\t\t\tconst clauseKey = Object.keys(clausesMap).find(key => (new RegExp(key, 'i')).test($clause));\n\t\t\t// TABLE_REFERENCES\n\t\t\tif (clauseKey === 'set') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [AssignmentList]);\n\t\t\t\tinstance.set(node);\n\t\t\t}\n\t\t\t// WHERE_CLAUSE\n\t\t\telse if (clauseKey === 'where') {\n\t\t\t\tconst node = parseCallback(instance, tokens.shift().trim(), [Condition,Assertion]);\n\t\t\t\tinstance.where(node);\n\t\t\t}\n\t\t\t// LIMIT\n\t\t\telse if (clauseKey === 'limit') {\n\t\t\t\tinstance.limit(parseInt(tokens.shift().trim()));\n\t\t\t}\n\t\t\t// RETURNING\n\t\t\telse if (clauseKey === 'returning') {\n\t\t\t\tinstance.returning(...Lexer.split(tokens.shift(), [',']).map(field => parseCallback(instance, field.trim(), [Field])));\n\t\t\t}\n\t\t\t// JOIN|ORDER_BY\n\t\t\telse {\n\t\t\t\tconst node = parseCallback(instance, `${ clause } ${ tokens.shift().trim() }`, [clausesMap[clauseKey]]);\n\t\t\t\tinstance[clauseKey](node);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}", "\n// Statements\nimport CreateTable from './create/CreateTable.js';\nimport CreateDatabase from './create/CreateDatabase.js';\nimport AlterTable from './alter/AlterTable.js';\nimport AlterDatabase from './alter/AlterDatabase.js';\nimport DropTable from './drop/DropTable.js';\nimport DropDatabase from './drop/DropDatabase.js';\nimport Delete from './delete/Delete.js';\nimport Insert from './insert/Insert.js';\nimport Select from './select/Select.js';\n//import Union from './select/Union.js';\nimport Update from './update/Update.js';\n// Expressions\nimport Expr from './select/abstracts/Expr.js';\n\n/**\n * @var object\n */\nexport default [\n\t// Statements\n\tCreateDatabase,\n\tAlterDatabase,\n\tDropDatabase,\n\tCreateTable,\n\tAlterTable,\n\tDropTable,\n\tInsert,\n\tUpdate,\n\tDelete,\n\t//Union,\n\tSelect,\n\t// Expressions\n\t...\n\tExpr.Types,\n]", "\r\nimport grammar from './grammar.js';\r\n\t\t\r\nexport default class Parser {\r\n\r\n\t/**\r\n\t * @property Object\r\n\t */\r\n\tstatic grammar = grammar;\r\n\r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parse(context, expr, grammar, params = {}) {\r\n\t\tif (!expr?.length) return;\r\n\t\tconst $grammar = grammar?.length ? grammar : this.grammar;\r\n\t\tfor (const Node of $grammar) {\r\n\t\t\tconst node = this.parseOne(context, expr, Node, params);\r\n\t\t\tif (!node) continue;\r\n\t\t\tif (params.log) console.log('.................', expr, '.................>', node.constructor.name);\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (params.assert === false) return;\r\n\t\tthrow new SyntaxError(expr);\r\n\t}\r\n\t \r\n\t/**\r\n\t * @inheritdoc\r\n\t */\r\n\tstatic parseOne(context, expr, Node, params = {}) {\r\n\t\treturn Node.parse(context, expr, ($context, $expr, $grammar, $params = {}) => {\r\n\t\t\treturn this.parse($context, $expr, $grammar, { ...params, ...$params });\r\n\t\t});\r\n\t}\r\n}", "\nimport CreateDatabase from \"../../query/create/CreateDatabase.js\";\n\nexport default class Savepoint {\n    \n    /**\n     * @constructor\n     */\n    constructor(client, json, direction = 'backward') {\n        Object.defineProperty(this, '$', { value: {\n            client,\n            json,\n            direction,\n        }});\n    }\n\n    /**\n     * @returns Driver\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @returns String\n     */\n    get direction() { return this.$.direction; }\n\n    /**\n     * @returns String\n     */\n    get id() { return this.$.json.id; }\n\n    /**\n     * @returns String\n     */\n    get databaseTag() { return this.$.json.database_tag; }\n\n    /**\n     * @returns Number\n     */\n    get versionTag() { return this.$.json.version_tag; }\n\n    /**\n     * @returns Number\n     */\n    get versionMax() { return this.$.json.version_max; }\n\n    /**\n     * @returns Number\n     */\n    get cursor() { return this.$.json.cursor; }\n\n    /**\n     * @returns String\n     */\n    get description() { return this.$.json.savepoint_description; }\n\n    /**\n     * @returns Date\n     */\n    get savepointDate() { return this.$.json.savepoint_date; }\n\n    /**\n     * @returns Date\n     */\n    get rollbackDate() { return this.$.json.rollback_date; }\n\n    /**\n     * @returns String\n     */\n    get rollbackOutcome() {\n        const $outcome = !this.$.json.status ? ['DROPPED','CREATED'] : (this.$.json.status === 'DOWN' ? ['CREATED','DROPPED'] : ['ALTERED']);\n        return this.direction === 'forward' ? $outcome.reverse()[0] : $outcome[0];\n    }\n\n    /**\n     * @returns String\n     */\n    name(postRollback = false) {\n        if (postRollback) return this.direction === 'forward' && this.$.json.$name || this.$.json.name;\n        return this.direction !== 'forward' && this.$.json.$name || this.$.json.name;\n    }\n\n    /**\n     * @returns Object\n     */\n    schema() {\n        const { name, $name, tables = [], status } = this.$.json;\n        return { name, ...($name ? { $name } : {}), tables, status };\n    }\n\n    /**\n     * @returns Object\n     */\n    toJson() {\n        const { id, database_tag, version_tag, version_max, cursor, savepoint_description: description, savepoint_date, rollback_date } = this.$.json;\n        return { id, name: this.name(), database_tag, version_tag, version_max, cursor, description, savepoint_date, rollback_date };\n    }\n\n    /**\n     * @returns Bool\n     */\n    async canRollback() {\n        const dbName = this.direction === 'forward' ? this.$.json.name : this.$.json.$name || this.$.json.name;\n        const currentSavepoint = (await this.client.database(dbName).savepoint({ direction: this.direction })) || {};\n        return currentSavepoint.id === this.$.json.id;\n    }\n\n    /**\n     * Method for restoring db schema to an identified savepoint.\n     * \n     * @return Void\n     */\n    async rollback() {\n        if (!(await this.canRollback())) throw new Error(`Invalid rollback order.`);\n        const schemaInstance = CreateDatabase.fromJson(this.client, this.schema());\n        if (this.direction !== 'forward') {\n            schemaInstance.reverseAlt(true);\n            schemaInstance.status(schemaInstance.status(), true);\n        }\n        // Execute rollback\n        if (schemaInstance.status() === 'DOWN') {\n            this.client.dropDatabase(schemaInstance.name(), { cascade: true, noCreateSavepoint: true });\n        } else if (schemaInstance.status() === 'UP') {\n            const altInstance = schemaInstance.getAlt().with({ resultSchema: schemaInstance });\n            this.client.query(altInstance, { noCreateSavepoint: true });\n        } else this.client.query(schemaInstance, { noCreateSavepoint: true });\n        // Update record\n        const tblName = [this.client.constructor.OBJ_INFOSCHEMA_DB,'database_savepoints'].join('.');\n        await this.client.query(`UPDATE ${ tblName } SET rollback_date = ${ this.direction === 'forward' ? 'NULL' : 'now()' } WHERE id = '${ this.$.json.id }'`);\n        this.$.json.rollback_date = this.direction === 'forward' ? null : Date.now();\n        return true;\n    }\n}", "\nimport Parser from '../../query/Parser.js';\nimport Node from '../../query/abstracts/Node.js';\nimport CreateTable from '../../query/create/CreateTable.js';\nimport CreateDatabase from '../../query/create/CreateDatabase.js';\nimport AlterTable from '../../query/alter/AlterTable.js';\nimport AlterDatabase from '../../query/alter/AlterDatabase.js';\nimport DropTable from '../../query/drop/DropTable.js';\nimport DropDatabase from '../../query/drop/DropDatabase.js';\nimport Savepoint from './Savepoint.js';\n\nexport default class AbstractClient {\n\n    /**\n     * @property String\n     */\n    static get OBJ_INFOSCHEMA_DB() { return 'obj_information_schema'; }\n    \n    /**\n     * @constructor\n     */\n    constructor(driver, params = {}) {\n        Object.defineProperty(this, '$', { value: { driver, params }});\n    }\n\n    /**\n     * @property Driver\n     */\n    get driver() { return this.$.driver; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n    /**\n     * Returns a database instance.\n     * \n     * @param String            name\n     * @param Object            params\n     * \n     * @return Database\n     */\n    database(name, params = {}) {\n        return new this.constructor.Database(this, ...arguments);\n    }\n\n    /**\n     * Returns all available databases.\n     * \n     * @return Array\n     */\n    async databases() { return []; }\n\n    /**\n     * Tells whether a database exists.\n     * \n     * @param String            name\n     * \n     * @return Bool\n     */\n    async hasDatabase(name) {\n        return (await this.databases()).includes(name);\n    }\n    \n    /**\n     * Returns a JSON representation of a database and its tables.\n     * \n     * @param String name\n     * @param Array tables\n     * @param Object params\n     * \n     * @return Object\n     */\n    async describeDatabase(name, tables = ['*'], params = {}) {\n        return { name, tables: await this.database(name).describeTable(tables, params), };\n    }\n\n    /**\n     * Composes a CREATE DATABASE query from descrete inputs\n     * \n     * @param Object|String  dbSchema\n     * @param Object         params\n     * \n     * @return Savepoint\n     */\n    async createDatabase(dbSchema, params = {}) {\n        if (typeof dbSchema === 'string') { dbSchema = { name: dbSchema }; }\n        else if (typeof dbSchema?.name !== 'string') throw new Error(`createDatabase() called with invalid arguments.`);\n        // -- Compose an schemaInstamce from request\n        const schemaInstamce = CreateDatabase.fromJson(this, dbSchema);\n        if (params.ifNotExists) schemaInstamce.withFlag('IF_NOT_EXISTS');\n        return await this.query(schemaInstamce, params);\n    }\n\n    /**\n     * Composes an ALTER DATABASE query from descrete inputs\n     * \n     * @param Object|String   altRequest\n     * @param Function        callback\n     * @param Object          params\n     * \n     * @return Savepoint\n     */\n    async alterDatabase(altRequest, callback, params = {}) {\n        if (typeof callback !== 'function') throw new Error(`alterDatabase() called with invalid arguments.`);\n        if (typeof altRequest === 'string') { altRequest = { name: altRequest }; }\n        else if (typeof altRequest?.name !== 'string') throw new Error(`alterDatabase() called with invalid arguments.`);\n        // -- Compose an altInstance from request\n        const schemaJson = await this.describeDatabase(altRequest.name, altRequest.tables);\n        const schemaInstance = CreateDatabase.fromJson(this, schemaJson).status('UP', 'UP');\n        await callback(schemaInstance);\n        const altInstance = schemaInstance.getAlt().with({ resultSchema: schemaInstance });\n        if (!altInstance.ACTIONS.length) return;\n        return await this.query(altInstance, params);\n    }\n\n    /**\n     * Composes a DROP DATABASE query from descrete inputs\n     * \n     * @param String            dbName\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async dropDatabase(dbName, params = {}) {\n        if (typeof dbName !== 'string') throw new Error(`dropDatabase() called with an invalid name: ${ dbName }.`);\n        // -- Compose an dropInstamce from request\n        const dropInstamce = DropDatabase.fromJson(this, { name: dbName });\n        if (params.ifExists) dropInstamce.withFlag('IF_EXISTS');\n        if (params.cascade) dropInstamce.withFlag('CASCADE');\n        return await this.query(dropInstamce, params);\n    }\n\n    /**\n     * Base logic for dropDatabase()\n     * \n     * @param Function                  handler\n     * @param String                    query\n     * @param Object                    params\n     * \n     * @return Object\n     */\n    async queryCallback(handler, query, params = {}) {\n        if (typeof query === 'string') query = Parser.parse(this, query, null, { log: params.log });\n        else if (!(query instanceof Node)) throw new Error(`query() called with invalid arguments.`);\n        const instanceOf = (o, classes) => classes.some(c => o instanceof c);\n        // -- Generate resultSchema for AlterDatabase and DropDatabase? We'll need it for savepoint creation or per driver's request for it (params.$resultSchema === 'always')\n        const scope = {};\n        const resultSchemaRequired = dbName => dbName && !(new RegExp(dbName, 'i')).test(this.constructor.OBJ_INFOSCHEMA_DB) && (!params.noCreateSavepoint || params.$resultSchema === 'always');\n        if (instanceOf(query, [CreateDatabase,AlterDatabase,DropDatabase]) && resultSchemaRequired(query.name())) {\n            if (query instanceof DropDatabase) {\n                const resultSchema = CreateDatabase.fromJson(this, await this.describeDatabase(query.name(), '*')).status('DOWN');\n                query.with({ resultSchema });\n            } else if (query instanceof AlterDatabase && !query.resultSchema) {\n                const tablesList = query.ACTIONS.filter(a => ['ALTER','DROP'].includes(a.TYPE)).map(x => x.NAME);\n                const resultSchema = CreateDatabase.fromJson(this, await this.describeDatabase(query.name(), tablesList)).status('UP', 'UP').alterWith(query); // Simulate edits;\n                query.with({ resultSchema });\n            } else if (query instanceof CreateDatabase) query.with({ resultSchema: query });\n            // -- And that's what we'll use as snapshot\n            scope.savepoint = query.resultSchema;\n        } else if (instanceOf(query, [CreateTable,AlterTable,DropTable])) {\n            const basename = query.basename() || await this.basenameGet(query.name(), true);\n            if (resultSchemaRequired(basename)) {\n                const dbApi = this.database(basename);\n                if (query instanceof DropTable && basename) {\n                    const resultSchema = CreateTable.fromJson(dbApi, await dbApi.describeTable(query.name())).status('DOWN');\n                    query.with({ resultSchema });\n                } else if (query instanceof AlterTable && !query.resultSchema && basename) {\n                    const resultSchema = CreateTable.fromJson(dbApi, await dbApi.describeTable(query.name())).status('UP', 'UP').alterWith(query); // Simulate edits;\n                    query.with({ resultSchema });\n                } else if (query instanceof CreateTable && basename) query.with({ resultSchema: query });\n                // -- But this is what we'll use as snapshot\n                if (!params.noCreateSavepoint && basename) {\n                    scope.savepoint = CreateDatabase.fromJson(this, {\n                        name: dbApi.name,\n                        tables: [query.resultSchema]\n                    }).status('UP');\n                }\n            }\n        }\n        // -- Execute...\n        const returnValue = await handler(query, params);\n        // -- Generate savepoint?\n        if (!params.noCreateSavepoint && scope.savepoint) {\n            scope.savepoint.status(scope.savepoint.status(), true);\n            return await this.createSavepoint(scope.savepoint, params.savepointDesc);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Sets or returns the search path for resolving unqualified table references.\n     * \n     * @param Array|String resolutionPath\n     * \n     * @return Array\n     */\n    async basenameResolution(resolutionPath = []) {\n        if (arguments.length) { return (this.$.resolutionPath = [].concat(resolutionPath), this); }\n        return new BasenameResolutor(this.$.basenameResolution);\n    }\n\n    /**\n     * Resolving unqualified table reference.\n     * \n     * @param String tblName\n     * @param Bool withDefaultBasename\n     * \n     * @returns String\n     */\n    async basenameGet(tblName, withDefaultBasename = false) {\n        const basenames = await this.basenameResolution();\n        return (await basenames.reduce(async (prev, dbName) => (await prev) || (await this.database(dbName).hasTable(tblName)) ? dbName : null, null))\n        || (withDefaultBasename ? basenames.find(s => !s.startsWith('$')) || basenames[0] : null);\n    }\n\n    /**\n\t * Returns all databases' current savepoint.\n\t * \n     * @param Object params\n\t * \n\t * @returns Object\n     */\n    async getSavepoints(params = {}) {\n        const OBJ_INFOSCHEMA_DB = this.constructor.OBJ_INFOSCHEMA_DB;\n        if (!(await this.hasDatabase(OBJ_INFOSCHEMA_DB))) return [];\n        const tblName = [OBJ_INFOSCHEMA_DB,'database_savepoints'].join('.');\n        const result = await this.query(`\n            SELECT id, database_tag, name, \"$name\", status, version_tag, version_max, rank_for_cursor || '/' || total AS cursor, savepoint_description, tables, savepoint_date, rollback_date FROM (\n                SELECT\n                ROW_NUMBER() OVER (PARTITION BY database_tag ORDER BY rollback_date IS NOT NULL ${ params.direction === 'forward' ? 'DESC' : 'ASC' }, version_tag ${ params.direction === 'forward' ? 'ASC' : 'DESC' }) AS rank_for_target,\n                ROW_NUMBER() OVER (PARTITION BY database_tag ORDER BY version_tag ASC) AS rank_for_cursor,\n                MAX(version_tag) OVER (PARTITION BY database_tag) AS version_max,\n                COUNT(version_tag) OVER (PARTITION BY database_tag) AS total,\n                * FROM ${ tblName }${ params.name ? (params.direction === 'forward' ? `WHERE name = '${ params.name }'` : `WHERE COALESCE(\"$name\", name) = '${ params.name }'`) : '' }\n            ) AS savepoint WHERE rollback_date IS ${ params.direction === 'forward' ? 'NOT NULL' : 'NULL' } AND rank_for_target = 1\n        `);\n        return result.map(savepoint => new Savepoint(this, savepoint, params.direction))\n    }\n\n    /**\n     * Method for saving snapshots to internal OBJ_INFOSCHEMA db.\n     * \n     * @param CreateDatabase    schemaInstamce\n     * @param String            savepointDescription\n     * \n     * @return Object\n     */\n    async createSavepoint(schemaInstamce, savepointDesc = null) {\n        // -- Create schema?\n        const OBJ_INFOSCHEMA_DB = this.constructor.OBJ_INFOSCHEMA_DB;\n        if (!(await this.hasDatabase(OBJ_INFOSCHEMA_DB))) {\n            await this.createDatabase({\n                name: OBJ_INFOSCHEMA_DB,\n                tables: [{\n                    name: 'database_savepoints',\n                    columns: [\n                        { name: 'id', type: 'uuid', primaryKey: true, default: { expr: 'gen_random_uuid()' } },\n                        // Actual snapshot\n                        { name: 'name', type: 'varchar', notNull: true },\n                        { name: '$name', type: 'varchar' },\n                        { name: 'tables', type: 'json' },\n                        { name: 'status', type: 'varchar' },\n                        // Meta data\n                        { name: 'savepoint_description', type: 'varchar' },\n                        { name: 'database_tag', type: 'varchar', notNull: true },\n                        { name: 'version_tag', type: 'int', notNull: true },\n                        { name: 'savepoint_date', type: 'timestamp', notNull: true },\n                        { name: 'rollback_date', type: 'timestamp' },\n                    ],\n                }],\n            }, { noCreateSavepoint: true });\n        }\n        // -- Savepoint JSON\n        const savepointJson = {\n            database_tag: null,\n            ...schemaInstamce.toJson(),\n            savepoint_description: savepointDesc,\n            version_tag: null,\n            savepoint_date: new Date,\n        };\n        // -- Find a match first\n        const currentSavepoint = await this.database(schemaInstamce.name()).savepoint();\n        if (currentSavepoint) {\n            const tblName = [OBJ_INFOSCHEMA_DB,'database_savepoints'].join('.');\n            // -- Apply id and tag from lookup\n            savepointJson.database_tag = currentSavepoint.databaseTag;\n            savepointJson.version_tag = (await this.query(`SELECT max(version_tag) + 1 AS version_next FROM ${ tblName } WHERE database_tag = '${ currentSavepoint.databaseTag }'`))[0].version_next;\n            // -- Delete forward records\n            if (savepointJson.version_tag - 1 !== currentSavepoint.versionTag) {\n                await this.query(`DELETE FROM ${ tblName } WHERE database_tag = '${ currentSavepoint.databaseTag }' AND rollback_date IS NOT NULL`);\n            }\n        } else {\n            // -- Generate tag and version as fresh\n            savepointJson.database_tag = `db:${ ( 0 | Math.random() * 9e6 ).toString( 36 ) }`;\n            savepointJson.version_tag = 1;\n        }\n        // -- Create record\n        const insertResult = await this.database(OBJ_INFOSCHEMA_DB).table('database_savepoints').insert(savepointJson);\n        return new Savepoint(this, { ...insertResult[0], version_max: insertResult[0].version_tag, cursor: null });\n    }\n}", "\nimport CreateTable from '../../query/create/CreateTable.js';\nimport DropTable from '../../query/drop/DropTable.js';\nimport Savepoint from './Savepoint.js';\n\nexport default class AbstractDatabase {\n\t\n\t/**\n\t * @constructor\n\t */\n\tconstructor(client, dbName, params = {}) {\n        Object.defineProperty(this, '$', { value: { client, name: dbName, params }});\n\t}\n\n    /**\n     * @property Client\n     */\n    get client() { return this.$.client; }\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.name; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n    /**\n     * Returns a table instance.\n     * \n     * @param String            name\n     * @param Object            params\n     * \n     * @return Table\n     */\n    table(name, params = {}) {\n        return new this.constructor.Table(this, ...arguments);\n    }\n\t\n    /**\n     * Returns list of tables.\n     * \n     * @return Array\n     */\n    async tables() { return []; }\n\n    /**\n     * Tells whether a table exists.\n     * \n     * @param String            name\n     * \n     * @return Bool\n     */\n    async hasTable(name) {\n        return (await this.tables()).includes(name);\n    }\n\n    /**\n     * Base logic for describeTable()\n     * \n     * @param String|Array      tblName_s\n     * @param Object            params\n     * \n     * @return Object\n     */\n    async describeTable(tblName_s, params = {}) {\n        const tblNames = [].concat(tblName_s);\n        const isSingle = !Array.isArray(tblName_s) && tblName_s !== '*';\n        const isAll = tblNames.length === 1 && tblNames[0] === '*';\n        return isSingle ? null : [];\n    }\n\n    /**\n     * Composes a CREATE TABLE query from descrete inputs\n     * \n     * @param Object            tblSchema\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async createTable(tblSchema, params = {}) {\n        if (typeof tblSchema?.name !== 'string') throw new Error(`createTable() called with invalid arguments.`);\n        // -- Compose an schemaInstamce from request\n        const schemaInstamce = CreateTable.fromJson(this, tblSchema);\n        if (params.ifNotExists) schemaInstamce.withFlag('IF_NOT_EXISTS');\n        return this.client.query(schemaInstamce, params);\n    }\n\n    /**\n     * Composes an ALTER TABLE query from descrete inputs\n     * \n     * @param String            tblName\n     * @param Function          callback\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async alterTable(tblName, callback, params = {}) {\n        if (typeof callback !== 'function' || typeof tblName !== 'string') throw new Error(`alterTable() called with invalid arguments.`);\n        // -- Compose an altInstance from request\n        const schemaJson = await this.describeTable(tblName);\n        const schemaInstance = CreateTable.fromJson(this, schemaJson).status('UP', 'UP');\n        await callback(schemaInstance);\n        const altInstance = schemaInstance.getAlt().with({ resultSchema: schemaInstance });\n        if (!altInstance.ACTIONS.length) return;\n        if (params.ifExists) altInstance.withFlag('IF_EXISTS');\n        return this.client.query(altInstance, params);\n    }\n\n    /**\n     * Composes a DROP TABLE query from descrete inputs\n     * \n     * @param String            tblName\n     * @param Object            params\n     * \n     * @return Savepoint\n     */\n    async dropTable(tblName, params = {}) {\n        if (typeof tblName !== 'string') throw new Error(`dropTable() called with invalid arguments.`);\n        // -- Compose an dropInstamce from request\n        const dropInstamce = DropTable.fromJson(this, { name: tblName });\n        if (params.ifExists) dropInstamce.withFlag('IF_EXISTS');\n        if (params.cascade) dropInstamce.withFlag('CASCADE');\n        return this.client.query(dropInstamce, params);\n    }\n\n    /**\n\t * Returns the database's current savepoint.\n\t * \n     * @param Object params\n\t * \n\t * @returns Object\n     */\n    async savepoint(params = {}) {\n        const savepoints = await this.client.getSavepoints({ ...params, name: this.name });\n        return savepoints[0];\n    }\n    async _savepoint(params = {}) {\n        const OBJ_INFOSCHEMA_DB = this.client.constructor.OBJ_INFOSCHEMA_DB;\n        if (!(await this.client.hasDatabase(OBJ_INFOSCHEMA_DB))) return;\n        const tblName = [OBJ_INFOSCHEMA_DB,'database_savepoints'].join('.');\n        const result = params.direction === 'forward'\n            ? await this.client.query(`\n                SELECT savepoint.*, preceding.id AS id_preceding FROM ${ tblName } AS savepoint\n                LEFT JOIN ${ tblName } AS preceding ON preceding.database_tag = savepoint.database_tag AND COALESCE(preceding.\"$name\", preceding.name) = savepoint.name AND preceding.version_tag < savepoint.version_tag\n                WHERE COALESCE(savepoint.name, savepoint.\"$name\") = '${ this.name }' AND savepoint.rollback_date IS NOT NULL AND (preceding.id IS NULL OR preceding.rollback_date IS NULL)\n                ORDER BY savepoint.version_tag ASC LIMIT 1\n            `)\n            : await this.client.query(`\n                SELECT savepoint.*, following.id AS id_following FROM ${ tblName } AS savepoint\n                LEFT JOIN ${ tblName } AS following ON following.database_tag = savepoint.database_tag AND following.name = COALESCE(savepoint.\"$name\", savepoint.name) AND following.version_tag > savepoint.version_tag\n                WHERE COALESCE(savepoint.\"$name\", savepoint.name) = '${ this.name }' AND savepoint.rollback_date IS NULL AND (following.id IS NULL OR following.rollback_date IS NOT NULL)\n                ORDER BY savepoint.version_tag DESC LIMIT 1\n            `);\n        return result[0] && new Savepoint(this.client, result[0], params.direction);\n    }\n}", "\nimport { _isObject } from '@webqit/util/js/index.js';\nimport Insert from '../../query/insert/Insert.js';\nimport Update from '../../query/update/Update.js';\nimport Delete from '../../query/delete/Delete.js';\nimport Select from '../../query/select/Select.js';\n\nexport default class AbstractTable {\n\t \n\t/**\n\t * @constructor\n\t */\n\tconstructor(database, tblName, params = {}) {\n        this.$ = { database, name: tblName, params };\n\t}\n\n    /**\n     * @property Database\n     */\n    get database() { return this.$.database; }\n\n    /**\n     * @property String\n     */\n    get name() { return this.$.name; }\n\n    /**\n     * @property Object\n     */\n    get params() { return this.$.params; }\n\n\t/**\n\t * Counts records.\n\t * \n\t * @param String q\n\t */\n\tasync count(q = '*') {\n\t\tconst result = await this.select([ q => q.fn('COUNT', q).as('c') ]);\n\t\treturn (result.rows || result)[0].c;\n\t}\n\t \n\t/**\n\t * Selects record(s).\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * \n\t * @param Number|Object|Function \twhere\n\t * \n\t * @param Array \t\t\t\t\tfields\n\t * @param Number|Object|Function \twhere\n\t */\n\tasync select(...args) {\n\t\tconst query = new Select(this.database.client);\n\t\t// Where and fields\n\t\tif (/^\\d+$/.test(args[0]) || _isObject(args[0])) {\n\t\t\tawait this.resolveWhere(query, args[0]);\n\t\t} else {\n\t\t\tquery.select(...(args[0] || ['*']));\n\t\t\tawait this.resolveWhere(query, args[1]);\n\t\t}\n\t\t// Handle\n\t\tquery.from([this.database.name, this.name]);\n\t\treturn await this.database.client.query(query);\n\t}\n\n\t/**\n\t * Inserts record(s).\n\t * \n\t * @param Object \t\t\t\t\tkeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tmultilineKeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tcolumns\n\t * @param Array \t\t\t\t\tmultilineValues\n\t * @param Array|String\t\t\t \treturnList\n\t */\n\tasync insert(...args) {\n\t\tconst query = new Insert(this.database.client);\n\t\tconst [ columns = [], values = [], returnList = '*' ] = await this.resolvePayload(...args);\n\t\t// Payload\n\t\tif (columns.length) query.columns(...columns);\n\t\tfor (const row of values) query.values(...row);\n\t\t// Handle\n\t\tquery.into([this.database.name, this.name]);\n\t\tif (returnList) query.returning(returnList);\n\t\treturn await this.database.client.query(query);\n\t}\n\t\t\n\t/**\n\t * Upserts record(s); with optional custom onConflict clause.\n\t * \n\t * @param Object \t\t\t\t\tkeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tmultilineKeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tcolumns\n\t * @param Array \t\t\t\t\tmultilineValues\n\t * @param Array|String\t\t\t \treturnList\n\t */\n\tasync upsert(...args) {\n\t\tconst query = new Insert(this.database.client);\n\t\tconst [ columns = [], values = [], returnList = '*' ] = await this.resolvePayload(...args);\n\t\t// Payload\n\t\tif (columns.length) query.columns(...columns);\n\t\tfor (const row of values) query.values(...row);\n\t\t// On-conflict\n\t\tquery.onConflict({ entries: columns.map((col, i) => [col, values[i]])});\n\t\tif (returnList) query.returning(returnList);\n\t\t// Handle\n\t\tquery.into([this.database.name, this.name]);\n\t\treturn await this.database.client.query(query);\n\t}\n\t\n\t/**\n\t * Updates record(s).\n\t * \n\t * @param Object|Object|Function \twhere\n\t * @param Object \t\t\t\t\tpayload\n\t * @param Array|String\t\t\t \treturnList\n\t */\n\tasync update(...args) {\n\t\tif (args.length < 2) throw new Error(`A \"where\" match cannot be ommitted.`);\n\t\tconst query = new Update(this.database.client);\n\t\tquery.table([this.database.name, this.name]);\n\t\t// Where and payload\n\t\tconst { where, payload, returnList = '*' } = args;\n\t\tawait this.resolveWhere(query, where);\n\t\tfor (const [key, value] of Object.entries(payload)) query.set(key, value);\n\t\tif (returnList) query.returning(returnList);\n\t\t// Handle\n\t\treturn await this.database.client.query(query);\n\t}\n\t \n\t/**\n\t * Deletes record(s).\n\t * \n\t * @param Number|Object|Function \twhere\n\t * @param Array|String\t\t\t \treturnList\n\t */\n\tasync delete(where, returnList = '*') {\n\t\tif (args.length < 1) throw new Error(`A \"where\" match cannot be ommitted.`);\n\t\tconst query = new Delete(this.database.client);\n\t\tquery.from([this.database.name, this.name]);\n\t\t// Where\n\t\tawait this.resolveWhere(query, where);\n\t\tif (returnList) query.returning(returnList);\n\t\t// Handle\n\t\treturn await this.database.client.query(query);\n\t}\n\t\n\t/**\n\t * -------------------------------\n\t */\n\n\t/**\n\t * Helps resolve specified where condition for the query.\n\t * \n\t * @param Query \t\t\t\t\t\tquery\n\t * @param Number|Bool|Object|Function \twhere\n\t */\n\tasync resolveWhere(query, where) {\n\t\tif (where === true) return;\n\t\tif (/^\\d+$/.test(where)) {\n\t\t\tconst schema = await this.database.describeTable(this.name);\n\t\t\tconst primaryKey = schema.columns?.find(col => col.primaryKey)?.name || schema.constraints.find(cons => cons.type === 'PRIMARY_KEY')?.targetColumns[0];\n\t\t\tif (!primaryKey) throw new Error(`Cannot resolve primary key name for implied record.`);\n\t\t\twhere = { [primaryKey]: where };\n\t\t}\n\t\tif (_isObject(where)) {\n\t\t\tquery.where(...Object.entries(where).map(([key, val]) => q => q.equals(key, val)));\n\t\t} else if (where) query.where(where);\n\t}\n\t\t\n\t/**\n\t * Resolves input arguments into columns and values array.\n\t * \n\t * @param Object \t\t\t\t\tkeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tmultilineKeyValsMap\n\t * @param Array|String\t\t\t \treturnList\n\t * \n\t * @param Array \t\t\t\t\tcolumns\n\t * @param Array \t\t\t\t\tmultilineValues\n\t * @param Array|String\t\t\t \treturnList\n\t */\n\tasync resolvePayload(...args) {\n\t\tlet columns = [], values = [], returnList;\n\t\tif (Array.isArray(args[0]) && /*important*/args[0].every(s => typeof s === 'string') && Array.isArray(args[1])) {\n\t\t\tif (!args[1].every(s => Array.isArray(s))) throw new TypeError(`Invalid payload format.`);\n\t\t\t[ columns, values, returnList ] = args.splice(0, 3);\n\t\t} else {\n\t\t\tconst payload = [].concat(args.shift());\n\t\t\tif (!_isObject(payload[0])) throw new TypeError(`Invalid payload format.`);\n\t\t\tcolumns = Object.keys(payload[0]);\n\t\t\tvalues = payload.map(row => Object.values(row));\n\t\t\treturnList = args.shift();\n\t\t}\n\t\tvalues = values.map(row => row.map(v => {\n\t\t\tif (this.params.bindings !== false) return q => q.$bind(0, v);\n\t\t\tif ([true,false,null].includes(v)) return q => q.literal(v);\n\t\t\tif (v instanceof Date) return q => q.value(v.toISOString().split('.')[0]);\n\t\t\tif (Array.isArray(v)) return q => q.array(v);\n\t\t\tif (_isObject(v)) return q => q.object(v);\n\t\t\treturn q => q.value(v);\n\t\t}));\n\t\treturn [columns, values, returnList];\n\t}\n}", "\n\nexport default class AbstractCursor {\n\t \n\t_pos = 0;\n\t_eof = false;\n\t_onfinish = [];\n\n\t/**\n\t * @constructor\n\t */\n\tconstructor(rows) {\n\t\tthis._cache = rows;\n\t}\n\t\t \n\t/**\n\t * @inheritdoc\n\t */\n\tget eof() { return !this._cache.length || this._pos === this._cache.length - 1; }\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tonfinish(callback) { this._onfinish.push(callback); }\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tnext() {\n\t\tif (this.eof) {\n\t\t\tthis._onfinish.forEach(callback => callback());\n\t\t\tthis._pos = 0;\n\t\t\treturn;\n\t\t}\n        this._pos ++;\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tif (this.eof) return;\n\t\treturn this._cache[this._pos];\n\t}\n}", "\nimport AbstractCursor from '../abstracts/AbstractCursor.js';\n\nexport default class SQLCursor extends AbstractCursor {\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tconstructor(store) {\n\t\tsuper([]);\n\t\t// ---------------\n\t\tthis._store = store;\n\t\t// ---------------\n\t\tthis._storeFetch = new Promise(async resolve => {\n\t\t\tthis.cache = await this._store.getAll();\n\t\t\tresolve();\n\t\t});\n\t}\n\t \n\t/**\n\t * @inheritdoc\n\t */\n\tasync fetch() {\n\t\tawait this._storeFetch;\n\t\treturn super.fetch();\n\t}\n}\n", "\nimport AbstractTable from '../abstracts/AbstractTable.js';\nimport SQLCursor from './SQLCursor.js';\n\nexport default class SQLTable extends AbstractTable {\n\n\t/**\n\t * Returns a cursor.\n\t * \n\t * @return SQLCursor\n\t */\n\tgetCursor() { return new SQLCursor(this); }\n}", "\n\nimport { _intersect } from '@webqit/util/arr/index.js';\nimport AbstractDatabase from '../abstracts/AbstractDatabase.js';\nimport SQLTable from './SQLTable.js';\n\nexport default class SQLDatabase extends AbstractDatabase {\n\t\n    /**\n\t * SQLTable class.\n     * \n     * @property Object\n\t */\n    static Table = SQLTable;\n\n    /**\n     * Returns a list of tables.\n     * \n     * @return Array\n\t */\n    async tables() {\n        const sql = `SELECT table_name FROM information_schema.tables WHERE table_schema = '${ this.name }'`;\n        const result = await this.client.driver.query(sql);\n        return (result.rows || result).map(row => row.table_name);\n    }\n\n     /**\n     * Describes table.\n     * \n     * @param String|Array      tblName_s\n     * @param Object            params\n     * \n     * @return Object|Array\n     */\n    async describeTable(tblName_s, params = {}) {\n        const isSingle = !Array.isArray(tblName_s) && tblName_s !== '*';\n        const tblNames = [].concat(tblName_s);\n        const [ sql0, sql1 ] = this.getDescribeTableSql(tblNames);\n        const columns = await this.client.driver.query(sql0);\n        const constraints = await this.client.driver.query(sql1);\n        const schemas = this.formatDescribeTableResult(tblNames, (columns.rows || columns), (constraints.rows || constraints), []);\n        return isSingle ? schemas[0] : schemas;\n    }\n\n    /**\n     * Composes the SQL for a SHOW TABLE operation.\n     * \n     * @param Array tblNames\n     * \n     * @returns Array\n     */\n    getDescribeTableSql(tblNames) {\n        // SHOW CREATE TABLE isn't supported by postgreSql, plus we need that would add auto-added constraint names that the querying the information_schema adds\n        const sql0 = `\n        SELECT\n            COLUMNS.column_name,\n            COLUMNS.table_name,\n            COLUMNS.ordinal_position,\n            COLUMNS.column_default,\n            COLUMNS.is_nullable,\n            COLUMNS.data_type,\n            COLUMNS.character_maximum_length,\n            ${ this.client.params.dialect === 'mysql' ? '' : `\n            COLUMNS.is_identity,\n            COLUMNS.identity_generation,\n            COLUMNS.identity_start,\n            COLUMNS.identity_increment,\n            COLUMNS.identity_maximum,\n            COLUMNS.identity_minimum,\n            COLUMNS.identity_cycle,\n            ` }\n            COLUMNS.is_generated,\n            COLUMNS.generation_expression\n\n        FROM INFORMATION_SCHEMA.COLUMNS AS COLUMNS\n\n        WHERE COLUMNS.TABLE_SCHEMA='${ this.name }'\n            ${ tblNames.length && tblNames[0] !== '*' ? `AND COLUMNS.TABLE_NAME IN ('${ tblNames.join(`','`) }')` : '' }\n        ORDER BY COLUMNS.ordinal_position\n        `;\n\n        const ANY_VALUE = col => this.client.params.dialect === 'mysql' ? col : `ANY_VALUE(${ col })`;\n        const GROUP_CONCAT = (col, orderBy) => this.client.params.dialect === 'mysql' ? `GROUP_CONCAT(${ col }${ orderBy ? ` ORDER BY ${ orderBy }` : `` } SEPARATOR ',')` : `STRING_AGG(${ col }, ','${ orderBy ? ` ORDER BY ${ orderBy }` : `` })`;\n\n        const sql1 = `\n        SELECT\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.table_name`) } AS table_name,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.column_name`, `TABLE_CONSTRAINTS_DETAILS.ordinal_position`) } AS column_name,\n            TABLE_CONSTRAINTS.constraint_name AS constraint_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS.constraint_type`) } AS constraint_type,\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.check_clause`) } AS check_clause,\n                \n            ${ this.client.params.dialect === 'mysql' ? `\n            ${ ANY_VALUE(`CHECK_CONSTRAINTS_DETAILS.level`) } AS check_constraint_level,\n            ${ GROUP_CONCAT(`TABLE_CONSTRAINTS_DETAILS.referenced_column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`TABLE_CONSTRAINTS_DETAILS.referenced_table_schema`) } AS referenced_table_schema,\n            ` : `\n            ${ GROUP_CONCAT(`RELATION_DETAILS.column_name`) } AS referenced_column_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_name`) } AS referenced_table_name,\n            ${ ANY_VALUE(`RELATION_DETAILS.table_schema`) } AS referenced_table_schema,\n            ` }\n            --${ GROUP_CONCAT(`RELATION.unique_constraint_name`) } AS referenced_constraint_name,\n            ${ ANY_VALUE(`RELATION.match_option`) } AS match_rule,\n            ${ ANY_VALUE(`RELATION.update_rule`) } AS update_rule,\n            ${ ANY_VALUE(`RELATION.delete_rule`) } AS delete_rule\n\n        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TABLE_CONSTRAINTS\n\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS TABLE_CONSTRAINTS_DETAILS\n            ON TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.TABLE_NAME = TABLE_CONSTRAINTS.TABLE_NAME\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND TABLE_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS AS CHECK_CONSTRAINTS_DETAILS\n            ON CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND CHECK_CONSTRAINTS_DETAILS.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n\n        LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS AS RELATION\n            ON RELATION.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n            AND RELATION.CONSTRAINT_SCHEMA = TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA\n            AND RELATION.CONSTRAINT_CATALOG = TABLE_CONSTRAINTS.CONSTRAINT_CATALOG\n        ${ this.client.params.dialect === 'mysql' ? '' : `\n        LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS RELATION_DETAILS\n            ON RELATION_DETAILS.CONSTRAINT_NAME = RELATION.UNIQUE_CONSTRAINT_NAME\n            AND RELATION_DETAILS.CONSTRAINT_SCHEMA = RELATION.UNIQUE_CONSTRAINT_SCHEMA\n            AND RELATION_DETAILS.CONSTRAINT_CATALOG = RELATION.UNIQUE_CONSTRAINT_CATALOG\n            ` }\n\n        WHERE TABLE_CONSTRAINTS.CONSTRAINT_SCHEMA = '${ this.name }'\n            ${ tblNames.length && tblNames[0] !== '*' ? `AND TABLE_CONSTRAINTS.TABLE_NAME IN ('${ tblNames.join(`','`) }')` : '' }\n        GROUP BY (TABLE_CONSTRAINTS.constraint_name)\n        `;\n\n        return [sql0, sql1];\n    }\n\n    /**\n     * Builds a schema object from the results of querying the information schema.\n     * \n     * @param Array tblNames\n     * @param Array columns\n     * @param Array constraints\n     * @param Array indexes\n     * \n     * @returns Object\n     */\n    formatDescribeTableResult(tblNames, columns, constraints, indexes) {\n        // PG likes using verbose data types\n        const dataType = val => val === 'character varying' ? 'varchar' : (val === 'integer' ? 'int' : val);\n        const formatRelation = (key, tableScope = false) => ({\n            ...(!tableScope ? { name: key.constraint_name } : {}),\n            targetTable: [key.referenced_table_schema,key.referenced_table_name],\n            targetColumns: key.referenced_column_name.split(',').map(s => s.trim()),\n            ...(key.match_rule !== 'NONE' ? { matchRule: key.match_rule } : {}),\n            updateRule: key.update_rule,\n            deleteRule: key.delete_rule,\n        });\n        return (tblNames.length && tblNames[0] !== '*' ? tblNames : [...new Set(columns.map(col => col.table_name))]).map(tblName => {\n            const $columns = columns.filter(col => col.table_name === tblName);\n            const $constraints = constraints.filter(constr => constr.table_name === tblName);\n            const $indexes = indexes.filter(constr => constr.table_name === tblName);\n            // -----\n            const columnNames = $columns.map(col => col.column_name);\n            const normalizeCheckConstraint = key => {\n                // Which columns are referenced in the check expr? We first eliminate all quoted strings, obtain all literals, and intersect with columnNames\n                const literals = (key.check_clause.replace(/([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, '').match( /\\w+/g ) || []).map(s => s.toLowerCase());\n                key.columns = _intersect(columnNames, literals);\n                return key;\n            };\n            let [ primaryKey, uniqueKeys, foreignKeys, checks ] = $constraints.reduce(([ primarys, uniques, foreigns, checks ], key) => {\n                if (key.constraint_type === 'PRIMARY KEY') return [ primarys.concat(key), uniques, foreigns, checks ];\n                if (key.constraint_type === 'UNIQUE') return [ primarys, uniques.concat(key), foreigns, checks ];\n                if (key.constraint_type === 'FOREIGN KEY') return [ primarys, uniques, foreigns.concat(key), checks ];\n                if (key.constraint_type === 'CHECK' && !(this.client.params.dialect === 'postgres' && /^[\\d_]+not_null/.test(key.constraint_name))) return [ primarys, uniques, foreigns, checks.concat(normalizeCheckConstraint(key)) ];\n                return [ primarys, uniques, foreigns, checks ];\n            }, [[], [], [], []]);\n            // -----\n            const schema = {\n                name: tblName,\n                columns: $columns.reduce((cols, col) => {\n                    const temp = {};\n                    return cols.concat({\n                        name: col.column_name,\n                        type: col.character_maximum_length ? { name: dataType(col.data_type), maxLen: col.character_maximum_length } : dataType(col.data_type),\n                        ...(primaryKey.length === 1 && primaryKey[0].column_name === col.column_name && (temp.pKeys = primaryKey.pop()) ? {\n                            primaryKey: { name: temp.pKeys.constraint_name }\n                        } : {}),\n                        ...((temp.uKeys = uniqueKeys.filter(key => key.column_name === col.column_name)).length === 1 && (uniqueKeys = uniqueKeys.filter(key => key !== temp.uKeys[0])) ? {\n                            uniqueKey: { name: temp.uKeys[0].constraint_name }\n                        } : {}),\n                        ...((temp.fKeys = foreignKeys.filter(key => key.column_name === col.column_name)).length === 1 && (foreignKeys = foreignKeys.filter(key => key !== temp.fKeys[0])) ? {\n                            references: formatRelation(temp.fKeys[0])\n                        } : {}),\n                        ...((temp.cKeys = checks.filter(key => key.check_constraint_level !== 'Table' && key.columns.length === 1 && key.columns[0] === col.column_name)).length === 1 && (checks = checks.filter(key => key !== temp.cKeys[0])) ? {\n                            check: { name: temp.cKeys[0].constraint_name, expr: temp.cKeys[0].check_clause }\n                        } : {}),\n                        ...(col.is_identity !== 'NO' ? {\n                            identity: { always: col.identity_generation === 'ALWAYS' }\n                        } : {}),\n                        ...(col.is_generated !== 'NEVER' ? {\n                            generated: { always: col.is_generated === 'ALWAYS', expr: col.generation_expression }\n                        } : {}),\n                        ...(col.is_nullable === 'NO' ? {\n                            notNull: true\n                        } : {}),\n                        ...(col.default ? {\n                            default: { expr: col.default }\n                        } : {}),\n                    });\n                }, []),\n                constraints: [],\n                indexes: [],\n            };\n            schema.constraints.push(...[...primaryKey, ...uniqueKeys, ...foreignKeys].map(key => ({\n                name: key.constraint_name,\n                type: key.constraint_type === 'UNIQUE' ? 'UNIQUE_KEY' : key.constraint_type,\n                columns: key.column_name.split(',').map(col => col.trim()),\n                ...(key.constraint_type === 'FOREIGN KEY' ? { references: formatRelation(key, true) } : {}),\n            })));\n            schema.constraints.push(...checks.map(key => ({\n                name: key.constraint_name,\n                type: key.constraint_type,\n                columns: key.columns,\n                expr: key.check_clause,\n            })));\n            return schema;\n        });\n    }\n}", "\nimport Lexer from '../../query/Lexer.js';\nimport Identifier from '../../query/select/Identifier.js';\nimport AbstractClient from '../abstracts/AbstractClient.js';\nimport SQLDatabase from './SQLDatabase.js';\t\n\nexport default class SQLClient extends AbstractClient {\n\n    /**\n     * Instance.\n     * \n     * @param Object params \n     */\n    constructor(driver, params = {}) {\n        if (typeof driver !== 'object') throw new Error(`The options.driver parameter is required and must be an object.`);\n        if (typeof driver.query !== 'function') throw new Error(`The provided driver must expose a .query() function.`);\n        super(driver, params);\n    }\n\n    /**\n\t * Client kind.\n     * \n     * @property String\n\t */\n    static kind = 'sql';\n\n    /**\n\t * Database class.\n     * \n     * @property Object\n\t */\n    static Database = SQLDatabase;\n\n\t/**\n     * Returns a list of databases.\n     * \n     * @param Object params\n     * \n     * @return Array\n\t */\n    async databases() {\n        const sql = `SELECT schema_name FROM information_schema.schemata`;\n        const result = await this.driver.query(sql);\n        return (result.rows || result).map(row => row.schema_name);\n\t}\n\n    /**\n     * Runs a query.\n     * \n     * @param String            query\n     * @param Object            params\n     * \n     * @return Any\n     */\n    async query(query, params = {}) {\n        return await this.queryCallback(async (queryInstance, params) => {\n            if (queryInstance.expandable) await queryInstance.expand(true);\n            let myReturningList;\n            if (this.params.dialect === 'mysql' && queryInstance.RETURNING_LIST?.length) {\n                queryInstance = queryInstance.clone();\n                myReturningList = queryInstance.RETURNING_LIST.splice(0);\n                // TODO: myReturningList\n            }\n            const bindings = (queryInstance.BINDINGS || []).concat(params.params || []).map(value => Array.isArray(value) || typeof value === 'object' && value ? JSON.stringify(value) : value);\n            const result = await this.driver.query(queryInstance.toString(), bindings);\n            return result.rows || result;\n        }, ...arguments);\n    }\n\n    /**\n     * Sets or returns the search path for resolving unqualified table references.\n     * \n     * @param Array|String resolutionPath\n     * \n     * @return Array\n     */\n    async basenameResolution(resolutionPath = []) {\n        if (arguments.length) {\n            resolutionPath = [].concat(resolutionPath).map(name => Identifier.fromJson(this, name));\n            const sql = this.params.dialect === 'mysql' ? `USE ${ resolutionPath[0] }` : `SET SEARCH_PATH TO ${ resolutionPath.join(',') }`;\n            return await this.driver.query(sql);\n        }\n        let sql, key;\n        if (this.params.dialect === 'mysql') {\n            sql = 'SELECT database() AS default_db', key = 'default_db';\n        } else {\n            sql = `SHOW SEARCH_PATH`, key = 'search_path'; // Can't remember what happens here\n            sql = `SELECT current_setting('SEARCH_PATH')`, key = 'current_setting';\n        }\n        const result = await this.driver.query(sql);\n        const value = ((result.rows || result)[0] || {})[key];\n        return Lexer.split(value, [',']).map(s => Identifier.parseIdent(this, s.trim())[0]);\n    }\n}"],
  "mappings": "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",
  "names": ["isString_default", "val", "isUndefined_default", "val", "isTypeFunction_default", "val", "isFunction_default", "val", "isTypeFunction_default", "isArray_default", "val", "isTypeArray_default", "val", "isString_default", "isUndefined_default", "isNull_default", "val", "isTypeObject_default", "val", "isTypeFunction_default", "isEmpty_default", "val", "isNull_default", "isUndefined_default", "isTypeObject_default", "isObject_default", "val", "from_default", "val", "castObject", "isArray_default", "isObject_default", "isEmpty_default", "isTypeArray_default", "isNumber_default", "val", "isNumeric_default", "val", "isNumber_default", "_flatten", "arr", "depth", "withObjects", "isNumeric_default", "isArray_default", "isObject_default", "acc", "val", "flatten_default", "first_default", "arr", "amount", "count", "itm", "firsts", "last_default", "arr", "amount", "first_default", "pushUnique_default", "arr", "items", "itm", "getPrototypeChain_default", "obj", "until", "isArray_default", "prototypalChain", "getAllPropertyNames_default", "obj", "until", "keysAll", "getPrototypeChain_default", "pushUnique_default", "mergeCallback", "objs", "callback", "deepProps", "isReplace", "withSymbols", "depth", "obj1", "isNumeric_default", "obj2", "i", "isTypeObject_default", "isFunction_default", "getAllPropertyNames_default", "key", "valAtObj1", "valAtObj2", "isArray_default", "isObject_default", "merge_default", "objs", "mergeCallback", "k", "obj1", "obj2", "isPlainObject_default", "obj", "isObject_default", "isBoolean_default", "val", "each_default", "obj", "callback", "returnValue", "isTypeObject_default", "k", "i", "isNumeric_default", "compareCallback_default", "obj1", "obj2", "assertion", "netComparison", "contrast", "returnOnFirstFalse", "isArray_default", "result", "contn", "v1", "testPass", "each_default", "k", "v2", "isTypeObject_default", "isObject_default", "isBoolean_default", "_even", "obj1", "obj2", "assertion", "depth", "isArray_default", "isObject_default", "obj1Keys", "obj2Keys", "isPlainObject_default", "result", "compareCallback_default", "v1", "v2", "isFunction_default", "isNumber_default", "even_default", "copyPlain_default", "obj", "filter", "mergeCallback", "key", "obj1", "obj2", "isFunction_default", "isArray_default", "intersect_default", "arr", "arr2", "callback", "isArray_default", "val1", "val2", "Lexer", "_Lexer", "str", "delims", "options", "isString_default", "copyResult", "result", "copyPlain_default", "cached", "even_default", "instance", "runtime", "from_default", "merge_default", "cursor", "flatten_default", "i", "charWidth", "commentTest", "quoteTest", "nestingTest", "chars", "stopChar", "matchedDelim", "nextIndex", "quote", "block", "last_default", "ending", "starting", "first_default", "matchedStarting", "matchedEnding", "testList", "k", "testArg", "isObject_default", "isFunction_default", "ret", "regexFlags", "m", "match", "base", "text", "target", "isNewSeries", "splitSeries", "isUndefined_default", "splitSeries2", "comments", "Lexer", "Node", "_Node", "context", "statementNode", "asInputDialect", "string_s", "$strings", "expr", "escChar", "parts", "Lexer", "parses", "s", "get", "x", "meta", "attr", "flags", "f", "$flags", "$flag", "a", "flag", "b", "attrName", "args", "Type", "delegate", "Types", "cast", "arg", "prev", "set", "instance", "router", "methodName", "t", "name", "parseCallback", "json", "Identifier", "Node", "name", "nameParts", "context", "json", "s", "instance", "expr", "basename", "after_default", "subject", "search", "afterLast", "pos", "before_default", "subject", "search", "beforeLast", "pos", "beforeLast_default", "subject", "search", "before_default", "fromCamel_default", "str", "delimiter", "toTitle_default", "str", "strict", "txt", "toCamel_default", "str", "fromStart", "toTitle_default", "unwrap_default", "subject", "openingTag", "closingTag", "beforeLast_default", "after_default", "wrapped_default", "subject", "openingTag", "closingTag", "DataType", "Node", "context", "name", "precision", "tz", "json", "expr", "parse", "key", "AbstractNode", "Node", "fromCamel_default", "name", "key", "isWrite", "isDirty", "type", "args", "callback", "value", "pass", "statusBefore", "returnValue", "recursively", "node", "entries", "prop", "normalValue", "context", "json", "instance", "val", "AbstractConstraint", "AbstractNode", "json", "context", "callback", "expr", "name", "$expr", "asInputDialect", "nameRegex", "nameUnscaped", "nameEscaped", "rest", "columnsExpr", "Lexer", "unwrap_default", "columnExpr", "Identity", "AbstractConstraint", "val", "context", "json", "instance", "AutoIncrement", "expr", "name", "$expr", "AutoIncrement", "AbstractConstraint", "Identity", "AbstractExpr", "AbstractConstraint", "expr", "context", "json", "instance", "val", "name", "$expr", "wrapped_default", "unwrap_default", "Expression", "AbstractExpr", "context", "expr", "name", "$expr", "Default", "AbstractExpr", "NotNull", "AbstractConstraint", "PrimaryKey1", "AbstractConstraint", "ForeignKey1", "AbstractConstraint", "table", "Identifier", "columns", "rule", "context", "json", "callback", "instance", "val", "targetTable", "basename", "Node", "sql", "serializeReferentialRule", "expr", "name", "$expr", "table_maybeQualified", "cols", "opts", "Lexer", "targetColumns", "unwrap_default", "col", "matchReferentialRule", "str", "type", "referentialActionRe", "keyword1", "keyword2", "keyword2Columns", "s", "UniqueKey1", "AbstractConstraint", "context", "expr", "name", "$expr", "Check", "AbstractExpr", "Column", "AbstractNode", "AutoIncrement", "Identity", "Expression", "Default", "NotNull", "PrimaryKey1", "ForeignKey1", "UniqueKey1", "Check", "value", "DataType", "trueFalse", "type", "setting", "existing", "cons", "json", "constraintDef", "propName", "toCamel_default", "props", "lonePropValue", "propValue", "context", "$type", "_", "__", "___", "constraints", "instance", "val", "constraintsNormalized", "normalized", "name", "fromCamel_default", "c", "expr", "parseCallback", "namePart", "bodyPart", "Lexer", "qualifier", "regexes", "columnType", "tokens", "constraint", "Index", "AbstractNode", "value", "columns", "context", "json", "instance", "val", "expr", "match", "type", "rest", "namePart", "columnsPart", "Lexer", "name", "unwrap_default", "columnExpr", "Action", "_Action", "Node", "newName", "newDb", "argument", "argumentNew", "reference", "context", "json", "instance", "Classes", "Column", "DataType", "CreateTable", "Index", "prev", "Class", "subAction", "StatementNode", "Node", "context", "node", "clone", "expr", "Lexer", "chunk", "inPlace", "AbstractStatementNode", "StatementNode", "Node", "name", "basename", "newName", "Action", "newDb", "argument", "reference", "action", "context", "json", "instance", "AlterTable", "AbstractStatementNode", "reference", "argument", "Action", "stmts", "rename0", "move0", "action", "ifExists", "restrictOrCascadeFlag", "ifNotExists", "firstFlag", "afterFlag", "Column", "constraint", "subAction", "DataType", "verb", "renames", "stmt", "sql", "basename", "s", "context", "expr", "parseCallback", "match", "rest", "namePart", "bodyPart", "Lexer", "tblName", "dbName", "instance", "regex", "name", "renameMatch", "nodeKind_a", "nodeNameUnescaped_a", "nodeNameEscaped_a", "newNodeNameUnescaped_a", "newNodeNameEscaped_a", "nodeName", "newNodeName", "a", "moveMatch", "newSchemaUnescaped", "newSchemaEscaped", "dropMatch", "nodeKind_b", "ifExists_b", "nodeNameUnescaped_b", "nodeNameEscaped_b", "flags_b", "flags", "addMatch", "columnKeyword_c", "ifColumnNotExists_c", "spec_c", "$spec", "$first", "$afterRef", "CreateTable", "Index", "changeMatch", "verb_d", "nodeNameUnescaped_d", "nodeNameEscaped_d", "spec_d", "alterMatch", "nodeKind_e", "nodeNameUnescaped_e", "nodeNameEscaped_e", "subAction_e", "argument_e", "ifNodeExits_e", "constraintOrIndexAttr_e", "nodeKind", "argumentNew", "$", "AbstractStatementNode", "AbstractNode", "Node", "node", "basename", "context", "json", "callback", "instance", "val", "PrimaryKey2", "PrimaryKey1", "columns", "context", "json", "instance", "val", "expr", "parseCallback", "$expr", "columnsExpr", "Lexer", "ForeignKey2", "ForeignKey1", "columns", "context", "json", "instance", "val", "namePart", "name", "$name", "sql", "expr", "parseCallback", "$expr", "columnsExpr", "rest", "Lexer", "UniqueKey2", "UniqueKey1", "columns", "context", "json", "instance", "val", "expr", "parseCallback", "$expr", "columnsExpr", "Lexer", "CreateTable", "_CreateTable", "AbstractStatementNode", "PrimaryKey2", "ForeignKey2", "UniqueKey2", "Check", "node", "Column", "AbstractConstraint", "Index", "x", "cons", "pk", "col", "column", "constraint", "index", "idx", "altInstance", "getNode", "reference", "ifExists", "action", "existing", "subAction", "Type", "instance", "AlterTable", "constraintDirty", "includingName", "k", "isSame", "columnRef", "columnClone", "consDefault", "constraints1", "a", "constraints2", "tableLevlConstraintDirty", "getAltType", "altType", "targetList", "db", "ForeignKey1", "tbl", "context", "json", "key", "defs", "constraints", "indexes", "cnst", "ndx", "basename", "s", "expr", "parseCallback", "match", "ifNotExists", "rest", "namePart", "bodyPart", "Lexer", "tblName", "dbName", "unwrap_default", "def", "b", "$b", "temp", "prev", "AlterDatabase", "AbstractStatementNode", "newOwner", "Action", "stmts", "rename0", "move0", "action", "ifExists", "restrictOrCascadeFlag", "reference", "subAction", "sql", "context", "expr", "match", "rest", "namePart", "bodyPart", "Lexer", "dbName", "instance", "regex", "name", "renameMatch", "newNodeNameUnescaped_a", "newNodeNameEscaped_a", "newNodeName", "moveMatch", "newSchemaUnescaped", "newSchemaEscaped", "ownerMatch", "newOwnerUnescaped", "newOwnerEscaped", "CreateDatabase", "AbstractStatementNode", "table", "tbl", "CreateTable", "altInstance", "getTable", "name", "ifExists", "node", "action", "instance", "AlterDatabase", "alt", "a", "altType", "context", "json", "key", "expr", "parseCallback", "match", "ifNotExists", "namePart", "DropTable", "StatementNode", "name", "basename", "context", "json", "s", "expr", "match", "ifExists", "namePart", "cascade", "namePartAlt", "tblName", "dbName", "instance", "DropDatabase", "StatementNode", "name", "context", "json", "expr", "match", "ifExists", "namePart", "cascade", "namePartAlt", "dbName", "instance", "WhenClause", "Node", "condition", "Expr", "consequence", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "CaseConstruct", "Node", "baseValue", "Expr", "whenExpr", "WhenClause", "elseClause", "c", "context", "json", "instance", "whenClause", "sql", "expr", "parseCallback", "caseMatch", "caseConstruct", "assertions", "clauses", "Lexer", "clause", "assertStmt", "TypeCast", "Node", "operand", "type", "syntax2", "Expr", "context", "json", "instance", "expr", "parseCallback", "parens", "Lexer", "Placeholder", "Node", "context", "offset", "value", "json", "expr", "notation", "match", "Str", "Node", "context", "expr", "quote", "json", "text", "asInputDialect", "quoteChars", "$", "q", "wrapped_default", "Lexer", "unwrap_default", "Json", "Str", "context", "value", "type", "quote", "isObject_default", "json", "instance", "expr", "braces", "$", "text", "b", "wrapped_default", "Lexer", "Num", "Node", "context", "value", "json", "expr", "JsonPath", "Node", "lhs", "operator", "rhs", "Json", "Identifier", "Num", "Str", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "Path", "_Path", "Node", "lhs", "operator", "rhs", "$static", "Identifier", "JsonPath", "getPrimaryKey", "schema", "col", "cons", "getKeyDef", "foreignKey", "getSchema", "tblName", "dbName", "clientApi", "basename", "dbApi", "foreignKey_rhs", "table_rhs", "schema_rhs", "path", "keyDef_rhs", "table_lhs", "schema_lhs", "primaryKey_lhs", "foreignKey_lhs", "keyDef_lhs", "primaryKey_rhs", "stmt", "baseTable", "baseKey", "joinKey", "joinAlias", "joint", "baseAlias", "prev", "key", "joinKeyAlias", "j", "q", "field", "s", "on", "context", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "AbstractGroupBy", "Node", "args", "Expr", "criterion", "c", "context", "json", "instance", "expr", "parseCallback", "groupByMatch", "criteriaExpr", "criterionExpr", "Lexer", "GroupByClause", "AbstractGroupBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "Lexer", "instance", "AbstractOrderBy", "Node", "args", "Expr", "c", "context", "json", "instance", "criterion", "expr", "parseCallback", "orderByMatch", "criteriaExpr", "criterionExpr", "Lexer", "sort", "OrderByClause", "AbstractOrderBy", "s", "context", "expr", "parseCallback", "$expr", "matches", "Lexer", "instance", "PartitionByClause", "AbstractGroupBy", "WindowSpec", "Node", "name", "windowRef", "partitionBys", "PartitionByClause", "orderBys", "OrderByClause", "context", "json", "k", "instance", "sql", "x", "expr", "parseCallback", "parseEnclosure", "enclosure", "definedRef", "clauses", "clauseTypes", "Lexer", "unwrap_default", "clauseType", "hasEnclosure", "WindowClause", "Node", "windows", "WindowSpec", "w", "context", "json", "instance", "expr", "parseCallback", "windowMatch", "windowSpec", "spec", "Lexer", "AbstractAliasableExpr", "Node", "name", "Identifier", "fns", "Parens", "expr", "alias", "claused", "context", "json", "instance", "Path", "s", "parseCallback", "escChar", "$expr", "$separator", "aliasUnescaped", "aliasEscaped", "exprNode", "$alias", "Expr", "Func", "Node", "name", "args", "Expr", "o", "context", "json", "instance", "expr", "parseCallback", "Lexer", "arg", "Aggr", "Func", "args", "orderBys", "OrderByClause", "window", "WindowSpec", "context", "json", "instance", "s", "expr", "parseCallback", "func", "over", "Lexer", "name", "allOrDistinct", "$args", "orderByClause", "Field", "AbstractAliasableExpr", "lhs", "operator", "rhs", "JsonPath", "Path", "name", "args", "Aggr", "Func", "fns", "CaseConstruct", "Table", "AbstractAliasableExpr", "Parens", "Identifier", "Select", "_Select", "StatementNode", "fields", "Field", "tables", "Table", "table", "JoinClause", "wheres", "Condition", "groupBys", "GroupByClause", "windows", "WindowClause", "orderBys", "OrderByClause", "offset", "limit", "l", "node", "Aggr", "Path", "Placeholder", "q", "inPlace", "instance", "path", "query", "s", "context", "json", "params", "sql", "expr", "parseCallback", "match", "withUac", "allOrDistinct", "body", "$body", "clausesMap", "fieldsSpec", "tokens", "clauses", "Lexer", "x", "fieldExpr", "field", "clause", "$clause", "clauseKey", "key", "tblExpr", "Assertion", "args", "Parens", "Node", "context", "expr", "fns", "Select", "Expr", "json", "instance", "parseCallback", "wrapped_default", "Lexer", "unwrap_default", "Math", "Node", "context", "operator", "operands", "Expr", "o", "json", "instance", "expr", "parseCallback", "tokens", "matches", "Lexer", "s", "StrJoin", "Node", "strings", "Expr", "str", "context", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "Literal", "Node", "context", "value", "json", "expr", "Expr", "context", "json", "Types", "instance", "router", "methodName", "args", "$instance", "prev", "Type", "f", "t", "name", "arg", "expr", "parseCallback", "Parens", "CaseConstruct", "StrJoin", "Condition", "Path", "JsonPath", "Assertion", "Math", "TypeCast", "Aggr", "Func", "Json", "Num", "Str", "Literal", "Placeholder", "Identifier", "Assertion", "Node", "context", "operator", "operands", "Expr", "args", "Condition", "o", "json", "re", "instance", "sql", "rightHandSide", "s", "expr", "parseCallback", "lhs", "rhs", "Lexer", "$operator", "$operands", "unwrap_default", "opr", "Condition", "_Condition", "Node", "context", "logic", "assertions", "Assertion", "Parens", "o", "json", "instance", "expr", "parseCallback", "tokens", "Lexer", "$expr", "JoinClause", "Table", "table", "correlations", "Condition", "correlation", "Identifier", "context", "json", "instance", "s", "expr", "parseCallback", "joinMatch", "type", "joinSpec", "$table", "$correlation", "matches", "Lexer", "Assertion", "Delete", "StatementNode", "identifiers", "Identifier", "tablesOrIdentifiers", "Table", "tables", "table", "JoinClause", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "fields", "Field", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "maybeTablesSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "asType", "Assertion", "field", "ColumnsList", "Node", "args", "Identifier", "context", "json", "expr", "parseCallback", "wrapped_default", "instance", "Lexer", "unwrap_default", "arg", "ValuesList", "Node", "args", "Expr", "context", "json", "expr", "parseCallback", "wrapped_default", "instance", "Lexer", "unwrap_default", "arg", "AssignmentList", "Node", "target_s", "value_s", "ColumnsList", "ValuesList", "Expr", "Identifier", "context", "json", "instance", "expr", "parseCallback", "assignmentExpr", "Lexer", "s", "wrapped_default", "targets", "values", "target", "value", "OnConflictClause", "AssignmentList", "wheres", "Condition", "context", "json", "instance", "sql", "expr", "parseCallback", "onConflictMatch", "conflictTarget", "action", "updateSpec", "assignmentList", "whereSpec", "Lexer", "Assertion", "Insert", "StatementNode", "table", "Table", "columns", "ColumnsList", "values", "ValuesList", "assignments", "AssignmentList", "query", "Select", "onConflictSpecs", "OnConflictClause", "fields", "Field", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "tableSpec", "payloadSpec", "onConflictSpec", "returnList", "insertType", "onConflictClause", "Lexer", "tableColumnSplit", "rowPayload", "field", "Update", "StatementNode", "tables", "Table", "table", "JoinClause", "assignments", "AssignmentList", "wheres", "Condition", "orderBys", "OrderByClause", "limit", "l", "fields", "Field", "context", "json", "instance", "sql", "s", "expr", "parseCallback", "match", "withUac", "mysqlIgnore", "body", "$body", "clausesMap", "tableSpec", "tokens", "clauses", "Lexer", "x", "tblExpr", "node", "clause", "$clause", "clauseKey", "key", "Assertion", "field", "grammar_default", "CreateDatabase", "AlterDatabase", "DropDatabase", "CreateTable", "AlterTable", "DropTable", "Insert", "Update", "Delete", "Select", "Expr", "Parser", "grammar_default", "context", "expr", "grammar", "params", "$grammar", "Node", "node", "$context", "$expr", "$params", "Savepoint", "client", "json", "direction", "$outcome", "postRollback", "name", "$name", "tables", "status", "id", "database_tag", "version_tag", "version_max", "cursor", "description", "savepoint_date", "rollback_date", "dbName", "schemaInstance", "CreateDatabase", "altInstance", "tblName", "AbstractClient", "driver", "params", "name", "tables", "dbSchema", "schemaInstamce", "CreateDatabase", "altRequest", "callback", "schemaJson", "schemaInstance", "altInstance", "dbName", "dropInstamce", "DropDatabase", "handler", "query", "Parser", "Node", "instanceOf", "o", "classes", "c", "scope", "resultSchemaRequired", "AlterDatabase", "resultSchema", "tablesList", "a", "x", "CreateTable", "AlterTable", "DropTable", "basename", "dbApi", "returnValue", "resolutionPath", "tblName", "withDefaultBasename", "basenames", "prev", "s", "OBJ_INFOSCHEMA_DB", "savepoint", "Savepoint", "savepointDesc", "savepointJson", "currentSavepoint", "insertResult", "AbstractDatabase", "client", "dbName", "params", "name", "tblName_s", "tblNames", "isSingle", "isAll", "tblSchema", "schemaInstamce", "CreateTable", "tblName", "callback", "schemaJson", "schemaInstance", "altInstance", "dropInstamce", "DropTable", "OBJ_INFOSCHEMA_DB", "result", "Savepoint", "AbstractTable", "database", "tblName", "params", "q", "result", "args", "query", "Select", "isObject_default", "Insert", "columns", "values", "returnList", "row", "col", "i", "Update", "where", "payload", "key", "value", "Delete", "schema", "primaryKey", "cons", "val", "s", "v", "AbstractCursor", "rows", "callback", "SQLCursor", "AbstractCursor", "store", "resolve", "SQLTable", "AbstractTable", "SQLCursor", "SQLDatabase", "AbstractDatabase", "SQLTable", "sql", "result", "row", "tblName_s", "params", "isSingle", "tblNames", "sql0", "sql1", "columns", "constraints", "schemas", "ANY_VALUE", "col", "GROUP_CONCAT", "orderBy", "indexes", "dataType", "val", "formatRelation", "key", "tableScope", "s", "tblName", "$columns", "$constraints", "constr", "$indexes", "columnNames", "normalizeCheckConstraint", "literals", "intersect_default", "primaryKey", "uniqueKeys", "foreignKeys", "checks", "primarys", "uniques", "foreigns", "schema", "cols", "temp", "SQLClient", "AbstractClient", "driver", "params", "SQLDatabase", "result", "row", "query", "queryInstance", "myReturningList", "bindings", "value", "resolutionPath", "name", "Identifier", "sql", "key", "Lexer", "s"]
}
